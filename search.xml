<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>git-clean</title>
      <link href="/2020/01/13/git-clean/"/>
      <url>/2020/01/13/git-clean/</url>
      <content type="html"><![CDATA[<h4 id="git删除未跟踪文件"><a href="#git删除未跟踪文件" class="headerlink" title="git删除未跟踪文件"></a>git删除未跟踪文件</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 删除 untracked files （-f：文件）</span><br><span class="line">git clean -f</span><br><span class="line"> </span><br><span class="line"># 连 untracked 的目录也一起删掉（-d：目录）</span><br><span class="line">git clean -fd</span><br><span class="line"></span><br><span class="line"># 连 .gitignore 的untrack 文件/目录也一起删掉（-x：.gitignore中的文件/目录）</span><br><span class="line">git clean -xfd</span><br><span class="line"></span><br><span class="line"># 在用上述 git clean 前，建议加上 -n 参数来先看看会删掉哪些文件，防止重要文件被误删</span><br><span class="line">git clean -nxfd</span><br><span class="line">git clean -nf</span><br><span class="line">git clean -nfd</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="工作区、版本库"><a href="#工作区、版本库" class="headerlink" title="工作区、版本库"></a>工作区、版本库</h4><ul><li>工作区（<code>Working Directory</code>）：就是电脑里的目录，一个文件夹就是一个工作区</li><li>版本库（<code>Repository</code>）：工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。<br>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</li></ul><h4 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h4><ul><li>用<code>git add</code>把文件添加进去，实际上就是把文件修改添加到暂存区，可反复多次使用</li><li>用<code>git commit</code>提交更改，实际上就是把暂存区的所有内容提交到当前分支</li></ul><p>注：Git跟踪并管理的是修改，而非文件</p>]]></content>
      
      
        <tags>
            
            <tag> git clean </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux-Shell</title>
      <link href="/2020/01/07/linux-Shell/"/>
      <url>/2020/01/07/linux-Shell/</url>
      <content type="html"><![CDATA[<h4 id="一、Shell-变量"><a href="#一、Shell-变量" class="headerlink" title="一、Shell 变量"></a>一、Shell 变量</h4><h5 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name="czh"</span><br></pre></td></tr></table></figure><ul><li><strong>定义变量</strong>时，变量名不加美元符号 </li><li><strong>二次赋值</strong>时，变量名不加美元符号 </li><li>变量名和等号之间不能有空格 </li></ul><h5 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">name="czh" </span><br><span class="line">echo $name</span><br><span class="line">echo "My name is $&#123;name&#125;"</span><br><span class="line"></span><br><span class="line">readonly name # 使用 readonly 命令可以将变量定义为只读变量</span><br><span class="line">unset name # 使用 unset 命令可以删除变量</span><br></pre></td></tr></table></figure><ul><li>使用一个定义过的变量，只要在变量名前面加美元符号即可 </li><li>变量名外面的花括号是可选的 </li></ul><a id="more"></a><h5 id="Shell-字符串"><a href="#Shell-字符串" class="headerlink" title="Shell 字符串"></a>Shell 字符串</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">string="abcd"</span><br><span class="line">echo $&#123;#string&#125; # 获取字符串长度，输出 4</span><br><span class="line">echo $&#123;string:1:3&#125; # 提取子字符串，输出 bcd</span><br></pre></td></tr></table></figure><h5 id="Shell-数组"><a href="#Shell-数组" class="headerlink" title="Shell 数组"></a>Shell 数组</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array_name=(A B "C" D)</span><br><span class="line">name0=$&#123;array_name[0]&#125; # 读取数组元素值</span><br><span class="line">length=$&#123;#array_name[*]&#125; # 获取数组长度</span><br></pre></td></tr></table></figure><ul><li><p>bash只支持一维数组，并且没有限定数组的大小</p></li><li><p>在 Shell 中，用括号来表示数组，数组元素用”<strong>空格</strong>“符号分割开 </p></li></ul><h4 id="二、Shell-基本运算符"><a href="#二、Shell-基本运算符" class="headerlink" title="二、Shell 基本运算符"></a>二、Shell 基本运算符</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">val=`expr 2 + 2`</span><br><span class="line">echo "两数之和为 : $val"</span><br></pre></td></tr></table></figure><ul><li>原生bash不支持简单的数学运算，但是可以通过其他命令来实现，例如 <code>awk</code> 和 <code>expr</code></li><li>表达式和运算符之间要有空格 </li><li>乘号(*)前边必须加反斜杠(<code>\</code>)才能实现乘法运算； </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">a=10</span><br><span class="line">b=20</span><br><span class="line"></span><br><span class="line">if [ $a == $b ]</span><br><span class="line">then</span><br><span class="line">   echo "a 等于 b"</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ $a != $b ]</span><br><span class="line">then</span><br><span class="line">   echo "a 不等于 b"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h5 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h5><p> 假定变量 a 为 10，变量 b 为 20</p><table><thead><tr><th><code>-eq</code></th><th>检测两个数是否相等，相等返回 true</th><th><code>[ $a -eq $b ]</code> 返回 false</th></tr></thead><tbody><tr><td><code>-ne</code></td><td>检测两个数是否不相等，不相等返回 true</td><td><code>[ $a -ne $b ]</code> 返回 true</td></tr><tr><td><code>-gt</code></td><td>检测左边的数是否大于右边的，如果是，则返回 true</td><td><code>[ $a -gt $b ]</code> 返回 false</td></tr><tr><td><code>-lt</code></td><td>检测左边的数是否小于右边的，如果是，则返回 true</td><td><code>[ $a -lt $b ]</code>返回 true</td></tr><tr><td><code>-ge</code></td><td>检测左边的数是否大于等于右边的，如果是，则返回 true</td><td><code>[ $a -ge $b ]</code> 返回 false</td></tr><tr><td><code>-le</code></td><td>检测左边的数是否小于等于右边的，如果是，则返回 true</td><td><code>[ $a -le $b ]</code> 返回 true</td></tr></tbody></table><h5 id="布尔运算符"><a href="#布尔运算符" class="headerlink" title="布尔运算符"></a>布尔运算符</h5><p> 假定变量 a 为 10，变量 b 为 20 </p><table><thead><tr><th><code>!</code></th><th>非运算，表达式为 true 则返回 false，否则返回 true</th><th><code>[ ! false ]</code> 返回 true</th></tr></thead><tbody><tr><td><code>-o</code></td><td>或运算，有一个表达式为 true 则返回 true</td><td><code>[ $a -lt 20 -o $b -gt 100 ]</code>返回 true</td></tr><tr><td><code>-a</code></td><td>与运算，两个表达式都为 true 才返回 true</td><td><code>[ $a -lt 20 -a $b -gt 100 ]</code>返回 false</td></tr></tbody></table><h5 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h5><p> 假定变量 a 为 10，变量 b 为 20 </p><table><thead><tr><th>&amp;&amp;</th><th>逻辑的 AND</th><th><code>[[ $a -lt 100 &amp;&amp; $b -gt 100 ]]</code> 返回 false</th></tr></thead><tbody><tr><td>\</td><td>\</td><td></td><td>逻辑的 OR</td><td>[[ $a -lt 100 \</td><td>\</td><td>$b -gt 100 ]] 返回 true</td></tr></tbody></table><h5 id="判断上一个命令是否执行成功"><a href="#判断上一个命令是否执行成功" class="headerlink" title="判断上一个命令是否执行成功"></a>判断上一个命令是否执行成功</h5><p> shell中使用符号<code>$?</code>来显示上一条命令执行的返回值，如果为0则代表执行成功，其他表示失败。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">    echo "succeed"</span><br><span class="line">else</span><br><span class="line">    echo "failed"</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 bash shell 中，$( ) 与` ` (反引号) 都是用来做命令替换用(commandsubstitution)的</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="variable">$&#123; &#125;</span>用于变量替换。一般情况下，<span class="variable">$var</span> 与<span class="variable">$&#123;var&#125;</span> 并没有啥不一样</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> $[] $(()) 都是进行数学运算的</span></span><br></pre></td></tr></table></figure><h4 id="三、Shell输入"><a href="#三、Shell输入" class="headerlink" title="三、Shell输入"></a>三、Shell输入</h4><h5 id="基本读取"><a href="#基本读取" class="headerlink" title="基本读取"></a>基本读取</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read -p "Enter your name:" name</span><br></pre></td></tr></table></figure><ul><li><code>-p</code>指定提示语句</li><li><code>-n</code>限定字符个数</li><li><code>-t</code>设置等待时间</li><li><code>-s</code>不显示</li></ul><p>注： 如果不指定<strong>变量名</strong>，那么read命令把接收到的输入放在环境变量<code>REPLY</code>中，我们可以正常使用环境变量<code>REPLY</code>。 </p><h5 id="输入多个数据"><a href="#输入多个数据" class="headerlink" title="输入多个数据"></a>输入多个数据</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read -p "Enter your name age id_card address:" name age id_card address</span><br></pre></td></tr></table></figure><ul><li>如果输入数据个数过多，远大于变量个数，则多余的所有数据都给最后一个变量 </li></ul><h5 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">count=1</span><br><span class="line"></span><br><span class="line">cat test | while read line # cat 命令的输出作为read命令的输入, read读到的值放在line中</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line"></span><br><span class="line">   echo "Line $count:$line"</span><br><span class="line">   </span><br><span class="line">   count=$[ $count + 1 ] # 注意中括号中的空格</span><br><span class="line">   </span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo "finish"</span><br><span class="line"></span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure><ul><li>每次调用read命令都会读取文件中的”一行”文本</li><li>当文件没有可读的行时，read命令将以非零状态退出</li></ul><h5 id="舆情项目自动部署脚本"><a href="#舆情项目自动部署脚本" class="headerlink" title="舆情项目自动部署脚本"></a>舆情项目自动部署脚本</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line"></span><br><span class="line">git reset --hard</span><br><span class="line"></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line">if [ $? -eq 0 ]; then # 上一个命令执行成功</span><br><span class="line"></span><br><span class="line">    echo "login git account successful!"</span><br><span class="line"></span><br><span class="line">    ENV=$1</span><br><span class="line"></span><br><span class="line">    if [ $# -eq 0 ]; then # 设置默认参数</span><br><span class="line"></span><br><span class="line">        ENV="prod"</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    echo "ENV=$&#123;ENV&#125;"</span><br><span class="line"></span><br><span class="line">    mvn clean package -P $ENV</span><br><span class="line"></span><br><span class="line">    echo "building"</span><br><span class="line"></span><br><span class="line">    cd target</span><br><span class="line"></span><br><span class="line">    sh stop.sh</span><br><span class="line"></span><br><span class="line">    sh start.sh</span><br><span class="line"></span><br><span class="line">    tail -f EpsmWebApplication.log</span><br><span class="line"></span><br><span class="line">else</span><br><span class="line"></span><br><span class="line">    echo "login git account fail!"</span><br><span class="line">    exit 1</span><br><span class="line"></span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>搜索语法</title>
      <link href="/2020/01/02/%E6%90%9C%E7%B4%A2%E8%AF%AD%E6%B3%95/"/>
      <url>/2020/01/02/%E6%90%9C%E7%B4%A2%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h5 id="百度搜索语法"><a href="#百度搜索语法" class="headerlink" title="百度搜索语法"></a>百度搜索语法</h5><p><img src="/2020/01/02/搜索语法/baidu.png" alt=""></p><a id="more"></a><h5 id="Bing搜索语法"><a href="#Bing搜索语法" class="headerlink" title="Bing搜索语法"></a>Bing搜索语法</h5><p><img src="/2020/01/02/搜索语法/bing.png" alt=""></p><h5 id="Google搜索语法"><a href="#Google搜索语法" class="headerlink" title="Google搜索语法"></a>Google搜索语法</h5><ol><li>使用<code>&quot;&quot;</code>进行完全匹配， <strong>使用方法：”关键字”</strong> </li><li>使用<code>-</code>排除关键字， <strong>使用方法：关键字 -排除关键字</strong> ， <code>-</code>后面没有空格</li><li>使用<code>*</code>进行模糊匹配 ， <strong>使用方法：关键字 * 关键字</strong> </li><li>使用<code>site</code>指定网站， <strong>使用方法：关键字 site:网址</strong> </li><li>使用<code>filetype</code>指定文件类型， <strong>使用方法：关键字 filetype:文件类型</strong> </li><li>使用<code>intitle</code>指定网页标题， <strong>使用方法：关键字 intitle:关键字</strong> </li><li>使用<code>intext</code>指定网页正文， <strong>使用方法：关键字 intext:关键字</strong> </li></ol>]]></content>
      
      
        <tags>
            
            <tag> google </tag>
            
            <tag> bing </tag>
            
            <tag> baidu </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>打开本地应用</title>
      <link href="/2020/01/01/%E6%89%93%E5%BC%80%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8/"/>
      <url>/2020/01/01/%E6%89%93%E5%BC%80%E6%9C%AC%E5%9C%B0%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h5 id="windows用浏览器打开应用程序的方法"><a href="#windows用浏览器打开应用程序的方法" class="headerlink" title="windows用浏览器打开应用程序的方法"></a>windows用浏览器打开应用程序的方法</h5><ol><li><p>找到应用程序所在的文件位置： <code>C:\Program Files (x86)\OSS\oss.exe</code></p></li><li><p>新建 <code>regeit.reg</code> 文件内容如下：(路径需要双斜线)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Windows Registry Editor Version <span class="number">5</span>.<span class="number">00</span></span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\oss]</span><br><span class="line">@=""</span><br><span class="line">"URL Protocol"="C:\\Program Files (x86)\\OSS\\oss.exe"</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\oss\DefaultIcon]</span><br><span class="line">@="C:\\Program Files (x86)\\OSS\\oss.exe"</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\oss\Shell]</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\oss\Shell\Open]</span><br><span class="line"></span><br><span class="line">[HKEY_CLASSES_ROOT\oss\Shell\Open\Command]</span><br><span class="line">@="\"C:\\Program Files (x86)\\OSS\\oss.exe\" -e %<span class="number">1</span>"</span><br></pre></td></tr></table></figure></li><li><p>保存后双击运行该文件</p></li><li><p>在浏览器打开，如下添加 a 标签即可</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"oss://yourparams"</span>&gt;</span>打开oss<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><a id="more"></a><h5 id="移动H5页面通过scheme打开本地APP"><a href="#移动H5页面通过scheme打开本地APP" class="headerlink" title="移动H5页面通过scheme打开本地APP"></a>移动H5页面通过scheme打开本地APP</h5><ol><li><p>在 Android 中声明实现 scheme，首先需要在Android工程的 Manifest文件，给想要接收跳转的Activity添加 intent-filter 节点的配置拦截器规则</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span></span></span><br><span class="line">    &lt;!--定义响应该scheme协议的 activity 的名称 --&gt;</span><br><span class="line">    android:name=".DeepLinkActivity"</span><br><span class="line">    <span class="comment">&lt;!--需要添加下面的intent-filter配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--scheme 允许在浏览器中打开--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--scheme 相关信息配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">data</span> <span class="attr">android:scheme</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:host</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:port</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:path</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:mimeType</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:pathPattern</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:pathPrefix</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:ssp</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:sspPattern</span>=<span class="string">""</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:sspPrefix</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在相应的 activity 可以获取 uri 中参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeepLinkActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"DeepLinkActivity"</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        Intent intent = getIntent();</span><br><span class="line">        Log.e(TAG, <span class="string">"scheme:"</span>  + intent.getScheme());</span><br><span class="line">        Uri uri = intent.getData();</span><br><span class="line">        Log.e(TAG, <span class="string">"scheme: "</span> + uri.getScheme()); <span class="comment">// 获取 scheme 名称</span></span><br><span class="line">        Log.e(TAG, <span class="string">"host: "</span> + uri.getHost());     <span class="comment">// 获取 scheme 的host</span></span><br><span class="line">        Log.e(TAG, <span class="string">"path: "</span> + uri.getPath());     <span class="comment">// 获取 scheme 的路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在一个 a 标签中打开</p></li></ol>]]></content>
      
      
        <tags>
            
            <tag> url </tag>
            
            <tag> scheme </tag>
            
            <tag> protocol </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-font-face</title>
      <link href="/2019/12/19/CSS-font-face/"/>
      <url>/2019/12/19/CSS-font-face/</url>
      <content type="html"><![CDATA[<h4 id="font-face语法"><a href="#font-face语法" class="headerlink" title="@font-face语法"></a>@font-face语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    font-family: &lt;webFontName&gt;;</span><br><span class="line">    src: &lt;source&gt; [&lt;format&gt;][,&lt;source&gt; [&lt;format&gt;]]*;</span><br><span class="line">    [font-weight: &lt;weight&gt;];</span><br><span class="line">    [font-style: &lt;style&gt;];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注： <code>format</code>字体格式，用于帮助浏览器识别，<code>truetype opentype truetype-aat embedded-opentype svg</code> </p><a id="more"></a><h4 id="format格式"><a href="#format格式" class="headerlink" title="format格式"></a><code>format</code>格式</h4><ol><li><code>truetype - ttf</code><ul><li>Windows 和 Mac 最常见字体</li><li>RAW 格式，不为任何网站优化</li><li><code>IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile Safari4.2+</code></li></ul></li><li><code>opentype - otf</code><ul><li>原始字体格式，内置在 truetype 基础之上</li><li>提供更多功能</li><li><code>Firefox3.5+、Chrome4.0+、Safari3.1+、Opera10.0+、iOS Mobile Safari4.2+</code></li></ul></li><li><code>web-open-font-format - woff</code><ul><li>Web 字体最佳格式</li><li>是一个开放的 truetype、opentype 压缩版本</li><li>支持元数据包的分离</li><li><code>IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+</code></li></ul></li><li><code>embedded-opentype - eot</code> <ul><li>IE 专用字体</li><li>可以从 truetype 创建此格式</li><li>IE4+</li></ul></li><li><code>svg - svg</code> <ul><li>基于 svg 渲染</li><li><code>Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+</code></li></ul></li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'webFontName'</span>;</span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'webFontName.eot'</span>); <span class="comment">/* IE9 Compat Modes */</span></span><br><span class="line">    <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">'webFontName.eot?#iefix'</span>) <span class="built_in">format</span>(<span class="string">'embedded-opentype'</span>), <span class="comment">/* IE6-IE8 */</span></span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'webFontName.woff2'</span>) <span class="built_in">format</span>(<span class="string">'woff2'</span>),</span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'webFontName.woff'</span>) <span class="built_in">format</span>(<span class="string">'woff'</span>), <span class="comment">/* Modern Browsers */</span></span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'webFontName.ttf'</span>) <span class="built_in">format</span>(<span class="string">'truetype'</span>), <span class="comment">/* Safari, Android, iOS */</span></span><br><span class="line">    <span class="built_in">url</span>(<span class="string">'webFontName.svg#webFontName'</span>) <span class="built_in">format</span>(<span class="string">'svg'</span>); <span class="comment">/* Legacy iOS */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> font-face </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IE中的CSS兼容性问题</title>
      <link href="/2019/10/16/IE%E4%B8%AD%E7%9A%84CSS%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
      <url>/2019/10/16/IE%E4%B8%AD%E7%9A%84CSS%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、IE9+不支持CSS变量、@supports</span><br><span class="line"></span><br><span class="line">2、IE9+不支持object-fit</span><br><span class="line"></span><br><span class="line">3、IE9-不支持flex布局</span><br><span class="line"></span><br><span class="line">4、IE10+独有的属性-ms-high-contrast</span><br><span class="line">@media (-ms-high-contrast: active),  (-ms-high-contrast: none)  &#123;</span><br><span class="line">    .class &#123;</span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> IE </tag>
            
            <tag> 兼容性 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>银行家舍入-四舍六入五取偶</title>
      <link href="/2019/10/10/%E9%93%B6%E8%A1%8C%E5%AE%B6%E8%88%8D%E5%85%A5-%E5%9B%9B%E8%88%8D%E5%85%AD%E5%85%A5%E4%BA%94%E5%8F%96%E5%81%B6/"/>
      <url>/2019/10/10/%E9%93%B6%E8%A1%8C%E5%AE%B6%E8%88%8D%E5%85%A5-%E5%9B%9B%E8%88%8D%E5%85%AD%E5%85%A5%E4%BA%94%E5%8F%96%E5%81%B6/</url>
      <content type="html"><![CDATA[<h4 id="银行家舍入"><a href="#银行家舍入" class="headerlink" title="银行家舍入"></a>银行家舍入</h4><p>所谓<strong>银行家舍入法</strong>，其实质是一种<strong>四舍六入五取偶</strong>（又称四舍六入五留双）法。</p><p>具体规则如下：<strong>四舍六入五考虑，五后非零就进一，五后为零看奇偶，五前为偶应舍去，五前为奇要进一</strong>。</p><a id="more"></a><h4 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h4><p><strong>四舍五入，小于5的数字被舍去，大于等于5的数字进位加一</strong>。由于所有位上的数字都是自然计算出来的，按照概率计算可知，被舍入的数字均匀分布在0到9之间，下面以10笔存款利息计算作为模型，以<strong>银行家的身份</strong>来思考这个算法：</p><ol><li>四舍：舍弃的数值：<code>0.000、0.001、0.002、0.003、0.004</code>，因为是舍弃，对银行家来说，就是不用付款给储户的，那每舍弃一个数字就会赚取相应的金额：<code>0.000、0.001、0.002、0.003、0.004</code>。</li><li>五入：进位的数值：<code>0.005、0.006、0.007、0.008、0.009</code>，因为是进位，对银行家来说，每进一位就会多付款给储户，也就是亏损了，那亏损部分就是其对应的10进制补数：<code>0.005、0.004、0.003、0.002、0.001</code></li></ol><p>因为舍弃和进位的数字是在0到9之间均匀分布的，所以对于银行家来说，每10笔存款的利息因采用四舍五入而获得的盈利是：<br><code>0.000 + 0.001 + 0.002 + 0.003 + 0.004 - 0.005 - 0.004 - 0.003 - 0.002 - 0.001 = -0.005</code> 也就是说，每10笔的利息计算中就亏损0.005元，即每笔利息计算损失0.0005元。</p><h4 id="精确四舍五入"><a href="#精确四舍五入" class="headerlink" title="精确四舍五入"></a>精确四舍五入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fomatFloat</span>(<span class="params">x, digits</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.round(x * <span class="built_in">Math</span>.pow(<span class="number">10</span>, digits)) / <span class="built_in">Math</span>.pow(<span class="number">10</span>, digits);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 银行家舍入 </tag>
            
            <tag> 四舍六入五取偶 </tag>
            
            <tag> 四舍五入 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux-rename</title>
      <link href="/2019/09/28/linux-rename/"/>
      <url>/2019/09/28/linux-rename/</url>
      <content type="html"><![CDATA[<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename $1 $2 $3</span><br></pre></td></tr></table></figure><ul><li><code>$1</code>: 要被取代的关键字  </li><li><code>$2</code>: 新的关键字 </li><li><code>$3</code>: 当名字符合这个规则的才取代  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 把IMG001.jpg,IMG002.jpg… 换成img001.jpg,img002.jpg…   </span><br><span class="line">rename IMG img IMG*</span><br><span class="line"></span><br><span class="line"># 把档案foo1, ..., foo9, foo10, ..., foo278</span><br><span class="line"># 改成foo001, ..., foo009, foo010, ..., foo278</span><br><span class="line">rename foo foo0 foo?</span><br><span class="line">rename foo foo0 foo??</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 将当前目录下.sh后缀的文件，变成.php  </span><br><span class="line">rename &apos;s/\.sh/\.php/&apos; *</span><br><span class="line"></span><br><span class="line"># 给www目录下的.php加上bak后缀  </span><br><span class="line">rename &apos;s/$/\.bak/&apos; /home/www/*.php</span><br><span class="line"></span><br><span class="line"># 给当前目录下的.bin后缀文件加上bak_前缀  </span><br><span class="line">rename &apos;s/^/bak_/&apos; *.bin</span><br><span class="line"></span><br><span class="line"># 批量删除当前目录下所有文件的.bin 后缀  </span><br><span class="line">rename &apos;s/\.bin$//&apos; *</span><br><span class="line"></span><br><span class="line"># 修改当前目录所有文件名为小写  </span><br><span class="line">rename &apos;s/A-Z/a-z/&apos; *</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> rename </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>第三方Cookie</title>
      <link href="/2019/09/26/%E7%AC%AC%E4%B8%89%E6%96%B9cookie/"/>
      <url>/2019/09/26/%E7%AC%AC%E4%B8%89%E6%96%B9cookie/</url>
      <content type="html"><![CDATA[<h4 id="第三方-Cookie"><a href="#第三方-Cookie" class="headerlink" title="第三方 Cookie"></a>第三方 Cookie</h4><p>在访问<strong>网站A</strong>时，网站A算作<strong>第一方</strong>，如果网站A中引用了另一个<strong>（域名不同的）网站X</strong>的资源，这时这个网站X就被认为是<strong>第三方</strong>。<strong>图像、 JavaScript 和 iframe</strong> 通常会导致第三方Cookie的生成。</p><h5 id="浏览器中第三方Cookie"><a href="#浏览器中第三方Cookie" class="headerlink" title="浏览器中第三方Cookie"></a>浏览器中第三方Cookie</h5><ul><li><code>IE</code>：默认不接受第三方 Cookie，不过采用 <strong>P3P</strong> 协议即可</li><li><code>Chrome、Firefox</code>：默认接受，但用户可以选择不接受</li><li><code>Safari</code>：默认会阻止第三方cookie， <code>Safari</code>认为<strong>相同父域名</strong>的站点不属于第三方</li></ul><a id="more"></a><h5 id="百度统计对cookie的使用"><a href="#百度统计对cookie的使用" class="headerlink" title="百度统计对cookie的使用"></a>百度统计对cookie的使用</h5><p>百度统计是用的<code>第一方cookie+第三方cookie</code>的方式收集信息的。</p><table><thead><tr><th>名称</th><th>用途</th><th>有效期</th><th>类型</th></tr></thead><tbody><tr><td>HMACCOUNT</td><td>Visitor Identifier，全局唯一</td><td>永久</td><td>第三方Cookie，hm.baidu.com域</td></tr><tr><td>Hm_lvt_siteid</td><td>记录访客当前访问序列的开始时间，如果没有设置这个cookie，则访客为新访客。当本次访问是一个新的访问开始时，更新该cookie为当前时间。</td><td>1年</td><td>第一方Cookie</td></tr><tr><td>Hm_lpvt_siteid</td><td>当前浏览页面时的时间，每次浏览时设置该cookie为当前时间。</td><td>1年</td><td>第一方Cookie</td></tr></tbody></table><p>在百度统计中，以下三条任意一个条件成立，则认为是一个新访次。</p><ul><li>流量来源（referer）为非本站</li><li>Hm_lpvt_siteid为空</li><li>服务器端进行计算，一个visit超过30分钟没有流量，结束当前访次</li></ul><h4 id="P3P"><a href="#P3P" class="headerlink" title="P3P"></a>P3P</h4><p>直接打开<strong>页面C</strong>会在本地保留一个<code>Cookie</code>文件，而当采用<strong>A网站</strong><code>iframe</code>框架形式嵌套后就无法成功生成<code>Cookie</code>文件，该问题仅在<strong>IE浏览器</strong>环境下出现，<code>firefox、chrome、Safari</code>浏览器下没有问题。</p><p>造成该问题的原因：一个所谓的<strong>隐私首选项</strong>（简称为<code>P3P</code>）的W3C标准。只有在每一页上设置一个<code>Cookie</code>发送头，才能允许<code>Internet Explorer</code>接受第三方Cookie。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">P3p</span>: CP="CURa ADMa DEVa PSAo PSDo OUR BUS UNI PUR INT DEM STA PRE COM NAV OTC NOI DSP COR"</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP：header(‘P3P:CP=”IDC DSP COR ADM DEVi TAIi PSA PSD IVAi IVDi CONi HIS OUR IND CNT”‘);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
            <tag> 跨域 </tag>
            
            <tag> P3P </tag>
            
            <tag> 第三方 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-正则-非贪婪模式</title>
      <link href="/2019/09/07/JS-%E6%AD%A3%E5%88%99-%E9%9D%9E%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/07/JS-%E6%AD%A3%E5%88%99-%E9%9D%9E%E8%B4%AA%E5%A9%AA%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="贪婪模式"><a href="#贪婪模式" class="headerlink" title="贪婪模式"></a>贪婪模式</h4><p><strong>默认情况下，所有的限定词都是贪婪模式</strong>，表示尽可能多的去捕获字符，能匹配多少就匹配多少。从正则语法的角度来讲，被匹配优先量词修饰的子表达式使用的就是贪婪模式，如<code>/a+/</code>。<br>标识符：<code>+，?，*，{n}，{n,}，{n,m}</code></p><h4 id="非贪婪模式"><a href="#非贪婪模式" class="headerlink" title="非贪婪模式"></a>非贪婪模式</h4><p>在<strong>限定词</strong>后增加<code>?</code>，则是<strong>非贪婪模式</strong>，表示尽可能少的去捕获字符。<br>从正则语法的角度来讲，被忽略优先量词修饰的子表达式使用的就是非贪婪模式，如<code>/a+?/</code>。标识符：<code>+?，??，*?，{n}?，{n,}?，{n,m}?</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">"aaab"</span>,</span><br><span class="line">reg1 = <span class="regexp">/a+/</span>, <span class="comment">//贪婪模式</span></span><br><span class="line">reg2 = <span class="regexp">/a+?/</span>;<span class="comment">//非贪婪模式</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg1)); <span class="comment">// ["aaa"]</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg2)); <span class="comment">// ["a"]</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h4><p>正则表达式中有个优先规则：<strong>最先开始的匹配拥有最高的优先权</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*表达式1*/</span> </span><br><span class="line"><span class="string">'aaaaaaab'</span>.match(<span class="regexp">/a*b/</span>); </span><br><span class="line"><span class="comment">// ["aaaaaaab", index: 0, input: "aaaaaaab", groups: undefined];</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment">/*表达式2*/</span> </span><br><span class="line"><span class="string">'aaaaaaab'</span>.match(<span class="regexp">/a*?b/</span>); </span><br><span class="line"><span class="comment">// ["aaaaaaab", index: 0, input: "aaaaaaab", groups: undefined]l;</span></span><br></pre></td></tr></table></figure><p>💡该贪婪匹配表达式在引擎中的回溯表现如下：</p><ul><li>第一个a取得控制权，匹配正则中的a，匹配成功，控制权交给<code>a*</code>；</li><li><code>a*</code>取得控制权后，<strong>由于这是贪婪模式下的标识符</strong>，因此在<strong>可匹配</strong>可不匹配的情况下会<strong>优先匹配</strong>，因此尝试匹配1处的字符a；</li><li>依次成功匹配<code>a、a、a、a、a、a</code>，接下来依旧保持贪婪特性匹配字符串中b，匹配失败，向前查找可供回溯的状态，将控制权交给<code>a*b</code>；</li><li><code>a*b</code>取得控制权后，开始匹配末尾处的b，匹配成功；</li><li>至此，整个正则表达式匹配完毕，匹配结果为<code>aaaaaaab</code>，匹配过程中回溯了1次。</li></ul><p>💡该非贪婪匹配表达式在引擎中的回溯表现如下：</p><ul><li>第一个a取得控制权，匹配正则中的a，匹配成功，控制权交给<code>a*?</code>；</li><li><code>a*?</code>取得控制权后，由<strong>于这是非贪婪模式下的标识符</strong>，因此在<strong>可匹配</strong>可不匹配的情况下会<strong>优先不匹配</strong>，因此尝试不匹配任何内容，将控制权交给b；</li><li>b取得控制权后，开始匹配1处的a，匹配失败，向前查找可供回溯的状态，控制权交给<code>a*?</code>，a*?吃进一个字符，index到了2处，再把控制权交给b；</li><li>b取得控制权后，开始匹配2处的b，匹配失败，重复上述的回溯过程，直到<code>a*?</code>匹配了6处的a字符，再将控制权交给b；</li><li>b取得控制权后，开始匹配7处的b，匹配成功；</li><li>至此，整个正则表达式匹配完毕，匹配结果为<code>aaaaaaab</code>，匹配过程中回溯了6次。</li></ul><h4 id="多分支表达式匹配"><a href="#多分支表达式匹配" class="headerlink" title="多分支表达式匹配"></a>多分支表达式匹配</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'It will be confirmed in a subsequent console message'</span>.match(<span class="regexp">/message|in|console/</span>);</span><br><span class="line"> <span class="comment">// ["in", index: 21, input: "It will be confirmed in a subsequent console message", groups: undefined] ;</span></span><br></pre></td></tr></table></figure><p>💡在本例中，匹配过程如下：</p><ul><li>正则多选分支<code>/message|in|console/</code>从左边开始匹配，第一个message取得控制权，匹配字符串中的I，匹配失败，返回检查点进行回溯，控制权交给in；</li><li>in取得控制权后，匹配字符串中的I，匹配成功，在1处匹配失败，进行回溯，控制权交给 console；</li><li>同上，console匹配失败，则<strong>在待匹配字符串中后移一位</strong>，即1处字符n重新进行第一步匹配；</li><li>同上，所有分支均匹配失败；</li><li>由待匹配字符串和上述匹配规则可知，in将在字符串n处最早匹配成功，至此，整个正则表达式匹配完毕，匹配结果为<code>in</code>。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
            <tag> javascript </tag>
            
            <tag> 贪婪模式 </tag>
            
            <tag> 非贪婪模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript-eval-function</title>
      <link href="/2019/09/02/javascript-eval-function/"/>
      <url>/2019/09/02/javascript-eval-function/</url>
      <content type="html"><![CDATA[<h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a><code>Function</code></h4><p><strong>Function 构造函数</strong>创建一个新的<code>Function</code>对象。 在 JavaScript 中, 每个函数实际上都是一个<code>Function</code>对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let fn = new Function ([arg1[, arg2[, ...argN]],] functionBody);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sum = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'return a + b'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(sum(<span class="number">2</span>, <span class="number">6</span>)); <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>注：</p><ul><li><p><strong>以调用函数的方式</strong>调用<strong>Function 构造函数</strong>，跟以构造函数来调用是一样的</p></li><li><p>使用<strong>Function 构造函数</strong>生成的<code>Function</code>对象是<strong>在函数创建时解析</strong>的。这比使用<strong>函数声明</strong>或者<strong>函数表达式</strong>并在代码中调用更为低效，因为使用后者创建的函数是跟其他代码一起解析的。</p></li><li><p>使用<strong>Function 构造函数</strong>生成的函数，并不会在<strong>创建它们的上下文</strong>中创建闭包，它们一般<strong>在全局作用域中被创建</strong>。当运行这些函数的时候，它们只能访问自己的本地变量和全局变量，不能访问<strong>Function 构造函数</strong>被调用生成的上下文的作用域。这和使用带有函数表达式代码的 <code>eval</code> 不同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、f()函数返回的function e()是闭包.</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log (f()()); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2、f()函数返回的function e()是全局作用域函数</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"return n;"</span>);</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log (f()()); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="eval"><a href="#eval" class="headerlink" title="eval"></a><code>eval</code></h4><p><code>eval()</code> 函数会将传入的字符串当做 <code>JavaScript</code> 代码进行执行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var value = eval(string);</span><br></pre></td></tr></table></figure><p>返回值：</p><ul><li><p>返回<strong>字符串代码的返回值</strong>，如果返回值为空，则返回 <code>undefined</code></p></li><li><p>如果 <code>eval()</code> 的参数不是字符串， <code>eval()</code> 会将参数原封不动地返回</p></li></ul><p>注意：</p><ul><li><p>如果你间接的使用 <code>eval()</code>，而不是直接的调用 <code>eval</code>。 从 <code>ECMAScript 5</code>起，它工作在全局作用域下，而不是局部作用域中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">2</span>, y = <span class="number">4</span>;</span><br><span class="line">    <span class="comment">// 直接调用，使用本地作用域</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">eval</span>(<span class="string">'x + y'</span>));  <span class="comment">// 6</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等价于在全局作用域调用</span></span><br><span class="line">    <span class="keyword">var</span> geval = <span class="built_in">eval</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 间接调用，使用全局作用域</span></span><br><span class="line">    <span class="built_in">console</span>.log(geval(<span class="string">'x + y'</span>)); <span class="comment">// throws ReferenceError 因为`x`未定义</span></span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 另一个间接调用的例子</span></span><br><span class="line">    (<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">'x + y'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>eval</code> 中函数作为字符串被定义需要<code>（</code>和<code>）</code>作为前缀和后缀</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fctStr1 = <span class="string">'function a() &#123;&#125;'</span></span><br><span class="line"><span class="keyword">let</span> fctStr2 = <span class="string">'(function a() &#123;&#125;)'</span></span><br><span class="line"><span class="keyword">let</span> fct1 = <span class="built_in">eval</span>(fctStr1)  <span class="comment">// 返回undefined</span></span><br><span class="line"><span class="keyword">let</span> fct2 = <span class="built_in">eval</span>(fctStr2)  <span class="comment">// 返回一个函数</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> Function </tag>
            
            <tag> eval </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>严格模式</title>
      <link href="/2019/09/02/javascript-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/09/02/javascript-%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><p>严格模式对<code>Javascript</code>的语法和行为，做了一些改变：</p><ul><li><p><strong>全局变量显式声明</strong>：在正常模式中，如果一个变量没有声明就赋值，默认是全局变量。严格模式禁止这种用法，<strong>全局变量必须显式声明</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line">v = <span class="number">1</span>; <span class="comment">// 报错，v未声明</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;&#125;; <span class="comment">// 报错，i未声明</span></span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><ul><li><p><strong>显式报错</strong>：严格模式会使引起<strong>静默失败</strong>（不报错也没有任何效果）的<strong>赋值</strong>操作抛出异常。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给不可写属性赋值</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj1, <span class="string">"x"</span>, &#123; <span class="attr">value</span>: <span class="number">42</span>, <span class="attr">writable</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">obj1.x = <span class="number">9</span>; <span class="comment">// 抛出TypeError错误</span></span><br></pre></td></tr></table></figure></li><li><p><strong>禁止删除变量</strong>：严格模式<strong>禁止删除声明变量</strong>。</p></li></ul><ul><li><strong>禁止使用with语句</strong></li></ul><ul><li><p><strong>创设<code>eval</code>作用域</strong>：正常模式下，<code>eval</code>语句的作用域，取决于它处于<strong>全局作用域</strong>，还是处于<strong>函数作用域</strong>。严格模式下，<strong><code>eval</code>语句本身就是一个作用域</strong>，不再能够生成全局变量了，它所生成的变量只能用于<code>eval</code>内部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> x = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.info(<span class="built_in">eval</span>(<span class="string">"var x = 5; x"</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.info(x); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure></li><li><p><strong>arguments对象的限制</strong>：不允许对<code>arguments</code>赋值，不再追踪参数的变化，禁止使用<code>arguments.callee</code>。</p></li></ul><ul><li><p><strong>重名错误</strong>：严格模式下，对象不能有<strong>重名的属性</strong>，函数不能有<strong>重名的参数</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">p</span>: <span class="number">1</span>, <span class="attr">p</span>: <span class="number">2</span> &#125;; <span class="comment">// !!! 语法错误</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, a, c</span>) </span>&#123; <span class="comment">// !!! 语法错误</span></span><br><span class="line"><span class="meta">  "use strict"</span>;</span><br><span class="line">  <span class="keyword">return</span> a + a + c; <span class="comment">// 代码运行到这里会出错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>禁止八进制表示法</strong>：正常模式下，整数的第一位如果是0，表示这是八进制数。严格模式禁止这种表示法，整数第一位为0，将报错。</p></li></ul><ul><li><strong>保留字</strong>：严格模式新增了一些保留字：<code>implements, interface, let, package, private, protected, public, static, yield</code>，使用这些词作为变量名将会报错。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 严格模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>动态加载</title>
      <link href="/2019/09/02/javascript%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDimport/"/>
      <url>/2019/09/02/javascript%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BDimport/</url>
      <content type="html"><![CDATA[<h4 id="动态加载"><a href="#动态加载" class="headerlink" title="动态加载"></a>动态加载</h4><h5 id="import"><a href="#import" class="headerlink" title="import()"></a><code>import()</code></h5><p>关键字<code>import</code>可以像调用函数一样来动态的导入模块。以这种方式调用，将返回一个 <code>promise</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">'/modules/my-module.js'</span>).then(<span class="function">(<span class="params"><span class="built_in">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Do something with the module.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这种使用方式也支持 <code>await</code> 关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="built_in">module</span> = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">'/modules/my-module.js'</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="eval"><a href="#eval" class="headerlink" title="eval()"></a><code>eval()</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajax(<span class="string">'https://matrix.datastory.com.cn/frontApp/get?id=535&amp;name=index.js'</span>).done(<span class="function"><span class="params">jsJson</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// js字符串代码中，将module作为返回值</span></span><br><span class="line"><span class="built_in">window</span>.module = <span class="built_in">window</span>.eval(jsJson);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jsJson</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">e</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r[n]) &#123;</span><br><span class="line">            <span class="keyword">return</span> r[n].exports</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> i = r[n] = &#123;</span><br><span class="line">            i: n,</span><br><span class="line">            l: <span class="literal">false</span>,</span><br><span class="line">            exports: &#123;&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        t[n].call(i.exports, i, i.exports, e);</span><br><span class="line">        i.l = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> i.exports</span><br><span class="line">    &#125;</span><br><span class="line">    e.m = t;</span><br><span class="line">    e.c = r;</span><br><span class="line">    e.d = <span class="function"><span class="keyword">function</span>(<span class="params">t, r, n</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!e.o(t, r)) &#123;</span><br><span class="line">            <span class="built_in">Object</span>.defineProperty(t, r, &#123;</span><br><span class="line">                configurable: <span class="literal">false</span>,</span><br><span class="line">                enumerable: <span class="literal">true</span>,</span><br><span class="line">                get: n</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    e.n = <span class="function"><span class="keyword">function</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> r = t &amp;&amp; t.__esModule ?</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> t[<span class="string">"default"</span>]</span><br><span class="line">        &#125;: <span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> t</span><br><span class="line">        &#125;;</span><br><span class="line">        e.d(r, <span class="string">"a"</span>, r);</span><br><span class="line">        <span class="keyword">return</span> r</span><br><span class="line">    &#125;;</span><br><span class="line">    e.o = <span class="function"><span class="keyword">function</span>(<span class="params">t, r</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.hasOwnProperty.call(t, r)</span><br><span class="line">    &#125;;</span><br><span class="line">    e.p = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">return</span> e(e.s = <span class="number">10</span>)</span><br><span class="line">&#125;)([</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 10</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">t, r, e</span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params">t</span>) </span>&#123;</span><br><span class="line">            e(<span class="number">11</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> i = e(<span class="number">21</span>);</span><br><span class="line">        <span class="keyword">var</span> o = e(<span class="number">22</span>);</span><br><span class="line">        <span class="keyword">var</span> a = e(<span class="number">52</span>);</span><br><span class="line">        <span class="keyword">var</span> f = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> u = n;</span><br><span class="line">        <span class="keyword">var</span> s = <span class="string">"data-v-60bfadd4"</span>;</span><br><span class="line">        <span class="keyword">var</span> c = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> l = i(o, a, f, u, s, c);</span><br><span class="line">        t.exports = l.exports</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> eval </tag>
            
            <tag> import </tag>
            
            <tag> 动态加载 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EJS-模板引擎</title>
      <link href="/2019/08/28/EJS-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
      <url>/2019/08/28/EJS-%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<h4 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h4><ul><li><p><code>&lt;% Javascript代码 %&gt;</code> ：<code>JavaScript</code>代码</p></li><li><p><code>&lt;%= 变量名 %&gt;</code>：将<code>HTML</code>转义的值输出到模板中</p></li><li><code>&lt;%- 变量名 %&gt;</code> ： 将未转义的值输出到模板中</li><li><code>&lt;%_ 变量名  _%&gt;</code> ：去除所有空格</li><li><code>&lt;%# 注释内容 %&gt;</code> ： 注释</li><li><code>&lt;% include 文件的路径 %&gt;</code> ： 引入外部的文件</li></ul><a id="more"></a><p><br></p><h4 id="渲染方法"><a href="#渲染方法" class="headerlink" title="渲染方法"></a>渲染方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> template = ejs.compile(str, options);</span><br><span class="line">template(data);</span><br><span class="line"><span class="comment">// =&gt; Rendered HTML string</span></span><br><span class="line"></span><br><span class="line">ejs.render(str, data, options);</span><br><span class="line"><span class="comment">// =&gt; Rendered HTML string</span></span><br><span class="line"></span><br><span class="line">ejs.renderFile(filename, data, options, <span class="function"><span class="keyword">function</span>(<span class="params">err, str</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// str =&gt; Rendered HTML string</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><h5 id="Options配置项"><a href="#Options配置项" class="headerlink" title="Options配置项"></a><a href="https://ejs.co/#install" target="_blank" rel="noopener">Options配置项</a></h5><ul><li><code>cache</code> Compiled functions are cached, requires <code>filename</code></li><li><code>filename</code> Used by <code>cache</code> to key caches, and for includes</li><li><code>context</code> Function execution context</li><li><code>compileDebug</code> When <code>false</code> no debug instrumentation is compiled</li><li><code>client</code> Returns standalone compiled function</li><li><code>delimiter</code> Character to use with angle brackets for open/close</li><li><code>debug</code> Output generated function body</li><li><code>_with</code> Whether or not to use <code>with() {}</code> constructs. If <code>false</code> then the locals will be stored in the <code>locals</code> object.</li><li><code>localsName</code> Name to use for the object storing local variables when not using <code>with</code> Defaults to <code>locals</code></li><li><code>rmWhitespace</code> Remove all safe-to-remove whitespace, including leading and trailing whitespace. It also enables a safer version of <code>-%&gt;</code> line slurping for all scriptlet tags (it does not strip new lines of tags in the middle of a line).</li><li><code>escape</code> The escaping function used with <code>&lt;%=</code> construct. It is used in rendering and is <code>.toString()</code>ed in the generation of client functions. (By default escapes XML).</li><li><code>outputFunctionName</code> Set to a string (e.g., <code>&#39;echo&#39;</code> or <code>&#39;print&#39;</code>) for a function to print output inside scriptlet tags.</li><li><code>async</code> When <code>true</code>, EJS will use an async function for rendering. (Depends on async/await support in the JS runtime.</li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> ejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm命令</title>
      <link href="/2019/08/22/npm%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/08/22/npm%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h4 id="npm命令选项"><a href="#npm命令选项" class="headerlink" title="npm命令选项"></a>npm命令选项</h4><ul><li><p><code>search</code>：在存储库中查找模块包，如：<code>npm search express</code></p></li><li><p><code>install</code>：使用在存储库或本地位置上的一个<code>package.json</code>文件来安装包</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install </span><br><span class="line">npm install express </span><br><span class="line">npm install express@<span class="number">0</span>.<span class="number">1</span>.<span class="number">1</span> </span><br><span class="line">npm install express@latest </span><br><span class="line">npm install ../tModule.tgz</span><br></pre></td></tr></table></figure></li><li><p><code>install -g</code>：在全局可访问的位置安装一个包，如：<code>npm install express -g</code></p></li><li><p><code>uninstall</code>：卸载一个模块，如：<code>npm uninstall express</code></p></li><li><p><code>remove</code>：删除一个模块    </p></li><li><p><code>pack</code>：把在一个<code>package.json</code>文件中定义的模块封装成<code>.tgz</code>文件，如：<code>npm pack</code></p></li><li><p><code>view</code>：显示模块的详细信息，如：<code>npm view express</code></p></li><li><p><code>publish</code>：把在一个<code>package.json</code>文件中定义的模块发布到注册表，如：<code>npm publish</code></p></li><li><p><code>unpublish</code>：取消发布您已发布到注册表的一个模块（在某些情况下，还需使用 <code>--force</code> 选项），如：<code>npm unpublish myModule</code></p></li><li><p>owner：允许您在存储库中添加、删除包和列出包的所有者</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm add &lt;username&gt; myModule </span><br><span class="line">npm rm &lt;username&gt; myModule </span><br><span class="line">npm ls myModule</span><br></pre></td></tr></table></figure></li><li><p><code>whoami</code>:（根据指定注册表模块）打印用户名</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm whoami</span><br><span class="line">npm whoami --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></li><li><p><code>adduser</code>：将用户信息添加到当前的开发环境</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm adduser</span><br><span class="line"></span><br><span class="line"># 默认是登录到 npm 上，如要登录到其他源上，需要使用 registry 选项</span><br><span class="line"># 要想登录到某个 scope 中需要使用 scope 选项</span><br><span class="line">npm adduser --registry=http://myregistry.example.com --scope=@myco</span><br></pre></td></tr></table></figure></li><li><p><code>login</code>：等同于adduser，如：<code>npm login</code></p></li><li><p><code>logout</code>：将用户信息从当前的开发环境中清除，如：<code>npm logout</code></p></li><li><p><code>init</code>：初始化Node包的信息，会创建<code>package.json</code>文件，如：<code>npm init</code></p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux-wc命令</title>
      <link href="/2019/08/14/linux-wc%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/08/14/linux-wc%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h4 id="wc命令"><a href="#wc命令" class="headerlink" title="wc命令"></a>wc命令</h4><p>利用<code>wc指令</code>我们可以计算文件的<code>Byte数、字数、或是列数</code>。若不指定文件名称、或是所给予的文件名为<code>-</code>，则<code>wc指令</code>会<strong>从标准输入设备读取数据</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wc [-clw][--help][--version][文件...]</span><br></pre></td></tr></table></figure><ul><li><code>-c</code>或<code>--bytes</code>或<code>--chars</code>只显示<code>Bytes数</code></li><li><code>-l</code>或-<code>-lines</code> 只显示行数</li><li><code>-w</code>或<code>--words</code> 只显示字数</li><li><code>--help</code> 在线帮助</li><li><code>--version</code> 显示版本信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> testfile文件的统计信息</span></span><br><span class="line">wc testfile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 3 92 598 testfile</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> testfile文件的行数为3、单词数92、字节数598</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> wc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vim</title>
      <link href="/2019/08/10/vim/"/>
      <url>/2019/08/10/vim/</url>
      <content type="html"><![CDATA[<h4 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi/vim 的使用"></a>vi/vim 的使用</h4><p><code>vi/vim</code> 共有三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。</p><a id="more"></a><p><br></p><h5 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h5><p>用户刚刚启动 <code>vi/vim</code>，便进入了命令模式。<strong>此状态下敲击键盘动作会被Vim识别为命令</strong>，而非输入字符。</p><p>比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到<strong>输入模式</strong>，以输入字符</li><li><strong>:</strong> 切换到<strong>底线命令模式</strong>，以在最底一行输入命令</li><li><strong>x</strong> 删除当前光标所在处的字符</li></ul><p><br></p><h5 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h5><p>在命令模式下按下i就进入了输入模式。在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>/<strong>END</strong>，移动光标到行首/行尾</li><li><strong>Page Up</strong>/<strong>Page Down</strong>，上/下翻页</li><li><strong>Insert</strong>，切换光标为输入/替换模式，光标将变成竖线/下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><p><br></p><h5 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h5><p>在命令模式下按下<code>:</code>（英文冒号）就进入了底线命令模式。底线命令模式可以输入单个或多个字符的命令，基本的命令有：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>注：按ESC键可随时退出底线命令模式</p><p><br></p><h5 id="第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部份：一般模式可用的光标移动、复制粘贴、搜索替换等</h5><p><img src="/2019/08/10/vim/1_1.png" alt=""></p><p><img src="/2019/08/10/vim/1_1_2.png" alt=""></p><p><img src="/2019/08/10/vim/1_2.png" alt=""></p><p><img src="/2019/08/10/vim/1_3.png" alt=""></p><p><img src="/2019/08/10/vim/1_3_2.png" alt=""></p><p><br></p><h5 id="第二部份：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部份：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部份：一般模式切换到编辑模式的可用的按钮说明"></a>第二部份：一般模式切换到编辑模式的可用的按钮说明</h5><p><img src="/2019/08/10/vim/2.png" alt=""></p><p><br></p><h5 id="第三部份：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部份：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部份：一般模式切换到指令行模式的可用的按钮说明"></a>第三部份：一般模式切换到指令行模式的可用的按钮说明</h5><p><img src="/2019/08/10/vim/3.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> vim </tag>
            
            <tag> vi </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>echarts-markPoint</title>
      <link href="/2019/08/09/echarts-markPoint/"/>
      <url>/2019/08/09/echarts-markPoint/</url>
      <content type="html"><![CDATA[<h5 id="整体说明"><a href="#整体说明" class="headerlink" title="整体说明"></a>整体说明</h5><p>标注（markPoint）的数据数组。每个数组项是一个对象，有下面几种方式指定标注的位置：</p><ol><li>通过<code>x, y</code>属性指定相对容器的屏幕坐标，单位像素，支持百分比。</li><li>用<code>coord</code> 属性指定数据在相应坐标系上的坐标位置，单个维度支持设置 <code>&#39;min&#39;</code>, <code>&#39;max&#39;</code>, <code>&#39;average&#39;</code>。</li><li>直接用 <code>type</code>属性标注系列中的最大值，最小值。这时候可以使用 <a href="https://echarts.baidu.com/option.html#series-bar.markPoint.data.valueIndex" target="_blank" rel="noopener">valueIndex</a> 指定是在哪个维度上的最大值、最小值、平均值。或者可以使用 <a href="https://echarts.baidu.com/option.html#series-bar.markPoint.data.valueDim" target="_blank" rel="noopener">valueDim</a> 指定在哪个维度上的最大值、最小值、平均值。</li><li>如果是笛卡尔坐标系的话，也可以通过只指定 <code>xAxis</code> 或者 <code>yAxis</code> 来实现 X 轴或者 Y 轴为某值的标线。</li></ol><p>当多个属性同时存在时，优先级按上述的顺序。</p><a id="more"></a><p><br></p><h5 id="markPoint-data"><a href="#markPoint-data" class="headerlink" title="markPoint.data"></a>markPoint.data</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">data: [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'最大值'</span>,</span><br><span class="line">        type: <span class="string">'max'</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'某个坐标'</span>,</span><br><span class="line">        coord: [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        name: <span class="string">'固定 x 像素位置'</span>,</span><br><span class="line">        yAxis: <span class="number">10</span>,</span><br><span class="line">        x: <span class="string">'90%'</span></span><br><span class="line">    &#125;, </span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'某个屏幕坐标'</span>,</span><br><span class="line">        x: <span class="number">100</span>,</span><br><span class="line">        y: <span class="number">100</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br></p><h5 id="markLine-data"><a href="#markLine-data" class="headerlink" title="markLine.data"></a>markLine.data</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">data: [</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'平均线'</span>,</span><br><span class="line">        <span class="comment">// 支持 'average', 'min', 'max'</span></span><br><span class="line">        type: <span class="string">'average'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">'Y 轴值为 100 的水平线'</span>,</span><br><span class="line">        yAxis: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 起点和终点的项会共用一个 name</span></span><br><span class="line">            name: <span class="string">'最小值到最大值'</span>,</span><br><span class="line">            type: <span class="string">'min'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            type: <span class="string">'max'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'两个坐标之间的标线'</span>,</span><br><span class="line">            coord: [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            coord: [<span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ], </span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 固定起点的 x 像素位置，用于模拟一条指向最大值的水平线</span></span><br><span class="line">            yAxis: <span class="string">'max'</span>,</span><br><span class="line">            x: <span class="string">'90%'</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            type: <span class="string">'max'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'两个屏幕坐标之间的标线'</span>,</span><br><span class="line">            x: <span class="number">100</span>,</span><br><span class="line">            y: <span class="number">100</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            x: <span class="number">500</span>,</span><br><span class="line">            y: <span class="number">200</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><br></p><h5 id="markArea-data"><a href="#markArea-data" class="headerlink" title="markArea.data"></a>markArea.data</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">data: [</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'平均值到最大值'</span>,</span><br><span class="line">            type: <span class="string">'average'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            type: <span class="string">'max'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'两个坐标之间的标域'</span>,</span><br><span class="line">            coord: [<span class="number">10</span>, <span class="number">20</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            coord: [<span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'60分到80分'</span>,</span><br><span class="line">            yAxis: <span class="number">60</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            yAxis: <span class="number">80</span></span><br><span class="line">        &#125;</span><br><span class="line">    ], </span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'所有数据范围区间'</span>,</span><br><span class="line">            coord: [<span class="string">'min'</span>, <span class="string">'min'</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            coord: [<span class="string">'max'</span>, <span class="string">'max'</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'两个屏幕坐标之间的标域'</span>,</span><br><span class="line">            x: <span class="number">100</span>,</span><br><span class="line">            y: <span class="number">100</span></span><br><span class="line">        &#125;, </span><br><span class="line">        &#123;</span><br><span class="line">            x: <span class="string">'90%'</span>,</span><br><span class="line">            y: <span class="string">'10%'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> echarts </tag>
            
            <tag> markPoint </tag>
            
            <tag> markLine </tag>
            
            <tag> markArea </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx-upstream</title>
      <link href="/2019/08/01/nginx-upstream/"/>
      <url>/2019/08/01/nginx-upstream/</url>
      <content type="html"><![CDATA[<h5 id="1、轮询-weight"><a href="#1、轮询-weight" class="headerlink" title="1、轮询(weight)"></a>1、轮询(weight)</h5><p>指定轮询几率，<strong>weight和访问比率成正比，用于后端服务器性能不均的情况</strong>。默认当weight不指定时，各服务器weight相同，每个请求按时间顺序逐一分配到不同的后端服务器。<strong>如果后端服务器down掉，能自动剔除</strong>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> bakend &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.10</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.11</span> weight=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h5 id="2、ip-hash"><a href="#2、ip-hash" class="headerlink" title="2、ip_hash"></a>2、ip_hash</h5><p>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，<strong>可以解决session不能跨服务器的问题</strong>。如果<strong>后端服务器down掉，要手工down掉</strong>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> resinserver&#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.10:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.11:8080</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="3、fair（第三方插件）"><a href="#3、fair（第三方插件）" class="headerlink" title="3、fair（第三方插件）"></a>3、fair（第三方插件）</h5><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> resinserver&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.10:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.11:8080</span>;</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="4、url-hash（第三方插件）"><a href="#4、url-hash（第三方插件）" class="headerlink" title="4、url_hash（第三方插件）"></a>4、url_hash（第三方插件）</h5><p>按访问<code>url</code>的<code>hash</code>结果来分配请求，使每个url定向到同一个后端服务器，<strong>后端服务器为缓存服务器时比较有效</strong>。在upstream中加入hash语句，hash_method指定使用的hash算法。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> resinserver&#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.10:8080</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.11:8080</span>;</span><br><span class="line">    <span class="attribute">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">    <span class="attribute">hash_method</span> crc32;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="5、负载均衡实例"><a href="#5、负载均衡实例" class="headerlink" title="5、负载均衡实例"></a>5、负载均衡实例</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> tel_img_stream &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.11.68:20201</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.11.69:20201</span> weight=<span class="number">100</span> down;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.11.70:20201</span> weight=<span class="number">100</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.11.71:20201</span> weight=<span class="number">100</span> backup;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.11.72:20201</span> weight=<span class="number">100</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><code>down</code>：表示当前的server暂时<strong>不参与负载</strong> 。</li><li><code>weight</code>：权重，默认为1，weight越大，负载的权重就越大。</li><li><code>max_fails</code>：失败次数，默认为1。当超过<code>max_fails</code>时，返回<code>proxy_next_upstream</code> 模块定义的错误。</li><li><code>fail_timeout</code>：如果在 <code>fail_timeout</code> 期间后端失败了 <code>max_fails</code> 次，那么就将这个后端标识为不可用，在接下来的 <code>fail_timeout</code> 期间， NGINX 不会再将请求分配到这个后端。</li><li><code>backup</code>：备用服务器，所有<code>非backup机器</code><strong>宕机或者不可用</strong>的时候，请求backup机器。</li></ul><p><br></p><p>注：</p><ul><li>Nginx默认<strong>判断失败节点状态</strong>以<code>connect refuse</code>和<code>timeout</code>状态为准，不以<strong>HTTP错误状态</strong>进行判断失败，除非添加了<code>proxy_next_upstream</code>指令设置对<code>404、502、503、504、500和time out</code>等错误转到备机处理。</li></ul><p><br></p><h5 id="6、proxy-next-upstream"><a href="#6、proxy-next-upstream" class="headerlink" title="6、proxy_next_upstream"></a>6、proxy_next_upstream</h5><p><code>proxy_next_upstream</code>指令，指定了应将请求<strong>传递到下一个服务器</strong>的情况：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:proxy_next_upstream error | timeout | invalid_header | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | http_429 | non_idempotent | off ...;</span><br><span class="line">Default:proxy_next_upstream error timeout;</span><br><span class="line">Context:http, server, location</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">error:在与服务器建立连接，向其传递请求或读取响应标头时发生错误</span><br><span class="line"></span><br><span class="line">timeout:在与服务器建立连接，向其传递请求或读取响应头时发生超时</span><br><span class="line"></span><br><span class="line">invalid_header:服务器返回空响应或无效响应</span><br><span class="line"></span><br><span class="line">http_500:服务器返回了带有代码500的响应</span><br><span class="line"></span><br><span class="line">http_502:服务器返回具有代码502的响应</span><br><span class="line"></span><br><span class="line">http_503:服务器返回具有代码503的响应</span><br><span class="line"></span><br><span class="line">http_504:服务器返回具有代码504的响应</span><br><span class="line"></span><br><span class="line">http_403:服务器返回带有代码403的响应</span><br><span class="line"></span><br><span class="line">http_404:服务器返回具有代码404的响应</span><br><span class="line"></span><br><span class="line">non_idempotent:通常，如果请求已经被发送到服务器，则具有非幂等方法的请求（POST，LOCK，PATCH）不被传递到下一个服务器，启用此选项明确允许重试此类请求</span><br><span class="line"></span><br><span class="line">off:禁用将请求传递到下一个服务器</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> upstream </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>文件下载</title>
      <link href="/2019/07/31/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2019/07/31/%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h5 id="一、触发浏览器自动下载的url"><a href="#一、触发浏览器自动下载的url" class="headerlink" title="一、触发浏览器自动下载的url"></a>一、触发浏览器自动下载的url</h5><ul><li><code>response header</code>中指定了<strong>Content-Disposition</strong>为<strong>attachment</strong>，它表示让浏览器把响应体作为附件下载到本地 </li><li>response header中指定了<strong>Content-Type</strong> 为 <strong>application/octet-stream或者 application/zip</strong>以及其它几个不常见类型。<code>application/octet-stream</code>表示<code>http response</code>为二进制流，没指定明确的type，需要下载到本地由系统决定或者用户手动指定打开方式。</li></ul><a id="more"></a><p><br></p><h5 id="二、下载方式"><a href="#二、下载方式" class="headerlink" title="二、下载方式"></a>二、下载方式</h5><ol><li><p><code>&lt;iframe src=&#39;&#39;&gt;</code></p><p>只要满足上述「<strong>触发浏览器自动下载</strong>」的url，就能通过iframe的形式。一般的用法是在html中隐藏iframe，然后在业务代码中通过设置iframe的src来实现下载。</p></li></ol><ol start="2"><li><p><code>&lt;a href=&#39;&#39; download&gt;</code></p><p>主流浏览器对于的特殊情况说明：</p><ul><li>Safari只支持能「触发浏览器自动下载」的url</li><li>Firefox也只支持能「触发浏览器自动下载」的url<ul><li>点击a标签会触发「浏览器离开当前页面」的行为，解决这个问题的方式是「再搭配一个iframe, 将a标签的target指向这个iframe」，这样就不会有页面跳转了</li></ul></li><li><strong>Chrome对于不能「触发浏览器自动下载」的url，也可以通过这种方式下载</strong></li></ul></li></ol><ol start="3"><li><p><code>window.location.href</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 此方法火狐有些版本是不支持的</span><br><span class="line">window.location.href = &apos;https://*****.oss-cn-**.aliyuncs.com/*********&apos;;</span><br><span class="line"></span><br><span class="line"># 为了解决火狐有些版本不支持，可以改成这种方式</span><br><span class="line">window.location = &apos;https://*****.oss-cn-**.aliyuncs.com/*********&apos;;</span><br></pre></td></tr></table></figure></li><li><p><code>form表单</code>，利用<code>form.submit()</code>事件</p></li><li><p><code>window.open</code></p></li><li><p><code>XMLHttpRequest</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'get'</span>, url);</span><br><span class="line">     <span class="comment">// ""、"text"-字符串 、"blob"-Blob对象 、"arraybuffer"-ArrayBuffer对象</span></span><br><span class="line">    xhr.responseType = <span class="string">"blob"</span>;</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        cb(xhr.response);</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send();</span><br><span class="line">&#125;</span><br><span class="line">ajax(<span class="string">'fileUrl'</span>, data =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> aEl = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    aEl.href = URL.createObjectURL(data);</span><br><span class="line">    aEl.download = params.fileName;</span><br><span class="line">    aEl.click();</span><br><span class="line">    URL.revokeObjectURL(aEl.href);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
        <tags>
            
            <tag> Content-Disposition </tag>
            
            <tag> Content-Type </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>XMLHttpRequest.responseType</title>
      <link href="/2019/07/31/XMLHttpRequest-responseType/"/>
      <url>/2019/07/31/XMLHttpRequest-responseType/</url>
      <content type="html"><![CDATA[<p><code>XMLHttpRequest.responseType</code>属性是一个枚举类型的属性，返回响应数据的类型。它允许我们手动的设置返回数据的类型。如果我们将它设置为一个空字符串，它将使用默认的<code>text</code>类型。</p><a id="more"></a><p><br></p><table><thead><tr><th style="text-align:left">值</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>&quot;&quot;</code></td><td style="text-align:left">将 <code>responseType</code> 设为空字符串与设置为<code>&quot;text&quot;</code>相同</td></tr><tr><td style="text-align:left"><code>&quot;arraybuffer&quot;</code></td><td style="text-align:left"><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/response" target="_blank" rel="noopener"><code>response</code></a> 是一个包含二进制数据的 JavaScript <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noopener"><code>ArrayBuffer</code></a> 。</td></tr><tr><td style="text-align:left"><code>&quot;blob&quot;</code></td><td style="text-align:left"><code>response</code> 是一个包含二进制数据的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener"><code>Blob</code></a> 对象 。</td></tr><tr><td style="text-align:left"><code>&quot;document&quot;</code></td><td style="text-align:left"><code>response</code> 是一个 <a href="https://developer.mozilla.org/en-US/docs/Glossary/HTML" target="_blank" rel="noopener">HTML</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="noopener"><code>Document</code></a> 或 <a href="https://developer.mozilla.org/en-US/docs/Glossary/XML" target="_blank" rel="noopener">XML</a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/XMLDocument" target="_blank" rel="noopener"><code>XMLDocument</code></a> ，这取决于接收到的数据的 MIME 类型。</td></tr><tr><td style="text-align:left"><code>&quot;json&quot;</code></td><td style="text-align:left"><code>response</code> 是一个 JavaScript 对象。这个对象是通过将接收到的数据类型视为 <a href="https://developer.mozilla.org/en-US/docs/Glossary/JSON" target="_blank" rel="noopener">JSON</a> 解析得到的。</td></tr><tr><td style="text-align:left"><code>&quot;text&quot;</code></td><td style="text-align:left"><code>response</code> 是包含在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString" target="_blank" rel="noopener"><code>DOMString</code></a> 对象中的文本。</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> XMLHttpRequest </tag>
            
            <tag> responseType </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx-resolver</title>
      <link href="/2019/07/26/Nginx-resolver/"/>
      <url>/2019/07/26/Nginx-resolver/</url>
      <content type="html"><![CDATA[<h5 id="resolver语法"><a href="#resolver语法" class="headerlink" title="resolver语法"></a><code>resolver</code>语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:    resolver address ... [valid=time] [ipv6=on|off];</span><br><span class="line">Default:   —</span><br><span class="line">Context:   http, server, location</span><br></pre></td></tr></table></figure><ul><li><p>可以配置多个dns服务，nginx会采用轮询的方式去访问dns服务</p></li><li><p>nginx会缓存dns对域名解析的结果，缓存的时间由<code>valid</code>指定</p></li><li>ipv6用于显示开启或者关闭ipv6</li></ul><a id="more"></a><p><br></p><h5 id="resolver-timeout语法"><a href="#resolver-timeout语法" class="headerlink" title="resolver_timeout语法"></a><code>resolver_timeout</code>语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:  resolver_timeout time;</span><br><span class="line">Default: resolver_timeout 30s;</span><br><span class="line">Context: http, server, location</span><br></pre></td></tr></table></figure><p>注：<code>resolver_timeout</code>用于指定dns解析的超时时间</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> resolver </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常用DNS服务器</title>
      <link href="/2019/07/26/%E5%B8%B8%E7%94%A8DNS%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2019/07/26/%E5%B8%B8%E7%94%A8DNS%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<h5 id="DNS服务器列表"><a href="#DNS服务器列表" class="headerlink" title="DNS服务器列表"></a>DNS服务器列表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Public DNS+ 腾讯公共DNS</span><br><span class="line">IPv4 地址</span><br><span class="line">首选：119.29.29.29</span><br><span class="line">备用：182.254.116.116</span><br><span class="line"></span><br><span class="line">AliDNS 阿里公共 DNS</span><br><span class="line">IPv4 地址</span><br><span class="line">首选：223.5.5.5</span><br><span class="line">备用：223.6.6.6</span><br><span class="line"></span><br><span class="line">114 DNS</span><br><span class="line">常规公共 DNS (干净无劫持)</span><br><span class="line">首选：114.114.114.114 、备选：114.114.115.115</span><br><span class="line">拦截钓鱼病毒木马网站 (保护上网安全)</span><br><span class="line">首选：114.114.114.119、备用：114.114.115.119</span><br><span class="line">拦截色情网站 (保护儿童)</span><br><span class="line">首选：114.114.114.110、备用：114.114.115.110</span><br><span class="line"></span><br><span class="line">百度 BaiduDNS</span><br><span class="line">IPv4 地址：180.76.76.76</span><br><span class="line">IPv6 地址：2400:da00::6666</span><br><span class="line"></span><br><span class="line">Google Public DNS</span><br><span class="line">IPv4 地址</span><br><span class="line">首选：8.8.8.8</span><br><span class="line">备用：8.8.4.4</span><br><span class="line">IPv6 地址</span><br><span class="line">首选：2001:4860:4860::8888</span><br><span class="line">备用：2001:4860:4860::8844</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">DNS 派</span><br><span class="line">首选（电信/移动/铁通）：101.226.4.6</span><br><span class="line">备选（电信/移动/铁通）：218.30.118.6</span><br><span class="line">首选（联通）：123.125.81.6</span><br><span class="line">备选（联通）：140.207.198.6</span><br><span class="line"></span><br><span class="line">CNNIC sDNS</span><br><span class="line">IPv4 地址</span><br><span class="line">首选：1.2.4.8</span><br><span class="line">备用：210.2.4.8</span><br><span class="line"></span><br><span class="line">OneDNS</span><br><span class="line">IPv4 地址</span><br><span class="line">首选：117.50.11.11</span><br><span class="line">备用：117.50.22.22</span><br><span class="line"></span><br><span class="line">CloudFlare DNS</span><br><span class="line">IPv4 地址</span><br><span class="line">首选：1.1.1.1</span><br><span class="line">备用：1.0.0.1</span><br><span class="line">IPv6 地址：</span><br><span class="line">首选：2606:4700:4700::1111</span><br><span class="line">备用：2606:4700:4700::1001</span><br><span class="line"></span><br><span class="line">IBM Quad9</span><br><span class="line">IPv4 地址</span><br><span class="line">首选：9.9.9.9</span><br><span class="line">备用：149.112.112.112</span><br><span class="line">IPv6 地址</span><br><span class="line">首选：2620:fe::fe</span><br><span class="line">备用：2620:fe::9</span><br><span class="line"></span><br><span class="line">OpenDNS</span><br><span class="line">IPv4 地址</span><br><span class="line">首选：208.67.222.222</span><br><span class="line">备用：208.67.220.220</span><br><span class="line">IPv6 地址</span><br><span class="line">首选：2620:0:ccc::2</span><br><span class="line">备用：2620:0:ccd::2</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx-proxy_redirect</title>
      <link href="/2019/07/23/nginx-proxy-redirect/"/>
      <url>/2019/07/23/nginx-proxy-redirect/</url>
      <content type="html"><![CDATA[<h4 id="proxy-redirect"><a href="#proxy-redirect" class="headerlink" title="proxy_redirect"></a>proxy_redirect</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法：proxy_redirect [default | off | redirect replacement] </span><br><span class="line">默认值：proxy_redirect default </span><br><span class="line">使用字段：http,server,location</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h5 id="proxy-redirect-redirect-replacement"><a href="#proxy-redirect-redirect-replacement" class="headerlink" title="proxy_redirect redirect replacement"></a><code>proxy_redirect redirect replacement</code></h5><p>如果需要修改从被代理服务器传来的应答头中的<code>Location</code>和<code>Refresh</code>字段，可以用这个指令设置。 假设被代理服务器返回Location字段为：<code>http://localhost:8000/two/some/uri/</code>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_redirect</span> http://localhost:8000/two/  http://frontend/one/; </span><br><span class="line"><span class="comment"># 这个指令将Location字段重写为http://frontend/one/some/uri/</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_redirect</span> http://localhost:8000/two/ /; </span><br><span class="line"><span class="comment"># 在代替的字段中可以不写服务器名，这样就使用服务器的基本名称和端口，即使它来自非80端口。</span></span><br></pre></td></tr></table></figure><p> <br></p><h5 id="proxy-redirect-default"><a href="#proxy-redirect-default" class="headerlink" title="proxy_redirect   default"></a><code>proxy_redirect   default</code></h5><p>如果使用<code>default</code>参数，将根据<code>location</code>和<code>proxy_pass</code>参数的设置来决定。例如下列两个配置等效： </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /one/ &#123;  </span><br><span class="line">    <span class="attribute">proxy_pass</span> http://upstream:port/two/;  </span><br><span class="line">    <span class="attribute">proxy_redirect</span>   default;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /one/ &#123;  </span><br><span class="line">    <span class="attribute">proxy_pass</span> http://upstream:port/two/;  </span><br><span class="line">    <span class="attribute">proxy_redirect</span>   http://upstream:port/two/   /one/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在指令中可以使用一些变量： </span></span><br><span class="line"><span class="attribute">proxy_redirect</span>   http://localhost:8000/ http://<span class="variable">$host</span>:<span class="variable">$server_port</span>/; </span><br><span class="line"></span><br><span class="line"><span class="comment">#这个指令有时可以重复： </span></span><br><span class="line"><span class="attribute">proxy_redirect</span>   default;  </span><br><span class="line"><span class="attribute">proxy_redirect</span>   http://localhost:8000/ /;  </span><br><span class="line"><span class="attribute">proxy_redirect</span>   http://www.example.com/ /; </span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数off将在这个字段中禁止所有的proxy_redirect指令</span></span><br><span class="line"><span class="attribute">proxy_redirect</span>   <span class="literal">off</span>;  </span><br><span class="line"><span class="attribute">proxy_redirect</span>   default;  </span><br><span class="line"><span class="attribute">proxy_redirect</span>   http://localhost:8000/    /;  </span><br><span class="line"><span class="attribute">proxy_redirect</span>   http://www.example.com/   /;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> proxy_redirect </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES6-Generator</title>
      <link href="/2019/07/23/ES6-Generator/"/>
      <url>/2019/07/23/ES6-Generator/</url>
      <content type="html"><![CDATA[<h5 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h5><p>Generator 函数是一个普通函数，但是有两个特征。一是，<code>function</code>关键字与函数名之间有一个星号；二是，函数体内部使用<code>yield</code>表达式，定义不同的内部状态。</p><p>注：调用 Generator 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的<strong>遍历器对象（Symbol.iterator）</strong>。</p><a id="more"></a><p><br></p><h5 id="yield表达式"><a href="#yield表达式" class="headerlink" title="yield表达式"></a><code>yield</code>表达式</h5><p>由于 Generator 函数返回的遍历器对象，只有调用<code>next</code>方法才会遍历下一个内部状态，所以其实提供了一种可以暂停执行的函数。<code>yield</code>表达式就是暂停标志。</p><p>遍历器对象的<code>next</code>方法的运行逻辑如下：</p><ol><li>遇到<code>yield</code>表达式，就暂停执行后面的操作，并将紧跟在<code>yield</code>后面的那个表达式的值，作为返回的对象的<code>value</code>属性值。</li><li>下一次调用<code>next</code>方法时，再继续往下执行，直到遇到下一个<code>yield</code>表达式。</li><li>如果没有再遇到新的<code>yield</code>表达式，就一直运行到函数结束，直到<code>return</code>语句为止，并将<code>return</code>语句后面的表达式的值，作为返回的对象的<code>value</code>属性值。</li><li>如果该函数没有<code>return</code>语句，则返回的对象的<code>value</code>属性值为<code>undefined</code>。</li></ol><p><br></p><h5 id="next-方法的参数"><a href="#next-方法的参数" class="headerlink" title="next 方法的参数"></a>next 方法的参数</h5><p><code>yield</code>表达式本身没有返回值，或者说总是返回<code>undefined</code>。<code>next</code>方法可以带一个参数，该参数就会被当作上一个<code>yield</code>表达式的返回值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; <span class="literal">true</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> reset = <span class="keyword">yield</span> i;</span><br><span class="line">    <span class="keyword">if</span>(reset) &#123; i = <span class="number">-1</span>; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = f();</span><br><span class="line"></span><br><span class="line">g.next() <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br><span class="line">g.next() <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.next(<span class="literal">true</span>) <span class="comment">// &#123; value: 0, done: false &#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> y = <span class="number">2</span> * (<span class="keyword">yield</span> (x + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">var</span> z = <span class="keyword">yield</span> (y / <span class="number">3</span>);</span><br><span class="line">  <span class="keyword">return</span> (x + y + z);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = foo(<span class="number">5</span>);</span><br><span class="line">a.next() <span class="comment">// Object&#123;value:6, done:false&#125;</span></span><br><span class="line">a.next() <span class="comment">// Object&#123;value:NaN, done:false&#125;</span></span><br><span class="line">a.next() <span class="comment">// Object&#123;value:NaN, done:true&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = foo(<span class="number">5</span>);</span><br><span class="line">b.next() <span class="comment">// &#123; value:6, done:false &#125;</span></span><br><span class="line">b.next(<span class="number">12</span>) <span class="comment">// &#123; value:8, done:false &#125;</span></span><br><span class="line">b.next(<span class="number">13</span>) <span class="comment">// &#123; value:42, done:true &#125;</span></span><br></pre></td></tr></table></figure><p>注：通过<code>next</code>方法的参数，就有办法在 Generator 函数开始运行之后，继续向函数体内部注入值。也就是说，可以在 Generator 函数运行的不同阶段，从外部向内部注入不同的值，从而调整函数行为。</p><p><br></p><h5 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h5><p>Generator 函数返回的遍历器对象，还有一个<code>return</code>方法，可以返回给定的值，并且终结遍历 Generator 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line">g.next()        <span class="comment">// &#123; value: 1, done: false &#125;</span></span><br><span class="line">g.return(<span class="string">'foo'</span>) <span class="comment">// &#123; value: "foo", done: true &#125;</span></span><br><span class="line">g.next()        <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="next-、throw-、return-的共同点"><a href="#next-、throw-、return-的共同点" class="headerlink" title="next()、throw()、return() 的共同点"></a>next()、throw()、return() 的共同点</h5><p><code>next()</code>、<code>throw()</code>、<code>return()</code>这三个方法本质上是同一件事，可以放在一起理解。它们的作用都是让 Generator 函数恢复执行，并且使用不同的语句替换<code>yield</code>表达式。</p><ul><li><code>next()</code>是将<code>yield</code>表达式替换成一个值</li><li><code>throw()</code>是将<code>yield</code>表达式替换成一个<code>throw</code>语句</li><li><code>return()</code>是将<code>yield</code>表达式替换成一个<code>return</code>语句</li></ul><p><br></p><h5 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield*表达式"></a><code>yield*</code>表达式</h5><p>如果在 Generator 函数内部，调用另一个 Generator 函数。需要在前者的函数体内部，自己手动完成遍历。</p><p>ES6 提供了<code>yield*</code>表达式，作为解决办法，用来在一个 Generator 函数里面执行另一个 Generator 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">  <span class="keyword">yield</span>* foo();</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'a'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'b'</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'x'</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> foo()) &#123;</span><br><span class="line">    <span class="keyword">yield</span> v;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> bar())&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="作为对象属性的-Generator-函数"><a href="#作为对象属性的-Generator-函数" class="headerlink" title="作为对象属性的 Generator 函数"></a>作为对象属性的 Generator 函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myGeneratorMethod属性前面有一个星号，表示这个属性是一个 Generator 函数</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  * myGeneratorMethod() &#123;</span><br><span class="line">    ···</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  myGeneratorMethod: <span class="function"><span class="keyword">function</span>* (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ···</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="Generator-函数的this"><a href="#Generator-函数的this" class="headerlink" title="Generator 函数的this"></a>Generator 函数的this</h5><p>Generator 函数总是返回一个遍历器，ES6 规定这个遍历器是 Generator 函数的实例，也继承了 Generator 函数的<code>prototype</code>对象上的方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">g</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">g.prototype.hello = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'hi!'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = g();</span><br><span class="line"></span><br><span class="line">obj <span class="keyword">instanceof</span> g <span class="comment">// true</span></span><br><span class="line">obj.hello() <span class="comment">// 'hi!'</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h5><p>传统的编程语言，早有异步编程的解决方案（其实是多任务的解决方案）。其中有一种叫做”协程”（coroutine），意思是多个线程互相协作，完成异步任务。</p><p>协程有点像函数，又有点像线程。它的运行流程大致如下。</p><ul><li>第一步，协程<code>A</code>开始执行。</li><li>第二步，协程<code>A</code>执行到一半，进入暂停，执行权转移到协程<code>B</code>。</li><li>第三步，（一段时间后）协程<code>B</code>交还执行权。</li><li>第四步，协程<code>A</code>恢复执行。</li></ul><p>上面流程的协程<code>A</code>，就是异步任务，因为它分成两段（或多段）执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 上面代码的函数asyncJob是一个协程，它的奥妙就在其中的yield命令</span></span><br><span class="line"><span class="comment">// 它表示执行到此处，执行权将交给其他协程</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">asyncJob</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...其他代码</span></span><br><span class="line">  <span class="keyword">var</span> f = <span class="keyword">yield</span> readFile(fileA);</span><br><span class="line">  <span class="comment">// ...其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fetch = <span class="built_in">require</span>(<span class="string">'node-fetch'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> url = <span class="string">'https://api.github.com/users/github'</span>;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> fetch(url);</span><br><span class="line">  <span class="built_in">console</span>.log(result.bio);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> g = gen();</span><br><span class="line"><span class="keyword">var</span> result = g.next();</span><br><span class="line"></span><br><span class="line">result.value.then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> data.json();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  g.next(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> Generator </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx常见错误</title>
      <link href="/2019/07/19/nginx%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/"/>
      <url>/2019/07/19/nginx%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
      <content type="html"><![CDATA[<h5 id="1、配置通用代理"><a href="#1、配置通用代理" class="headerlink" title="1、配置通用代理"></a>1、配置通用代理</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url=https://img1.tuicool.com/63MBryU.jpg!web</span></span><br><span class="line"><span class="comment"># 代理url，不包含参数</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">223.5.5.5</span> <span class="number">119.29.29.29</span> <span class="number">8.8.8.8</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /api/img/proxy</span> &#123;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$arg_url</span> <span class="regexp">~* ^(.*://)?([^/]+)(/.+))</span> &#123;</span><br><span class="line">                <span class="attribute">set</span> <span class="variable">$domain</span> <span class="variable">$2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$domain</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> <span class="variable">$arg_url</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url=https://webquoteklinepic.eastmoney.com/GetPic.aspx?nid=116.01117&amp;imageType=k</span></span><br><span class="line"><span class="comment"># 代理url，包含参数</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">223.5.5.5</span> <span class="number">119.29.29.29</span> <span class="number">8.8.8.8</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ /api/img/proxy</span> &#123;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$query_string</span> <span class="regexp">~* ^url=(.*)$)</span> &#123;</span><br><span class="line">                <span class="attribute">set</span> <span class="variable">$proxy_url</span> <span class="variable">$1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$proxy_url</span> <span class="regexp">~* ^(.*://)?([^/]+)(/.+))</span> &#123;</span><br><span class="line">                <span class="attribute">set</span> <span class="variable">$proxy_domain</span> <span class="variable">$2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="attribute">add_header</span> cache-control public;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Referer <span class="variable">$proxy_url</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$proxy_domain</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> <span class="variable">$proxy_url</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h5 id="遇到的坑点"><a href="#遇到的坑点" class="headerlink" title="遇到的坑点"></a>遇到的坑点</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">问题：nginx: [emerg] unknown directive &quot;if($domain&quot; in /etc/nginx/nginx.conf:38</span><br><span class="line"></span><br><span class="line">原因：if 语法后面，必须要有空格</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">问题：nginx：“no resolver defined to resolve xxx.xxx”</span><br><span class="line"></span><br><span class="line">原因：Nginx0.6.18以后的版本中启用了一个resolver指令，在使用变量来构造某个server地址的时候一定要用resolver指令来制定DNS服务器的地址</span><br><span class="line"></span><br><span class="line">方案：在nginx的配置文件中的http&#123;&#125;部分添加一行resolver 8.8.8.8;即可</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>geoJson格式说明</title>
      <link href="/2019/07/18/geoJson%E6%A0%BC%E5%BC%8F/"/>
      <url>/2019/07/18/geoJson%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="GeoJSON"><a href="#GeoJSON" class="headerlink" title="GeoJSON"></a>GeoJSON</h4><p>GeoJSON是一种对各种<strong>地理数据结构</strong>进行编码的格式，GeoJSON对象可以表示<strong>几何、特征或者特征集合</strong>。</p><p>GeoJSON支持下面几何类型：<strong>点、线、面、多点、多线、多面和几何集合</strong>。</p><p>GeoJSON里的<strong>特征包含一个几何对象和其他属性</strong>，特征集合表示一系列特征。</p><a id="more"></a><p><br></p><p>注：</p><ul><li><p>GeoJSON对象可能有<strong>任何数目成员（名/值对</strong>）</p></li><li><p>GeoJSON对象必须由一个名字为<code>type</code>的成员，值必须是下面之一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Point, MultiPoint, LineString, MultiLineString, Polygon, MultiPolygon,</span><br><span class="line">GeometryCollection, Feature, FeatureCollection</span><br></pre></td></tr></table></figure></li><li><p>GeoJSON对象可能有一个可选的<code>crs</code>成员，它的值必须是一个坐标参考系统的对象</p></li><li>GeoJSON对象可能有一个<code>bbox</code>成员，它的值必须是边界框数组</li></ul><p><br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"FeatureCollection"</span>,</span><br><span class="line">  <span class="attr">"features"</span>: [</span><br><span class="line">    // 点</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">      <span class="attr">"geometry"</span>: &#123;<span class="attr">"type"</span>: <span class="string">"Point"</span>, <span class="attr">"coordinates"</span>: [<span class="number">102.0</span>, <span class="number">0.5</span>]&#125;,</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;<span class="attr">"prop0"</span>: <span class="string">"value0"</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 线</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">      <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"LineString"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>: [</span><br><span class="line">            [<span class="number">102.0</span>, <span class="number">0.0</span>],</span><br><span class="line">            [<span class="number">103.0</span>, <span class="number">1.0</span>], </span><br><span class="line">            [<span class="number">104.0</span>, <span class="number">0.0</span>], </span><br><span class="line">            [<span class="number">105.0</span>, <span class="number">1.0</span>]</span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">"properties"</span>: &#123;</span><br><span class="line">        <span class="attr">"prop0"</span>: <span class="string">"value0"</span>,</span><br><span class="line">        <span class="attr">"prop1"</span>: <span class="number">0.0</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    // 面</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"Feature"</span>,</span><br><span class="line">       <span class="attr">"geometry"</span>: &#123;</span><br><span class="line">         <span class="attr">"type"</span>: <span class="string">"Polygon"</span>,</span><br><span class="line">         <span class="attr">"coordinates"</span>: [</span><br><span class="line">             [ </span><br><span class="line">               [<span class="number">100.0</span>, <span class="number">0.0</span>], </span><br><span class="line">               [<span class="number">101.0</span>, <span class="number">0.0</span>], </span><br><span class="line">               [<span class="number">101.0</span>, <span class="number">1.0</span>],</span><br><span class="line">               [<span class="number">100.0</span>, <span class="number">1.0</span>], </span><br><span class="line">               [<span class="number">100.0</span>, <span class="number">0.0</span>]</span><br><span class="line">             ]</span><br><span class="line">         ]</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">"properties"</span>: &#123;</span><br><span class="line">         <span class="attr">"prop0"</span>: <span class="string">"value0"</span>,</span><br><span class="line">         <span class="attr">"prop1"</span>: &#123;<span class="attr">"this"</span>: <span class="string">"that"</span>&#125;</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>:<span class="string">"Feature"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"geometry"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"MultiPolygon"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>:[</span><br><span class="line">            // 多个Polygon</span><br><span class="line">            [</span><br><span class="line">                [</span><br><span class="line">                    [<span class="number">101.6455078125</span>,<span class="number">27.68352808378776</span>],</span><br><span class="line">                    [<span class="number">114.78515624999999</span>,<span class="number">27.68352808378776</span>],</span><br><span class="line">                    [<span class="number">114.78515624999999</span>,<span class="number">35.209721645221386</span>],</span><br><span class="line">                    [<span class="number">101.6455078125</span>,<span class="number">35.209721645221386</span>],</span><br><span class="line">                    [<span class="number">101.6455078125</span>,<span class="number">27.68352808378776</span>]</span><br><span class="line">                ]</span><br><span class="line">            ],</span><br><span class="line">            [</span><br><span class="line">                [</span><br><span class="line">                    [<span class="number">104.2822265625</span>,<span class="number">30.107117887092357</span>],</span><br><span class="line">                    [<span class="number">108.896484375</span>,<span class="number">30.107117887092357</span>],</span><br><span class="line">                    [<span class="number">108.896484375</span>,<span class="number">33.76088200086917</span>],</span><br><span class="line">                    [<span class="number">104.2822265625</span>,<span class="number">33.76088200086917</span>],</span><br><span class="line">                    [<span class="number">104.2822265625</span>,<span class="number">30.107117887092357</span>]</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"type"</span>:<span class="string">"Feature"</span>,</span><br><span class="line">    <span class="attr">"properties"</span>:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"geometry"</span>:&#123;</span><br><span class="line">        <span class="attr">"type"</span>:<span class="string">"MultiPolygon"</span>,</span><br><span class="line">        <span class="attr">"coordinates"</span>:[</span><br><span class="line">            [</span><br><span class="line">                // 多个LineString</span><br><span class="line">                [</span><br><span class="line">                    [<span class="number">101.6455078125</span>,<span class="number">27.68352808378776</span>],</span><br><span class="line">                    [<span class="number">114.78515624999999</span>,<span class="number">27.68352808378776</span>],</span><br><span class="line">                    [<span class="number">114.78515624999999</span>,<span class="number">35.209721645221386</span>],</span><br><span class="line">                    [<span class="number">101.6455078125</span>,<span class="number">35.209721645221386</span>],</span><br><span class="line">                    [<span class="number">101.6455078125</span>,<span class="number">27.68352808378776</span>]</span><br><span class="line">                ],</span><br><span class="line">                [</span><br><span class="line">                    [<span class="number">104.2822265625</span>,<span class="number">30.107117887092357</span>],</span><br><span class="line">                    [<span class="number">108.896484375</span>,<span class="number">30.107117887092357</span>],</span><br><span class="line">                    [<span class="number">108.896484375</span>,<span class="number">33.76088200086917</span>],</span><br><span class="line">                    [<span class="number">104.2822265625</span>,<span class="number">33.76088200086917</span>],</span><br><span class="line">                    [<span class="number">104.2822265625</span>,<span class="number">30.107117887092357</span>]</span><br><span class="line">                ]</span><br><span class="line">            ]</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传送门：<a href="http://geojson.io/" target="_blank" rel="noopener">GeoJson在线预览</a>、<a href="http://datav.aliyun.com/tools/atlas/#&amp;lat=33.521903996156105&amp;lng=104.29849999999999&amp;zoom=4" target="_blank" rel="noopener">GeoJson在线获取</a></p>]]></content>
      
      
        <tags>
            
            <tag> echarts </tag>
            
            <tag> geoJson </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>NAT原理与穿透</title>
      <link href="/2019/07/14/NAT%E5%8E%9F%E7%90%86%E4%B8%8E%E7%A9%BF%E9%80%8F/"/>
      <url>/2019/07/14/NAT%E5%8E%9F%E7%90%86%E4%B8%8E%E7%A9%BF%E9%80%8F/</url>
      <content type="html"><![CDATA[<h4 id="NAT原理"><a href="#NAT原理" class="headerlink" title="NAT原理"></a>NAT原理</h4><p>网络地址转换<code>(NAT,Network Address Translation)</code>属接入广域网(WAN)技术，是一种将私有（保留）地址转化为合法IP地址的转换技术。下面介绍两类不同方式实现的NAT：</p><ol><li><h5 id="NAT-Network-Address-Translators-：称为基本的NAT"><a href="#NAT-Network-Address-Translators-：称为基本的NAT" class="headerlink" title="NAT(Network Address Translators)：称为基本的NAT"></a><code>NAT(Network Address Translators)</code>：称为基本的NAT</h5></li></ol><p><img src="/2019/07/14/NAT原理与穿透/1.gif" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在客户机时     192.168.0.8:4000——6.7.8.9:8000</span><br><span class="line">在网关时       1.2.3.4:4000——6.7.8.9:8000</span><br><span class="line">服务器C        6.7.8.9:8000</span><br><span class="line"></span><br><span class="line">其核心是替换IP地址而不是端口，这会导致192.168.0.8使用4000端口后，192.168.0.9如何处理？具体参考RFC 1631。基本上这种类型的NAT设备已经很少了。或许根本我们就没机会见到。</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><ol start="2"><li><p><code>NAPT(Network Address/Port Translators)</code>：其实这种才是我们常说的 NAT</p><p>NAPT的特点是在网关时，会使用网关的 IP，但端口会选择一个和临时会话对应的临时端口。如下图：</p><p><img src="/2019/07/14/NAT原理与穿透/2.gif" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在客户机时           192.168.0.8:4000——6.7.8.9:8000</span><br><span class="line">在网关时            1.2.3.4:62000——6.7.8.9:8000</span><br><span class="line">服务器C             6.7.8.9:8000</span><br><span class="line"></span><br><span class="line">网关上建立保持了一个1.2.3.4:62000的会话，用于192.168.0.8:4000与6.7.8.9:8000之间的通讯。</span><br></pre></td></tr></table></figure></li></ol><p>对于NAPT，又分了两个大的类型，差别在于，当两个内网用户同时与8000端口通信的处理方式不同：</p><h5 id="2-1、-Symmetric-NAT型-对称型"><a href="#2-1、-Symmetric-NAT型-对称型" class="headerlink" title="2.1、 Symmetric NAT型 (对称型)"></a>2.1、 <code>Symmetric</code> NAT型 (对称型)</h5><p><img src="/2019/07/14/NAT原理与穿透/3.gif" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在客户机时   192.168.0.8:4000——6.7.8.9:8000 192.168.0.8:4000——6.7.8.10:8000</span><br><span class="line">在网关时     1.2.3.4:62000——6.7.8.9:8000 1.2.3.4:62001——6.7.8.10:8000</span><br><span class="line">服务器C      6.7.8.9:8000</span><br><span class="line">服务器 D     6.7.8.10:8000</span><br><span class="line"></span><br><span class="line">这种形式会让很多p2p软件失灵。</span><br></pre></td></tr></table></figure><p><br></p><h5 id="2-2、Cone-NAT型（圆锥型）"><a href="#2-2、Cone-NAT型（圆锥型）" class="headerlink" title="2.2、Cone NAT型（圆锥型）"></a>2.2、Cone NAT型（圆锥型）</h5><p><img src="/2019/07/14/NAT原理与穿透/4.gif" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">在客户机时  192.168.0.8:4000——6.7.8.9:8000 192.168.0.8:4000——6.7.8.10:8000</span><br><span class="line">在网关时    1.2.3.4:62000——6.7.8.9:8000 1.2.3.4:62000——6.7.8.10:8000</span><br><span class="line">服务器C     6.7.8.9:8000</span><br><span class="line">服务器D     6.7.8.10:8000</span><br><span class="line"></span><br><span class="line">目前绝大多数属于这种。</span><br></pre></td></tr></table></figure><p><br></p><h5 id="Cone-NAT又分了3种类型："><a href="#Cone-NAT又分了3种类型：" class="headerlink" title="Cone NAT又分了3种类型："></a>Cone NAT又分了3种类型：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a)Full Cone NAT（完全圆锥型）：从同一私网地址端口192.168.0.8:4000发至公网的所有请求都映射成同一个公网地址端口1.2.3.4:62000 ，192.168.0.8可以收到任意外部主机发到1.2.3.4:62000的数据报。</span><br><span class="line"></span><br><span class="line">b)Address Restricted Cone NAT （地址限制圆锥型）：从同一私网地址端口192.168.0.8:4000发至公网的所有请求都映射成同一个公网地址端口1.2.3.4:62000，只有当内部主机192.168.0.8先给服务器C 6.7.8.9发送一个数据报后，192.168.0.8才能收到6.7.8.9发送到1.2.3.4:62000的数据报。</span><br><span class="line"></span><br><span class="line">c)Port Restricted Cone NAT（端口限制圆锥型）：从同一私网地址端口192.168.0.8:4000发至公网的所有请求都映射成同一个公网地址端口1.2.3.4:62000，只有当内部主机192.168.0.8先向外部主机地址端口6.7.8.9：8000发送一个数据报后，192.168.0.8才能收到6.7.8.9：8000发送到1.2.3.4:62000的数据报。</span><br></pre></td></tr></table></figure><p><br></p><h4 id="NAT穿透"><a href="#NAT穿透" class="headerlink" title="NAT穿透"></a>NAT穿透</h4><p><img src="/2019/07/14/NAT原理与穿透/5.gif" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A1在客户机时                192.168.0.8:4000——6.7.8.9:8000</span><br><span class="line">X1在网关时                   1.2.3.4:62000——6.7.8.9:8000</span><br><span class="line"></span><br><span class="line">B1在客户机时                192.168.1.8:4000——6.7.8.9:8000</span><br><span class="line">Y1在网关时                   1.2.3.5:31000——6.7.8.9:8000</span><br><span class="line"></span><br><span class="line">服务器C                       6.7.8.9:8000</span><br></pre></td></tr></table></figure><p><br></p><p>两内网用户要实现通过各自网关的直接呼叫，需要以下过程：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1、 客户机A1、B1顺利通过格子网关访问服务器C ，均没有问题（类似于登录）</span><br><span class="line"></span><br><span class="line">2、 服务器C保存了 A1、B1各自在其网关的信息（1.2.3.4:62000、1.2.3.5:31000）没有问题。并可将该信息告知A1、B2。</span><br><span class="line"></span><br><span class="line">3、 此时A1发送给B1网关的1.2.3.5:31000是否会被B1收到？答案是基本上不行（除非Y1设置为完全圆锥型，但这种设置非常少），因为Y1上检测到其存活的会话中没有一个的目的IP或端口于1.2.3.4:62000有关而将数据包全部丢弃！</span><br><span class="line"></span><br><span class="line">4、 此时要实现A1、B1通过X1、Y1来互访，需要服务器C告诉它们各自在自己的网关上建立“UDP隧道”，即命令A1发送一个 192.168.0.8:4000——1.2.3.5:31000的数据报，B1发送一个192.168.1.8:4000——1.2.3.4:62000的数据报，UDP形式，这样X1、Y1上均存在了IP端口相同的两个不同会话（很显然，这要求网关为Cone NAT型，否则，对称型Symmetric NAT设置网关将导致对不同会话开启了不同端口，而该端口无法为服务器和对方所知，也就没有意义）。</span><br><span class="line"></span><br><span class="line">5、 此时A1发给Y1，或者B1发给X1的数据报将不会被丢弃且正确的被对方收到.</span><br><span class="line"></span><br><span class="line">6.为了保证A1的路由器X1有与B1的session，A1要定时与B1做心跳包，同样，B1也要定时与A1做心跳，这样，双方的通信通道都是通的，就可以进行任意的通信了。</span><br></pre></td></tr></table></figure><p><br></p><h4 id="UDP和TCP打洞"><a href="#UDP和TCP打洞" class="headerlink" title="UDP和TCP打洞"></a>UDP和TCP打洞</h4><p>TCP和UDP在打洞上是不同的，这是因为伯克利socket（标准socket规范）的API造成的。</p><ul><li><strong>UDP的socket允许多个socket绑定到同一个本地端口，而TCP的socket则不允许</strong></li></ul><p>注：<code>TCP</code>按<code>CS</code>方式工作，一个端口只能用来<code>connect</code>或<code>listen</code>，所以需要使用<strong>端口重用</strong>，才能利用本地NAT的端口映射关系。要设置<code>SO_REUSEADDR</code>、<code>SO_REUSEPORT</code>这两个参数，需要系统支持<code>SO_REUSEPORT</code>。</p><p><br></p><h4 id="内网IP段"><a href="#内网IP段" class="headerlink" title="内网IP段"></a>内网IP段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.0.0 - 192.168.255.255</span><br><span class="line">172.16.0.0 - 172.31.255.255</span><br><span class="line">10.0.0.0 - 10.255.255.255</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> NAT </tag>
            
            <tag> 穿透 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>属性遍历的顺序</title>
      <link href="/2019/06/14/%E5%B1%9E%E6%80%A7%E9%81%8D%E5%8E%86%E7%9A%84%E9%A1%BA%E5%BA%8F/"/>
      <url>/2019/06/14/%E5%B1%9E%E6%80%A7%E9%81%8D%E5%8E%86%E7%9A%84%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h4 id="遍历对象属性的顺序"><a href="#遍历对象属性的顺序" class="headerlink" title="遍历对象属性的顺序"></a>遍历对象属性的顺序</h4><p>javascript对象属性的遍历顺序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">首先遍历所有数值键，按照数值升序排列</span><br><span class="line">其次遍历所有字符串键，按照加入时间升序排列</span><br><span class="line">最后遍历所有 Symbol 键，按照加入时间升序排列</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="遍历对象的方法"><a href="#遍历对象的方法" class="headerlink" title="遍历对象的方法"></a>遍历对象的方法</h4><p><strong>（1）for…in</strong></p><ul><li><code>for...in</code>循环遍历对象自身的和继承的可枚举属性（不含 Symbol 属性）。</li></ul><p><br></p><p><strong>（2）Object.keys(obj)</strong></p><ul><li><code>Object.keys</code>返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）的键名。</li></ul><p><br></p><p><strong>（3）Object.getOwnPropertyNames(obj)</strong></p><ul><li><code>Object.getOwnPropertyNames</code>返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）的键名。</li></ul><p><br></p><p><strong>（4）Object.getOwnPropertySymbols(obj)</strong></p><ul><li><code>Object.getOwnPropertySymbols</code>返回一个数组，包含对象自身的所有 Symbol 属性的键名。</li></ul><p><br></p><p><strong>（5）Reflect.ownKeys(obj)</strong></p><ul><li><code>Reflect.ownKeys</code>返回一个数组，包含对象自身的所有键名，不管键名是 Symbol 或字符串，也不管是否可枚举。</li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> 遍历 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>curl命令</title>
      <link href="/2019/06/12/curl%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/06/12/curl%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h4 id="curl命令"><a href="#curl命令" class="headerlink" title="curl命令"></a>curl命令</h4><p>curl是一个非常实用的、用来与服务器之间传输数据的工具；支持的协议包括 (<code>DICT, FILE, FTP, FTPS, GOPHER, HTTP, HTTPS, IMAP, IMAPS, LDAP, LDAPS, POP3, POP3S, RTMP, RTSP, SCP, SFTP, SMTP, SMTPS, TELNET and TFTP</code>)，curl设计为无用户交互下完成工作。</p><h5 id="1、语法"><a href="#1、语法" class="headerlink" title="1、语法"></a>1、语法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl [option] [url]</span><br></pre></td></tr></table></figure><ul><li>【URL技巧】 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">字符串：http://site.&#123;one,two,three&#125;.com </span><br><span class="line">字符匹配：ftp://ftp.letters.com/file[a-z].txt </span><br><span class="line">数字匹配：ftp://ftp.numerical.com/file[1-100].txt</span><br></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/aftree/p/9293071.html" target="_blank" rel="noopener">参考</a></p><p><br></p><h5 id="2、常见参数"><a href="#2、常见参数" class="headerlink" title="2、常见参数"></a>2、常见参数</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-A/--user-agent &lt;string&gt;            设置用户代理发送给服务器</span><br><span class="line">-e/--referer                        来源网址</span><br><span class="line"></span><br><span class="line">-b/--cookie &lt;name=string/file&gt;    cookie字符串或文件读取位置</span><br><span class="line">-c/--cookie-jar &lt;file&gt;              操作结束后把cookie写入到这个文件中</span><br><span class="line"></span><br><span class="line">-H/--header &lt;line&gt;                  自定义头信息传递给服务器</span><br><span class="line">-D/--dump-header &lt;file&gt;             把header信息写入到该文件中</span><br><span class="line"></span><br><span class="line">-X/--request &lt;command&gt;              指定什么命令</span><br><span class="line">-d/--data &lt;data&gt;                    HTTP POST方式传送数据</span><br><span class="line"></span><br><span class="line">-C/--continue-at &lt;offset&gt;           断点续转</span><br><span class="line">-f/--fail                           连接失败时不显示http错误</span><br><span class="line"></span><br><span class="line">-o/--output                         把输出写到该文件中</span><br><span class="line">-O/--remote-name                    把输出写到该文件中，保留远程文件的文件名</span><br><span class="line"></span><br><span class="line">-r/--range &lt;range&gt;                  检索来自HTTP/1.1或FTP服务器字节范围</span><br><span class="line">-s/--silent                         静音模式。不输出任何东西</span><br><span class="line">-T/--upload-file &lt;file&gt;             上传文件</span><br><span class="line">-u/--user &lt;user[:password]&gt;         设置服务器的用户和密码</span><br><span class="line">-w/--write-out [format]             什么输出完成后</span><br><span class="line">-x/--proxy &lt;host[:port]&gt;            在给定的端口上使用HTTP代理</span><br><span class="line">-#/--progress-bar                   进度条显示当前的传送状态</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h5 id="3、常见例子"><a href="#3、常见例子" class="headerlink" title="3、常见例子"></a>3、常见例子</h5><ul><li>保存访问的网页</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 使用linux的重定向功能保存</span><br><span class="line">curl http://www.linux.com &gt;&gt; linux.html</span><br><span class="line"></span><br><span class="line"># 可以使用curl的内置option:-o(小写)保存网页</span><br><span class="line">curl -o linux.html http://www.linux.com</span><br><span class="line"></span><br><span class="line"># 可以使用curl的内置option:-O(大写)保存网页中的文件</span><br><span class="line">curl -O http://www.linux.com/hello.sh</span><br></pre></td></tr></table></figure><p><br></p><ul><li>测试网页返回值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /dev/null -s -w %&#123;http_code&#125; www.linux.com</span><br></pre></td></tr></table></figure><p><br></p><ul><li>指定proxy服务器以及其端口</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -x 192.168.100.100:1080 http://www.linux.com</span><br></pre></td></tr></table></figure><p><br></p><ul><li>cookie信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 保存</span><br><span class="line">curl -c cookiec.txt  http://www.linux.com</span><br><span class="line"></span><br><span class="line"># 使用</span><br><span class="line">curl -b cookiec.txt http://www.linux.com</span><br></pre></td></tr></table></figure><p><br></p><ul><li>保存header信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl -D cookied.txt http://www.linux.com</span><br></pre></td></tr></table></figure><p><br></p><ul><li>模仿浏览器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -A &quot;Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.0)&quot; http://www.linux.com</span><br></pre></td></tr></table></figure><p><br></p><ul><li>伪造referer</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -e &quot;www.linux.com&quot; http://mail.linux.com</span><br></pre></td></tr></table></figure><p><br></p><ul><li>下载文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 使用内置option：-o(小写)</span><br><span class="line">curl -o dodo1.jpg http:www.linux.com/dodo1.JPG</span><br><span class="line"></span><br><span class="line"># 使用内置option：-O（大写)</span><br><span class="line">curl -O http://www.linux.com/dodo1.JPG</span><br><span class="line"></span><br><span class="line"># 循环下载</span><br><span class="line">curl -O http://www.linux.com/dodo[1-5].JPG</span><br><span class="line"></span><br><span class="line">#下载重命名</span><br><span class="line">curl -o #1_#2.JPG http://www.linux.com/&#123;hello,bb&#125;/dodo[1-5].JPG</span><br></pre></td></tr></table></figure><p><br></p><ul><li>分块下载</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -r 0-100 -o dodo1_part1.JPG http://www.linux.com/dodo1.JPG</span><br><span class="line">curl -r 100-200 -o dodo1_part2.JPG http://www.linux.com/dodo1.JPG</span><br><span class="line">curl -r 200- -o dodo1_part3.JPG http://www.linux.com/dodo1.JPG</span><br><span class="line">cat dodo1_part* &gt; dodo1.JPG</span><br></pre></td></tr></table></figure><p><br></p><ul><li>ftp下载文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># curl -O -u 用户名:密码 ftp://www.linux.com/dodo1.JPG</span><br><span class="line"># curl -O ftp://用户名:密码@www.linux.com/dodo1.JPG</span><br></pre></td></tr></table></figure><p><br></p><ul><li>显示下载进度条</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl -# -O http://www.linux.com/dodo1.JPG</span><br></pre></td></tr></table></figure><p><br></p><ul><li>不会显示下载进度信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># curl -s -O http://www.linux.com/dodo1.JPG</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">-a/--append                    上传文件时，附加到目标文件</span><br><span class="line">--anyauth                      可以使用“任何”身份验证方法</span><br><span class="line">--basic                        使用HTTP基本验证</span><br><span class="line">-B/--use-ascii                 使用ASCII文本传输</span><br><span class="line">-d/--data &lt;data&gt;               HTTP POST方式传送数据</span><br><span class="line">--data-ascii &lt;data&gt;            以ascii的方式post数据</span><br><span class="line">--data-binary &lt;data&gt;           以二进制的方式post数据</span><br><span class="line">--negotiate                    使用HTTP身份验证</span><br><span class="line">--digest                       使用数字身份验证</span><br><span class="line">--disable-eprt                 禁止使用EPRT或LPRT</span><br><span class="line">--disable-epsv                 禁止使用EPSV</span><br><span class="line">--egd-file &lt;file&gt;              为随机数据(SSL)设置EGD socket路径</span><br><span class="line">--tcp-nodelay                  使用TCP_NODELAY选项</span><br><span class="line">-E/--cert &lt;cert[:passwd]&gt;      客户端证书文件和密码 (SSL)</span><br><span class="line">--cert-type &lt;type&gt;             证书文件类型 (DER/PEM/ENG) (SSL)</span><br><span class="line">--key &lt;key&gt;                    私钥文件名 (SSL)</span><br><span class="line">--key-type &lt;type&gt;              私钥文件类型 (DER/PEM/ENG) (SSL)</span><br><span class="line">--pass  &lt;pass&gt;                 私钥密码 (SSL)</span><br><span class="line">--engine &lt;eng&gt;                 加密引擎使用 (SSL). &quot;--engine list&quot; for list</span><br><span class="line">--cacert &lt;file&gt;                CA证书 (SSL)</span><br><span class="line">--capath &lt;directory&gt;           CA目</span><br><span class="line">--ciphers &lt;list&gt;               SSL密码</span><br><span class="line">--compressed                   要求返回是压缩的形势 (using deflate or gzip)</span><br><span class="line">--connect-timeout &lt;seconds&gt;    设置最大请求时间</span><br><span class="line">--create-dirs                  建立本地目录的目录层次结构</span><br><span class="line">--crlf                         上传是把LF转变成CRLF</span><br><span class="line">--ftp-create-dirs              如果远程目录不存在，创建远程目录</span><br><span class="line">--ftp-method [multicwd/nocwd/singlecwd]    控制CWD的使用</span><br><span class="line">--ftp-pasv                     使用 PASV/EPSV 代替端口</span><br><span class="line">--ftp-skip-pasv-ip             使用PASV的时候,忽略该IP地址</span><br><span class="line">--ftp-ssl                      尝试用 SSL/TLS 来进行ftp数据传输</span><br><span class="line">--ftp-ssl-reqd                 要求用 SSL/TLS 来进行ftp数据传输</span><br><span class="line">-F/--form &lt;name=content&gt;       模拟http表单提交数据</span><br><span class="line">-form-string &lt;name=string&gt;     模拟http表单提交数据</span><br><span class="line">-g/--globoff                   禁用网址序列和范围使用&#123;&#125;和[]</span><br><span class="line">-G/--get                       以get的方式来发送数据</span><br><span class="line">-h/--help                      帮助</span><br><span class="line">-H/--header &lt;line&gt;             自定义头信息传递给服务器</span><br><span class="line">--ignore-content-length        忽略的HTTP头信息的长度</span><br><span class="line">-i/--include                   输出时包括protocol头信息</span><br><span class="line">-I/--head                      只显示文档信息</span><br><span class="line">-j/--junk-session-cookies      读取文件时忽略session cookie</span><br><span class="line">--interface &lt;interface&gt;        使用指定网络接口/地址</span><br><span class="line">--krb4 &lt;level&gt;                 使用指定安全级别的krb4</span><br><span class="line">-k/--insecure                  允许不使用证书到SSL站点</span><br><span class="line">-K/--config                    指定的配置文件读取</span><br><span class="line">-l/--list-only                 列出ftp目录下的文件名称</span><br><span class="line">--limit-rate &lt;rate&gt;            设置传输速度</span><br><span class="line">--local-port&lt;NUM&gt;              强制使用本地端口号</span><br><span class="line">-m/--max-time &lt;seconds&gt;        设置最大传输时间</span><br><span class="line">--max-redirs &lt;num&gt;             设置最大读取的目录数</span><br><span class="line">--max-filesize &lt;bytes&gt;         设置最大下载的文件总量</span><br><span class="line">-M/--manual                    显示全手动</span><br><span class="line">-n/--netrc                     从netrc文件中读取用户名和密码</span><br><span class="line">--netrc-optional               使用 .netrc 或者 URL来覆盖-n</span><br><span class="line">--ntlm                         使用 HTTP NTLM 身份验证</span><br><span class="line">-N/--no-buffer                 禁用缓冲输出</span><br><span class="line">-p/--proxytunnel               使用HTTP代理</span><br><span class="line">--proxy-anyauth                选择任一代理身份验证方法</span><br><span class="line">--proxy-basic                  在代理上使用基本身份验证</span><br><span class="line">--proxy-digest                 在代理上使用数字身份验证</span><br><span class="line">--proxy-ntlm                   在代理上使用ntlm身份验证</span><br><span class="line">-P/--ftp-port &lt;address&gt;        使用端口地址，而不是使用PASV</span><br><span class="line">-Q/--quote &lt;cmd&gt;               文件传输前，发送命令到服务器</span><br><span class="line">--range-file                   读取（SSL）的随机文件</span><br><span class="line">-R/--remote-time               在本地生成文件时，保留远程文件时间</span><br><span class="line">--retry &lt;num&gt;                  传输出现问题时，重试的次数</span><br><span class="line">--retry-delay &lt;seconds&gt;        传输出现问题时，设置重试间隔时间</span><br><span class="line">--retry-max-time &lt;seconds&gt;     传输出现问题时，设置最大重试时间</span><br><span class="line">-S/--show-error                显示错误</span><br><span class="line">--socks4 &lt;host[:port]&gt;         用socks4代理给定主机和端口</span><br><span class="line">--socks5 &lt;host[:port]&gt;         用socks5代理给定主机和端口</span><br><span class="line">-t/--telnet-option &lt;OPT=val&gt;   Telnet选项设置</span><br><span class="line">--trace &lt;file&gt;                 对指定文件进行debug</span><br><span class="line">--trace-ascii &lt;file&gt;           Like --跟踪但没有hex输出</span><br><span class="line">--trace-time                   跟踪/详细输出时，添加时间戳</span><br><span class="line">--url &lt;URL&gt;                    Spet URL to work with</span><br><span class="line">-U/--proxy-user &lt;user[:password]&gt;  设置代理用户名和密码</span><br><span class="line">-V/--version                   显示版本信息</span><br><span class="line">-X/--request &lt;command&gt;         指定什么命令</span><br><span class="line">-y/--speed-time                放弃限速所要的时间。默认为30</span><br><span class="line">-Y/--speed-limit               停止传输速度的限制，速度时间&apos;秒</span><br><span class="line">-z/--time-cond                 传送时间设置</span><br><span class="line">-0/--http1.0                   使用HTTP 1.0</span><br><span class="line">-1/--tlsv1                     使用TLSv1（SSL）</span><br><span class="line">-2/--sslv2                     使用SSLv2的（SSL）</span><br><span class="line">-3/--sslv3                     使用的SSLv3（SSL）</span><br><span class="line">--3p-quote                     like -Q for the source URL for 3rd party transfer</span><br><span class="line">--3p-url                       使用url，进行第三方传送</span><br><span class="line">--3p-user                      使用用户名和密码，进行第三方传送</span><br><span class="line">-4/--ipv4                      使用IP4</span><br><span class="line">-6/--ipv6                      使用IP6</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> curl </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql-导出导入</title>
      <link href="/2019/06/11/mysql-%E5%AF%BC%E5%87%BA%E5%AF%BC%E5%85%A5/"/>
      <url>/2019/06/11/mysql-%E5%AF%BC%E5%87%BA%E5%AF%BC%E5%85%A5/</url>
      <content type="html"><![CDATA[<h4 id="导出数据"><a href="#导出数据" class="headerlink" title="导出数据"></a>导出数据</h4><p>导出文件默认是存在<code>mysql\bin</code>目录下</p><h5 id="导出数据库"><a href="#导出数据库" class="headerlink" title="导出数据库"></a>导出数据库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mysqldump -u 用户名 -p 数据库名 &gt; 导出的文件名</span><br><span class="line">mysqldump -u user_name -p123456 database_name &gt; outfile_name.sql</span><br></pre></td></tr></table></figure><h5 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u 用户名 -p 数据库名 表名&gt; 导出的文件名</span><br><span class="line">mysqldump -u user_name -p database_name table_name &gt; outfile_name.sql</span><br></pre></td></tr></table></figure><h5 id="导出数据库结构"><a href="#导出数据库结构" class="headerlink" title="导出数据库结构"></a>导出数据库结构</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u user_name -p -d –add-drop-table database_name &gt; outfile_name.sql</span><br><span class="line"># -d 没有数据 –add-drop-table 在每个create语句之前增加一个drop table</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h4><h5 id="mysql-命令"><a href="#mysql-命令" class="headerlink" title="mysql 命令"></a>mysql 命令</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># mysql -u用户名 -p密码 &lt; 待导入文件.sql</span><br><span class="line">mysql -uroot -p123456 &lt; runoob.sql</span><br></pre></td></tr></table></figure><p><br></p><h5 id="source-命令"><a href="#source-命令" class="headerlink" title="source 命令"></a>source 命令</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database abc;      # 创建数据库</span><br><span class="line">mysql&gt; use abc;                  # 使用已创建的数据库 </span><br><span class="line">mysql&gt; set names utf8;           # 设置编码</span><br><span class="line">mysql&gt; source /home/abc/abc.sql  # 导入备份数据库</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js-match</title>
      <link href="/2019/05/30/js-match/"/>
      <url>/2019/05/30/js-match/</url>
      <content type="html"><![CDATA[<h4 id="match"><a href="#match" class="headerlink" title="match"></a>match</h4><p>检索返回一个字符串匹配正则表达式的的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.match(regexp)</span><br></pre></td></tr></table></figure><ul><li><p>参数</p></li><li><p>regexp：如果没有任何参数并直接使用match() 方法 ，你将会得到一 个<strong>包含空字符串的数组</strong></p></li><li><p>返回值</p><ul><li>如果使用g标志，则将返回与完整正则表达式匹配的所有结果，但不会返回捕获组，或者未匹配 <code>null</code></li><li>如果未使用g标志，则仅返回第一个完整匹配及其相关的捕获组。 在这种情况下，返回的项目将具有如下所述的其他属性，或者未匹配 <code>null</code></li></ul></li><li><p>附加属性</p><p>如上所述，匹配的结果包含如下所述的附加特性</p><ul><li><code>groups</code>: 一个捕获组数组或 <code>undefined</code>（如果没有定义命名捕获组）</li><li><code>index</code>: 匹配的结果的开始位置</li><li><code>input</code>: 搜索的字符串</li></ul></li></ul><a id="more"></a><p><br></p><p>注：如果正则表达式不包含 <code>g</code>标志，<code>str.match()</code> 将返回与 <code>RegExp.exec()</code>相同的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'For more information, see Chapter 3.4.5.1'</span>;</span><br><span class="line"><span class="keyword">let</span> re = <span class="regexp">/see (chapter \d+(\.\d)*)/i</span>;</span><br><span class="line"><span class="keyword">let</span> found = str.match(re);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(found);</span><br><span class="line"></span><br><span class="line"><span class="comment">// logs [ 'see Chapter 3.4.5.1',</span></span><br><span class="line"><span class="comment">//        'Chapter 3.4.5.1',</span></span><br><span class="line"><span class="comment">//        '.1',</span></span><br><span class="line"><span class="comment">//        index: 22,</span></span><br><span class="line"><span class="comment">//        input: 'For more information, see Chapter 3.4.5.1' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 'see Chapter 3.4.5.1' 是整个匹配。</span></span><br><span class="line"><span class="comment">// 'Chapter 3.4.5.1' 被'(chapter \d+(\.\d)*)'捕获。</span></span><br><span class="line"><span class="comment">// '.1' 是被'(\.\d)'捕获的最后一个值。</span></span><br><span class="line"><span class="comment">// 'index' 属性(22) 是整个匹配从零开始的索引。</span></span><br><span class="line"><span class="comment">// 'input' 属性是被解析的原始字符串。</span></span><br></pre></td></tr></table></figure><h5 id="命名捕获分组"><a href="#命名捕获分组" class="headerlink" title="命名捕获分组"></a>命名捕获分组</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toLocalDate</span>(<span class="params">date</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> date.replace (</span><br><span class="line">  /(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)-(?&lt;year&gt;\d&#123;4&#125;)/, </span><br><span class="line">  "$&lt;day&gt;-$&lt;month&gt;-$&lt;year&gt;"</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> match </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>node-http模块</title>
      <link href="/2019/05/08/node-http%E6%A8%A1%E5%9D%97/"/>
      <url>/2019/05/08/node-http%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h4 id="http模块"><a href="#http模块" class="headerlink" title="http模块"></a>http模块</h4><p>nodejs中的http模块中封装了一个HTPP服务器和一个简易的HTTP客户端</p><p>http.Server是一个<strong>基于事件</strong>的http服务器</p><p>http.request则是一个http客户端工具，用于向http服务器发起请求</p><a id="more"></a><p><br></p><h4 id="http-Server"><a href="#http-Server" class="headerlink" title="http.Server"></a>http.Server</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> http.Server();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数req和res分别是http.IncomingMessage和http.ServerResponse的实例</span></span><br><span class="line">server.on(<span class="string">"request"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">"content-type"</span>: <span class="string">"text/plain"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    res.write(<span class="string">"hello nodejs"</span>);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p>http.Server提供的事件如下：</p><ul><li>request：当客户端请求到来时，该事件被触发，提供两个参数req和res</li><li>connection：当TCP连接建立时，该事件被触发，提供一个参数socket，是net.Socket的实例</li><li>close：当服务器关闭时，触发事件（注意不是在用户断开连接时）</li></ul><p><br></p><h5 id="http-IncomingMessage"><a href="#http-IncomingMessage" class="headerlink" title="http.IncomingMessage"></a>http.IncomingMessage</h5><p>http.IncomingMessage是HTTP请求的信息，一般由http.Server的request事件发送，并作为第一个参数传递，http请求一般可以分为两部分：请求头和请求体。其提供了3个事件，如下：</p><ul><li>data：当请求体数据到来时，该事件被触发，该事件提供一个参数chunk，表示接受的数据，如果该事件没有被监听，则请求体会被抛弃，该事件可能会被调用多次</li><li>end：当请求体数据传输完毕时，该事件会被触发，此后不会再有数据</li><li>close：用户当前请求结束时，该事件被触发，不同于end，如果用户强制终止了传输，也是用close</li></ul><p><br></p><h5 id="http-ServerResponse"><a href="#http-ServerResponse" class="headerlink" title="http.ServerResponse"></a>http.ServerResponse</h5><p>http.ServerResponse是返回给客户端的信息，一般由http.Server的request事件发送，并作为第二个参数传递，它有三个重要的成员函数，用于返回响应头、响应内容以及结束请求</p><ul><li>res.writeHead(statusCode,[heasers])：向请求的客户端发送响应头，该函数在一个请求中最多调用一次，如果不调用，则会自动生成一个响应头</li><li>res.write(data,[encoding])：想请求的客户端发送相应内容，data是一个buffer或者字符串，如果data是字符串，则需要制定编码方式，默认为utf-8，在res.end调用之前可以多次调用</li><li>res.end([data],[encoding])：结束响应，告知客户端所有发送已经结束，当所有要返回的内容发送完毕时，该函数必需被调用一次，两个可选参数与res.write()相同。如果不调用这个函数，客户端将用于处于等待状态。</li></ul><p><br></p><h4 id="http-request"><a href="#http-request" class="headerlink" title="http.request"></a>http.request</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http.request(options,callback)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> querystring = <span class="built_in">require</span>(<span class="string">"querystring"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> postData = querystring.stringify(&#123;</span><br><span class="line">    <span class="string">"content"</span>: <span class="string">"我真的只是测试一下"</span>,</span><br><span class="line">    <span class="string">"mid"</span>: <span class="number">8837</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    hostname: <span class="string">"www.imooc.com"</span>,</span><br><span class="line">    port: <span class="number">80</span>,</span><br><span class="line">    path: <span class="string">"/course/document"</span>,</span><br><span class="line">    method: <span class="string">"POST"</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">"Accept"</span>: <span class="string">"application/json, text/javascript, */*; q=0.01"</span>,</span><br><span class="line">        <span class="string">"Accept-Encoding"</span>: <span class="string">"gzip, deflate"</span>,</span><br><span class="line">        <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8"</span>,</span><br><span class="line">        <span class="string">"Connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">        <span class="string">"Content-Length"</span>: postData.length,</span><br><span class="line">        <span class="string">"Content-Type"</span>: <span class="string">"application/x-www-form-urlencoded; charset=UTF-8"</span>,</span><br><span class="line">        <span class="string">"Host"</span>: <span class="string">"www.imooc.com"</span>,</span><br><span class="line">        <span class="string">"Origin"</span>: <span class="string">"http://www.imooc.com"</span>,</span><br><span class="line">        <span class="string">"Referer"</span>: <span class="string">"http://www.imooc.com/video/8837"</span>,</span><br><span class="line">        <span class="string">"X-Requested-With"</span>: <span class="string">"XMLHttpRequest"</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chunk);</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"评论完毕！"</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(res.statusCode);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">req.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.message);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">req.write(postData);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><p><br></p><h5 id="http-ClientRequest"><a href="#http-ClientRequest" class="headerlink" title="http.ClientRequest"></a>http.ClientRequest</h5><p>http.ClientRequest是由http.request或者是http.get返回产生的对象，表示一个已经产生而且正在进行中的HTPP请求，提供一个response事件，也就是我们使用http.get和http.request方法中的回调函数所绑定的对象，我们可以显式地绑定这个事件的监听函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = &#123;</span><br><span class="line">    hostname: <span class="string">"cn.bing.com"</span>,</span><br><span class="line">    port: <span class="number">80</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = http.request(options);</span><br><span class="line">req.on(<span class="string">"response"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    res.setEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">    res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(chunk.toString())</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(res.statusCode);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">req.on(<span class="string">"error"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err.message);</span><br><span class="line">&#125;);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><p>http.ClientRequest也提供了write和end函数，用于向服务器发送请求体，通常用于POST、PUT等操作，<strong>所有写操作都必须调用end函数来通知服务器，否则请求无效</strong>。此外，这个对象还提供了abort()、setTimeout()等方法，具体可以参考文档。</p><p><br></p><h5 id="http-ClientReponse"><a href="#http-ClientReponse" class="headerlink" title="http.ClientReponse"></a>http.ClientReponse</h5><p>与http.ServerRequest相似，提供了三个事件，data、end、close，分别在数据到达、传输结束和连接结束时触发，其中data事件传递一个参数chunk，表示接受到的数据。</p><p>此外，这个对象提供了几个特殊的函数</p><ul><li>response。setEncoding([encoding])：设置默认的编码，当data事件被触发时，数据将会以encoding编码，默认值是null，也就是不编码，以buffer形式存储</li><li>response.pause()：暂停结束数据和发送事件，方便实现下载功能</li><li>response.resume()：从暂停的状态中恢复</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">"http"</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> options = <span class="string">"http://www.sysu.edu.cn/2012/cn/jgsz/yx/index.htm"</span>;</span><br><span class="line"><span class="keyword">var</span> htmlData = <span class="string">""</span></span><br><span class="line"><span class="keyword">var</span> req = http.request(options, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    res.on(<span class="string">"data"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">        htmlData += chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    res.on(<span class="string">"end"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> $ = cheerio.load(htmlData);</span><br><span class="line">        <span class="keyword">var</span> textcontent = $(<span class="string">"tr"</span>).text();</span><br><span class="line">        fs.writeFile(<span class="string">"./school.txt"</span>, textcontent, <span class="string">"utf-8"</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> nodejs </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git-tag命令</title>
      <link href="/2019/05/07/git-tag%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/05/07/git-tag%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h5 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 默认标签是打在最新提交的commit上的</span><br><span class="line">git tag &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"># 在特定commit_id上打标签</span><br><span class="line">git tag &lt;tagname&gt; commit_id</span><br><span class="line"></span><br><span class="line"># 创建带有说明的标签</span><br><span class="line">git tag -a &lt;tagname&gt; -m "msg" commit_id</span><br></pre></td></tr></table></figure><p><br></p><h5 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查看标签,可加上参数 -l(列表形式列出） -n(附加说明)</span><br><span class="line"># 标签不是按时间顺序列出，而是按字母排序的</span><br><span class="line">git tag [-l -n]</span><br><span class="line"></span><br><span class="line"># 查看某个标签信息</span><br><span class="line">git show &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"># 查看符合检索条件的标签 </span><br><span class="line">git tag -l <span class="number">1</span>.*.*</span><br></pre></td></tr></table></figure><p><br></p><h5 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 删除本地标签</span><br><span class="line">git tag -d &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"># 删除一个远程标签</span><br><span class="line">git push origin :&lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"># Git v1.<span class="number">7</span>.<span class="number">0</span> </span><br><span class="line"># 删除一个远程标签</span><br><span class="line">git push origin --delete tag &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"># 删除一个远程分支</span><br><span class="line">git push origin --delete &lt;branchName&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h5 id="远程推送标签"><a href="#远程推送标签" class="headerlink" title="远程推送标签"></a>远程推送标签</h5><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 推送某个标签到远程</span><br><span class="line">git push origin &lt;tagname&gt;</span><br><span class="line"></span><br><span class="line"># 一次性推送全部尚未推送到远程的本地标签</span><br><span class="line">git push origin --tags</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> tag </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>onstorage</title>
      <link href="/2019/04/29/onstorage/"/>
      <url>/2019/04/29/onstorage/</url>
      <content type="html"><![CDATA[<h4 id="触发时机"><a href="#触发时机" class="headerlink" title="触发时机"></a>触发时机</h4><p><code>Storage</code> 对象发生变化时，<code>StorageEvent</code>事件会触发</p><ul><li><code>创建/更新/删除</code>数据项时，重复设置<strong>相同的键值</strong>不会触发该事件</li><li><code>Storage.clear()</code>方法至多<strong>触发一次</strong>该事件</li><li>在<strong>同一个页面</strong>内发生的改变不会起作用，在相同域名下的<strong>其他页面</strong>发生的改变才会起作用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'storage'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.my-key'</span>).textContent = e.key;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.my-old'</span>).textContent = e.oldValue;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.my-new'</span>).textContent = e.newValue;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.my-url'</span>).textContent = e.url;</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.my-storage'</span>).textContent = e.storageArea;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> onstorage </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux-inode</title>
      <link href="/2019/04/25/linux-inode/"/>
      <url>/2019/04/25/linux-inode/</url>
      <content type="html"><![CDATA[<h4 id="一、inode是什么？"><a href="#一、inode是什么？" class="headerlink" title="一、inode是什么？"></a>一、inode是什么？</h4><p>文件储存在硬盘上，硬盘的最小存储单位叫做”扇区”。每个扇区储存512字节。操作系统读取硬盘的时候，不会一个个扇区地读取，这样效率太低，而是一次性连续读取多个扇区，即一次性读取一个”块”。那么很显然，我们还必须找到一个地方储存文件的元信息，比如文件的创建者、文件的创建日期、文件的大小等等。这种<strong>储存文件元信息的区域就叫做inode</strong>。每一个文件都有对应的inode，里面包含了与该文件有关的一些信息。</p><p><br></p><h4 id="二、inode的内容"><a href="#二、inode的内容" class="headerlink" title="二、inode的内容"></a>二、inode的内容</h4><p>inode包含文件的元信息，具体来说有以下内容：</p><ul><li>文件的字节数</li><li>文件拥有者的User ID</li><li>文件的Group ID</li><li>文件的读、写、执行权限</li><li>文件的时间戳，共有三个<ul><li>ctime指inode上一次变动的时间</li><li>mtime指文件内容上一次变动的时间</li><li>atime指文件上一次打开的时间</li></ul></li><li>链接数，即有多少文件名指向这个inode</li><li>文件数据block的位置</li></ul><p>可以用stat命令，查看某个文件的inode信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stat example.txt</span><br></pre></td></tr></table></figure><p>总之，除了文件名以外的所有文件信息，都存在inode之中。至于为什么没有文件名，下文会有详细解释。</p><a id="more"></a><p><br></p><h4 id="三、inode的大小"><a href="#三、inode的大小" class="headerlink" title="三、inode的大小"></a>三、inode的大小</h4><p>inode也会消耗硬盘空间，所以硬盘格式化的时候，操作系统自动将硬盘分成两个区域。一个是<strong>数据区</strong>，存放文件数据；另一个是<strong>inode区</strong>（inode table），存放inode所包含的信息。每个inode节点的大小，一般是128字节或256字节。<strong>inode节点的总数，在格式化时就给定，一般是每1KB或每2KB就设置一个inode</strong>。</p><p>查看每个硬盘分区的inode总数和已经使用的数量，可以使用df命令。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -i</span><br></pre></td></tr></table></figure><p>查看每个inode节点的大小，可以用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dumpe2fs -h /dev/hda | grep &quot;Inode size&quot;</span><br></pre></td></tr></table></figure><p>由于每个文件都必须有一个inode，因此有可能发生inode已经用光，但是硬盘还未存满的情况。这时，就无法在硬盘上创建新文件。</p><p><br></p><h4 id="四、inode号码"><a href="#四、inode号码" class="headerlink" title="四、inode号码"></a>四、inode号码</h4><p>每个inode都有一个号码，操作系统用inode号码来识别不同的文件。</p><p><strong><code>Unix/linux</code>系统内部不使用文件名，而使用inode号码来识别文件。对于系统来说，文件名只是inode号码便于识别的别称或者绰号。</strong></p><p>使用ls -i命令，可以看到文件名对应的inode号码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -i example.txt</span><br></pre></td></tr></table></figure><p><br></p><h4 id="五、目录文件"><a href="#五、目录文件" class="headerlink" title="五、目录文件"></a>五、目录文件</h4><p>Unix/Linux系统中，目录（directory）也是一种文件。打开目录，实际上就是打开<strong>目录文件</strong>。</p><p>目录文件的结构非常简单，就是一系列<strong>目录项（dirent）</strong>的列表。<strong>每个目录项，由两部分组成：所包含文件的文件名，以及该文件名对应的inode号码。</strong></p><p>ls命令只列出目录文件中的所有文件名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /etc</span><br></pre></td></tr></table></figure><p>ls -i命令列出整个目录文件，即文件名和inode号码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -i /etc</span><br></pre></td></tr></table></figure><p>如果要查看文件的详细信息，就必须根据inode号码，访问inode节点，读取信息。ls -l命令列出文件的详细信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l /etc</span><br></pre></td></tr></table></figure><p><strong>由于目录文件内只有文件名和inode号码，所以如果只有读权限，只能获取文件名，无法获取其他信息，因为其他信息都储存在inode节点中，而读取inode节点内的信息需要目录文件的执行权限（x）</strong></p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> inode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux-ls</title>
      <link href="/2019/04/25/linux-ls/"/>
      <url>/2019/04/25/linux-ls/</url>
      <content type="html"><![CDATA[<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls [-alrtAFR] [name...]</span><br></pre></td></tr></table></figure><ul><li><code>-a</code> 显示所有文件及目录 <ul><li>ls内定将文件名或目录名称开头为<code>.</code>的视为隐藏档，不会列出</li></ul></li><li><code>-l</code>除文件名称外，亦将文件型态、权限、拥有者、文件大小等资讯详细列出</li><li><code>-r</code> 将文件以相反次序显示(原定依英文字母次序)</li><li><code>-t</code> 将文件依建立时间之先后次序列出</li><li><code>-A</code> 同 <code>-a</code> ，但不列出 <code>.</code> (目前目录) 及 <code>..</code> (父目录)</li><li><code>-F</code> 在列出的文件名称后加一符号；例如可执行档则加 “*”, 目录则加 “/“</li><li><code>-R</code> 若目录下有文件，则以下之文件亦皆依序列出</li><li><code>name</code>指定工作目录，支持通配符；默认为当前目录</li></ul><a id="more"></a><p><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出目前工作目录下所有名称是 s 开头的文件</span></span><br><span class="line">ls -ltr s*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将 /bin 目录以下所有目录及文件详细资料列出</span></span><br><span class="line">ls -lR /bin</span><br></pre></td></tr></table></figure><h4 id="反斜杠“-”调用别名的原命令"><a href="#反斜杠“-”调用别名的原命令" class="headerlink" title="反斜杠“\”调用别名的原命令"></a>反斜杠“\”调用别名的原命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> linux命令行下使用反斜杠“\”调用别名的原命令 </span></span><br><span class="line">\ls</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ls </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux-for循环</title>
      <link href="/2019/04/25/linux-for%E5%BE%AA%E7%8E%AF/"/>
      <url>/2019/04/25/linux-for%E5%BE%AA%E7%8E%AF/</url>
      <content type="html"><![CDATA[<h4 id="for循环结构"><a href="#for循环结构" class="headerlink" title="for循环结构"></a>for循环结构</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 语法一</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> 变量 <span class="keyword">in</span> 值1 值2 值3..</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">      程序块儿</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    <span class="keyword">done</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in 1 2 3 4 5 </span><br><span class="line">  do</span><br><span class="line">    echo "$i--&gt;$(uptime)"</span><br><span class="line">  done</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 语法二</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> 变量 `命令`</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">      程序块儿</span></span><br><span class="line"><span class="meta">#</span><span class="bash">    <span class="keyword">done</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">for i in `ls ./*.tar.gz` </span><br><span class="line">   do</span><br><span class="line">     tar -zxvf $i &gt;/dev/null</span><br><span class="line">   done</span><br><span class="line"></span><br><span class="line">for name in `ls | grep "name"`; do mv $name ./temp/; done</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 语法三</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span> ((初始值; 循环控制; 变量变化))</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="keyword">do</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash">     程序块儿</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   <span class="keyword">done</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意变量赋值的时候,=两边绝对不能有空格</span></span><br><span class="line">sum=0</span><br><span class="line">for (( i=1; i&lt;=100; i++ ))</span><br><span class="line">  do  </span><br><span class="line">   sum=$(( $sum + $i ))</span><br><span class="line">  done</span><br><span class="line">echo "1+2+3+...+100=$sum"</span><br></pre></td></tr></table></figure><p>注：linux下for循环中可以使用<code>break</code>和 <code>continue</code>关键字来跳出循环， 和java 用法一致</p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> for </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>load和DOMContentLoaded</title>
      <link href="/2019/04/24/load%E5%92%8CDOMContentLoaded/"/>
      <url>/2019/04/24/load%E5%92%8CDOMContentLoaded/</url>
      <content type="html"><![CDATA[<h4 id="load"><a href="#load" class="headerlink" title="load"></a>load</h4><p>当一个资源及其依赖资源已完成加载时，将触发load事件</p><p><br></p><h4 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h4><p>当初始的 <strong>HTML</strong> 文档被完全加载和解析完成之后，<strong>DOMContentLoaded</strong> 事件被触发，而无需等待样式表、图像和子框架的完成加载。</p><p>注意：<strong>DOMContentLoaded</strong> 事件必须等待其所属script之前的样式表加载解析完成才会触发。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// css.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    sleep(<span class="number">3</span>);   </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css.php"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'3 seconds passed'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 同步 JavaScript 会暂停 DOM 的解析 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果将link置于script之后，就会立即打印 --&gt;</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="阻塞解析"><a href="#阻塞解析" class="headerlink" title="阻塞解析"></a>阻塞解析</h4><p>1、在<code>Dom解析</code>过程中，如果遇到<code>&lt;script&gt;</code>标签的时候，便会停止解析，转而去处理脚本。</p><p>2、如果脚本是内联的，浏览器会先去执行这段内联的脚本，如果是外链的，那么先会去加载脚本，然后执行。在处理完脚本之后，浏览器便继续解析HTML文档。</p><p>3、同时<code>javascript</code>的执行会受到标签前面<strong>样式文件</strong>的影响。如果在标签前面有样式文件，需要样式文件加载并解析完毕后才执行脚本。这是因为<code>javascript</code>可以查询对象的样式。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> load </tag>
            
            <tag> DOMContentLoaded </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MAC地址</title>
      <link href="/2019/04/17/mac%E5%9C%B0%E5%9D%80/"/>
      <url>/2019/04/17/mac%E5%9C%B0%E5%9D%80/</url>
      <content type="html"><![CDATA[<h4 id="ARP广播"><a href="#ARP广播" class="headerlink" title="ARP广播"></a>ARP广播</h4><h5 id="1、目标IP与自己在同一网段"><a href="#1、目标IP与自己在同一网段" class="headerlink" title="1、目标IP与自己在同一网段"></a>1、目标IP与自己在同一网段</h5><ul><li><strong>arp高速缓存有目标IP的MAC地址</strong>：直接发送到该物理地址</li><li><strong>arp高速缓存没有目标IP的MAC地址</strong>：发送ARP广播请求目标IP的MAC地址，缓存该MAC地址，然后发数据报到该MAC地址。</li></ul><a id="more"></a><p><br></p><h5 id="2、目标IP与自己不在同一个网段"><a href="#2、目标IP与自己不在同一个网段" class="headerlink" title="2、目标IP与自己不在同一个网段"></a>2、目标IP与自己不在同一个网段</h5><p><strong>这种情况需要将包发给默认网关，所以主要获取网关的MAC地址</strong></p><ul><li><strong>arp高速缓存有默认网关的MAC地址</strong>：直接发送IP数据报道默认网关，再由网关转发到外网。</li><li><strong>arp高速缓存没有默认网关的MAC地址</strong> ：还是发送ARP广播请求默认网关的MAC地址，缓存该地址，并且发送数据报到网关</li></ul><p><br></p><h4 id="MAC地址变换"><a href="#MAC地址变换" class="headerlink" title="MAC地址变换"></a>MAC地址变换</h4><h5 id="数据包在传输过程，MAC地址是如何变换的？"><a href="#数据包在传输过程，MAC地址是如何变换的？" class="headerlink" title="数据包在传输过程，MAC地址是如何变换的？"></a>数据包在传输过程，MAC地址是如何变换的？</h5><p>在不考虑代理的情况下，数据包每到一个三层，就把源MAC替换成自己的出接口MAC，目标MAC替换成下一跳MAC，不跨三层不替换。</p><p>注：<strong>应用层、表示层、会话层、传输层、网络层、数据链路层、物理层</strong></p><p><br></p><h4 id="多个MAC地址"><a href="#多个MAC地址" class="headerlink" title="多个MAC地址"></a>多个MAC地址</h4><p>一台设备若有一或多个网卡，则每个网卡都需要并会有一个唯一的MAC地址。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> NAT </tag>
            
            <tag> ARP </tag>
            
            <tag> MAC </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数组reduce</title>
      <link href="/2019/04/08/%E6%95%B0%E7%BB%84reduce/"/>
      <url>/2019/04/08/%E6%95%B0%E7%BB%84reduce/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.reduce(callback[, initialValue])</span><br></pre></td></tr></table></figure><ul><li><code>callback</code>执行数组中每个值的函数，包含四个参数：<ul><li><code>accumulator</code>累计器，累计回调的返回值<ul><li>它是上一次调用回调时返回的累积值，或<code>initialValue</code></li></ul></li><li><code>currentValue</code>数组中正在处理的元素</li><li><code>currentIndex</code>数组中正在处理的当前元素的索引<ul><li>如果提供了<code>initialValue</code>，则起始索引号为0，否则为1</li></ul></li><li><code>array</code>调用<code>reduce()</code>的数组</li></ul></li><li><code>initialValue</code>作为第一次调用 <code>callback函数时</code>的第一个参数的值<ul><li>如果没有提供初始值，则将使用数组中的第一个元素</li><li>在没有初始值的空数组上调用 reduce 将报错</li></ul></li></ul><a id="more"></a><p>注：如果没有提供<code>initialValue</code>，reduce 会从索引1的地方开始执行 callback 方法，跳过第一个索引。如果提供<code>initialValue</code>，从索引0开始。</p><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> initialValue = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum = [&#123;<span class="attr">x</span>: <span class="number">1</span>&#125;, &#123;<span class="attr">x</span>:<span class="number">2</span>&#125;, &#123;<span class="attr">x</span>:<span class="number">3</span>&#125;].reduce(<span class="function"><span class="keyword">function</span> (<span class="params">accumulator, currentValue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue.x;</span><br><span class="line">&#125;,initialValue)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// logs 6</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 降维</span></span><br><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(<span class="function">(<span class="params"> acc, cur </span>) =&gt;</span> acc.concat(cur),[]);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> reduce </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数组并交差集</title>
      <link href="/2019/04/08/%E6%95%B0%E7%BB%84%E5%B9%B6%E4%BA%A4%E5%B7%AE%E9%9B%86/"/>
      <url>/2019/04/08/%E6%95%B0%E7%BB%84%E5%B9%B6%E4%BA%A4%E5%B7%AE%E9%9B%86/</url>
      <content type="html"><![CDATA[<p>现有两数组<code>a = [1, 2, 3]</code>，<code>b = [2, 4, 5]</code>，求a，b数组的并集，交集和差集</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="keyword">let</span> union = a.concat(b.filter(<span class="function"><span class="params">v</span> =&gt;</span> !a.includes(v)));</span><br><span class="line"><span class="comment">// [1,2,3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> intersection = a.filter(<span class="function"><span class="params">v</span> =&gt;</span> b.includes(v));</span><br><span class="line"><span class="comment">// [2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集</span></span><br><span class="line"><span class="keyword">let</span> difference = a.concat(b).filter(<span class="function"><span class="params">v</span> =&gt;</span> !a.includes(v) || !b.includes(v));</span><br><span class="line"><span class="comment">// [1,3,4,5]</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 交集</span></span><br><span class="line">[[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">8</span>, <span class="number">1</span>]].reduce(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x.filter(<span class="function"><span class="params">el</span> =&gt;</span> y.includes(el));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [1]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 并集 </tag>
            
            <tag> 交集 </tag>
            
            <tag> 差集 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javascript-sort</title>
      <link href="/2019/04/08/javascript-sort/"/>
      <url>/2019/04/08/javascript-sort/</url>
      <content type="html"><![CDATA[<h4 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.sort([compareFunction])</span><br></pre></td></tr></table></figure><p>如果没有指明 <code>compareFunction</code> ，元素会按照<strong>转换为字符串</strong>的诸个字符的<code>Unicode</code>位点进行排序。</p><p>如果指明 <code>compareFunction</code> ，数组会按照调用该函数的<strong>返回值排序</strong>。即 a 和 b 是两个将要被比较的元素：</p><ul><li><p>如果 <code>compareFunction(a, b)</code> 小于 0 ，那么 a 会被排列到 b 之前</p></li><li><p>如果 <code>compareFunction(a, b)</code> 等于 0 ， a 和 b 的相对位置不变</p><ul><li>备注： ECMAScript 标准并不保证这一行为，而且也不是所有浏览器都会遵守</li></ul></li><li><p>如果 <code>compareFunction(a, b)</code> 大于 0 ， a 会被排列到 b 之后</p></li></ul><p><br></p><h4 id="二、内部排序"><a href="#二、内部排序" class="headerlink" title="二、内部排序"></a>二、内部排序</h4><p><strong>V8 引擎</strong> sort 函数只给出了两种排序分别是： <code>InsertionSort</code> 和<code>QuickSort</code></p><ul><li>数组长度小于等于10的用插入排序 <code>InsertionSort</code></li><li>比10大的数组则使用快速排序 <code>QuickSort</code></li></ul><a id="more"></a><p><br></p><h4 id="三、特定序列排序"><a href="#三、特定序列排序" class="headerlink" title="三、特定序列排序"></a>三、特定序列排序</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">'d'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'2'</span>, <span class="string">'1'</span>, <span class="string">'3'</span>].sort(<span class="function">(<span class="params">x, y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> orderList = [<span class="string">'b'</span>, <span class="string">'a'</span>];</span><br><span class="line">    <span class="keyword">let</span> xIndex = orderList.indexOf(x);</span><br><span class="line">    <span class="keyword">let</span> yIndex = orderList.indexOf(y);</span><br><span class="line">    <span class="keyword">let</span> res = xIndex - yIndex;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (xIndex === <span class="number">-1</span>) &#123;</span><br><span class="line">        res = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (yIndex === <span class="number">-1</span>) &#123;</span><br><span class="line">        res =  <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (xIndex === <span class="number">-1</span> &amp;&amp; yIndex === <span class="number">-1</span>) &#123;</span><br><span class="line">        res = x &gt; y ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(x, y, res);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><h4 id="四、源码"><a href="#四、源码" class="headerlink" title="四、源码"></a>四、<a href="https://github.com/v8/v8/blob/ad82a40509c5b5b4680d4299c8f08d6c6d31af3c/src/js/array.js" target="_blank" rel="noopener">源码</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InnerArraySort</span>(<span class="params">array, length, comparefn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// In-place QuickSort algorithm.</span></span><br><span class="line">    <span class="comment">// For short (length &lt;= 22) arrays, insertion sort is used for efficiency.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!IS_CALLABLE(comparefn)) &#123;</span><br><span class="line">        comparefn = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (x === y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> ( % _IsSmi(x) &amp;&amp; % _IsSmi(y)) &#123;</span><br><span class="line">                <span class="keyword">return</span> %SmiLexicographicCompare(x, y);</span><br><span class="line">            &#125;</span><br><span class="line">            x = TO_STRING(x);</span><br><span class="line">            y = TO_STRING(y);</span><br><span class="line">            <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> x &lt; y ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> InsertionSort = <span class="function"><span class="keyword">function</span> <span class="title">InsertionSort</span>(<span class="params">a, from, to</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span> + <span class="number">1</span>; i &lt; to; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> element = a[i];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = i - <span class="number">1</span>; j &gt;= <span class="keyword">from</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">var</span> tmp = a[j];</span><br><span class="line">                <span class="keyword">var</span> order = comparefn(tmp, element);</span><br><span class="line">                <span class="keyword">if</span> (order &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    a[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            a[j + <span class="number">1</span>] = element;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> GetThirdIndex = <span class="function"><span class="keyword">function</span>(<span class="params">a, from, to</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> t_array = <span class="keyword">new</span> InternalArray();</span><br><span class="line">        <span class="comment">// Use both 'from' and 'to' to determine the pivot candidates.</span></span><br><span class="line">        <span class="keyword">var</span> increment = <span class="number">200</span> + ((to - <span class="keyword">from</span>) &amp; <span class="number">15</span>);</span><br><span class="line">        <span class="keyword">var</span> j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">from</span> += <span class="number">1</span>;</span><br><span class="line">        to -= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span>; i &lt; to; i += increment) &#123;</span><br><span class="line">            t_array[j] = [i, a[i]];</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        t_array.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> comparefn(a[<span class="number">1</span>], b[<span class="number">1</span>]);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">var</span> third_index = t_array[t_array.length &gt;&gt; <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">return</span> third_index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> QuickSort = <span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span>(<span class="params">a, from, to</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> third_index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="comment">// Insertion sort is faster for short arrays.</span></span><br><span class="line">            <span class="keyword">if</span> (to - <span class="keyword">from</span> &lt;= <span class="number">10</span>) &#123;</span><br><span class="line">                InsertionSort(a, <span class="keyword">from</span>, to);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (to - <span class="keyword">from</span> &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">                third_index = GetThirdIndex(a, <span class="keyword">from</span>, to);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                third_index = <span class="keyword">from</span> + ((to - <span class="keyword">from</span>) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Find a pivot as the median of first, last and middle element.</span></span><br><span class="line">            <span class="keyword">var</span> v0 = a[<span class="keyword">from</span>];</span><br><span class="line">            <span class="keyword">var</span> v1 = a[to - <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">var</span> v2 = a[third_index];</span><br><span class="line">            <span class="keyword">var</span> c01 = comparefn(v0, v1);</span><br><span class="line">            <span class="keyword">if</span> (c01 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// v1 &lt; v0, so swap them.</span></span><br><span class="line">                <span class="keyword">var</span> tmp = v0;</span><br><span class="line">                v0 = v1;</span><br><span class="line">                v1 = tmp;</span><br><span class="line">            &#125; <span class="comment">// v0 &lt;= v1.</span></span><br><span class="line">            <span class="keyword">var</span> c02 = comparefn(v0, v2);</span><br><span class="line">            <span class="keyword">if</span> (c02 &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// v2 &lt;= v0 &lt;= v1.</span></span><br><span class="line">                <span class="keyword">var</span> tmp = v0;</span><br><span class="line">                v0 = v2;</span><br><span class="line">                v2 = v1;</span><br><span class="line">                v1 = tmp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// v0 &lt;= v1 &amp;&amp; v0 &lt; v2</span></span><br><span class="line">                <span class="keyword">var</span> c12 = comparefn(v1, v2);</span><br><span class="line">                <span class="keyword">if</span> (c12 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">// v0 &lt;= v2 &lt; v1</span></span><br><span class="line">                    <span class="keyword">var</span> tmp = v1;</span><br><span class="line">                    v1 = v2;</span><br><span class="line">                    v2 = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// v0 &lt;= v1 &lt;= v2</span></span><br><span class="line">            a[<span class="keyword">from</span>] = v0;</span><br><span class="line">            a[to - <span class="number">1</span>] = v2;</span><br><span class="line">            <span class="keyword">var</span> pivot = v1;</span><br><span class="line">            <span class="keyword">var</span> low_end = <span class="keyword">from</span> + <span class="number">1</span>; <span class="comment">// Upper bound of elements lower than pivot.</span></span><br><span class="line">            <span class="keyword">var</span> high_start = to - <span class="number">1</span>; <span class="comment">// Lower bound of elements greater than pivot.</span></span><br><span class="line">            a[third_index] = a[low_end];</span><br><span class="line">            a[low_end] = pivot;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// From low_end to i are elements equal to pivot.</span></span><br><span class="line">            <span class="comment">// From i to high_start are elements that haven't been compared yet.</span></span><br><span class="line">            partition: <span class="keyword">for</span> (<span class="keyword">var</span> i = low_end + <span class="number">1</span>; i &lt; high_start; i++) &#123;</span><br><span class="line">                <span class="keyword">var</span> element = a[i];</span><br><span class="line">                <span class="keyword">var</span> order = comparefn(element, pivot);</span><br><span class="line">                <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    a[i] = a[low_end];</span><br><span class="line">                    a[low_end] = element;</span><br><span class="line">                    low_end++;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (order &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        high_start--;</span><br><span class="line">                        <span class="keyword">if</span> (high_start == i) <span class="keyword">break</span> partition;</span><br><span class="line">                        <span class="keyword">var</span> top_elem = a[high_start];</span><br><span class="line">                        order = comparefn(top_elem, pivot);</span><br><span class="line">                    &#125; <span class="keyword">while</span> (order &gt; <span class="number">0</span>);</span><br><span class="line">                    a[i] = a[high_start];</span><br><span class="line">                    a[high_start] = element;</span><br><span class="line">                    <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        element = a[i];</span><br><span class="line">                        a[i] = a[low_end];</span><br><span class="line">                        a[low_end] = element;</span><br><span class="line">                        low_end++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (to - high_start &lt; low_end - <span class="keyword">from</span>) &#123;</span><br><span class="line">                QuickSort(a, high_start, to);</span><br><span class="line">                to = low_end;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                QuickSort(a, <span class="keyword">from</span>, low_end);</span><br><span class="line">                <span class="keyword">from</span> = high_start;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>arg_PARAMETER和is_args</title>
      <link href="/2019/04/03/arg-PARAMETER%E5%92%8Cis-args/"/>
      <url>/2019/04/03/arg-PARAMETER%E5%92%8Cis-args/</url>
      <content type="html"><![CDATA[<h4 id="arg-PARAMETER"><a href="#arg-PARAMETER" class="headerlink" title="$arg_PARAMETER"></a><code>$arg_PARAMETER</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$arg_PARAMETER#这个变量包含GET请求中，如果有变量PARAMETER时的值</span><br><span class="line">$args#这个变量等于请求行中(GET请求)的参数，如：foo=123&amp;bar=blahbla</span><br><span class="line">$is_args#如果有args参数，这个变量等于&quot;?&quot;，否则等于&quot;&quot;(空值)</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="rewrite重写URL参数"><a href="#rewrite重写URL参数" class="headerlink" title="rewrite重写URL参数"></a><code>rewrite</code>重写URL参数</h4><p><code>/plaza/searchAll.html?tb_search=连衣裙&amp;type=[item|shop]</code></p><p><code>/m/search/searchlist/index.html?keyword=连衣裙&amp;type=[商品|店铺]</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/plaza/searchAll.html</span> /m/search/searchlist/index.html?keyword=<span class="variable">$arg_tb_search</span>&amp;type=<span class="variable">$arg_type</span>? <span class="literal">permanent</span>;</span><br><span class="line"><span class="comment"># 使用arg_参数名（arg_type），去匹配到具体参数所带的值</span></span><br><span class="line"><span class="comment"># 最后的?可以阻止请求中原来的参数再带过来放到重写后的url里</span></span><br></pre></td></tr></table></figure><p>注：</p><ul><li><p><code>rewrite</code>只能对域名后边的<strong>除去传递的参数外</strong>的字符串起作用</p></li><li><p>默认的情况下，<code>Nginx</code>在进行<code>rewrite</code>后，都会自动添加上<strong>旧地址中的参数部分</strong></p></li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> $is_args </tag>
            
            <tag> $arg_PARAMETER </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>robots文件</title>
      <link href="/2019/04/01/robots%E6%96%87%E4%BB%B6/"/>
      <url>/2019/04/01/robots%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="robots文件"><a href="#robots文件" class="headerlink" title="robots文件"></a>robots文件</h4><p><code>Robots</code>是站点与<code>spider</code>沟通的重要渠道，站点通过<code>robots</code>文件声明本网站中不想被搜索引擎收录的部分或者指定搜索引擎只收录特定的部分。仅当您的网站包含不希望被视频搜索引擎收录的内容时，才需要使用<code>robots.txt</code>文件。如果您希望搜索引擎收录网站上所有内容，请勿建立<code>robots.txt</code>文件。</p><p><code>robots.txt</code>文件往往放置于根目录下，包含一条或更多的记录，这些记录通过空行分开（以<code>CR,CR/NL,or NL</code>作为结束符），每一条记录的格式如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;field&gt;:&lt;optional space&gt;&lt;value&gt;&lt;optionalspace&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="字段"><a href="#字段" class="headerlink" title="字段"></a>字段</h4><p><code>User-agent</code>：该项的值用于描述搜索引擎robot的名字。</p><ul><li>在<code>robots.txt</code>文件中，如果有多条<code>User-agent</code>记录，说明有多个robot会受到<code>robots.txt</code>的限制</li><li>至少要有一条<code>User-agent</code>记录</li><li>如果该项的值设为<code>*</code>，则对任何<code>robot</code>均有效，这样的记录只能有一条</li></ul><p><code>Disallow</code>：该项的值用于描述不希望被访问的一组URL</p><ul><li>可以是一条<strong>完整路径</strong>，也可以是路径的<strong>非空前缀</strong></li><li>至少要有一条Disallow记录</li></ul><p><code>Allow</code>：该项的值用于描述希望被访问的一组URL，</p><ul><li>与Disallow项相似，这个值可以是一条完整的路径，也可以是路径的前缀</li></ul><p><br></p><h4 id="使用-和"><a href="#使用-和" class="headerlink" title="使用*和`"></a>使用<code>*</code>和`</h4><p><code>Baiduspider</code>支持使用通配符<code>*</code>和<code>$</code>来模糊匹配url</p><ul><li><code>*</code>匹配零或多个任意字符</li><li><code>$</code>匹配行结束符</li><li><code>#</code>表示注释</li></ul><p><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># robots.txt generated at http://tool.chinaz.com/robots/ </span><br><span class="line"></span><br><span class="line">User-agent: Baiduspider</span><br><span class="line">Disallow: /</span><br><span class="line"></span><br><span class="line">User-agent: YodaoBot</span><br><span class="line">Disallow: /</span><br><span class="line"></span><br><span class="line">User-agent: *</span><br><span class="line">Disallow: </span><br><span class="line">Disallow: /bin/</span><br><span class="line">Sitemap: http://domain.com/sitemap.xml</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> robots </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>WheelEvent</title>
      <link href="/2019/03/29/WheelEvent/"/>
      <url>/2019/03/29/WheelEvent/</url>
      <content type="html"><![CDATA[<h4 id="WheelEvent"><a href="#WheelEvent" class="headerlink" title="WheelEvent"></a>WheelEvent</h4><p><code>WheelEvent</code> DOM事件会在用户滚动鼠标滚轮或操作其它类似鼠标的设备时触发，继承了父接口<code>MouseEvent</code>、<code>UIEvent</code>、<code>Event</code>的属性。</p><ul><li><p><code>WheelEvent.deltaX</code>只读，返回<code>double</code>值，该值表示滚轮的横向滚动量。</p></li><li><p><code>WheelEvent.deltaY</code>只读，返回<code>double</code>值，该值表示滚轮的纵向滚动量。</p></li><li><p><code>WheelEvent.deltaZ</code>只读，返回<code>double</code>值，该值表示滚轮的z轴方向上的滚动量。</p></li><li><p><code>WheelEvent.deltaMode</code>只读，返回<code>unsigned long</code>值，该值表示上述各delta的值的单位。</p><p>该值及所表示的单位如下：</p><p>| 常量            | 值   | 描述             |<br>| ————— | —- | —————- |<br>| DOM_DELTA_PIXEL | 0x00 | 滚动量单位为像素 |<br>| DOM_DELTA_LINE  | 0x01 | 滚动量单位为行   |<br>| DOM_DELTA_PAGE  | 0x02 | 滚动量单位为页   |</p></li></ul><a id="more"></a><p><br></p><h4 id="非标准事件"><a href="#非标准事件" class="headerlink" title="非标准事件"></a>非标准事件</h4><p>早期的浏览器实现过<code>MouseWheelEvent</code>和<code>MouseScrollEvent</code>两种滚轮事件接口</p><p><br></p><h5 id="MouseWheelEvent属性"><a href="#MouseWheelEvent属性" class="headerlink" title="MouseWheelEvent属性"></a>MouseWheelEvent属性</h5><p><code>wheelDelta</code>返回<code>long</code>值，该值表示滚动的距离，以像素为单位</p><table><thead><tr><th>事件类型</th><th>事件对象</th><th>是否标准</th><th>兼容性</th></tr></thead><tbody><tr><td><code>mousewheel</code></td><td>MouseWheelEvent</td><td>非标准</td><td>只有<code>Firefox</code>不支持</td></tr><tr><td><code>DOMMouseScroll</code></td><td>MouseScrollEvent</td><td>非标准</td><td>只有<code>Firefox</code>支持</td></tr><tr><td><code>wheel</code></td><td>WheelEvent</td><td><code>DOM Level 3</code></td><td><code>Firefox 17+</code> 、<code>ie9+</code></td></tr></tbody></table><p><br></p><p><img src="/2019/03/29/WheelEvent/1.png" alt=""></p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> wheel </tag>
            
            <tag> mousewheel </tag>
            
            <tag> WheelEvent </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>取消默认行为和阻止传播</title>
      <link href="/2019/03/29/%E5%8F%96%E6%B6%88%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6%E5%92%8C%E9%98%BB%E6%AD%A2%E4%BC%A0%E6%92%AD/"/>
      <url>/2019/03/29/%E5%8F%96%E6%B6%88%E9%BB%98%E8%AE%A4%E4%BA%8B%E4%BB%B6%E5%92%8C%E9%98%BB%E6%AD%A2%E4%BC%A0%E6%92%AD/</url>
      <content type="html"><![CDATA[<h4 id="阻止传播"><a href="#阻止传播" class="headerlink" title="阻止传播"></a>阻止传播</h4><p>阻止捕获和冒泡阶段中当前事件的进一步传播</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">event.stopPropagation();</span><br><span class="line"><span class="comment">// event.cancelBubble = true</span></span><br></pre></td></tr></table></figure><p> 如果有多个相同类型事件的事件监听函数绑定到同一个元素，当该类型的事件触发时，它们会按照被添加的顺序执行。如果其中某个监听函数执行了 <code>event.stopImmediatePropagation()</code> 方法，则当前元素剩下的监听函数将不会被执行。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">event.stopImmediatePropagation();</span><br></pre></td></tr></table></figure><p><br></p><h4 id="取消默认行为"><a href="#取消默认行为" class="headerlink" title="取消默认行为"></a>取消默认行为</h4><p>通知 Web 浏览器不要执行与事件关联的默认动作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">event.preventDefault();</span><br><span class="line"><span class="comment">// event.returnValue = false;</span></span><br><span class="line"><span class="comment">// javascript的return false只会阻止默认行为</span></span><br></pre></td></tr></table></figure><p>注：如果 Event 对象的 <code>cancelable</code> 属性是 <code>fasle</code>，那么就没有默认动作，或者不能阻止默认动作。</p><a id="more"></a><p><br></p><h4 id="event与target"><a href="#event与target" class="headerlink" title="event与target"></a><code>event与target</code></h4><ol><li><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p><code>IE</code>里的<code>event</code>是<strong>全局变量（<code>window.event</code>）</strong>，随时可用</p><p><code>firefox</code>里的<code>event</code>要用参数引导才能用，是运行时的<strong>临时变量（<code>event</code>）</strong></p></li><li><h5 id="事件的目标"><a href="#事件的目标" class="headerlink" title="事件的目标"></a>事件的目标</h5><p>在IE中是<code>window.event.srcElement</code></p><p>在<code>Firefox</code>中是<code>event.target</code></p></li></ol><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> preventDefault </tag>
            
            <tag> stopPropagation </tag>
            
            <tag> stopImmediatePropagation </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>window-open</title>
      <link href="/2019/03/27/window-open/"/>
      <url>/2019/03/27/window-open/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> windowObjectReference = <span class="built_in">window</span>.open(strUrl, strWindowName, [strWindowFeatures]);</span><br></pre></td></tr></table></figure><ul><li><p><code>WindowObjectReference</code></p><p>打开的新窗口对象的引用。如果调用失败，返回值会是 <code>null</code> 。如果父子窗口满足<code>同源策略</code>，你可以通过这个引用访问新窗口的属性或方法</p></li></ul><ul><li><p><code>strUrl</code></p><p>新窗口需要载入的url地址。<code>strUrl</code>可以是web上的<code>html页面</code>也可以是<code>图片文件</code>或者其他任何浏览器支持的<code>文件格式</code></p></li></ul><ul><li><p><code>strWindowName</code></p><p>新窗口的名称。该字符串可以用来作为超链接 <code>a</code>或表单 <code>form</code>元素的目标属性值。<strong>字符串中不能含有空白字符</strong>。注意：<strong>strWindowName 并不是新窗口的标题</strong></p><ul><li><code>_blank</code> - URL加载到一个新的窗口。这是<strong>默认</strong></li><li><code>_parent</code> - URL加载到父框架</li><li><code>_self</code> - URL替换当前页面</li><li><code>_top</code> - URL替换任何可加载的框架集</li></ul></li></ul><ul><li><p><code>strWindowFeatures</code></p><p>可选参数。是一个字符串值，这个值列出了将要打开的窗口的一些特性(窗口功能和工具栏) 。 字符串中不能包含任何空白字符，特性之间用逗号分隔开</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myWindow=<span class="built_in">window</span>.open(<span class="string">''</span>,<span class="string">''</span>,<span class="string">'width=200,height=100'</span>);</span><br><span class="line"><span class="built_in">window</span>.open(<span class="string">"http://www.runoob.com"</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><p>注：</p><ul><li><code>window.open</code>或者<code>a.href</code>不能自定义<code>header</code></li><li>ajax不能拦截<code>301/302</code></li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> window </tag>
            
            <tag> open </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux中su和sudo命令</title>
      <link href="/2019/03/07/linux%E4%B8%ADsu%E5%92%8Csudo%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/03/07/linux%E4%B8%ADsu%E5%92%8Csudo%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h4 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a><code>su</code>命令</h4><p><code>Linux</code> <code>su</code>命令用于变更为其他使用者的身份，除 <code>root</code> 外，需要键入该使用者的密码。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su [-fmp] [-c command] [-s shell] [--help] [--version] [-] [USER [ARG]]</span><br></pre></td></tr></table></figure><ul><li><code>-f</code>或<code>--fast</code> 不必读启动档（如 csh.cshrc 等），仅用于 csh 或 tcsh</li><li><code>-m -p</code> 或 <code>--preserve-environment</code> 执行 su 时不改变环境变数</li><li><code>-c command</code> 或<code>--command=command</code> <ul><li>变更帐号为 <code>USER</code> 的使用者，并执行指令（<code>command</code>）后再变回原来使用者</li></ul></li><li><code>-s shell</code> 或 <code>--shell=shell</code><ul><li>指定要执行的 shell （bash csh tcsh 等）</li><li>预设值为<code>/etc/passwd</code> 内的该使用者（USER） <code>shell</code> </li></ul></li><li><code>--help</code> 显示说明文件</li><li><code>--version</code> 显示版本资讯</li><li><code>-</code> 、<code>-l</code>或<code>--login</code> <ul><li>这个参数加了之后，就好像是重新 login 为该使用者一样</li><li>大部份环境变数都是以该使用者（USER）为主，并且<strong>工作目录也会改变</strong> </li><li>如果没有指定 <code>USER</code> ，内定是 <code>root</code> </li></ul></li><li><code>USER</code> 欲变更的使用者帐号</li><li><code>ARG</code> 传入新的 <code>shell</code> 参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su -c ls root # 变更帐号为 root 并在执行 ls 指令后退出变回原使用者</span><br><span class="line">su root -f # 变更帐号为 root 并传入 -f 参数给新执行的 shell</span><br><span class="line">su - nginx # 变更帐号为 nginx 并改变工作目录至 nginx 的家目录（home dir）</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="su和su-区别"><a href="#su和su-区别" class="headerlink" title="su和su - 区别"></a><code>su</code>和<code>su -</code> 区别</h4><p><code>su username</code> </p><ul><li>切换到指定用户，但是<strong>当前目录</strong>不会变化</li><li><strong>环境变量</strong>还是上一个用户的环境变量</li></ul><p><code>su - username</code> </p><ul><li>切换到指定用户，<strong>当前目录</strong>即刻切换成指定用户的家目录</li><li><strong>环境变量</strong>即刻切换到指定目录的环境变量</li></ul><p><br></p><h4 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a><code>sudo</code>命令</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo command</span><br></pre></td></tr></table></figure><p>通过<code>sudo</code>命令，我们能把某些超级权限有针对性的下放，并且<strong>不需要普通用户知道<code>root密码</code>，而是验证当前用户的密码</strong> 。<code>sudo</code>是需要授权许可的，所以也被称为<strong>授权许可的<code>su</code></strong>。</p><p><code>sudo</code>执行命令的流程是当前用户切换到<code>root</code>，然后以<code>root</code>身份执行命令，执行完成后，直接退回到当前用户，而这些的<strong>前提</strong>是要通过<code>sudo</code>的配置文件`/etc/sudoers来进行授权。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> su </tag>
            
            <tag> sudo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux用户账号相关操作</title>
      <link href="/2019/03/06/linux%E7%94%A8%E6%88%B7%E8%B4%A6%E5%8F%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/03/06/linux%E7%94%A8%E6%88%B7%E8%B4%A6%E5%8F%B7%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<h4 id="useradd-adduser命令"><a href="#useradd-adduser命令" class="headerlink" title="useradd | adduser命令"></a><code>useradd</code> | <code>adduser</code>命令</h4><p><code>useradd</code> | <code>adduser</code>命令用来建立用户帐号和创建用户的起始目录，<strong>使用权限是超级用户</strong>。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd  [-d home] [-s shell] [-c comment] [-m [-k template]] </span><br><span class="line">         [-f inactive] [-e expire ] [-p passwd] [-r] name</span><br></pre></td></tr></table></figure><p><code>-c</code>：加上备注文字，备注文字保存在<code>passwd</code>的备注栏中</p><p><code>-d</code>：指定用户登入时的主目录，替换系统默认值<code>/home/&lt;用户名&gt;</code></p><p><code>-D</code>：变更预设值</p><p><code>-e</code>：指定账号的失效日期，日期格式为<code>MM/DD/YY</code>，例如<code>06/30/12</code>。缺省表示永久有效</p><p><code>-f</code>：指定在密码过期后多少天即关闭该账号。</p><ul><li><p>默认值为<code>-1</code></p></li><li><p>如果为0账号立即被停用</p></li><li>如果为<code>-1</code>则账号一直可用</li></ul><p><code>-g</code>：指定用户所属的群组。值可以使组名也可以是<code>GID</code> </p><ul><li>用户组必须已经存在的，期默认值为<code>100</code>，即<code>users</code></li></ul><p><code>-G</code>：指定用户所属的<strong>附加群组</strong> </p><p><code>-m</code>：自动建立用户的<strong>登入目录</strong> </p><p><code>-M</code>：不要自动建立用户的登入目录</p><p><code>-n</code>：取消建立以用户名称为名的群组</p><p><code>-r</code>：<strong>建立系统账号</strong> </p><p><code>-s</code>：指定用户登入后所使用的<code>shell</code>。默认值为<code>/bin/bash</code> </p><p><code>-u</code>：指定用户ID号。该值在系统中必须是唯一的</p><ul><li>0~499默认是保留给系统用户账号使用的，所以该值必须大于499</li></ul><p>注：账号建好之后，再用<code>passwd</code>命令设定账号的密码</p><a id="more"></a><p><br></p><h4 id="passwd命令"><a href="#passwd命令" class="headerlink" title="passwd命令"></a>passwd命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd [-k] [-l] [-u [-f]] [-d] [-S] [username]</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> 删除密码</li><li><code>-f</code> 强制执行</li><li><code>-k</code> 更新只能发送在过期之后</li><li><code>-l</code> 停止账号使用</li><li><code>-S</code> 显示密码信息</li><li><code>-u</code> 启用已被停止的账户</li><li><code>-x</code> 设置密码的有效期</li><li><code>-g</code> 修改群组密码</li><li><code>-i</code> 过期后停止用户账号</li></ul><p><br></p><h4 id="id命令"><a href="#id命令" class="headerlink" title="id命令"></a>id命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id [-gGnru][--help][--version][用户名称]</span><br></pre></td></tr></table></figure><ul><li><code>-g</code>或<code>--group</code> 　显示用户所属群组的ID</li><li><code>-G</code>或<code>--groups</code> 　显示用户所属附加群组的ID</li><li><code>-n</code>或<code>--name</code> 　显示用户，所属群组或附加群组的名称</li><li><code>-r</code>或<code>--real</code> 　显示实际ID</li><li><code>-u</code>或-<code>-user</code> 　显示用户ID</li><li><code>-help</code> 　显示帮助</li><li><code>-version</code> 　显示版本信息</li></ul><p><br></p><h4 id="usermod-命令"><a href="#usermod-命令" class="headerlink" title="usermod 命令"></a>usermod 命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod [options] user_name</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- a | -- append  把用户追加到某些组中，仅与-G选项一起使用</span><br><span class="line"></span><br><span class="line">- c | -- comment  修改用户帐号的备注文字</span><br><span class="line"></span><br><span class="line">- d | -- home  修改用户的家目录通常和-m选项一起使用</span><br><span class="line"></span><br><span class="line">- e | -- expiredate  指定用户帐号禁用的日期，格式YY-MM-DD</span><br><span class="line"></span><br><span class="line">- f | -- inactive  用户密码过期多少天后采用就禁用该帐号</span><br><span class="line"></span><br><span class="line">- g | -- gid  修改用户的gid，改组一定存在</span><br><span class="line"></span><br><span class="line">- G | -- groups  把用户追加到某些组中，仅与-a选项一起使用</span><br><span class="line"></span><br><span class="line">- l | -- login  修改用户的登录名称</span><br><span class="line"></span><br><span class="line">- L | -- lock  锁定用户的密码</span><br><span class="line"></span><br><span class="line">- m | -- move - home  修改用户的家目录通常和-d选项一起使用</span><br><span class="line"></span><br><span class="line">- s | -- shell  修改用户的shell</span><br><span class="line"></span><br><span class="line">- u | -- uid  修改用户的uid，该uid必须唯一</span><br><span class="line"></span><br><span class="line">- U | -- unlock  解锁用户的密码</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -a -G www hexu   # 将hexu添加到www用户组</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> useradd </tag>
            
            <tag> usermod </tag>
            
            <tag> passwd </tag>
            
            <tag> id </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>遍历器Iterator</title>
      <link href="/2019/03/06/%E9%81%8D%E5%8E%86%E5%99%A8Iterator/"/>
      <url>/2019/03/06/%E9%81%8D%E5%8E%86%E5%99%A8Iterator/</url>
      <content type="html"><![CDATA[<h4 id="可遍历"><a href="#可遍历" class="headerlink" title="可遍历"></a>可遍历</h4><p><code>JavaScript</code>中表示<code>集合</code>的<strong>数据结构</strong>，主要有数组（<code>Array</code>）、对象（<code>Object</code>）、<code>Map</code>、<code>Set</code> 等四种数据集合。一种<strong>数据结构</strong>只要部署了<code>Iterator</code> 接口，我们就称这种数据结构是<code>可遍历的</code>（iterable）。</p><p><br></p><p><code>Iterator</code>的遍历过程是这样的：</p><p>（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</p><p>（2）第一次调用指针对象的<code>next</code>方法，可以将指针指向数据结构的第一个成员。</p><p>（3）第二次调用指针对象的<code>next</code>方法，指针就指向数据结构的第二个成员。</p><p>（4）不断调用指针对象的<code>next</code>方法，直到它指向数据结构的结束位置。</p><p><br></p><p>每一次调用<code>next</code>方法，都会返回数据结构的当前成员的信息。具体来说，就是返回一个包含<code>value</code>和<code>done</code>两个属性的对象。其中，<code>value</code>属性是当前成员的值，<code>done</code>属性是一个布尔值，表示遍历是否结束。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟next方法返回值的例子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> it = makeIterator([<span class="string">'a'</span>, <span class="string">'b'</span>]);</span><br><span class="line"></span><br><span class="line">it.next() <span class="comment">// &#123; value: "a", done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: "b", done: false &#125;</span></span><br><span class="line">it.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeIterator</span>(<span class="params">array</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> nextIndex = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    next: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> nextIndex &lt; array.length ?</span><br><span class="line">        &#123;<span class="attr">value</span>: array[nextIndex++], <span class="attr">done</span>: <span class="literal">false</span>&#125; :</span><br><span class="line">        &#123;<span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="默认的Iterator接口"><a href="#默认的Iterator接口" class="headerlink" title="默认的Iterator接口"></a>默认的<code>Iterator</code>接口</h4><p><code>ES6</code>规定，默认的 <code>Iterator</code> 接口部署在<strong>数据结构</strong>的<code>Symbol.iterator</code>属性。或者说，一个数据结构只要具有<code>Symbol.iterator</code>属性，就可以认为是<strong>可遍历</strong>的（<code>iterable</code>）。<code>Symbol.iterator</code>属性是一个<strong>遍历器生成函数</strong>，执行这个函数，就会返回一个<strong>遍历器</strong>。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象obj是可遍历的（iterable），因为具有Symbol.iterator属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator] : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          value: <span class="number">1</span>,</span><br><span class="line">          done: <span class="literal">true</span></span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.prototype[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        v: <span class="number">0</span>,</span><br><span class="line">        e: <span class="keyword">this</span>,</span><br><span class="line">        next() &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                value: <span class="keyword">this</span>.v++,</span><br><span class="line">                done: <span class="keyword">this</span>.v &gt; <span class="keyword">this</span>.e</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[..<span class="number">.100</span>] <span class="comment">// 返回[0, 1, 2, ..., 99]</span></span><br></pre></td></tr></table></figure><p>原生具备 Iterator 接口的数据结构如下：</p><ul><li>Array</li><li>Map</li><li>Set</li><li>String</li><li>TypedArray</li><li>函数的 arguments 对象</li><li>NodeList 对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> iter = arr[<span class="built_in">Symbol</span>.iterator]();</span><br><span class="line"></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'a', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'b', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: 'c', done: false &#125;</span></span><br><span class="line">iter.next() <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>注：ES6 创造了一种新的<strong>遍历命令</strong><code>for...of</code>循环，<code>Iterator</code>接口主要供<code>for...of</code>消费</p><p><br></p><h4 id="调用Iterator接口的场合"><a href="#调用Iterator接口的场合" class="headerlink" title="调用Iterator接口的场合"></a>调用<code>Iterator</code>接口的场合</h4><p>默认调用 Iterator 接口（即<code>Symbol.iterator</code>方法）的一些场合</p><ul><li><p><code>for...of</code>循环</p></li><li><p>解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>().add(<span class="string">'a'</span>).add(<span class="string">'b'</span>).add(<span class="string">'c'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x,y] = set;</span><br><span class="line"><span class="comment">// x='a'; y='b'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [first, ...rest] = set;</span><br><span class="line"><span class="comment">// first='a'; rest=['b','c'];</span></span><br></pre></td></tr></table></figure></li><li><p>扩展运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例一</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">'hello'</span>;</span><br><span class="line">[...str] <span class="comment">//  ['h','e','l','l','o']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例二</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line">[<span class="string">'a'</span>, ...arr, <span class="string">'d'</span>]</span><br><span class="line"><span class="comment">// ['a', 'b', 'c', 'd']</span></span><br></pre></td></tr></table></figure></li><li><p><code>yield*</code> </p></li><li><p>由于数组的遍历会调用遍历器接口，所以任何接受数组作为参数的场合，其实都调用了遍历器接口</p></li></ul><p><br></p><h4 id="遍历器对象的return方法"><a href="#遍历器对象的return方法" class="headerlink" title="遍历器对象的return方法"></a>遍历器对象的<code>return</code>方法</h4><p><code>return</code>方法的使用场合是，如果<code>for...of</code>循环提前退出（通常是因为出错，或者有<code>break</code>语句），就会调用<code>return</code>方法，是可选的 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readLinesSync</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        next() &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">value</span>:<span class="number">1</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">return</span>() &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(file);</span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">value</span>:<span class="number">2</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 情况一：break语句</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> readLinesSync(fileName)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line);</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二：出错</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> readLinesSync(fileName)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(line);</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<code>return</code>方法必须返回一个对象</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 遍历器 </tag>
            
            <tag> Iterator </tag>
            
            <tag> for...of </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>数组的空位</title>
      <link href="/2019/03/06/%E6%95%B0%E7%BB%84%E7%9A%84%E7%A9%BA%E4%BD%8D/"/>
      <url>/2019/03/06/%E6%95%B0%E7%BB%84%E7%9A%84%E7%A9%BA%E4%BD%8D/</url>
      <content type="html"><![CDATA[<h4 id="数组的空位"><a href="#数组的空位" class="headerlink" title="数组的空位"></a>数组的空位</h4><p>数组的空位指，数组的某一个位置没有任何值。比如，<code>Array</code>构造函数返回的数组都是空位。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>) <span class="comment">// [, , ,]</span></span><br></pre></td></tr></table></figure><p><code>in</code>运算符：如果指定的<strong>属性名</strong>在指定的对象或其原型链中，则<code>in</code><strong>运算符</strong>返回<code>true</code>。</p><p> 空位不是<code>undefined</code>，一个位置的值等于<code>undefined</code>，依然是有值的。空位是没有任何值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">in</span> [<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>] <span class="comment">// true</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> [, , ,] <span class="comment">// false</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="对空位的处理"><a href="#对空位的处理" class="headerlink" title="对空位的处理"></a>对空位的处理</h4><p>ES5 对空位的处理，已经很不一致了，大多数情况下会忽略空位。</p><ul><li><code>forEach()</code>, <code>filter()</code>, <code>reduce()</code>, <code>every()</code> 和<code>some()</code>都会<strong>跳过空位</strong>。</li><li><code>map()</code>会<strong>跳过空位</strong>，但会<strong>保留这个值</strong> </li><li><code>join()</code>和<code>toString()</code>会将空位视为<code>undefined</code>，而<code>undefined</code>和<code>null</code>会被处理成<strong>空字符串</strong>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forEach方法</span></span><br><span class="line">[,<span class="string">'a'</span>].forEach(<span class="function">(<span class="params">x,i</span>) =&gt;</span> <span class="built_in">console</span>.log(i)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// filter方法</span></span><br><span class="line">[<span class="string">'a'</span>,,<span class="string">'b'</span>].filter(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">true</span>) <span class="comment">// ['a','b']</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// reduce方法</span></span><br><span class="line">[<span class="number">1</span>,,<span class="number">2</span>].reduce(<span class="function">(<span class="params">x,y</span>) =&gt;</span> x+y) <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// every方法</span></span><br><span class="line">[,<span class="string">'a'</span>].every(<span class="function"><span class="params">x</span> =&gt;</span> x===<span class="string">'a'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// some方法</span></span><br><span class="line">[,<span class="string">'a'</span>].some(<span class="function"><span class="params">x</span> =&gt;</span> x !== <span class="string">'a'</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// map方法</span></span><br><span class="line">[,<span class="string">'a'</span>].map(<span class="function"><span class="params">x</span> =&gt;</span> <span class="number">1</span>) <span class="comment">// [,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// join方法</span></span><br><span class="line">[,<span class="string">'a'</span>,<span class="literal">undefined</span>,<span class="literal">null</span>].join(<span class="string">'#'</span>) <span class="comment">// "#a##"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// toString方法</span></span><br><span class="line">[,<span class="string">'a'</span>,<span class="literal">undefined</span>,<span class="literal">null</span>].toString() <span class="comment">// ",a,,"</span></span><br></pre></td></tr></table></figure><p><br></p><p>ES6 则是明确将空位转为<code>undefined</code>。 </p><ul><li><code>Array.from</code>方法会将数组的空位，转为<code>undefined</code> </li><li>扩展运算符（<code>...</code>）也会将空位转为<code>undefined</code> </li><li><code>fill()</code>会将空位视为正常的数组位置 </li><li><code>for...of</code>循环也会遍历空位 </li><li><code>entries()</code>、<code>keys()</code>、<code>values()</code>、<code>find()</code>和<code>findIndex()</code>会将空位处理成<code>undefined</code> </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.from</span></span><br><span class="line"><span class="built_in">Array</span>.from([<span class="string">'a'</span>,,<span class="string">'b'</span>]) <span class="comment">// [ "a", undefined, "b" ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展运算符</span></span><br><span class="line">[...[<span class="string">'a'</span>,,<span class="string">'b'</span>]] <span class="comment">// [ "a", undefined, "b" ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// copyWithin</span></span><br><span class="line">[,<span class="string">'a'</span>,<span class="string">'b'</span>,,].copyWithin(<span class="number">2</span>,<span class="number">0</span>) <span class="comment">// [,"a",,"a"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fill</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="string">'a'</span>) <span class="comment">// ["a","a","a"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> [, ,]) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// entries()</span></span><br><span class="line">[...[,<span class="string">'a'</span>].entries()] <span class="comment">// [[0,undefined], [1,"a"]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// keys()</span></span><br><span class="line">[...[,<span class="string">'a'</span>].keys()] <span class="comment">// [0,1]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// values()</span></span><br><span class="line">[...[,<span class="string">'a'</span>].values()] <span class="comment">// [undefined,"a"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// find()</span></span><br><span class="line">[,<span class="string">'a'</span>].find(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">true</span>) <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findIndex()</span></span><br><span class="line">[,<span class="string">'a'</span>].findIndex(<span class="function"><span class="params">x</span> =&gt;</span> <span class="literal">true</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p>注：由于空位的处理规则非常不统一，所以建议避免出现空位。 </p><p><br></p><h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Array.from(arrayLike[, mapFn[, thisArg]])</span><br></pre></td></tr></table></figure><ul><li><code>arrayLike</code>：想要转换成数组的伪数组对象或可迭代对象<ul><li>伪数组对象：拥有一个 <code>length</code> 属性和若干索引属性的任意对象 </li><li>可迭代对象：可以获取对象中的元素,如 Map和 Set 等 </li></ul></li><li><code>mapFn (可选参数)</code>：如果指定了该参数，新数组中的每个元素会执行该回调函数</li><li><code>thisArg (可选参数)</code>：可选参数，执行回调函数 <code>mapFn</code> 时 <code>this</code> 对象</li></ul><p><br></p><h4 id="Array-prototype-fill"><a href="#Array-prototype-fill" class="headerlink" title="Array.prototype.fill"></a>Array.prototype.fill</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.fill(value[, start[, end]])</span><br><span class="line"><span class="comment">// 用一个固定值填充一个数组中从起始索引到终止索引内的全部元素，不包括终止索引</span></span><br></pre></td></tr></table></figure><ul><li><code>value</code>：用来填充数组元素的值</li><li><code>start</code> ：可选，起始索引，默认值为0 </li><li><code>end</code> ：可选，终止索引，默认值为 <code>this.length</code> </li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 空位 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>active伪类的LVHA顺序</title>
      <link href="/2019/03/05/active%E4%BC%AA%E7%B1%BB%E7%9A%84LVHA%E9%A1%BA%E5%BA%8F/"/>
      <url>/2019/03/05/active%E4%BC%AA%E7%B1%BB%E7%9A%84LVHA%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h4 id="层叠样式表"><a href="#层叠样式表" class="headerlink" title="层叠样式表"></a>层叠样式表</h4><p><code>CSS(Cascading Style Sheets )层叠样式表</code>，所谓层叠就是<strong>后面的样式会覆盖前面的样式</strong>。所以在样式表中，各样式排列的顺序很有讲究。 </p><p><br></p><h4 id="active"><a href="#active" class="headerlink" title=":active"></a><code>:active</code></h4><p><code>:active</code>伪类匹配被用户激活的元素，让页面能在浏览器监测到激活时给出反馈。</p><ul><li><p>当用<strong>鼠标交互</strong>时，它代表的是用户<strong>按下按键和松开按键之间</strong>的时间。</p></li><li><p><code>:active</code> 伪类通常用来匹配<strong><code>tab键</code>交互</strong>。</p></li></ul><p>注：通常用于但并不限于 <code>a</code> 和 <code>button</code>HTML元素</p><a id="more"></a><p><br></p><h4 id="LVHA顺序"><a href="#LVHA顺序" class="headerlink" title="LVHA顺序"></a>LVHA顺序</h4><p><code>:active</code>伪类可能会被后声明的其他链接相关的伪类覆盖，这些伪类包括 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:link" target="_blank" rel="noopener"><code>:link</code></a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:hover" target="_blank" rel="noopener"><code>:hover</code></a>和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:visited" target="_blank" rel="noopener"><code>:visited</code></a>。为了正常加上样式，需要把 <code>:active的样式放在所有链接相关的样式后，这种链接伪类先后顺序被称为</code>LVHA顺序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:link —&gt; :visited —&gt; :hover —&gt; :active</span><br></pre></td></tr></table></figure><p><code>:link</code>对指向<strong>未被访问页面的链接</strong>设置样式，<strong>根据浏览器的浏览历史</strong> </p><p><code>:visited</code>对指向<strong>已被访问页面的链接</strong>设置样式，<strong>根据浏览器的浏览历史</strong> </p><p>注：<code>:link</code>和<code>:visited</code> 调换位置不影响样式</p><p><br></p><h4 id="visited"><a href="#visited" class="headerlink" title=":visited"></a><code>:visited</code></h4><p>出于隐私原因，使用此选择器修改的样式有较多<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/:visited#%E9%99%90%E5%88%B6" target="_blank" rel="noopener">限制</a> </p><p>注：</p><ul><li>未设置颜色或透明的属性不能使用<code>:visited</code> </li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> LVHA </tag>
            
            <tag> 伪类 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SimHash与汉明距离</title>
      <link href="/2019/03/01/SimHash%E4%B8%8E%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/"/>
      <url>/2019/03/01/SimHash%E4%B8%8E%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</url>
      <content type="html"><![CDATA[<h4 id="SimHash"><a href="#SimHash" class="headerlink" title="SimHash"></a>SimHash</h4><p><code>SimHash</code>是<code>Google</code>处理海量网页采用的<strong>文本相似</strong>判定方法。算法的主要思想是降维，将高维的特征向量映射成一个<code>f-bit</code>的指纹(<code>fingerprint</code>)，通过比较两篇文章的<code>f-bit</code>指纹的<code>Hamming Distance</code>来确定文章是否重复或者高度近似。</p><a id="more"></a><p><br></p><p>具体的<code>simhash</code>过程如下： </p><ol><li>首先基于传统的<code>IR方法</code>，将文章转换为一组<strong>加权的特征值</strong>构成的向量。 </li><li>初始化一个<code>f维</code>的<code>向量V</code>，其中每一个元素初始值为0。 </li><li>对于文章的<strong>特征向量集</strong>中的每一个特征，做如下计算： 利用传统的<code>hash算法</code>映射到一个<code>f-bit</code>的签名。对于这个<code>f- bit</code>的签名，如果签名的第<code>i位</code>上为<code>1</code>，则对<code>向量V</code>中<code>第i维</code><strong>加上</strong>这个特征的<strong>权值</strong>，否则对向量的<code>第i维</code><strong>减去</strong>该特征的<strong>权值</strong>。 </li><li>对整个<code>特征向量集合</code>迭代上述运算后，根据<code>向量V</code>中每一维向量的符号来确定生成的<code>f-bit指纹</code>的值，如果<code>向量V</code>的<code>第i维</code>为正数，则生成<code>f-bit指纹</code>的<code>第i维</code>为1，否则为0。 </li></ol><p><img src="/2019/03/01/SimHash与汉明距离/1.jpg" alt=""></p><p>​        SimHash为Google处理海量网页的采用的文本相似判定方法。该方法的主要目的是降维，即将高维的特征向量映射成f-bit的指纹，通过比较两篇文档指纹的汉明距离来表征文档重复或相似性。</p><p><br></p><h4 id="汉明距离-Hamming-Distance"><a href="#汉明距离-Hamming-Distance" class="headerlink" title="汉明距离-Hamming Distance"></a>汉明距离-<code>Hamming Distance</code></h4><p>汉明距离用来计算两个向量的相似度，即通过<strong>比较向量每一位是否相同，若不同则汉明距离加1</strong>。</p><p>这样得到汉明距离。向量相似度越高，对应的汉明距离越小。如<code>10001001</code>和<code>10110001</code>有3位不同。</p><p><br></p><h4 id="与余弦相似性算法的区别"><a href="#与余弦相似性算法的区别" class="headerlink" title="与余弦相似性算法的区别"></a>与余弦相似性算法的区别</h4><p><code>余弦相似性算法</code>：通过对两个文本分词，<code>TF-IDF算法</code>向量化，对比两者的余弦夹角，夹角越小相似度越高，但由于有可能一个文章的特征向量词特别多导致整个向量维度很高，使得<strong>计算的代价太大</strong>不适合大数据量的计算。</p><ul><li><code>余弦相似性算法</code>适合于短文本</li><li><code>SimHash算法</code>适合于长文本，并且能应用于大数据环境中 </li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> SimHash </tag>
            
            <tag> 汉明距离 </tag>
            
            <tag> 余弦相似性 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>余弦相似性</title>
      <link href="/2019/03/01/%E4%BD%99%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/"/>
      <url>/2019/03/01/%E4%BD%99%E5%BC%A6%E7%9B%B8%E4%BC%BC%E6%80%A7/</url>
      <content type="html"><![CDATA[<h4 id="余弦相似性"><a href="#余弦相似性" class="headerlink" title="余弦相似性"></a>余弦相似性</h4><p><code>余弦相似性</code>大家都非常熟悉，它是定义在向量空间模型（VSM）中的，定义如下： </p><p><img src="/2019/03/01/余弦相似性/1.png" alt=""> </p><p>其中，<code>A、B</code>为向量中间中的两个向量。</p><p><br></p><p> 在使用它来做<strong>字符串相似性度量</strong>的时候，需要先将字符串<strong>向量化</strong>，通常使用<code>词袋模型（BOW）</code>来向量化。</p><p>举个例子如下： <code>String1 = &#39;apple&#39;   String2 = &#39;app&#39;</code> ，则词包为<code>{&#39;a&#39;,&#39;e&#39;,&#39;l&#39;,&#39;p&#39;}</code>，若使用<code>0,1</code>判断元素是否在词包中，<code>字符串1、2</code>可以转化为： </p><p><code>StringA = [1111]  StringB = [1001]</code> 。根据余弦公式，可以计算字符串相似性为：<code>0.707</code> </p><p><a href="https://github.com/hankcs/HanLP/blob/master/README.md" target="_blank" rel="noopener">词袋模型工具</a> </p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 相似度 </tag>
            
            <tag> 相似性 </tag>
            
            <tag> 余弦 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>字符串的相似度</title>
      <link href="/2019/03/01/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%BA%A6/"/>
      <url>/2019/03/01/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E7%9B%B8%E4%BC%BC%E5%BA%A6/</url>
      <content type="html"><![CDATA[<h4 id="Levenshtein-Distance算法"><a href="#Levenshtein-Distance算法" class="headerlink" title="Levenshtein Distance算法"></a>Levenshtein Distance算法</h4><p><code>Levenshtein Distance</code> 算法，又叫<strong>编辑距离算法</strong>，是指两个字符串之间，<strong>由一个转成另一个所需的最少编辑操作次数</strong>。许可的编辑操作包括：</p><ul><li><p>替换一个字符</p></li><li><p>插入一个字符</p></li><li><p>删除一个字符</p></li></ul><p>一般来说，编辑距离越小，两个串的相似度越大。相似度计算方式为：<code>1 - (distance / maxLen)</code> </p><p>注：<code>distance</code> 是所需的最少操作次数，<code>maxLen</code>是两个字符串长度的最大值。</p><a id="more"></a><p><br></p><h4 id="算法实现原理图解"><a href="#算法实现原理图解" class="headerlink" title="算法实现原理图解"></a>算法实现原理图解</h4><ol><li><h5 id="首先是有两个字符串，这里写一个简单的-abc-和-abe"><a href="#首先是有两个字符串，这里写一个简单的-abc-和-abe" class="headerlink" title="首先是有两个字符串，这里写一个简单的 abc 和 abe"></a>首先是有两个字符串，这里写一个简单的 <code>abc</code> 和 <code>abe</code></h5></li><li><h5 id="将字符串想象成下面的结构"><a href="#将字符串想象成下面的结构" class="headerlink" title="将字符串想象成下面的结构"></a>将字符串想象成下面的结构</h5></li></ol><p><code>A处</code>是一个标记，为了方便讲解</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">abc</th><th style="text-align:center">a</th><th style="text-align:center">b</th><th style="text-align:center">c</th></tr></thead><tbody><tr><td style="text-align:center">abe</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">a</td><td style="text-align:center">1</td><td style="text-align:center">A处</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">b</td><td style="text-align:center">2</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">e</td><td style="text-align:center">3</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><ol start="3"><li><h5 id="来计算A处出得值，它的值取决于：左边的值、上边的值、左上角的值"><a href="#来计算A处出得值，它的值取决于：左边的值、上边的值、左上角的值" class="headerlink" title="来计算A处出得值，它的值取决于：左边的值、上边的值、左上角的值"></a>来计算<code>A处</code>出得值，它的值取决于：<strong>左边的值、上边的值、左上角的值</strong></h5></li></ol><p>按照<code>Levenshtein distance</code>的意思：</p><ul><li>上面的值加 1 ，得到 <code>1+1=2</code> <strong>插入或删除 </strong> </li><li>左面的值加 1 ，得到 <code>1+1=2</code> <strong>插入或删除</strong> </li><li>左上角的值根据字符是否相同，<code>相同加 0</code> ，<code>不同加 1</code> 。<strong>替换</strong> </li></ul><p><code>A处</code>由于是两个 a 相同，左上角的值加 0 ，得到 <code>0+0=0</code> ，然后从我们上面计算出来的 <code>2，2，0</code> 三个值中选取最小值，所以 A 处的值为 0 。</p><ol start="4"><li><h5 id="于是表成为下面的样子"><a href="#于是表成为下面的样子" class="headerlink" title="于是表成为下面的样子"></a>于是表成为下面的样子</h5></li></ol><table><thead><tr><th></th><th>abc</th><th>a</th><th>b</th><th>c</th></tr></thead><tbody><tr><td>abe</td><td>0</td><td>1</td><td>2</td><td>3</td></tr><tr><td>a</td><td>1</td><td>0</td><td></td><td></td></tr><tr><td>b</td><td>2</td><td>B处</td><td></td><td></td></tr><tr><td>e</td><td>3</td><td></td><td></td></tr></tbody></table><p>在<code>B处</code>会同样得到三个值，左边计算后为 3 ，上边计算后为 1 ，在<code>B处</code>由于对应的字符为 <code>a、b</code>，不相等，所以左上角应该在当前值的基础上加 1 ，这样得到 <code>1+1=2</code> ，在<code>（3,1,2）</code>中选出最小的为 B 处的值。</p><h5 id="5-于是表就更新了"><a href="#5-于是表就更新了" class="headerlink" title="5.于是表就更新了"></a>5.于是表就更新了</h5><table><thead><tr><th></th><th>abc</th><th>a</th><th>b</th><th>c</th></tr></thead><tbody><tr><td>abe</td><td>0</td><td>1</td><td>2</td><td>3</td></tr><tr><td>a</td><td>1</td><td>0</td><td></td><td></td></tr><tr><td>b</td><td>2</td><td>1</td><td></td><td></td></tr><tr><td>e</td><td>3</td><td>C处</td><td></td></tr></tbody></table><p><code>C处</code>计算后：上面的值为 2 ，左边的值为 4 ，左上角的：a 和 e 不相同，所以加 1 ，即 <code>2+1</code> ，左上角的为 3 。</p><p>在<code>（2,4,3）</code>中取最小的为 C 处的值。</p><h5 id="6-于是依次推得到"><a href="#6-于是依次推得到" class="headerlink" title="6.于是依次推得到"></a>6.于是依次推得到</h5><table><thead><tr><th></th><th></th><th>a</th><th>b</th><th>c</th></tr></thead><tbody><tr><td></td><td>0</td><td>1</td><td>2</td><td>3</td></tr><tr><td>a</td><td>1</td><td>A处 0</td><td>D处 1</td><td>G处 2</td></tr><tr><td>b</td><td>2</td><td>B处 1</td><td>E处 0</td><td>H处 1</td></tr><tr><td>e</td><td>3</td><td>C处 2</td><td>F处 1</td><td>I处 1</td></tr></tbody></table><p><code>I处</code>: 表示 <code>abc</code> 和 <code>abe</code> 有1个需要编辑的操作</p><p><code>I处</code>的值需要通过<strong>动态规划</strong>方法来计算，因此需要获取一些额外的信息：</p><ul><li><code>A处</code>: 表示<code>a</code>和<code>a</code>需要有0个操作</li><li><code>B处</code>: 表示<code>ab</code>和<code>a</code>需要有1个操作</li><li><code>C处</code>: 表示<code>abe</code>和<code>a</code>需要有2个操作</li><li><code>D处</code>: 表示<code>a</code>和<code>ab</code>需要有1个操作</li><li><code>E处</code>: 表示<code>ab</code>和<code>ab</code>需要有0个操作</li><li><code>F处</code>: 表示<code>abe</code>和<code>ab</code>需要有1个操作</li><li><code>G处</code>: 表示<code>a</code>和<code>abc</code>需要有2个操作</li><li><code>H处</code>: 表示<code>ab</code>和<code>abc</code>需要有1个操作</li><li><code>I处</code>: 表示<code>abe</code>和<code>abc</code>需要有1个操作</li></ul><p><br></p><h4 id="主要应用"><a href="#主要应用" class="headerlink" title="主要应用"></a>主要应用</h4><ul><li>Spell checking 检查拼写</li><li>Speech recognition 语音识别</li><li>DNA analysis DNA分析</li><li>Plagiarism detection 检测抄袭</li></ul><p><br></p><h4 id="JS实现"><a href="#JS实现" class="headerlink" title="JS实现"></a>JS实现</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LevenshteinDistance = &#123;</span><br><span class="line">    _str1: <span class="literal">null</span>,</span><br><span class="line">    _str3: <span class="literal">null</span>,</span><br><span class="line">    _matrix: <span class="literal">null</span>,</span><br><span class="line"></span><br><span class="line">    _isString: <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(s) === <span class="string">'[object String]'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    _isNumber: <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(s) === <span class="string">'[object Number]'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    init: <span class="function"><span class="keyword">function</span>(<span class="params">str1, str2</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>._isString(str1) || !<span class="keyword">this</span>._isString(str2)) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">this</span>._str1 = str1;</span><br><span class="line">        <span class="keyword">this</span>._str2 = str2;</span><br><span class="line">        str1.length &amp;&amp; str2.length &amp;&amp; <span class="keyword">this</span>._createMatrix(str1.length + <span class="number">1</span>, str2.length + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">this</span>._matrix &amp;&amp; <span class="keyword">this</span>._initMatrix();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span> - <span class="keyword">this</span>._getDistance() / <span class="built_in">Math</span>.max(<span class="keyword">this</span>._str1.length, <span class="keyword">this</span>._str2.length);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算编辑距离</span></span><br><span class="line">    _getDistance: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> len1 = <span class="keyword">this</span>._str1.length,</span><br><span class="line">            len2 = <span class="keyword">this</span>._str2.length;</span><br><span class="line">        <span class="keyword">if</span> (!len1 || !len2) <span class="keyword">return</span> <span class="built_in">Math</span>.max(len1, len2);</span><br><span class="line">        <span class="keyword">var</span> str1 = <span class="keyword">this</span>._str1.split(<span class="string">''</span>),</span><br><span class="line">            str2 = <span class="keyword">this</span>._str2.split(<span class="string">''</span>);</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">0</span>,</span><br><span class="line">            j = <span class="number">0</span>,</span><br><span class="line">            temp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i++ <span class="xml"><span class="tag">&lt; <span class="attr">len1</span>) &#123;</span></span></span><br><span class="line"><span class="xml">            j = 0;</span></span><br><span class="line"><span class="xml">            while (j++ <span class="tag">&lt; <span class="attr">len2</span>) &#123;</span></span></span><br><span class="line"><span class="xml">                temp = str1[i - 1] === str2[j - 1] ? 0 : 1;</span></span><br><span class="line"><span class="xml">                this._matrix[i][j] = Math.min(</span></span><br><span class="line"><span class="xml">                    this._matrix[i - 1][j] + 1,</span></span><br><span class="line"><span class="xml">                    this._matrix[i][j - 1] + 1,</span></span><br><span class="line"><span class="xml">                    this._matrix[i - 1][j - 1] + temp</span></span><br><span class="line"><span class="xml">                );</span></span><br><span class="line"><span class="xml">            &#125;</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">        return this._matrix[i - 1][j - 1];</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    /*</span></span><br><span class="line"><span class="xml">     * 初始化矩阵</span></span><br><span class="line"><span class="xml">     * 为第一行、第一列赋值</span></span><br><span class="line"><span class="xml">     */</span></span><br><span class="line"><span class="xml">    _initMatrix: function() &#123;</span></span><br><span class="line"><span class="xml">        var cols = this._matrix[0].length,</span></span><br><span class="line"><span class="xml">            rows = this._matrix.length;</span></span><br><span class="line"><span class="xml">        var l = Math.max(cols, rows);</span></span><br><span class="line"><span class="xml">        while (l--) &#123;</span></span><br><span class="line"><span class="xml">            cols - 1 &gt;= l &amp;&amp; (this._matrix[0][l] = l);</span></span><br><span class="line"><span class="xml">            rows - 1 &gt;= l &amp;&amp; (this._matrix[l][0] = l);</span></span><br><span class="line"><span class="xml">        &#125;</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    /*</span></span><br><span class="line"><span class="xml">     * 创建矩阵</span></span><br><span class="line"><span class="xml">     * n:行</span></span><br><span class="line"><span class="xml">     * m:列</span></span><br><span class="line"><span class="xml">     */</span></span><br><span class="line"><span class="xml">    _createMatrix: function(n, m) &#123;</span></span><br><span class="line"><span class="xml">        if (!this._isNumber(n) || !this._isNumber(m) || n <span class="tag">&lt; <span class="attr">1</span> || <span class="attr">m</span> &lt; <span class="attr">1</span>) <span class="attr">return</span>;</span></span></span><br><span class="line"><span class="xml">        this._matrix = new Array(n), i = 0;</span></span><br><span class="line"><span class="xml">        while (i <span class="tag">&lt; <span class="attr">n</span>) <span class="attr">this._matrix</span>[<span class="attr">i</span>++] = <span class="string">new</span> <span class="attr">Array</span>(<span class="attr">m</span>);</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LevenshteinDistance.init(<span class="string">'omiga.org'</span>,<span class="string">'omiga'</span>).get();</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 相似度 </tag>
            
            <tag> 相似性 </tag>
            
            <tag> 编辑距离算法 </tag>
            
            <tag> Levenshtein </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git常用命令</title>
      <link href="/2019/02/28/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2019/02/28/git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      <content type="html"><![CDATA[<h4 id="1、查看历史"><a href="#1、查看历史" class="headerlink" title="1、查看历史"></a>1、查看历史</h4><ul><li><code>git log</code>：查看<strong>提交历史</strong>，以便确定要回退到哪个版本</li><li><code>git reflog</code>：查看<strong>命令历史</strong>，以便确定要回到未来的哪个版本</li></ul><p><br></p><h4 id="2、分支操作"><a href="#2、分支操作" class="headerlink" title="2、分支操作"></a>2、分支操作</h4><ul><li>查看分支：<code>git branch</code> </li><li>创建分支：<code>git branch &lt;name&gt;</code> </li><li>克隆特定分支：<code>git clone -b 分支名 仓库地址</code></li><li>切换分支：<code>git checkout &lt;name&gt;</code> </li><li>创建+切换分支：<code>git checkout -b &lt;name&gt;</code> </li><li>创建+切换+关联远程分支：<code>git checkout -b 本地分支名 origin/远程分支名</code></li><li>根据特定提交，创建切换分支：<code>git checkout -b &lt;name&gt; commitId</code></li><li>合并某分支到当前分支：<code>git merge &lt;name&gt;</code> </li><li>删除分支：<code>git branch -d &lt;name&gt;</code> </li></ul><p><br></p><h4 id="3、关联远程仓库"><a href="#3、关联远程仓库" class="headerlink" title="3、关联远程仓库"></a>3、关联远程仓库</h4><ul><li>查看关联的远程仓库的名称：<code>git remote</code> </li><li>查看关联的远程仓库的详细信息 ：<code>git remote -v</code> </li><li>添加远程仓库的关联：<code>git remote add origin &lt;url&gt;</code> </li><li>删除远程仓库的关联：<code>git remote remove &lt;name&gt;</code>  </li><li>更新远程仓库的<code>url</code> ：<code>git remote set-url origin &lt;newurl&gt;</code> </li></ul><a id="more"></a><p><br></p><h4 id="4、推送更新"><a href="#4、推送更新" class="headerlink" title="4、推送更新"></a>4、推送更新</h4><p><code>git push</code>命令用于将本地分支的更新，推送到远程主机。它的格式与<code>git pull</code>命令相似。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br></pre></td></tr></table></figure><h5 id="更新远程分支"><a href="#更新远程分支" class="headerlink" title="更新远程分支"></a>更新远程分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin master :master</span><br><span class="line"># 即是将本地的master分支推送到远程主机origin上的对应master分支</span><br><span class="line">#origin 是远程主机名，第一个master是本地分支名，第二个master是远程分支名</span><br></pre></td></tr></table></figure><h5 id="新建远程分支"><a href="#新建远程分支" class="headerlink" title="新建远程分支"></a>新建远程分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br><span class="line"># 如果远程分支被省略，表示将本地分支推送到与之存在追踪关系的远程分支</span><br><span class="line"># 如果该远程分支不存在，则会被新建</span><br></pre></td></tr></table></figure><h5 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin :master</span><br><span class="line"># 如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支</span><br><span class="line"># 等同于 git push origin --delete master</span><br></pre></td></tr></table></figure><h5 id="默认当前分支"><a href="#默认当前分支" class="headerlink" title="默认当前分支"></a>默认当前分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push origin</span><br><span class="line"># 如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略</span><br><span class="line"># 将当前分支推送到origin主机的对应分支</span><br></pre></td></tr></table></figure><h5 id="默认主机名"><a href="#默认主机名" class="headerlink" title="默认主机名"></a>默认主机名</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br><span class="line"># 如果当前分支只有一个远程分支，那么主机名都可以省略</span><br><span class="line"># 以使用git branch -r ，查看远程的分支名</span><br></pre></td></tr></table></figure><h5 id="默认主机"><a href="#默认主机" class="headerlink" title="默认主机"></a>默认主机</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br><span class="line"># 如果当前分支与多个主机存在追踪关系，则可以使用 -u 参数指定一个默认主机</span><br><span class="line"># 这样后面就可以不加任何参数使用git push</span><br></pre></td></tr></table></figure><h5 id="强行推送"><a href="#强行推送" class="headerlink" title="强行推送"></a>强行推送</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git push --force origin</span><br><span class="line"># 如果远程主机的版本比本地版本新，推送时Git会报错</span><br><span class="line"># 如果你一定要推送，可以使用-f | --force选项</span><br></pre></td></tr></table></figure><h5 id="推送所有分支"><a href="#推送所有分支" class="headerlink" title="推送所有分支"></a>推送所有分支</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git push --all origin</span><br><span class="line"># 当遇到这种情况就是不管是否存在对应的远程分支，将本地的所有分支都推送到远程主机，这时需要 -all 选项</span><br></pre></td></tr></table></figure><p><br></p><h4 id="5、回退-reset-与反做-revert"><a href="#5、回退-reset-与反做-revert" class="headerlink" title="5、回退(reset )与反做(revert )"></a>5、回退(reset )与反做(revert )</h4><h5 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h5><ul><li>回退本地分支：<code>git reset --hard commit_id</code> </li><li>强制推送到远程分支：<code>git push -f</code> </li></ul><p><strong>适用场景：</strong> 如果想恢复到之前某个提交的版本，且那个版本之后提交的版本都不要了</p><h5 id="反做"><a href="#反做" class="headerlink" title="反做"></a>反做</h5><ul><li>撤销某次提交：<code>git revert commit_id</code>  </li><li>撤销最近一次提交 ：<code>git revert HEAD</code> </li><li>撤销最近的N个提交：<code>git revert HEAD~3</code> </li></ul><p>通过创建一个新的版本，这个版本的内容与我们要回退到的目标版本一样，但是HEAD指针是指向这个新生成的版本，而不是目标版本 。 </p><p><strong>适用场景：</strong> 如果我们想恢复之前的某一版本（该版本不是merge类型），但是又想保留该目标版本后面的版本，记录下这整个版本变动流程，就可以用这种方法。 </p><p><br></p><h4 id="6、忽略已提交文件"><a href="#6、忽略已提交文件" class="headerlink" title="6、忽略已提交文件"></a>6、忽略已提交文件</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># git rm -r --cached 要忽略的文件</span><br><span class="line">git rm -r --cached . # 删除追踪状态</span><br><span class="line">git add . </span><br><span class="line">git commit -m "fixed untracked files"</span><br></pre></td></tr></table></figure><p><br></p><h4 id="7、合并多个commit"><a href="#7、合并多个commit" class="headerlink" title="7、合并多个commit"></a>7、合并多个commit</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i  [startpoint]  [endpoint]</span><br></pre></td></tr></table></figure><ul><li><p><code>-i(--interactive)</code>，即弹出交互式的界面让用户编辑完成合并操作</p></li><li><p><code>[startpoint]</code> 、<code>[endpoint]</code>则指定了一个<strong>前开后闭编辑区间</strong></p></li><li><p>如果不指定<code>[endpoint]</code>，则该区间的终点默认是当前分支<code>HEAD</code>所指向的<code>commit</code></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git rebase -i HEAD~3</span><br><span class="line">// git rebase -i 36224db</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">pick：保留该commit</span><br><span class="line"></span><br><span class="line">reword：保留该commit，但我需要修改该commit的注释</span><br><span class="line"></span><br><span class="line">edit：保留该commit, 但我要停下来修改该提交</span><br><span class="line"></span><br><span class="line">squash：将该commit和前一个commit合并</span><br><span class="line"></span><br><span class="line">fixup：将该commit和前一个commit合并，但我不要保留该提交的注释信息</span><br><span class="line"></span><br><span class="line">exec：执行shell命令</span><br><span class="line"></span><br><span class="line">drop：我要丢弃该commit</span><br></pre></td></tr></table></figure><p><br></p><h4 id="8、合并特定commit"><a href="#8、合并特定commit" class="headerlink" title="8、合并特定commit"></a>8、合并特定commit</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git cherry-pick &lt;commit-id&gt;</span><br><span class="line"></span><br><span class="line">#(左开，右闭] 区间</span><br><span class="line">git cherry_pick &lt;start-commit-id&gt;…&lt;end-commit-id&gt;</span><br><span class="line"></span><br><span class="line">#左闭，右闭] 的区间</span><br><span class="line">git cherry-pick &lt;start-commit-id&gt;^...&lt;end-commit-id&gt;</span><br></pre></td></tr></table></figure><p>注：无论是对单个 commit 进行 cherry-pick ，还是批量处理，注意一定要根据时间线，依照 commit 的先后顺序来处理。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux权限系统</title>
      <link href="/2019/02/27/linux%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2019/02/27/linux%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h4 id="一、权限"><a href="#一、权限" class="headerlink" title="一、权限"></a>一、权限</h4><p>权限是操作系统用来限制资源访问的机制，权限一般分为<strong>读、写、执行</strong>。</p><p>系统中每个文件都拥有<strong>特定的权限、所属用户及所属组</strong>，通过这样的机制来限制哪些用户、哪些组可以对特定的文件进行什么样的操作。</p><p>每个进程都是以某个用户的身份运行，所以进程的权限与该用户的权限一样，用户的权限越大，该进程所拥有的权限也就越大。</p><p><br></p><h4 id="二、文件权限"><a href="#二、文件权限" class="headerlink" title="二、文件权限"></a>二、文件权限</h4><p>Linux 中，每个文件拥有以下三种权限：</p><table><thead><tr><th>权限</th><th>对文件的影响</th><th>对目录的影响</th></tr></thead><tbody><tr><td>r（读取）</td><td>可读取文件内容</td><td>可列出目录内容</td></tr><tr><td>w（写入）</td><td>可以修改文件内容</td><td>可在目录创建、删除文件</td></tr><tr><td>x（执行）</td><td>可以作为命令执行</td><td>可进入目录</td></tr></tbody></table><p><strong>所以，目录必须拥有 <code>x</code> 权限才可查看其内容。很多时候，执行权限  <code>x</code> 对于目录而言也叫浏览权限。仅有 <code>r</code> 权限是无法查看目录内容的（因为连访问都做不到）。</strong> </p><p><br></p><a id="more"></a><p>Linux 权限基于 UGO 模型进行控制：</p><ul><li>U 代表 User，是文件或文件夹所属用户的权限；G 代表 Group，是文件或文件夹所属组的权限；O 代表 Other，是其他用户对文件或文件夹的权限</li><li>每一个文件的权限基于 UGO 模型进行设置</li><li>权限三个一组（rwx），对应 UGO 分别设置（总共有 3 个组 9 个权限）</li><li>每一个文件拥有一个所属用户和所属组，对应 U、G模型；不属于该文件所属用户和所属组的使用 O（Other）模型对应的权限</li></ul><p>命令 <code>ll</code> 可以查看当前目录下所有文件的详细信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-rwxrw-r‐-1 root root 1213 Feb 2 09:39 abc</span><br></pre></td></tr></table></figure><p><br></p><h4 id="三、修改权限"><a href="#三、修改权限" class="headerlink" title="三、修改权限"></a>三、修改权限</h4><p>命令<code>chmod</code>用以修改文件的权限：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod mode filename</span><br></pre></td></tr></table></figure><p><code>mode</code>参数格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">u、g、o     分别代表用户、组、其他</span><br><span class="line">a           代表ugo</span><br><span class="line">+、-        代表加入或删除对应权限</span><br><span class="line">r、w、x     代表三种权限</span><br><span class="line">-R          递归地修改</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod u +rw test.md    给文件的所属用户添加rw权限</span><br><span class="line">chmod g -x test.md     给文件的所属组移除x权限</span><br><span class="line">chmod go +r test.md    给文件的所属组和其他用户添加r权限</span><br><span class="line">chmod a -x test.md     给文件的所属UGO三个模型均移除x权限</span><br></pre></td></tr></table></figure><p>命令<code>chmod</code>也支持以三位八进制数值的方式修改权限，<code>rwx</code>权限值分别由数字表示如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">r = 4 (2 ^ 2)</span><br><span class="line">w = 2 (2 ^ 1)</span><br><span class="line">x = 1 (2 ^ 0)</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 权限 </tag>
            
            <tag> chmod </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Content-Security-Policy网页安全政策</title>
      <link href="/2019/02/26/Content-Security-Policy%E7%BD%91%E9%A1%B5%E5%AE%89%E5%85%A8%E6%94%BF%E7%AD%96/"/>
      <url>/2019/02/26/Content-Security-Policy%E7%BD%91%E9%A1%B5%E5%AE%89%E5%85%A8%E6%94%BF%E7%AD%96/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2016/09/csp.html" target="_blank" rel="noopener">原文</a> </p><p><br></p><h4 id="一、Content-Security-Policy-CSP"><a href="#一、Content-Security-Policy-CSP" class="headerlink" title="一、Content Security Policy - CSP"></a>一、Content Security Policy - CSP</h4><p><code>CSP</code>的实质就是<strong>白名单制度</strong>，开发者明确告诉客户端，哪些外部资源可以<strong>加载</strong>和<strong>执行</strong>，等同于提供白名单。它的<strong>实现和执行全部由浏览器完成</strong>，开发者只需通过以下两种方式进行配置即可：</p><ul><li>通过 HTTP 头信息的<code>Content-Security-Policy</code>的字段 </li><li>通过网页的<code>&lt;meta&gt;</code>标签 </li></ul><h5 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: script-src &apos;self&apos;; object-src &apos;none&apos;; style-src cdn.example.org third-party.org; child-src https:</span><br></pre></td></tr></table></figure><h5 id="meta"><a href="#meta" class="headerlink" title="meta"></a>meta</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"script-src 'self'; object-src 'none'; style-src cdn.example.org third-party.org; child-src https:"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面代码中，CSP 做了如下配置：</p><blockquote><ul><li>script-src：只信任当前域名</li><li>object-src：不信任任何URL，即不加载任何资源</li><li>style-src：只信任<code>cdn.example.org</code>和<code>third-party.org</code></li><li>child-src：必须使用HTTPS协议加载</li><li>其他资源：没有限制</li></ul></blockquote><a id="more"></a><p><br></p><h4 id="二、各类资源限制"><a href="#二、各类资源限制" class="headerlink" title="二、各类资源限制"></a>二、各类资源限制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">script-src：外部脚本</span><br><span class="line">style-src：样式表</span><br><span class="line">img-src：图像</span><br><span class="line">media-src：媒体文件（音频和视频）</span><br><span class="line">font-src：字体文件</span><br><span class="line">object-src：插件（比如 Flash）</span><br><span class="line">child-src：框架</span><br><span class="line">frame-ancestors：嵌入的外部资源（比如&lt;frame&gt;、&lt;iframe&gt;、&lt;embed&gt;和&lt;applet&gt;）</span><br><span class="line">connect-src：HTTP 连接（通过 XHR、WebSockets、EventSource等）</span><br><span class="line">worker-src：worker脚本</span><br><span class="line">manifest-src：manifest 文件</span><br><span class="line">default-src：用来设置上面各个选项的默认值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: default-src &apos;self&apos;</span><br><span class="line"># 限制所有的外部资源，都只能从当前域名加载</span><br></pre></td></tr></table></figure><p>注：如果同时设置某个单项限制和<code>default-src</code>，某个单项限制会覆盖<code>default-src</code>的值。</p><p><br></p><h4 id="三、限制值"><a href="#三、限制值" class="headerlink" title="三、限制值"></a>三、限制值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">主机名：example.org，https://example.com:443</span><br><span class="line">路径名：example.org/resources/js/</span><br><span class="line">通配符：*.example.org，*://*.example.com:*（表示任意协议、任意子域名、任意端口）</span><br><span class="line">协议名：https:、data:</span><br><span class="line">关键字&apos;self&apos;：当前域名，需要加引号</span><br><span class="line">关键字&apos;none&apos;：禁止加载任何外部资源，需要加引号</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>多个值也可以并列，用空格分隔</li><li>如果同一个限制选项使用多次，只有第一次会生效 </li></ul><p><br></p><h4 id="四、script-src-的特殊值"><a href="#四、script-src-的特殊值" class="headerlink" title="四、script-src 的特殊值"></a>四、script-src 的特殊值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">unsafe-inline：允许执行页面内嵌的&amp;lt;script&gt;标签和事件监听函数</span><br><span class="line">unsafe-eval：允许将字符串当作代码执行，比如使用eval、setTimeout、setInterval和Function等函数。</span><br><span class="line">nonce值：每次HTTP回应给出一个授权token，页面内嵌脚本必须有这个token，才会执行</span><br><span class="line">hash值：列出允许执行的脚本代码的Hash值，页面内嵌脚本的哈希值只有吻合的情况下，才能执行。</span><br></pre></td></tr></table></figure><p><br></p><h5 id="nonce值例子"><a href="#nonce值例子" class="headerlink" title="nonce值例子"></a><code>nonce</code>值例子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 1、服务器发送网页的时候，告诉浏览器一个随机生成的token</span><br><span class="line">Content-Security-Policy: script-src &apos;nonce-EDNnf03nceIOfn39fn3e9h3sdfa&apos;</span><br><span class="line"></span><br><span class="line"># 2、页面内嵌脚本，必须有这个token才能执行</span><br><span class="line">&lt;script nonce=EDNnf03nceIOfn39fn3e9h3sdfa&gt;// some code&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="hash值例子"><a href="#hash值例子" class="headerlink" title="hash值例子"></a>hash值例子</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 1、服务器给出一个允许执行的代码的hash值</span><br><span class="line">Content-Security-Policy: script-src &apos;sha256-qznLcsROx4GACP2dm0UCKCzCG-HiZ1guq6ZZDob_Tng=&apos;</span><br><span class="line"></span><br><span class="line"># 2、下面的代码就会允许执行，因为hash值相符</span><br><span class="line">&lt;script&gt;alert(&apos;Hello, world.&apos;);&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>计算hash值的时候，<code>&lt;script&gt;</code>标签不算在内</li><li>除了<code>script-src</code>选项，nonce值和hash值还可以用在<code>style-src</code>选项，控制页面内嵌的样式表 </li></ul><p><br></p><h5 id="微信公众号网页的信息"><a href="#微信公众号网页的信息" class="headerlink" title="微信公众号网页的信息"></a>微信公众号网页的信息</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: script-src &apos;self&apos; &apos;unsafe-inline&apos; &apos;unsafe-eval&apos; http://*.qq.com https://*.qq.com http://*.weishi.com https://*.weishi.com &apos;nonce-763410929&apos;;style-src &apos;self&apos; &apos;unsafe-inline&apos; http://*.qq.com https://*.qq.com;object-src &apos;self&apos; http://*.qq.com https://*.qq.com;font-src &apos;self&apos; data: http://*.qq.com https://*.qq.com http://fonts.gstatic.com https://fonts.gstatic.com;frame-ancestors &apos;self&apos; http://wx.qq.com https://wx.qq.com http://wx2.qq.com https://wx2.qq.com  http://wx8.qq.com https://wx8.qq.com http://web.wechat.com https://web.wechat.com http://web1.wechat.com https://web1.wechat.com http://web2.wechat.com https://web2.wechat.com http://sticker.weixin.qq.com https://sticker.weixin.qq.com http://bang.qq.com https://bang.qq.com http://app.work.weixin.qq.com https://app.work.weixin.qq.com http://work.weixin.qq.com https://work.weixin.qq.com http://finance.qq.com https://finance.qq.com http://gu.qq.com https://gu.qq.com http://wzq.tenpay.com https://wzq.tenpay.com;report-uri https://mp.weixin.qq.com/mp/fereport?action=csp_report</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> CSP </tag>
            
            <tag> Content-Security-Policy </tag>
            
            <tag> 网页安全政策 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rel-noopener</title>
      <link href="/2019/02/26/rel-noopener/"/>
      <url>/2019/02/26/rel-noopener/</url>
      <content type="html"><![CDATA[<h4 id="opener"><a href="#opener" class="headerlink" title="opener"></a><code>opener</code></h4><p><code>opener</code>属性是一个<strong>可读可写</strong>的属性，可返回对创建该窗口的 <code>Window</code>对象的引用。当你使用 <code>target=&#39;_blank&#39;</code> 打开一个新的标签页时，新页面的 <code>window</code> 对象上有一个属性 <code>opener</code>，它指向的是前一个页面的 <code>window</code> 对象。但是，后一个页面对前一个页面的控制，受同源策略限制 。</p><a id="more"></a><p><br></p><h4 id="noopener"><a href="#noopener" class="headerlink" title="noopener"></a><code>noopener</code></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://example.com"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">rel</span>=<span class="string">"noopener"</span>&gt;</span>Example site<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果使用了<code>rel=&quot;noopener&quot;</code>属性，新页面的<code>window.opener</code>属性值为<code>null</code>。</p><p><br></p><h4 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h4><p>如果<strong>后一个页面</strong>与<strong>前一个页面</strong><code>不同域</code>，<code>源安全模型</code>会阻止<code>window.opener</code>读取<strong>前一个页面</strong>的信息，但利用某些陈旧的API可以把你的页面导航到不同的URL：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.opener.location = newURL</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> rel </tag>
            
            <tag> noopener </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP-Content-Disposition</title>
      <link href="/2019/02/22/HTTP-Content-Disposition/"/>
      <url>/2019/02/22/HTTP-Content-Disposition/</url>
      <content type="html"><![CDATA[<p>在常规的HTTP应答中，<code>Content-Disposition</code> 消息头指示回复的内容该以何种形式展示，是以<strong>内联</strong>的形式（即网页或者页面的一部分），还是以<strong>附件</strong>的形式下载并保存到本地。 </p><h5 id="1、作为消息主体中的消息头"><a href="#1、作为消息主体中的消息头" class="headerlink" title="1、作为消息主体中的消息头"></a>1、作为消息主体中的消息头</h5><p>在HTTP场景中，第一个参数或者是<code>inline</code>（默认值，表示回复中的消息体会以页面的一部分或者整个页面的形式展示），或者是<code>attachment</code>（意味着消息体应该被下载到本地；大多数浏览器会呈现一个“保存为”的对话框，将<code>filename</code>的值预填为下载后的文件名，假如它存在的话）。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Disposition</span>: inline</span><br><span class="line"><span class="attribute">Content-Disposition</span>: attachment</span><br><span class="line"><span class="attribute">Content-Disposition</span>: attachment; filename="filename.jpg"</span><br></pre></td></tr></table></figure><p><br></p><h5 id="2、作为multipart-body中的消息头"><a href="#2、作为multipart-body中的消息头" class="headerlink" title="2、作为multipart body中的消息头"></a>2、作为multipart body中的消息头</h5><p>在HTTP场景中。第一个参数总是固定不变的<code>form-data</code>；附加的参数不区分大小写，并且拥有参数值，参数名与参数值用等号(=)连接，参数值用双引号括起来。参数之间用分号(;)分隔。</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Content-Disposition</span>: form-data</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="fieldName"</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="fieldName"; filename="filename.jpg"</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h5 id="3、示例"><a href="#3、示例" class="headerlink" title="3、示例"></a>3、示例</h5><p>以下是一则可以触发”保存为”对话框的服务器应答：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">200 OK</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br><span class="line"><span class="attribute">Content-Disposition</span>: attachment; filename="cool.html"</span><br><span class="line"><span class="attribute">Content-Length</span>: 22</span><br><span class="line"></span><br><span class="line">&lt;HTML&gt;Save me!&lt;/HTML&gt;</span><br></pre></td></tr></table></figure><p>这个简单的HTML文件会被下载到本地而不是在浏览器中展示。</p><p>大多数浏览器默认会建议将<code>cool.html</code>作为文件名。</p><p><br></p><p>以下是一个HTML表单的示例，展示了在 <code>multipart/form-data</code> format 格式的报文中使用<code>Content-Disposition</code> 消息头的情况：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/test.html</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: example.org</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data;boundary="boundary"</span><br><span class="line"></span><br><span class="line">--boundary</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="field1"</span><br><span class="line"></span><br><span class="line"><span class="attribute">value1</span></span><br><span class="line"><span class="attribute">--boundary</span></span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="field2"; filename="example.txt"</span><br><span class="line"></span><br><span class="line"><span class="attribute">value2</span></span><br><span class="line"><span class="attribute">--boundary--</span></span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> Content-Disposition </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx-serverName</title>
      <link href="/2019/02/21/nginx-serverName/"/>
      <url>/2019/02/21/nginx-serverName/</url>
      <content type="html"><![CDATA[<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 确切的server_name匹配</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.org  www.example.org;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以*通配符开始的最长字符串</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  <span class="regexp">*.example.org</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以*通配符结束的最长字符串</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  <span class="regexp">mail.*</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配正则表达式</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  ~^(?&lt;user&gt;.+)\.example\.net$;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>nginx</code>将按照以下顺序对<code>server_name</code>进行匹配，<strong>和配置文件中的出现顺序无关</strong></p><ol><li>确切的名字</li><li>以星号开头的最长通配符名称</li><li>最长的通配符名称以星号结尾</li><li>第一个匹配正则表达式（<strong>按配置文件中的出现顺序</strong>）</li></ol><p><strong>注：只要有一项匹配以后就会停止搜索</strong> </p><a id="more"></a><p><br></p><h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><ul><li>通配符名称只可以在名称的<strong>起始处或结尾处</strong>包含一个星号，并且<strong>星号</strong>与其他字符之间<strong>用点</strong>分隔</li><li><code>www.*.example.org</code>和<code>w*.example.org</code>都是非法的，请使用<code>~^www\..+\.example\.org$</code> 和<code>~^w.*\.example\.org$</code>代替</li></ul><p><br></p><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><ul><li>为了使用正则表达式，虚拟主机名必须以波浪线<code>~</code>起始否则该名字会被认为是个<strong>确切的名字</strong>  </li><li>如果表达式含<strong>星号</strong>，则会被认为是个通配符名称</li><li>不要忘记设置“<code>^</code>”和“<code>$</code>”锚点，        语法上它们不是必须的，但是逻辑上是的</li><li>域名中的点<code>.</code>需要用反斜线<code>\</code>转义。含有<code>{</code>和<code>}</code>的正则表达式需要被引用</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">server_name</span>  <span class="string">"~^(?&lt;name&gt;\w\d&#123;1,3&#125;+)\.example\.net$"</span>;</span><br></pre></td></tr></table></figure><p><br></p><p> 命名的正则表达式捕获组在后面<strong>可以作为变量使用</strong>： </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span>   ~^(www\.)?(?&lt;domain&gt;.+)$;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /sites/<span class="variable">$domain</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>PCRE</code>使用下面语法支持命名捕获组：</p><blockquote><table><thead><tr><th><code>?&lt;name&gt;</code></th><th>从PCRE-7.0开始支持，兼容Perl 5.10语法</th></tr></thead><tbody><tr><td><code>?&#39;name&#39;</code></td><td>从PCRE-7.0开始支持，兼容Perl 5.10语法</td></tr><tr><td><code>?P&lt;name&gt;</code></td><td>从PCRE-4.0开始支持，兼容Python语法</td></tr></tbody></table></blockquote><p><br></p><p>或者</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span>   ~^(www\.)?(.+)$;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /sites/<span class="variable">$2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="杂项名称"><a href="#杂项名称" class="headerlink" title="杂项名称"></a>杂项名称</h4><h5 id="空：-quot-quot"><a href="#空：-quot-quot" class="headerlink" title="空：&quot;&quot;"></a>空：<code>&quot;&quot;</code></h5><p>如果服务器块中未定义<code>server_name</code>，则<code>nginx</code>使用空名称作为服务器名称 </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span>  example.org  www.example.org  <span class="string">""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="下划线："><a href="#下划线：" class="headerlink" title="下划线：_"></a>下划线：<code>_</code></h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">80</span>  default_server;</span><br><span class="line">    <span class="attribute">server_name</span>  _;</span><br><span class="line">    <span class="attribute">return</span>       <span class="number">444</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 这个名称没什么特别之处，它只是无数域名之一，永远不会与任何真实姓名相交</span></span><br><span class="line"><span class="comment"># 使用"--"、"!@#"效果也是一样</span></span><br></pre></td></tr></table></figure><h5 id="default-server"><a href="#default-server" class="headerlink" title="default_server"></a>default_server</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> www.a.com;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 显示的定义一个 default server</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">server_name</span> _;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>; <span class="comment"># 403 forbidden</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="comment"># 如果没有显式声明 default server 则第一个 server 会被隐式的设为 default server</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> _; <span class="comment"># _ 并不是重点</span></span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>; <span class="comment"># 403 forbidden</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span> www.a.com;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> server_name </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Apache三种工作模式和配置文件</title>
      <link href="/2019/02/20/Apache%E4%B8%89%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2019/02/20/Apache%E4%B8%89%E7%A7%8D%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F%E5%92%8C%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="一、三种工作模式"><a href="#一、三种工作模式" class="headerlink" title="一、三种工作模式"></a>一、三种工作模式</h4><p>目前来说，Apache一共有三种稳定的MPM（<code>Multi-Processing Module</code>，多进程处理模块）。它们分别是 <code>prefork</code>、<code>worker</code> 和 <code>event</code> 。</p><p><br></p><h5 id="1、Prefork-MPM"><a href="#1、Prefork-MPM" class="headerlink" title="1、Prefork MPM"></a>1、Prefork MPM</h5><p>关键字：多进程</p><p><code>prefork</code>模式可以算是很古老但是非常稳定的模式。Apache在启动之初，就预派生<code>fork</code>一些子进程，然后等待请求进来，并且总是试图保持一些备用的子进程。之所以这样做，是<strong>为了减少频繁创建和销毁进程的开销</strong>。<strong>每个子进程中只有一个线程，在一个时间点内，只能处理一个请求。</strong> </p><p><img src="/2019/02/20/Apache三种工作模式和配置文件/1332763221_5826.jpg" alt=""></p><p><strong>优点：</strong>成熟，兼容所有新老模块。进程之间完全独立，使得它非常稳定。同时，不需要担心线程安全的问题。</p><p><strong>缺点：</strong>一个进程相对占用更多的系统资源，消耗更多的内存。而且，它并不擅长处理高并发请求，在这种场景下，它会将请求放进队列中，一直等到有可用进程，请求才会被处理。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mpm_prefork_module&gt;</span><br><span class="line">    <span class="comment">#服务器启动时建立的子进程数量</span></span><br><span class="line">    <span class="attribute">StartServers</span>          <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#空闲子进程的最小数量，默认5；</span></span><br><span class="line">    <span class="comment">#如果当前空闲子进程数少于MinSpareServers ，那么Apache将会产生新的子进程。此参数不要设的太大。</span></span><br><span class="line">    MinSpareServers       <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#空闲子进程的最大数量，默认10；</span></span><br><span class="line">    <span class="comment">#如果当前有超过MaxSpareServers数量的空闲子进程，那么父进程会杀死多余的子进程。</span></span><br><span class="line">    <span class="comment">#此参数也不需要设置太大，如果你将其设置比 MinSpareServers 小，</span></span><br><span class="line">    <span class="comment">#Apache会自动将其修改为MinSpareServers+1。</span></span><br><span class="line">    MaxSpareServers      <span class="number">10</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#限定服务器同一时间内客户端最大接入的请求数量，默认是150；</span></span><br><span class="line">    <span class="comment">#任何超过了该限制的请求都要进入等待队列，一旦一个个连接被释放，队列中的请求才将得到服务。</span></span><br><span class="line">    MaxClients          <span class="number">150</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#每个子进程在其生命周期内允许最大的请求数量，</span></span><br><span class="line">    <span class="comment">#如果请求总数已经达到这个数值，子进程将会结束，如果设置为0，子进程将永远不会结束。</span></span><br><span class="line">    <span class="comment">#若该值设置为非0值，可以防止运行PHP导致的内存泄露。</span></span><br><span class="line">    MaxRequestsPerChild   <span class="number">0</span></span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><ul><li>创建的进程数，最多达到每秒32个，直到满足<code>MinSpareServers</code>设置的值为止。这就是预派生（<code>prefork</code>）的由来。这种模式可以不必在请求到来时再产生新的进程，从而减小了系统开销以增加性能。</li><li>并发量请求数到达<code>MaxClients</code>（如256）时，而空闲进程只有10个。apache为继续增加创建进程。直到进程数到达256个。</li><li>当并发量高峰期过去了，并发请求数可能只有一个时，apache逐渐删除进程，直到进程数到达<code>MaxSpareServers</code>为止。</li></ul><a id="more"></a><p><br></p><h5 id="2、Worker-MPM"><a href="#2、Worker-MPM" class="headerlink" title="2、Worker MPM"></a>2、Worker MPM</h5><p>关键字：多进程 + 多线程</p><p><code>worker</code>模式比起上一个，是使用了多进程+多线程的模式。它也预先fork了几个子进程（数量比较少），<strong>每个子进程能够生成一些服务线程和一个监听线程，该监听线程监听接入请求并将其传递给服务线程处理和应答</strong>。</p><p>Apache总是试图维持一个备用(spare)或是空闲的服务线程池。这样，客户端无须等待新线程或新进程的建立即可得到处理。线程比起进程会更轻量，因为线程通常会共享父进程的内存空间，因此，内存的占用会减少一些，在高并发的场景下，表现得比 prefork模式好。</p><h5 id="为什么不直接使用多线程（即在一个进程内实现多进程），还要引入多进程？"><a href="#为什么不直接使用多线程（即在一个进程内实现多进程），还要引入多进程？" class="headerlink" title="为什么不直接使用多线程（即在一个进程内实现多进程），还要引入多进程？"></a>为什么不直接使用多线程（即在一个进程内实现多进程），还要引入多进程？</h5><p>原因主要是需要考虑稳定性，如果一个线程异常挂了，会导致父进程连同其他正常的子线程都挂了（它们都是同一个进程下的）。<code>多进程+多线程模式</code>中，各个进程之间都是独立的，如果某个线程出现异常，受影响的只是Apache的一部分服务，而不是整个服务。其他进程仍然可以工作。</p><p><img src="/2019/02/20/Apache三种工作模式和配置文件/aa213e02gw1ewdb2y6q5aj20fy0cft93.jpg" alt=""></p><p>优点：占据更少的内存，高并发下表现更优秀。</p><p>缺点：必须考虑线程安全的问题，因为多个子线程是共享父进程的内存地址的。如果使用<code>keep-alive</code>的长连接方式，也许中间几乎没有请求，这时就会发生阻塞，线程被挂起，需要一直等待到超时才会被释放。如果过多的线程，被这样占据，也会导致在高并发场景下的无服务线程可用。（该问题在prefork模式下，同样会发生）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mpm_worker_module&gt;</span><br><span class="line">    <span class="comment">#服务器启动时建立的子进程数量</span></span><br><span class="line">    <span class="attribute">StartServers</span>          <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#限定服务器同一时间内客户端最大接入的请求数量，默认是150；</span></span><br><span class="line">    <span class="comment">#任何超过了该限制的请求都要进入等待队列，一旦一个个连接被释放，队列中的请求才将得到服务。</span></span><br><span class="line">    MaxClients          <span class="number">150</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#空闲子进程的最小数量</span></span><br><span class="line">    MinSpareThreads      <span class="number">25</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#空闲子进程的最大数量</span></span><br><span class="line">    MaxSpareThreads      <span class="number">75</span> </span><br><span class="line"></span><br><span class="line">    <span class="comment">#每个子进程产生的线程数量</span></span><br><span class="line">    ThreadsPerChild      <span class="number">25</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#每个子进程在其生命周期内允许最大的请求数量，如果请求总数已经达到这个数值，子进程将会结束，</span></span><br><span class="line">    <span class="comment">#如果设置为0，子进程将永远不会结束。将该值设置为非0值，可以防止运行PHP导致的内存泄露。</span></span><br><span class="line">    MaxRequestsPerChild   <span class="number">0</span></span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><ul><li>由主控制进程生成<code>StartServers</code>个子进程，每个子进程中包含固定的<code>ThreadsPerChild</code>线程数，各个线程独立地处理请求。</li><li>同样，为了尽量避免在请求到来才生成线程，<code>MinSpareThreads</code>和<code>MaxSpareThreads</code>设置了最少和最多的空闲线程数；而<code>MaxClients</code>设置了所有子进程中的线程总数。</li><li>如果现有子进程中的线程总数不能满足负载，控制进程将派生新的子进程。</li></ul><p><br></p><h5 id="3、Event-MPM"><a href="#3、Event-MPM" class="headerlink" title="3、Event MPM"></a>3、Event MPM</h5><p>关键字：多进程 + 多线程 + epoll</p><p>这个是 Apache中最新的模式，在现在版本里的已经是稳定可用的模式。它和 worker模式很像，最大的区别在于，它解决了<code>keep-alive</code>场景下 ，长期被占用的线程的资源浪费问题。</p><p><code>event</code> MPM中，会有一个专门的线程来管理这些<code>keep-alive</code>类型的线程，当有真实请求过来的时候，将请求传递给服务线程，执行完毕后，又允许它释放。这样，一个线程就能处理几个请求了，实现了异步非阻塞。</p><p><code>event</code> MPM在遇到某些不兼容的模块时，会失效，将会回退到worker模式，一个工作线程处理一个请求。官方自带的模块，全部是支持<code>event</code>MPM的。</p><p><img src="/2019/02/20/Apache三种工作模式和配置文件/aa213e02gw1ewdb35653jj20ku0b4aax.jpg" alt=""></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mpm_worker_module&gt;</span><br><span class="line">    <span class="comment">#服务器启动时建立的子进程数量</span></span><br><span class="line">    <span class="attribute">StartServers</span>             <span class="number">3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#空闲子进程的最小数量</span></span><br><span class="line">    MinSpareThreads         <span class="number">75</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#空闲子进程的最小数量</span></span><br><span class="line">    MaxSpareThreads        <span class="number">250</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#每个子进程产生的线程数量</span></span><br><span class="line">    ThreadsPerChild         <span class="number">25</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#限定服务器同一时间内客户端最大接入的请求数量，默认是150；</span></span><br><span class="line">    <span class="comment">#任何超过了该限制的请求都要进入等待队列，一旦一个个连接被释放，队列中的请求才将得到服务。</span></span><br><span class="line">    MaxRequestWorkers      <span class="number">400</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#每个子进程在其生命周期内允许最大的请求数量，如果请求总数已经达到这个数值，子进程将会结束</span></span><br><span class="line">    <span class="comment">#如果设置为0，子进程将永远不会结束。将该值设置为非0值，可以防止运行PHP导致的内存泄露。</span></span><br><span class="line">    MaxRequestsPerChild   <span class="number">0</span></span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h4><p>Apache的主配置文件：<code>/etc/httpd/conf/httpd.conf</code></p><p>默认站点主目录：<code>/var/www/html/</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">ServerTokens OS</span><br><span class="line">#在出现错误页的时候是否显示服务器操作系统的名称，ServerTokens Prod为不显示</span><br><span class="line"></span><br><span class="line">ServerRoot &quot;/etc/httpd&quot;</span><br><span class="line">#用于指定Apache的运行目录，服务启动之后自动将目录改变为当前目录</span><br><span class="line">#在后面使用到的所有相对路径都是想对这个目录下</span><br><span class="line"></span><br><span class="line">User daemon                          # apache的用户，默认为daemon</span><br><span class="line">Group daemon                         # apache的用户，默认为daemon</span><br><span class="line"></span><br><span class="line">PidFile run/httpd.pid</span><br><span class="line">#记录httpd守护进程的pid号码，这是系统识别一个进程的方法</span><br><span class="line">#系统中httpd进程可以有多个，但这个PID对应的进程是其他的父进程</span><br><span class="line"></span><br><span class="line">Timeout 60</span><br><span class="line">#服务器与客户端断开的时间</span><br><span class="line"></span><br><span class="line">KeepAlive Off</span><br><span class="line">#是否持续连接</span><br><span class="line"></span><br><span class="line">MaxKeepAliveRequests 100</span><br><span class="line">#表示一个连接的最大请求数</span><br><span class="line"></span><br><span class="line">KeepAliveTimeout 15</span><br><span class="line">#断开连接前的时间</span><br><span class="line"></span><br><span class="line">&lt;IfModule prefork.c&gt; </span><br><span class="line">StartServers       8 </span><br><span class="line">MinSpareServers    5 </span><br><span class="line">MaxSpareServers   20 </span><br><span class="line">ServerLimit      256 </span><br><span class="line">MaxClients       256 </span><br><span class="line">MaxRequestsPerChild  4000 </span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">&lt;IfModule worker.c&gt; </span><br><span class="line">StartServers         4 </span><br><span class="line">MaxClients         300 </span><br><span class="line">MinSpareThreads     25 </span><br><span class="line">MaxSpareThreads     75 </span><br><span class="line">ThreadsPerChild     25 </span><br><span class="line">MaxRequestsPerChild  0 </span><br><span class="line">&lt;/IfModule&gt;</span><br><span class="line"></span><br><span class="line">Listen 80</span><br><span class="line">#监听的端口，如有多块网卡，默认监听所有网卡</span><br><span class="line"></span><br><span class="line">LoadModule auth_basic_module modules/mod_auth_basic.so </span><br><span class="line">LoadModule version_module modules/mod_version.so</span><br><span class="line">#启动时加载的模块</span><br><span class="line"></span><br><span class="line">Include conf.d/*.conf</span><br><span class="line">#加载的配置文件</span><br><span class="line"></span><br><span class="line">#启动服务后转换的身份，在启动服务时通常以root身份，然后转换身份，这样增加系统安全</span><br><span class="line"></span><br><span class="line">ServerAdmin root@localhost    #管理员的邮箱，如果出现问题，会在首页显示</span><br><span class="line"></span><br><span class="line">#ServerName www.example.com:80</span><br><span class="line"></span><br><span class="line">UseCanonicalName Off</span><br><span class="line">#如果客户端提供了主机名和端口，Apache将会使用客户端提供的这些信息来构建自引用URL。</span><br><span class="line">#这些值与用于实现基于域名的虚拟主机的值相同，并且对于同样的客户端可用。</span><br><span class="line">#CGI变量SERVER_NAME和SERVER_PORT也会由客户端提供的值来构建</span><br><span class="line"></span><br><span class="line">DocumentRoot &quot;/var/www/html&quot;    # apache的默认web站点目录路径，结尾不要添加斜线</span><br></pre></td></tr></table></figure><p>注：如果在编译时候不指定，系统默认的是prefork模式；如果需要换成worker模式，需要在编译的时候带上编译参数：<code>--with-mpm=worker</code></p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> 工作模式 </tag>
            
            <tag> 配置文件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>url格式和解析</title>
      <link href="/2019/02/12/url%E6%A0%BC%E5%BC%8F%E5%92%8C%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/02/12/url%E6%A0%BC%E5%BC%8F%E5%92%8C%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h4 id="url格式"><a href="#url格式" class="headerlink" title="url格式"></a><code>url</code>格式</h4><p><code>node.js</code>的<code>url</code> 模块提供了两套 API 来处理 URL：一个是旧版本遗留的 API，一个是实现了 <a href="http://nodejs.cn/s/fKgW8d" target="_blank" rel="noopener">WHATWG标准</a>的新 API。在下图中，URL <code>&#39;http://user:pass@sub.example.com:8080/p/a/t/h?query=string#hash&#39;</code> <strong>上方</strong>的是遗留的 <code>url.parse()</code> 返回的对象的属性。 <strong>下方</strong>的则是<code>WHATWG</code> 的 <code>URL</code> 对象的属性。 </p><p><img src="/2019/02/12/url格式和解析/1.png" alt="url格式"></p><a id="more"></a><p><br></p><h4 id="url解析"><a href="#url解析" class="headerlink" title="url解析"></a>url解析</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> parseUrl = <span class="function"><span class="keyword">function</span> (<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span><br><span class="line">    a.href = url;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        source: url,</span><br><span class="line">        protocol: a.protocol.replace(<span class="string">':'</span>, <span class="string">''</span>),</span><br><span class="line">        host: a.hostname,</span><br><span class="line">        port: a.port,</span><br><span class="line">        query: a.search,</span><br><span class="line">        params: (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">let</span> ret = &#123;&#125;,</span><br><span class="line">                seg = a.search.replace(<span class="regexp">/^\?/</span>, <span class="string">''</span>).split(<span class="string">'&amp;'</span>),</span><br><span class="line">                len = seg.length,</span><br><span class="line">                i = <span class="number">0</span>,</span><br><span class="line">                s;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!seg[i]) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                s = seg[i].split(<span class="string">'='</span>);</span><br><span class="line">                ret[s[<span class="number">0</span>]] = s[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;)(),</span><br><span class="line">        file: (a.pathname.match(<span class="regexp">/\/([^\/?#]+)$/i</span>) || [, <span class="string">''</span>])[<span class="number">1</span>],</span><br><span class="line">        hash: a.hash.replace(<span class="string">'#'</span>, <span class="string">''</span>),</span><br><span class="line">        path: a.pathname.replace(<span class="regexp">/^([^\/])/</span>, <span class="string">'/$1'</span>),</span><br><span class="line">        relative: (a.href.match(<span class="regexp">/tps?:\/\/[^\/]+(.+)/</span>) || [, <span class="string">''</span>])[<span class="number">1</span>],</span><br><span class="line">        segments: a.pathname.replace(<span class="regexp">/^\//</span>, <span class="string">''</span>).split(<span class="string">'/'</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> url </tag>
            
            <tag> 解析 </tag>
            
            <tag> 格式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>渐变色值</title>
      <link href="/2019/01/27/%E6%B8%90%E5%8F%98%E8%89%B2%E5%80%BC/"/>
      <url>/2019/01/27/%E6%B8%90%E5%8F%98%E8%89%B2%E5%80%BC/</url>
      <content type="html"><![CDATA[<h4 id="rgb-to-hex"><a href="#rgb-to-hex" class="headerlink" title="rgb to hex"></a>rgb to hex</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rgbToHex</span>(<span class="params">r, g, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> hex = ((r&lt;&lt;<span class="number">16</span>) | (g&lt;&lt;<span class="number">8</span>) | b).toString(<span class="number">16</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"#"</span> + <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="built_in">Math</span>.abs(hex.length<span class="number">-7</span>)).join(<span class="string">"0"</span>) + hex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="hex-to-rgb"><a href="#hex-to-rgb" class="headerlink" title="hex to rgb"></a>hex to rgb</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hexToRgb</span>(<span class="params">hex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rgb = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">1</span>; i&lt;<span class="number">7</span>; i+=<span class="number">2</span>)&#123;</span><br><span class="line">        rgb.push(<span class="built_in">parseInt</span>(<span class="string">"0x"</span> + hex.slice(i,i+<span class="number">2</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rgb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ratio = <span class="built_in">Math</span>.random();</span><br><span class="line"><span class="keyword">let</span> i = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> colorList = [];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getGradientColor</span>(<span class="params">ratio</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> r = <span class="built_in">Math</span>.cos(ratio) * <span class="number">127</span> + <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">let</span> g = <span class="built_in">Math</span>.cos(ratio + <span class="number">2</span> * <span class="built_in">Math</span>.PI / <span class="number">3</span>) * <span class="number">127</span> + <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">let</span> b = <span class="built_in">Math</span>.cos(ratio + <span class="number">4</span> * <span class="built_in">Math</span>.PI / <span class="number">3</span>) * <span class="number">127</span> + <span class="number">128</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span> + (r &lt;&lt; <span class="number">16</span> | g &lt;&lt; <span class="number">8</span> | b).toString(<span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line">    colorList.push(getGradientColor(ratio));</span><br><span class="line">    ratio += <span class="built_in">Math</span>.PI * <span class="number">2</span> / <span class="number">50</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br> </p>]]></content>
      
      
        <tags>
            
            <tag> 渐变 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx配置Host字段出错</title>
      <link href="/2019/01/21/Nginx%E9%85%8D%E7%BD%AEHost%E5%AD%97%E6%AE%B5%E5%87%BA%E9%94%99/"/>
      <url>/2019/01/21/Nginx%E9%85%8D%E7%BD%AEHost%E5%AD%97%E6%AE%B5%E5%87%BA%E9%94%99/</url>
      <content type="html"><![CDATA[<h4 id="一、Host为空"><a href="#一、Host为空" class="headerlink" title="一、Host为空"></a>一、Host为空</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虚拟主机的主域名</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> Host       <span class="variable">$proxy_host</span>;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求头中'Host'的值</span></span><br><span class="line"><span class="comment"># 如果请求头中没有携带Host值，那传到服务器的请求也不含这个字段</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> Host       <span class="variable">$http_host</span>;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求包含'Host'请求头时为'Host'字段的值</span></span><br><span class="line"><span class="comment"># 在请求未携带'Host'请求头时为虚拟主机的主域名</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> Host       <span class="variable">$host</span>;</span><br></pre></td></tr></table></figure><p>注：使用<code>$http_host</code>变量时，在<code>http1.1</code>协议中，如果请求不带<code>Host</code>字段值，会报错<code>400</code>错误</p><ul><li>客户端必须在所有<code>HTTP1.1</code>请求消息中包含<code>Host</code>头字段</li><li>如果请求的<code>URI</code>不包含所请求服务的主机名，则必须为<code>Host</code>头字段指定一个空值</li><li><code>HTTP1.1</code>代理必须确保它转发的任何请求消息，都包含一个适当的主机头字段，用于标识代理请求的服务</li><li>所有基于<code>HTTP1.1</code>服务器必须以<code>400</code>状态代码响应任何缺少主机头字段的<code>HTTP1.1</code>请求消息</li></ul><p><br></p><h5 id="http-host"><a href="#http-host" class="headerlink" title="$http_host"></a><code>$http_host</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$http_host不是一个固定的变量，他其实是$http_HEADER通配后的结果</span><br><span class="line">HEADER是一个通配符，通配的是请求头里的header属性</span><br><span class="line"></span><br><span class="line">例如$http_content_type表示请求头里content-type属性的值</span><br><span class="line">同理，$http_host指的就是请求头里的host属性</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="二、Host重复配置"><a href="#二、Host重复配置" class="headerlink" title="二、Host重复配置"></a>二、Host重复配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># proxy.conf文件</span></span><br><span class="line"><span class="attribute">proxy_set_header</span>        Host            <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span>        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> conf/proxy.conf; <span class="comment"># proxy.conf文件中已经设置了Host字段值</span></span><br><span class="line"><span class="attribute">proxy_set_header</span>        Host            <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span>        X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br></pre></td></tr></table></figure><p>注：两个<code>proxy_set_header        Host            $host;</code>语句，配置在同一个语句块中，不存在<strong>子语句块</strong>覆盖<strong>父语句块</strong>的情况</p><p><br></p><p><code>HTTP RFC2616</code></p><p>可以存在<strong>具有相同字段名的多个消息头字段</strong>在消息中，当且仅当该标头的整个字段值字段被定义为以逗号分隔的列表。通过将<strong>每个后续字段值附加到第一个</strong>，每个用逗号分隔。因此<strong>代理不得改变转发时这些字段值的顺序</strong> 。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br><span class="line">Cache-Control: no-store</span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">Cache-Control: no-cache, no-store</span><br></pre></td></tr></table></figure><p>由于<code>Host</code>字段值<strong>不允许以逗号分隔</strong>，<code>nginx</code>会报<code>400</code>状态码错误。</p><p><br></p><h4 id="三、-host变量"><a href="#三、-host变量" class="headerlink" title="三、$host变量"></a>三、$host变量</h4><p>$host变量的值按照如下优先级获得：</p><ol><li><p><strong>请求行</strong>中的<code>host</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET www.test.info/index.php HTTP/1.1</span><br></pre></td></tr></table></figure></li><li><p><strong>请求头</strong>中的<code>Host</code>头部，<strong>除了端口号的部分</strong></p></li><li><p>与一条请求匹配的server name</p></li></ol><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> nginx </tag>
            
            <tag> Host </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Proxy</title>
      <link href="/2019/01/19/Proxy/"/>
      <url>/2019/01/19/Proxy/</url>
      <content type="html"><![CDATA[<h4 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure><h5 id="传参说明"><a href="#传参说明" class="headerlink" title="传参说明"></a>传参说明</h5><ul><li><code>target</code>：使用<code>Proxy</code>包装的目标对象，它可以是任何类型的对象，包括数组、函数或甚至另一个<code>proxy</code>对象</li><li><code>handler</code>：一个对象，其属性是在对其执行操作时定义代理行为的函数</li></ul><h5 id="对象代理"><a href="#对象代理" class="headerlink" title="对象代理"></a>对象代理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getting <span class="subst">$&#123;key&#125;</span>!`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, key, receiver);</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">target, key, value, receiver</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;key&#125;</span>!`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>要使得<code>Proxy</code>起作用，<strong>必须针对<code>Proxy</code>实例进行操作</strong>，而不是针对目标对象进行操作 </li><li>如果<code>handler</code>没有设置任何拦截，那就等同于<strong>直接通向原对象</strong> </li><li>Proxy 实例可以<strong>作为其他对象的原型对象</strong> </li></ul><h5 id="函数代理"><a href="#函数代理" class="headerlink" title="函数代理"></a>函数代理</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params">target, name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (name === <span class="string">'prototype'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Object</span>.prototype;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Hello, '</span> + name;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    apply: <span class="function"><span class="keyword">function</span>(<span class="params">target, thisBinding, args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> args[<span class="number">0</span>];</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    construct: <span class="function"><span class="keyword">function</span>(<span class="params">target, args</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">value</span>: args[<span class="number">1</span>] &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fproxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(<span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;, handler);</span><br><span class="line"></span><br><span class="line">fproxy(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">new</span> fproxy(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// &#123;value: 2&#125;</span></span><br><span class="line">fproxy.prototype === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br><span class="line">fproxy.foo === <span class="string">"Hello, foo"</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>注：<code>Proxy</code>比<code>Object.defineProperty</code> 的功能更强大。Vue的作者宣称将在Vue3.0版本后加入<code>Proxy</code>从而代替<code>Object.defineProperty</code> 。</p><a id="more"></a><p><br></p><h4 id="二、创建可撤销的Proxy对象"><a href="#二、创建可撤销的Proxy对象" class="headerlink" title="二、创建可撤销的Proxy对象"></a>二、创建可撤销的Proxy对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建</span></span><br><span class="line"><span class="keyword">var</span> revocable = <span class="built_in">Proxy</span>.revocable(target, handler);</span><br><span class="line"><span class="comment">// 返回一个包含了所生成的代理对象本身以及该代理对象的撤销方法的对象</span></span><br><span class="line"><span class="comment">// 其结构为： &#123;"proxy": proxy, "revoke": revoke&#125;</span></span><br></pre></td></tr></table></figure><h5 id="返回对象参数说明"><a href="#返回对象参数说明" class="headerlink" title="返回对象参数说明"></a>返回对象参数说明</h5><ul><li><code>proxy</code>：表示新生成的代理对象本身，和用一般方式 <code>new Proxy(target, handler)</code> 创建的代理对象没什么不同，只是它可以被撤销掉。</li><li><code>revoke</code>：撤销方法，调用的时候不需要加任何参数，就可以撤销掉和它一起生成的那个代理对象。</li></ul><p><br></p><p>注：一旦某个代理对象被撤销，它将变的几乎完全不可用，永远不可能恢复到原来的状态，在它身上执行任何的<strong>可代理操作</strong>都会抛出 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypeError" target="_blank" rel="noopener"><code>TypeError</code></a> 异常。同时和它关联的<strong>目标对象</strong>以及<strong>处理器对象</strong>将有可能被垃圾回收掉。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> revocable = <span class="built_in">Proxy</span>.revocable(&#123;&#125;, &#123;</span><br><span class="line">  get(target, name) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"[["</span> + name + <span class="string">"]]"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> proxy = revocable.proxy;</span><br><span class="line">proxy.foo;              <span class="comment">// "[[foo]]"</span></span><br><span class="line"></span><br><span class="line">revocable.revoke();     <span class="comment">// 执行撤销方法</span></span><br><span class="line"></span><br><span class="line">proxy.foo;              <span class="comment">// TypeError</span></span><br><span class="line">proxy.foo = <span class="number">1</span>           <span class="comment">// 同样 TypeError</span></span><br><span class="line"><span class="keyword">delete</span> proxy.foo;       <span class="comment">// 还是 TypeError</span></span><br><span class="line"><span class="keyword">typeof</span> proxy            <span class="comment">// "object"，因为 typeof 不属于可代理操作</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="三、13-种Proxy代理操作"><a href="#三、13-种Proxy代理操作" class="headerlink" title="三、13 种Proxy代理操作"></a>三、13 种Proxy代理操作</h4><ul><li><strong>get(target, propKey, receiver)</strong>：拦截对象属性的读取，比如<code>proxy.foo</code>和<code>proxy[&#39;foo&#39;]</code> </li></ul><ul><li><strong>set(target, propKey, value, receiver)</strong>：拦截对象属性的设置，比如<code>proxy.foo = v</code>或<code>proxy[&#39;foo&#39;] = v</code>，返回一个布尔值 </li></ul><ul><li><strong>has(target, propKey)</strong>：拦截<code>propKey in proxy</code>的操作，返回一个布尔值</li></ul><ul><li><strong>deleteProperty(target, propKey)</strong>：拦截<code>delete proxy[propKey]</code>的操作，返回一个布尔值</li></ul><ul><li><strong>ownKeys(target)</strong>：拦截<code>Object.getOwnPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code>循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而<code>Object.keys()</code>的返回结果仅包括目标对象自身的可遍历属性</li></ul><ul><li><strong>getOwnPropertyDescriptor(target, propKey)</strong>：拦截<code>Object.getOwnPropertyDescriptor(proxy, propKey)</code>，返回属性的描述对象</li></ul><ul><li><strong>defineProperty(target, propKey, propDesc)</strong>：拦截<code>Object.defineProperty(proxy, propKey, propDesc）</code>、<code>Object.defineProperties(proxy, propDescs)</code>，返回一个布尔值</li></ul><ul><li><strong>preventExtensions(target)</strong>：拦截<code>Object.preventExtensions(proxy)</code>，返回一个布尔值</li></ul><ul><li><strong>getPrototypeOf(target)</strong>：拦截<code>Object.getPrototypeOf(proxy)</code>，返回一个对象</li></ul><ul><li><strong>isExtensible(target)</strong>：拦截<code>Object.isExtensible(proxy)</code>，返回一个布尔值</li></ul><ul><li><strong>setPrototypeOf(target, proto)</strong>：拦截<code>Object.setPrototypeOf(proxy, proto)</code>，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截</li></ul><ul><li><strong>apply(target, object, args)</strong>：拦截 Proxy 实例作为函数调用的操作，比如<code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code></li></ul><ul><li><strong>construct(target, args)</strong>：拦截 Proxy 实例作为构造函数调用的操作，比如<code>new proxy(...args)</code> </li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> Proxy </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>实现bind方法</title>
      <link href="/2019/01/19/%E5%AE%9E%E7%8E%B0bind%E6%96%B9%E6%B3%95/"/>
      <url>/2019/01/19/%E5%AE%9E%E7%8E%B0bind%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h5 id="手写bind方法"><a href="#手写bind方法" class="headerlink" title="手写bind方法"></a>手写bind方法</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">let</span> args = <span class="built_in">Array</span>.prototye.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">let</span> context = args.shift();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn.apply(context, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过数据劫持(或者装饰模式)，就可以实现vue-methods方法中永远绑定当前实例</span></span><br></pre></td></tr></table></figure><a id="more"></a>]]></content>
      
      
        <tags>
            
            <tag> bind </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>关于Vue单向数据流的理解</title>
      <link href="/2019/01/19/%E5%85%B3%E4%BA%8EVue%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E7%90%86%E8%A7%A3/"/>
      <url>/2019/01/19/%E5%85%B3%E4%BA%8EVue%E5%8D%95%E5%90%91%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E7%90%86%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h4 id="一、单向数据流"><a href="#一、单向数据流" class="headerlink" title="一、单向数据流"></a>一、单向数据流</h4><p>所有的 prop 都使得其<code>父子 prop</code>之间形成了一个<strong>单向下行绑定</strong>：父级 prop 的更新会向下流动到子组件中，但是反过来则不行。这样会防止从子组件意外改变父级组件的状态，从而导致你的应用的数据流向难以理解。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意在 JavaScript 中对象和数组是通过引用传入的，所以对于一个数组或对象类型的 prop 来说，在子组件中改变这个对象或数组本身将会影响到父组件的状态。</span><br></pre></td></tr></table></figure><h5 id="1、保持单向数据流的重要性"><a href="#1、保持单向数据流的重要性" class="headerlink" title="1、保持单向数据流的重要性"></a>1、保持单向数据流的重要性</h5><p>在父组件中，<strong>一个变量往往关联着多个变量或动作</strong> </p><ul><li>如果在子组件中修改了传进来的prop对象，并且没有在父组件中<code>watch</code>该prop对象，不会主动触发其他变量的修改或动作的发生，导致数据局部展示错误。</li><li>如果主动<code>watch</code>该prop对象，由于无法准确预知修改的来源和方式，从而大大增加了父组件的维护难度。</li></ul><h5 id="2、组件的分类"><a href="#2、组件的分类" class="headerlink" title="2、组件的分类"></a>2、组件的分类</h5><ul><li><code>抽象通用组件</code> <ul><li><strong>基本数据</strong>和<strong>默认值</strong>都是通过prop传入，没有在组件内依赖<code>ajax</code>异步数据</li><li><strong>保证不修改prop</strong>，<strong>交互结果</strong>通过<code>v-on</code>等通知方式返回</li></ul></li><li><code>业务通用组件</code> <ul><li>在组件内依赖业务<code>ajax</code>异步数据</li><li>在需要进行<code>增删改查</code>操作的表格中，很难做到完全不修改prop，<code>CURD</code>操作往往依赖于业务逻辑。如果不直接修改，则需要添加N多的<code>v-on</code>事件</li></ul></li></ul><a id="more"></a><p><br></p><h4 id="二、组件通信规范"><a href="#二、组件通信规范" class="headerlink" title="二、组件通信规范"></a>二、组件通信规范</h4><p>Vue 组件有多种通信方式，选择合理的通信方式，<strong>尽可能保证数据的单向流动</strong>。</p><ul><li><code>props</code>，遵守使用props来初始化子组件，尽量不修改props值</li><li><code>refs</code>，父组件通过refs获取子组件实例，适用于<strong>主动</strong>获取（只读）子组件数据或调用子组件方法修改数据</li><li><code>v-on</code>，适用于被动获取子组件数据</li><li><code>bus</code>，监听自定义事件，适用于被动获取组件数据，忽略组件层级关系</li></ul><p>注：基于<strong>数据劫持</strong>和<strong>发布订阅模式</strong>。为了避免修改，可以直接使用深度拷贝来初始化。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 单向数据流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>函数扩展-尾调用和尾递归</title>
      <link href="/2019/01/17/%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95-%E5%B0%BE%E8%B0%83%E7%94%A8%E5%92%8C%E5%B0%BE%E9%80%92%E5%BD%92/"/>
      <url>/2019/01/17/%E5%87%BD%E6%95%B0%E6%89%A9%E5%B1%95-%E5%B0%BE%E8%B0%83%E7%94%A8%E5%92%8C%E5%B0%BE%E9%80%92%E5%BD%92/</url>
      <content type="html"><![CDATA[<h4 id="一、尾调用"><a href="#一、尾调用" class="headerlink" title="一、尾调用"></a>一、尾调用</h4><p><code>尾调用（Tail Call）</code>是<strong>函数式编程</strong>的一个重要概念，本身非常简单，一句话就能说清楚，就是指<strong>某个函数的最后一步是调用另一个函数</strong>。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数f的最后一步是调用函数g，这就叫尾调用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> g(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾调用不一定出现在函数尾部，只要是最后一步操作即可</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> m(x)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> n(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下三种情况，都不属于尾调用</span></span><br><span class="line"><span class="comment">// 情况一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> y = g(x);</span><br><span class="line">    <span class="keyword">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> g(x) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况三</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    g(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a><h4 id="二、尾调用优化"><a href="#二、尾调用优化" class="headerlink" title="二、尾调用优化"></a>二、尾调用优化</h4><p>函数调用会在内存形成一个<code>调用帧（call frame）</code>，<strong>保存调用位置和内部变量等信息</strong>。所有的<code>调用帧</code>，就形成一个<code>调用栈（call stack）</code>。</p><ul><li>如果在函数<code>A</code>的内部调用函数<code>B</code>，那么在<code>A</code>的调用帧上方，还会形成一个<code>B</code>的调用帧。等到<code>B</code>运行结束，将结果返回到<code>A</code>，<code>B</code>的调用帧才会消失。</li></ul><p><code>尾调用</code>由于是函数的最后一步操作，所以不需要保留外层函数的调用帧，因为调用位置、内部变量等信息都不会再用到了，只要直接用内层函数的调用帧，取代外层函数的调用帧就可以了。</p><p><strong>注意：只有不再用到外层函数的内部变量，内层函数的调用帧才会取代外层函数的调用帧，否则就无法进行<code>尾调用优化</code>。</strong>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不会进行尾调用优化，因为内层函数inner用到了外层函数addOne的内部变量one</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addOne</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> one = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params">b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> b + one;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> inner(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="三、尾递归"><a href="#三、尾递归" class="headerlink" title="三、尾递归"></a>三、尾递归</h4><p>函数调用自身，称为递归。如果尾调用自身，就称为尾递归。 </p><p>递归非常耗费内存，因为需要同时保存成千上百个调用帧，很容易发生<code>栈溢出</code>错误（stack overflow）。但对于尾递归来说，由于只存在一个调用帧，所以永远不会发生<code>栈溢出</code>错误。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算n的阶乘，最多需要保存n个调用记录，复杂度 O(n) </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>) <span class="comment">// 120</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写成尾递归，只保留一个调用记录，复杂度 O(1) </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n, total</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total;</span><br><span class="line">    <span class="keyword">return</span> factorial(n - <span class="number">1</span>, n * total);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">factorial(<span class="number">5</span>, <span class="number">1</span>) <span class="comment">// 120</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 非尾递归的 Fibonacci 数列</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> ( n &lt;= <span class="number">1</span> ) &#123;<span class="keyword">return</span> <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Fibonacci(n - <span class="number">1</span>) + Fibonacci(n - <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fibonacci(<span class="number">10</span>) <span class="comment">// 89</span></span><br><span class="line">Fibonacci(<span class="number">100</span>) <span class="comment">// 堆栈溢出</span></span><br><span class="line">Fibonacci(<span class="number">500</span>) <span class="comment">// 堆栈溢出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 尾递归优化过的 Fibonacci 数列</span></span><br><span class="line"><span class="comment">// 只要函数参数使用了默认值、解构赋值、或者扩展运算符，</span></span><br><span class="line"><span class="comment">// 那么函数内部就不能显式设定为严格模式，否则会报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fibonacci2</span> (<span class="params">n , ac1 = <span class="number">1</span> , ac2 = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>( n &lt;= <span class="number">1</span> ) &#123;<span class="keyword">return</span> ac2&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Fibonacci2 (n - <span class="number">1</span>, ac2, ac1 + ac2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fibonacci2(<span class="number">100</span>) <span class="comment">// 573147844013817200000</span></span><br><span class="line">Fibonacci2(<span class="number">1000</span>) <span class="comment">// 7.0330367711422765e+208</span></span><br><span class="line">Fibonacci2(<span class="number">10000</span>) <span class="comment">// Infinity</span></span><br></pre></td></tr></table></figure><p>注：ES6 的尾调用优化只在严格模式下开启，正常模式是无效的。（<strong>验证：结论错误，Fibonacci2是正常模式</strong>）</p><p>这是因为在正常模式下，函数内部有两个变量，可以跟踪函数的调用栈。</p><ul><li><code>func.arguments</code>：返回调用时函数的参数。</li><li><code>func.caller</code>：返回调用当前函数的那个函数。</li></ul><p>尾调用优化发生时，函数的调用栈会改写，因此上面两个变量就会失真。严格模式禁用这两个变量，所以尾调用模式仅在严格模式下生效。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 尾调用 </tag>
            
            <tag> 尾递归 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>运算符优先级和短路运算</title>
      <link href="/2019/01/16/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E7%9F%AD%E8%B7%AF%E8%BF%90%E7%AE%97/"/>
      <url>/2019/01/16/%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7%E5%92%8C%E7%9F%AD%E8%B7%AF%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<h4 id="一、短路运算"><a href="#一、短路运算" class="headerlink" title="一、短路运算"></a>一、短路运算</h4><p>当<code>逻辑与&amp;&amp;</code>的第一个操作数的值是<code>false</code>时，直接返回第一个操作数的值，不再对第二个操作数进行计算</p><p>当<code>逻辑或||</code>的第一个操作数的值是<code>true</code>时，直接返回第一个操作数的值，不再对第二个操作数进行计算</p><p><br></p><h4 id="二、运算符优先级"><a href="#二、运算符优先级" class="headerlink" title="二、运算符优先级"></a>二、运算符优先级</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table" target="_blank" rel="noopener">优先级表格</a> </p><p><br></p><a id="more"></a><h4 id="三、求值顺序"><a href="#三、求值顺序" class="headerlink" title="三、求值顺序"></a>三、<a href="https://www.zhihu.com/question/52116922" target="_blank" rel="noopener">求值顺序</a></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn01</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn01'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn02</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn02'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn03</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'fn03'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(fn01() || fn02() &amp;&amp; fn03()); <span class="comment">// fn01 =&gt; fn02 =&gt; fn03 =&gt; true</span></span><br></pre></td></tr></table></figure><p>要注意区分<code>优先级</code>、<code>结合性</code>、<code>求值顺序</code>三者的区别。</p><p>这三个是不同的概念，却经常被混淆。通过<code>AST</code>来看就很容易理解：（假设源码是从左到右输入的） </p><p><strong>所谓优先级</strong>，就是<strong>不同操作</strong>相邻出现时，AST节点与根的距离的关系。<strong>优先级高的操作会更远离根，优先级低的操作会更接近根</strong>。为什么？因为整棵AST是以<code>后序遍历求值</code>的，显然节点离根越远就越早被求值。 </p><p><strong>所谓结合性</strong>，就是当<strong>同类操作</strong>相邻出现时，操作的先后顺序同AST节点与根的距离的关系。如果是左结合，则先出现的操作对应的AST节点比后出现的操作的节点离根更远；换句话说，先出现的节点会是后出现节点的子节点。 </p><p><strong>所谓求值顺序</strong>，就是在<strong>遍历子节点时的顺序</strong>。对二元运算对应的节点来说，先遍历左子节点再遍历右子节点就是从左到右的求值顺序，反之则是从右到左的求值顺序。 </p><p>这三个概念与运算的联系都很紧密，但实际描述的是不同的关系。前两者是解析器根据语法生成AST时就已经决定好的，后者则是解释执行或者生成代码而去遍历AST时决定的。 </p><p>在没有副作用的环境中，给定优先级与结合性，则无论求值顺序是怎样的都能得到同样的结果；而在有副作用的环境中，求值顺序会影响结果。</p><p><br></p><p>对应<code>console.log(fn01() || fn02() &amp;&amp; fn03())</code>，AST是： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     ||</span><br><span class="line">   /    \</span><br><span class="line">fn01()   &amp;&amp;</span><br><span class="line">        /  \</span><br><span class="line">    fn02()  fn03()</span><br></pre></td></tr></table></figure><p>表达式层面上，代码的执行就是后序遍历这棵AST而已。</p><p>优先级：在相邻的两个运算符 || 与 &amp;&amp; 中，&amp;&amp; 比 || 离AST的根更远所以优先级更高</p><p>结合性：这里没有相邻的同优先级运算符所以展现不出 || 与 &amp;&amp; 的结合性，虽然它们都是左结合的</p><p>求值顺序：JavaScript的求值顺序就是从左向右的。对这棵AST来说就是在后序遍历时，每个节点的求值过程是先遍历左子树，再遍历右子树，然后对自己求值。</p><p><br></p><p>AST生成传送门</p><ul><li><a href="https://link.zhihu.com/?target=http%3A//esprima.org/demo/parse.html" target="_blank" rel="noopener">Esprima: Parser</a> </li><li><a href="https://link.zhihu.com/?target=http%3A//nhiro.org/learn_language/AST-Visualization-on-browser.html" target="_blank" rel="noopener">AST Visualization on browser</a>  </li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 运算符 </tag>
            
            <tag> 短路 </tag>
            
            <tag> 优先级 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>常量对象</title>
      <link href="/2019/01/12/%E5%B8%B8%E9%87%8F%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/01/12/%E5%B8%B8%E9%87%8F%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h3 id="一、freeze"><a href="#一、freeze" class="headerlink" title="一、freeze"></a>一、freeze</h3><p><code>Object.freeze()</code>方法可以冻结<code>（浅冻结 ）</code>一个对象，冻结指的是<strong>不能向这个对象添加新的属性<code>（增）</code>，不能修改其已有属性的值<code>（改）</code>，不能删除已有属性<code>（删）</code>，以及不能修改该对象已有属性的可枚举性、可配置性、可写性</strong>。该方法返回传递的对象，而不是创建一个被冻结的副本 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浅冻结</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj1 = <span class="built_in">Object</span>.freeze(&#123;<span class="attr">internal</span>: &#123;&#125;&#125;);</span><br><span class="line">obj1.internal.a = <span class="string">'aValue'</span>;</span><br><span class="line">obj1.freeze = <span class="string">'freeze'</span>; <span class="comment">// 在严格模式，会抛出TypeErrors错误</span></span><br><span class="line"></span><br><span class="line">obj1.internal.a; <span class="comment">// 'aValue'</span></span><br><span class="line">obj1.freeze; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><br></p><p>注：通过<code>Object.isFrozen(obj)</code>可以判断对象是否被冻结</p><a id="more"></a><h3 id="二、seal"><a href="#二、seal" class="headerlink" title="二、seal"></a>二、seal</h3><p><code>Object.seal()</code>方法封闭一个对象，<strong>阻止添加新属性并将所有现有属性标记为不可配置</strong>。当前属性的值只要可写就可以改变。 </p><p>注：不会影响从原型链上继承的属性。但 <code>__proto__</code>属性的值不能通过对象直接修改。 </p><p><br></p><h3 id="三、preventExtensions"><a href="#三、preventExtensions" class="headerlink" title="三、preventExtensions"></a>三、preventExtensions</h3><p><code>Object.preventExtensions()</code>方法让一个对象变的不可扩展，也就是永远<strong>不能再添加新的属性</strong>。 </p><p>注：<code>Object.preventExtensions()</code>仅阻止添加自身的属性。但属性仍然可以添加到对象原型 。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 常量 </tag>
            
            <tag> freeze </tag>
            
            <tag> seal </tag>
            
            <tag> preventExtensions </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>如何写出符合开放封闭原则的代码</title>
      <link href="/2019/01/04/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E7%AC%A6%E5%90%88%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99%E7%9A%84%E4%BB%A3%E7%A0%81/"/>
      <url>/2019/01/04/%E5%A6%82%E4%BD%95%E5%86%99%E5%87%BA%E7%AC%A6%E5%90%88%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99%E7%9A%84%E4%BB%A3%E7%A0%81/</url>
      <content type="html"><![CDATA[<p>在面向对象的程序设计中，开放封闭原则(OCP)是最重要的一条原则。很多时候，一个程序具有良好的设计，往往说明它是符合开放封闭原则的。 当需要改变一个程序的功能或者给这个程序增加新功能的时候，可以使用增加代码的方式，但是<strong>不允许改动程序的源代码</strong>。 </p><p><br></p><h4 id="一、故事背景"><a href="#一、故事背景" class="headerlink" title="一、故事背景"></a>一、故事背景</h4><p>假设我们是一个大型 Web 项目的维护人员，在接手这个项目时，发现它已经拥有10万行以上的JavaScript代码和数百个 JS 文件。 不久后接到了一个新的需求，即在 window.onload 函数中打印出页面中的所有节点数量。这 当然难不倒我们了。于是我们打开文本编辑器，搜索window.onload函数在文件中的位置，在函数内部添加以下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="comment">// 原有代码略</span></span><br><span class="line">    <span class="built_in">console</span>.log( <span class="built_in">document</span>.getElementsByTagName( <span class="string">'*'</span> ).length ); </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="二、应用AOP"><a href="#二、应用AOP" class="headerlink" title="二、应用AOP"></a>二、应用AOP</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params"> afterfn </span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> __self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = __self.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); </span><br><span class="line">        afterfn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">window</span>.onload = ( <span class="built_in">window</span>.onload || <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125; ).after(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="built_in">console</span>.log( <span class="built_in">document</span>.getElementsByTagName( <span class="string">'*'</span> ).length );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>通过AOP装饰函数的方式，我们完全不用理会从前 window.onload 函数的内部实现，就算拿到的是一份混淆压缩过的代码也没有关系。只要它从前是个稳定运行的函数，那么以后也不会因为我们的新增需求而产生错误。新增的代码和原有的代码可以互不影响。</p><p><br></p><a id="more"></a><h4 id="三、编写符合OCP代码的方法"><a href="#三、编写符合OCP代码的方法" class="headerlink" title="三、编写符合OCP代码的方法"></a>三、编写符合OCP代码的方法</h4><p>过多的条件分支语句是造成程序违反开放封闭原则的一个常见原因。每当需要增加一个新的 if 语句时，都要被迫改动原函数。实际上，每当我们看到一大片的 if 或者 swtich-case 语句时，第一时间就应该考虑，能否<strong>利用对象的多态性来重构</strong>它们。</p><ul><li>利用<strong>对象的多态性</strong>来让程序遵守开放封闭原则，是一个常用的技巧</li><li><p>放置挂钩</p><ul><li>放置挂钩(hook)也是分离变化的一种方式。我们<strong>在程序有可能发生变化的地方放置一个挂钩，挂钩的返回结果决定了程序的下一步走向</strong>。这样一来，原本的代码执行路径上就出现了一个分叉路口，程序未来的执行方向被预埋下多种可能性。</li></ul></li><li><p>回调函数</p><ul><li>回调函数是一种特殊的挂钩。我们可以<strong>把一部分易于变化的逻辑封装在回调函数里，然后把回调函数当作参数传入一个稳定和封闭的函数中</strong>。当回调函数被执行的时候，程序就可以因为回调函数的内部逻辑不同，而产生不同的结果。</li></ul><p><br> </p></li></ul><h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><p>开放封闭原则是一个看起来比较虚幻的原则，但我们还是能找到一些让程序尽量遵守开放封闭原则的规律，最明显的就是<strong>找出程序中将要发生变化的地方，然后把变化封装起来。 通过封装变化的方式，可以把系统中稳定不变的部分和容易变化的部分隔离开来</strong>。在系统的演变过程中，我们只需要替换那些容易变化的部分，如果这些部分是已经被封装好的，那么替换起来也相对容易。而变化部分之外的就是稳定的部分。在系统的演变过程中，稳定的部分是不需要改变的。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 开放封闭原则 </tag>
            
            <tag> OCP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript设计模式-装饰者模式</title>
      <link href="/2019/01/04/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/01/04/JavaScript%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E8%A3%85%E9%A5%B0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="一、装饰者模式"><a href="#一、装饰者模式" class="headerlink" title="一、装饰者模式"></a>一、装饰者模式</h4><p><strong>装饰者(decorator)</strong>模式能够在不改变对象自身的基础上，在程序运行期间给对像动态的添加职责。与继承相比，装饰者是一种更轻便灵活的做法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">装饰者模式将一个对象嵌入到另一个对象之中，实际上相当于这个对象被另一个对像包装起来，形成一条包装链。</span><br><span class="line">请求随着这条包装链依次传递到所有的对象，每个对象都有处理这条请求的机会。</span><br></pre></td></tr></table></figure><p><br></p><h4 id="二、装饰函数"><a href="#二、装饰函数" class="headerlink" title="二、装饰函数"></a>二、装饰函数</h4><p>在JavaScript中可以很方便的给某个对象扩展属性和方法，但却很难在不改动某个函数源代码的情况下，给该函数添加一些额外的功能。<strong>也就是在代码运行期间，我们很难切入某个函数的执行环境</strong>。 </p><h5 id="1、使用装饰者模式例子"><a href="#1、使用装饰者模式例子" class="headerlink" title="1、使用装饰者模式例子"></a>1、使用装饰者模式例子</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/对<span class="built_in">window</span>.onload的处理</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'test'</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  _onload= <span class="built_in">window</span>.onload || <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    _onload();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'自己的处理函数'</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="2、使用AOP（面向切面编程）装饰函数"><a href="#2、使用AOP（面向切面编程）装饰函数" class="headerlink" title="2、使用AOP（面向切面编程）装饰函数"></a>2、使用AOP（面向切面编程）装饰函数</h5><p>在需要执行的函数之前执行某个新添加的功能函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装的before函数</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> __self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> __self.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a><p>在需要执行的函数之后执行某个新添加的功能函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装的after函数</span></span><br><span class="line"><span class="built_in">Function</span>.prototype.after = <span class="function"><span class="keyword">function</span>(<span class="params"> afterfn </span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> __self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = __self.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); </span><br><span class="line">        afterfn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> );</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><p>不污染Function原型的做法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> before = <span class="function"><span class="keyword">function</span>(<span class="params">fn, beforeFn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        beforeFn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'fn'</span>) &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">beforeFn</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">'beforeFn'</span>) &#125;</span><br><span class="line"></span><br><span class="line">fn = before(fn, beforeFn);</span><br><span class="line"></span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p><br></p><h5 id="3、使用装饰者模式动态的改变ajax函数"><a href="#3、使用装饰者模式动态的改变ajax函数" class="headerlink" title="3、使用装饰者模式动态的改变ajax函数"></a>3、使用装饰者模式动态的改变ajax函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.before = <span class="function"><span class="keyword">function</span>(<span class="params">beforefn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        beforefn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> _this.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给ajax请求动态添加参数的例子</span></span><br><span class="line"><span class="keyword">var</span> ajax = <span class="function"><span class="keyword">function</span>(<span class="params">type, url, param</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> getToken = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Token'</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ajax = ajax.before(<span class="function"><span class="keyword">function</span>(<span class="params">type, url, param</span>) </span>&#123;</span><br><span class="line">    param.token = getToken();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ajax(<span class="string">'get'</span>, <span class="string">'http://www.jn.com'</span>, &#123; <span class="attr">name</span>: <span class="string">'zhiqiang'</span> &#125;);</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 装饰者模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>前端中的IoC理念</title>
      <link href="/2019/01/04/%E5%89%8D%E7%AB%AF%E4%B8%AD%E7%9A%84IoC%E7%90%86%E5%BF%B5/"/>
      <url>/2019/01/04/%E5%89%8D%E7%AB%AF%E4%B8%AD%E7%9A%84IoC%E7%90%86%E5%BF%B5/</url>
      <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5c2c47dcf265da616d544a53" target="_blank" rel="noopener">原文</a> </p><h4 id="一、什么是-IoC"><a href="#一、什么是-IoC" class="headerlink" title="一、什么是 IoC"></a>一、什么是 IoC</h4><p><code>IoC</code> 的全称叫做 <code>Inversion of Control</code>，可翻译为为「<strong>控制反转</strong>」或「<strong>依赖倒置</strong>」，它主要包含了三个准则：</p><ol><li>高层次的模块不应该依赖于低层次的模块，它们都应该依赖于抽象</li><li>抽象不应该依赖于具体实现，具体实现应该依赖于抽象</li><li><strong>面向接口编程</strong> 而不要面向实现编程 </li></ol><p><br></p><a id="more"></a><p>概念总是抽象的，所以下面将以一个例子来解释上述的概念。假设需要构建一款应用叫 <code>App</code>，它包含一个路由模块 <code>Router</code> 和一个页面监控模块 <code>Track</code>，一开始可能会这么实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./modules/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> Track <span class="keyword">from</span> <span class="string">'./modules/Track'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.options = options;</span><br><span class="line">        <span class="keyword">this</span>.router = <span class="keyword">new</span> Router();</span><br><span class="line">        <span class="keyword">this</span>.track = <span class="keyword">new</span> Track();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.router.to(<span class="string">'home'</span>);</span><br><span class="line">            <span class="keyword">this</span>.track.tracking();</span><br><span class="line">            <span class="keyword">this</span>.options.onReady();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'path/to/App'</span>;</span><br><span class="line"><span class="keyword">new</span> App(&#123;</span><br><span class="line">    onReady() &#123;</span><br><span class="line">        <span class="comment">// do something here...</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>嗯，看起来没什么问题，但是实际应用中需求是非常多变的，可能需要给路由新增功能（比如实现 <code>history</code> 模式）或者更新配置（启用 <code>history</code>, <code>new Router({ mode: &#39;history&#39; })</code>）。这就不得不在 <code>App</code> 内部去修改这两个模块，这是一个 <code>INNER BREAKING</code> 的操作，而对于之前测试通过了的 <code>App</code> 来说，也必须重新测试。</p><p><br></p><p>很明显，这不是一个好的应用结构，高层次的模块 <code>App</code> 依赖了两个低层次的模块 <code>Router</code> 和 <code>Track</code>，对低层次模块的修改都会影响高层次的模块 <code>App</code>。那么如何解决这个问题呢，解决方案就是接下来要讲述的 <strong>依赖注入（Dependency Injection）</strong>。</p><p><br></p><h4 id="二、依赖注入"><a href="#二、依赖注入" class="headerlink" title="二、依赖注入"></a>二、依赖注入</h4><p>所谓的依赖注入，简单来说就是把高层模块所依赖的模块<strong>通过传参的方式</strong>把依赖「<strong>注入</strong>」到模块内部，上面的代码可以通过依赖注入的方式改造成如下方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.options = options;</span><br><span class="line">        <span class="keyword">this</span>.router = options.router;</span><br><span class="line">        <span class="keyword">this</span>.track = options.track;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.router.to(<span class="string">'home'</span>);</span><br><span class="line">            <span class="keyword">this</span>.track.tracking();</span><br><span class="line">            <span class="keyword">this</span>.options.onReady();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'path/to/App'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./modules/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> Track <span class="keyword">from</span> <span class="string">'./modules/Track'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> App(&#123;</span><br><span class="line">    router: <span class="keyword">new</span> Router(),</span><br><span class="line">    track: <span class="keyword">new</span> Track(),</span><br><span class="line">    onReady() &#123;</span><br><span class="line">        <span class="comment">// do something here...</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到，通过依赖注入解决了上面所说的 <code>INNER BREAKING</code> 的问题，可以直接在 <code>App</code> 外部对各个模块进行修改而不影响内部。</p><p><br></p><p>是不是就万事大吉了？理想很丰满，但现实却是很骨感的，没过两天产品就给你提了一个新需求，给 <code>App</code> 添加一个分享模块 <code>Share</code>。这样的话又回到了上面所提到的 <code>INNER BREAKING</code> 的问题上：你不得不对 <code>App</code> 模块进行修改加上一行 <code>this.share = options.share</code>，这明显不是我们所期望的。</p><p><br></p><p>虽然 <code>App</code> 通过依赖注入的方式在一定程度上解耦了与其他几个模块的依赖关系，但是还不够彻底，其中的 <code>this.router</code> 和 <code>this.track</code> 等属性其实都<strong>还是对「具体实现」的依赖</strong>，明显违背了 <code>IoC</code> 思想的准则，那如何进一步抽象 <code>App</code> 模块呢。</p><p><br></p><h4 id="三、面向接口编程"><a href="#三、面向接口编程" class="headerlink" title="三、面向接口编程"></a>三、面向接口编程</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> modules = []</span><br><span class="line">    <span class="keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="keyword">this</span>.options = options;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line">    init() &#123;</span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">            <span class="keyword">this</span>.initModules();</span><br><span class="line">            <span class="keyword">this</span>.options.onReady(<span class="keyword">this</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> use(<span class="built_in">module</span>) &#123;</span><br><span class="line">        <span class="built_in">Array</span>.isArray(<span class="built_in">module</span>) ? <span class="built_in">module</span>.map(<span class="function"><span class="params">item</span> =&gt;</span> App.use(item)) : App.modules.push(<span class="built_in">module</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    initModules() &#123;</span><br><span class="line">        App.modules.map(</span><br><span class="line">            <span class="built_in">module</span> =&gt; <span class="built_in">module</span>.init &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">module</span>.init == <span class="string">'function'</span> &amp;&amp; <span class="built_in">module</span>.init(<span class="keyword">this</span>)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 经过改造后 <code>App</code> 内<strong>已经没有「具体实现」了</strong>，看不到任何业务代码了，那么如何使用 <code>App</code> 来管理我们的依赖呢： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules/Router.js</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'path/to/Router'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    init(app) &#123;</span><br><span class="line">        app.router = <span class="keyword">new</span> Router(app.options.router);</span><br><span class="line">        app.router.to(<span class="string">'home'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// modules/Track.js</span></span><br><span class="line"><span class="keyword">import</span> Track <span class="keyword">from</span> <span class="string">'path/to/Track'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    init(app) &#123;</span><br><span class="line">        app.track = <span class="keyword">new</span> Track(app.options.track);</span><br><span class="line">        app.track.tracking();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'path/to/App'</span>;</span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'./modules/Router'</span>;</span><br><span class="line"><span class="keyword">import</span> Track <span class="keyword">from</span> <span class="string">'./modules/Track'</span>;</span><br><span class="line"></span><br><span class="line">App.use([Router, Track]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> App(&#123;</span><br><span class="line">    router: &#123;</span><br><span class="line">        mode: <span class="string">'history'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    track: &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">    onReady(app) &#123;</span><br><span class="line">        <span class="comment">// app.options ...</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以发现 <code>App</code> 模块在使用上也非常的方便，<strong>通过 <code>App.use()</code> 方法来「注入」依赖</strong>，在 <code>./modules/some-module.js</code> 中<strong>按照一定的「约定」去初始化相关配置</strong>，比如此时需要新增一个 <code>Share</code> 模块的话，无需到 <code>App</code> 内部去修改内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// modules/Share.js</span></span><br><span class="line"><span class="keyword">import</span> Share <span class="keyword">from</span> <span class="string">'path/to/Share'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    init(app) &#123;</span><br><span class="line">        app.share = <span class="keyword">new</span> Share();</span><br><span class="line">        app.setShare = <span class="function"><span class="params">data</span> =&gt;</span> app.share.setShare(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line">App.use(Share);</span><br><span class="line"><span class="keyword">new</span> App(&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    onReady(app) &#123;</span><br><span class="line">        app.setShare(&#123;</span><br><span class="line">            title: <span class="string">'Hello IoC.'</span>,</span><br><span class="line">            description: <span class="string">'description here...'</span>,</span><br><span class="line">            <span class="comment">// some other data here...</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>直接在 <code>App</code> 外部去 <code>use</code> 这个 <code>Share</code> 模块即可，对模块的注入和配置极为方便。 </p><p><br></p><p>这其实就是 <code>IoC</code> 思想中对「<strong>面向接口编程</strong> 而不要面向实现编程」这一准则的很好的体现。<code>App</code> 不关心模块具体实现了什么，只要满足对 <strong>接口</strong> <code>init</code> 的「约定」就可以了。 </p><p><br></p><h4 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h4><p><code>App</code> 模块此时应该称之为「<strong>容器</strong>」比较合适了，跟业务已经没有任何关系了，它仅仅只是提供了一些方法来辅助管理注入的依赖和控制模块如何执行。</p><p><br></p><p>控制反转（<code>Inversion of Control</code>）是一种「<strong>思想</strong>」，依赖注入（<code>Dependency Injection</code>）则是这一思想的一种具体「<strong>实现方式</strong>」，而这里的 <code>App</code> 则是辅助依赖管理的一个「<strong>容器</strong>」。</p><p> <br></p><p><strong>注：直接依赖 =》 传参注入依赖 =》 接口注入依赖</strong>  </p>]]></content>
      
      
        <tags>
            
            <tag> IoC </tag>
            
            <tag> 依赖注入 </tag>
            
            <tag> 控制反转 </tag>
            
            <tag> 面向接口编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx使用include命令拆分配置文件</title>
      <link href="/2019/01/03/nginx%E4%BD%BF%E7%94%A8include%E5%91%BD%E4%BB%A4%E6%8B%86%E5%88%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
      <url>/2019/01/03/nginx%E4%BD%BF%E7%94%A8include%E5%91%BD%E4%BB%A4%E6%8B%86%E5%88%86%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="include"><a href="#include" class="headerlink" title="include"></a><a href="http://nginx.org/en/docs/ngx_core_module.html#include" target="_blank" rel="noopener">include</a></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:include file | mask;</span><br><span class="line">Default: —</span><br><span class="line">Context: any</span><br></pre></td></tr></table></figure><p>Includes another <code>file</code>, or files matching the specified <code>mask</code>, into configuration. Included files should consist of syntactically correct directives and blocks. </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">include</span> mime.types;</span><br><span class="line"><span class="attribute">include</span> vhosts/<span class="regexp">*.conf</span>; <span class="comment">#通配符写法</span></span><br></pre></td></tr></table></figure><p>注：适用范围是任何地方，<code>include</code>命令相当于是复制文件内容到引用的地方</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> include </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>IE中的JS兼容性问题</title>
      <link href="/2019/01/02/IE%E4%B8%AD%E7%9A%84JS%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/"/>
      <url>/2019/01/02/IE%E4%B8%AD%E7%9A%84JS%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h4 id="标识符与保留字"><a href="#标识符与保留字" class="headerlink" title="标识符与保留字"></a>标识符与保留字</h4><p><code>保留字</code>是<code>JavaScript</code>语言中定义<code>具有特殊含义的标识符</code>，<strong>保留字不能作为标识符使用</strong>。<code>JavaScript</code>语言中定义了一些<code>具有专门的意义和用途的保留字</code>，这些保留字称为<code>关键字</code>。</p><p><strong>标识符：变量，属性，数组，函数名称 </strong>  </p><p><br></p><h4 id="SCRIPT1010"><a href="#SCRIPT1010" class="headerlink" title="SCRIPT1010"></a>SCRIPT1010</h4><p><code>缺少标识符</code> ，一般在<code>IE浏览器</code>下，使用了保留字就会报这个错误，如： <code>default</code>, <code>delete</code> 等</p><p><br></p><h4 id="SCRIPT1028"><a href="#SCRIPT1028" class="headerlink" title="SCRIPT1028"></a>SCRIPT1028</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象最后一项是不允许有逗号的，跟json的规则相似</span></span><br><span class="line"><span class="keyword">let</span> point = &#123; <span class="attr">x</span>: <span class="number">1.2</span>, <span class="attr">y</span>: <span class="number">-3.4</span> &#125;; <span class="comment">// 合法声明</span></span><br><span class="line"><span class="keyword">let</span> point = &#123; <span class="attr">x</span>: <span class="number">1.2</span>, <span class="attr">y</span>: <span class="number">-3.4</span>, &#125;; <span class="comment">// 缺少标识符、字符串或数字</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用了保留字</span></span><br><span class="line"><span class="keyword">let</span> point = &#123; <span class="attr">x</span>: <span class="number">1.2</span>, <span class="string">'delete'</span>: <span class="number">-3.4</span> &#125;; <span class="comment">// 合法声明</span></span><br><span class="line"><span class="keyword">let</span> point = &#123; <span class="attr">x</span>: <span class="number">1.2</span>,  <span class="attr">delete</span>: <span class="number">-3.4</span> &#125;; <span class="comment">// 缺少标识符、字符串或数字</span></span><br></pre></td></tr></table></figure><p><code>对象文字值的属性</code>必须是<code>标识符</code>、<code>字符串</code>或<code>数字</code>。 对象文字值（也称为“对象初始值设定项”）由逗号分隔的<code>“属性:值”</code>对的列表构成，其中各对都括在括号中。</p><p>注：使用打包工具会存在<code>&#39;delete&#39;</code>变为<code>delete</code>的情况，最好不要使用保留字作为标识符。</p><p><br></p><h4 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相同工程：线上环境 </span></span><br><span class="line"><span class="comment">// 存在以上问题</span></span><br><span class="line"><span class="comment">// IE11 浏览器的 navigator.userAgent</span></span><br><span class="line"><span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; Tablet PC 2.0)"</span></span><br></pre></td></tr></table></figure><p>注：<code>IE11</code>不存在以上问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相同工程：开发环境、vue、webpack-dev-server </span></span><br><span class="line"><span class="comment">// 不存在以上问题</span></span><br><span class="line"><span class="comment">// IE11 浏览器的 navigator.userAgent</span></span><br><span class="line"><span class="string">"Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; .NET CLR 2.0.50727; .NET CLR 3.0.30729; .NET CLR 3.5.30729; Tablet PC 2.0; rv:11.0) like Gecko"</span></span><br></pre></td></tr></table></figure><p>注：因为项目中未使用<code>X-UA-Compatible</code>指定<code>IE内核版本</code> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--使用后，线上环境恢复正常，与开发环境一致--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=Edge"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a><h4 id="检测页面IE版本"><a href="#检测页面IE版本" class="headerlink" title="检测页面IE版本"></a>检测页面IE版本</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IEVersion</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//取得浏览器的userAgent字符串  </span></span><br><span class="line">    <span class="keyword">var</span> userAgent = navigator.userAgent;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是否IE&lt;11浏览器  </span></span><br><span class="line">    <span class="keyword">var</span> isIE = userAgent.indexOf(<span class="string">"compatible"</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"MSIE"</span>) &gt; <span class="number">-1</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是否IE的Edge浏览器</span></span><br><span class="line">    <span class="keyword">var</span> isEdge = userAgent.indexOf(<span class="string">"Edge"</span>) &gt; <span class="number">-1</span> &amp;&amp; !isIE; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//判断是否IE11浏览器  </span></span><br><span class="line">    <span class="keyword">var</span> isIE11 = userAgent.indexOf(<span class="string">'Trident'</span>) &gt; <span class="number">-1</span> &amp;&amp; userAgent.indexOf(<span class="string">"rv:11.0"</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isEdge) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'edge'</span>; <span class="comment">//edge</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isIE11) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">11</span>; <span class="comment">//IE11  </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isIE) &#123;</span><br><span class="line">        <span class="keyword">var</span> reIE = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"MSIE (\\d+\\.\\d+);"</span>);</span><br><span class="line">        reIE.test(userAgent);</span><br><span class="line">        <span class="keyword">var</span> fIEVersion = <span class="built_in">parseFloat</span>(<span class="built_in">RegExp</span>[<span class="string">"$1"</span>]);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (fIEVersion == <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">7</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fIEVersion == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fIEVersion == <span class="number">9</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fIEVersion == <span class="number">10</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">6</span>; <span class="comment">//IE版本&lt;=7</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">//不是ie浏览器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> IE </tag>
            
            <tag> 兼容性 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>url长度限制</title>
      <link href="/2018/12/29/url%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/"/>
      <url>/2018/12/29/url%E9%95%BF%E5%BA%A6%E9%99%90%E5%88%B6/</url>
      <content type="html"><![CDATA[<h4 id="一、HTTP协议"><a href="#一、HTTP协议" class="headerlink" title="一、HTTP协议"></a>一、HTTP协议</h4><p><code>HTTP协议</code>不对<code>url</code>的长度设置任何先验限制</p><ul><li>服务器必须能够处理它们所服务的<code>任何资源的URI</code>，并且<strong>如果它们提供可以生成这种<code>URI</code>的基于<code>GET</code>的表单</strong>，则应该能够处理<code>无限长度的URI</code>。</li><li>如果<code>URI</code>长于服务器可以处理的长度，服务器应该返回<code>414</code>（<code>Request-URI</code> Too Long）状态 。</li></ul><p><br></p><a id="more"></a><h4 id="二、浏览器"><a href="#二、浏览器" class="headerlink" title="二、浏览器"></a>二、浏览器</h4><p><strong>1、IE</strong>：<code>IE浏览器</code>对<code>url</code>长度限制是<code>2083（2K+53）</code>字符，超过这个限制，则自动截断</p><ul><li>若是form提交则提交按钮不起作用</li></ul><p>注：实测超过<code>2048</code>字符会截断（2018-12-3）</p><p><br></p><p><strong>2、firefox</strong>：<code>firefox</code>浏览器对<code>url</code>长度限制为 <code>65,536</code>字符</p><ul><li>实际上有效的<code>URL</code>最大长度不少于<code>100,000</code>个字符</li></ul><p><br></p><p><strong>3、chrome</strong>：<code>chrome</code>浏览器对<code>url</code>长度限制为<code>8182字符</code></p><p><br></p><p><strong>4、Safari</strong>：<code>Safari</code>浏览器对<code>url</code>长度限制至少为<code>80,000</code>字符</p><p><br></p><p><strong>5、Opera</strong>：<code>Opera</code> 浏览器对<code>url</code>长度限制为<code>190 000</code>字符</p><p> <br></p><p>注： </p><ul><li><p><code>URL</code>只能使用英文字母、阿拉伯数字和某些标点符号。不能使用其他文字和符号，<strong>否则必须编码后使用</strong> </p></li><li><p>即使是<code>2048</code>个<code>ASCII</code>字符也能满足大多数的使用场景，可以放心使用。</p></li></ul><p><br></p><h4 id="三、服务器"><a href="#三、服务器" class="headerlink" title="三、服务器"></a>三、服务器</h4><p><strong>1、Apache</strong>：<code>Apache</code>能接受<code>url长度</code>限制为<code>8,192</code> 字符</p><p><strong>2、ngnix</strong>：可以通过修改配置来改变<code>url长度</code>限制</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">client_header_buffer_size</span> <span class="number">1k</span> <span class="comment"># 默认值</span></span><br><span class="line">large_client_header_buffers <span class="number">4</span> <span class="number">4k</span>/<span class="number">8k</span> <span class="comment"># 默认值</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="四、URL编码"><a href="#四、URL编码" class="headerlink" title="四、URL编码"></a>四、URL编码</h4><p><a href="http://www.ruanyifeng.com/blog/2010/02/url_encoding.html" target="_blank" rel="noopener">原文</a> </p><ul><li>网页路径的编码，用的是utf-8编码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://zh.wikipedia.org/wiki/春节</span><br></pre></td></tr></table></figure><ul><li>查询字符串的编码，用的是操作系统的默认编码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://www.baidu.com/s?wd=春节</span><br></pre></td></tr></table></figure><ul><li>GET和POST方法的编码，用的是网页的编码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 在已打开的网页上，直接用Get或Post方法发出HTTP请求</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html;charset=xxxx&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>在Ajax调用中，IE总是采用GB2312编码（操作系统的默认编码），而Firefox总是采用utf-8编码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">三种情况都是由浏览器发出HTTP请求，最后一种情况则是由Javascript生成HTTP请求，也就是Ajax调用</span><br></pre></td></tr></table></figure><p>注：文章太久远了，可能都默认<code>utf-8</code>了（猜测，未验证<code>2018-12-30</code>）</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> url </tag>
            
            <tag> 长度限制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>时间戳、时区以及时间格式</title>
      <link href="/2018/12/26/%E6%97%B6%E9%97%B4%E6%88%B3%E3%80%81%E6%97%B6%E5%8C%BA%E4%BB%A5%E5%8F%8A%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/"/>
      <url>/2018/12/26/%E6%97%B6%E9%97%B4%E6%88%B3%E3%80%81%E6%97%B6%E5%8C%BA%E4%BB%A5%E5%8F%8A%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="一、时间戳"><a href="#一、时间戳" class="headerlink" title="一、时间戳"></a>一、时间戳</h4><p>时间戳是指<code>格林威治时间</code><strong>1970年01月01日00时00分00秒</strong>(<code>北京时间</code><strong>1970年01月01日08时00分00秒</strong>)起至现在的<code>总毫秒数</code>。 </p><p>注：<code>时间戳</code>是不会跟着<code>时区</code>的改变而改变，<code>同一时刻的时间戳</code>都是相同的。</p><p><br></p><a id="more"></a><h4 id="二、GMT-和UTC"><a href="#二、GMT-和UTC" class="headerlink" title="二、GMT 和UTC"></a>二、<code>GMT</code> 和<code>UTC</code></h4><h5 id="格林威治标准时间GMT"><a href="#格林威治标准时间GMT" class="headerlink" title="格林威治标准时间GMT"></a>格林威治标准时间GMT</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">十七世纪，格林威治皇家天文台为了海上霸权的扩张计画而进行天体观测。1675年旧皇家观测所(Old Royal Observatory) 正式成立，到了1884年决定以通过格林威治的子午线作为划分地球东西两半球的经度零度。观测所门口墙上有一个标志24小时的时钟，显示当下的时间，对全球而言，这里所设定的时间是世界时间参考点，全球都以格林威治的时间作为标准来设定时间，这就是我们耳熟能详的「格林威治标准时间(Greenwich Mean Time，简称G.M.T.)的由来，标示在手表上，则代表此表具有两地时间功能，也就是同时可以显示原居地和另一个国度的时间。</span><br></pre></td></tr></table></figure><h5 id="世界协调时间UTC"><a href="#世界协调时间UTC" class="headerlink" title="世界协调时间UTC"></a>世界协调时间UTC</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">多数的两地时间表都以GMT来表示，但也有些两地时间表上看不到GMT字样，出现的反而是UTC这3个英文字母，究竟何谓UTC？事实上，UTC指的是Coordinated Universal Time－世界协调时间（又称世界标准时间、世界统一时间），是经过平均太阳时(以格林威治时间GMT为准)、地轴运动修正后的新时标以及以「秒」为单位的国际原子时所综合精算而成的时间，计算过程相当严谨精密，因此若以「世界标准时间」的角度来说，UTC比GMT来得更加精准。其误差值必须保持在0.9秒以内，若大于0.9秒则由位于巴黎的国际地球自转事务中央局发布闰秒，使UTC与地球自转周期一致。所以基本上UTC的本质强调的是比GMT更为精确的世界时间标准，不过对于现行表款来说，GMT与UTC的功能与精确度是没有差别的。</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>两者的区别在于前者是一个天文上的概念，而后者是基于一个原子钟。</li><li>在UTC中，每一年或两年会有一个“闰秒”。</li></ul><p><br></p><h4 id="三、时区"><a href="#三、时区" class="headerlink" title="三、时区"></a>三、时区</h4><p>整个地球分为二十四时区，每个时区都有自己的本地时间 。<code>本地时间 = UTC + 时区差</code>，<strong>时区差东为正，西为负</strong>。因此，把东八时区（北京时间 ）记为 <code>UTC+8</code>。</p><p><br></p><h4 id="四、表示时间的格式-标准"><a href="#四、表示时间的格式-标准" class="headerlink" title="四、表示时间的格式/标准"></a>四、表示时间的格式/标准</h4><h5 id="1、RFC-2822标准格式，形如："><a href="#1、RFC-2822标准格式，形如：" class="headerlink" title="1、RFC-2822标准格式，形如："></a>1、RFC-2822标准格式，形如：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// GMT+0800(CST)代表东八区</span><br><span class="line">// CST(china standard time)表示中国标准时间</span><br><span class="line"></span><br><span class="line">Sun Apr 08 2018 11:38:39 GMT+0800(CST)</span><br></pre></td></tr></table></figure><h5 id="2、ISO-8601标准格式，其中一种常见的格式形如："><a href="#2、ISO-8601标准格式，其中一种常见的格式形如：" class="headerlink" title="2、ISO-8601标准格式，其中一种常见的格式形如："></a>2、ISO-8601标准格式，其中一种常见的格式形如：</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2018-04-08T11:38:39+08:00  // 日期用&apos;-&apos;相隔，与时间用&apos;T&apos;连接</span><br><span class="line">2018-04-08T11:38:39Z  // Z代表UTC时间，Z也可写成00:00</span><br></pre></td></tr></table></figure><p><br></p><p>ISO 8601的标准格式是：<code>YYYY-MM-DDTHH:mm:ss.sssZ</code>，分别表示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">YYYY：年份，0000 ~ 9999</span><br><span class="line">MM：月份，01 ~ 12</span><br><span class="line">DD：日，01 ~ 31</span><br><span class="line">T：分隔日期和时间</span><br><span class="line">HH：小时，00 ~ 24</span><br><span class="line">mm：分钟，00 ~ 59</span><br><span class="line">ss：秒，00 ~ 59</span><br><span class="line">.sss：毫秒</span><br><span class="line">Z：时区，可以是：Z（UFC）、+HH:mm、-HH:mm</span><br><span class="line"></span><br><span class="line">// ISO格式例子</span><br><span class="line">// 1997</span><br><span class="line">// 1997-07</span><br><span class="line">// 1997-07-16</span><br><span class="line">// 1997-07-16T19：20 + 01:00</span><br><span class="line">// 1997-07-16T19：20：30 + 01:00</span><br><span class="line">// 1997-07-16T19：20：30.45 + 01:00</span><br></pre></td></tr></table></figure><p><br></p><h4 id="五、JS-Date"><a href="#五、JS-Date" class="headerlink" title="五、JS Date"></a>五、JS <code>Date</code></h4><p>JavaScript内部，所有日期和时间都储存为<strong>一个整数</strong>，表示当前时间距离<code>1970年1月1日00:00:00</code>的<strong>毫秒数</strong>，<strong>正负</strong>的范围为基准时间前后各1亿天。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 依据系统设置的当前时间来创建一个Date对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 时间戳</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 表示日期的字符串值。该字符串应该能被 Date.parse() 方法识别</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(dateString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当Date作为构造函数调用并传入多个参数时，所定义参数代表的是当地时间</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(year, month[, day[, hour[, minutes[, seconds[, milliseconds]]]]]);</span><br></pre></td></tr></table></figure><p><br></p><h5 id="1、new-Date-dateString-中的ISO格式"><a href="#1、new-Date-dateString-中的ISO格式" class="headerlink" title="1、new Date(dateString)中的ISO格式"></a>1、<code>new Date(dateString)</code>中的ISO格式</h5><p>在<code>ES5</code>之中，如果日期<strong>采用连词线（-）格式分隔，且具有<code>前导0</code></strong>，JavaScript会认为这是一个ISO格式的日期字符串，导致返回的时间是以<code>UTC时区</code>计算的。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2014-01-01'</span>)</span><br><span class="line"><span class="comment">// Wed Jan 01 2014 08:00:00 GMT+0800 (CST)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2014-1-1'</span>)</span><br><span class="line"><span class="comment">// Wed Jan 01 2014 00:00:00 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure><p>在ES5之中，如果日期<strong>采用连词线（-）格式分隔，且<code>没有前导0</code></strong>，JavaScript引擎假设用户处于本地时区。</p><p><br></p><p><code>ES6</code> 改变了这种做法，规定凡是没有指定时区的日期字符串，一律认定用户处于本地时区。 </p><p>对于其他格式的日期字符串，一律视为非ISO格式，采用本地时区作为计时标准。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2014-12-11'</span>)</span><br><span class="line"><span class="comment">// Thu Dec 11 2014 08:00:00 GMT+0800 (CST)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2014/12/11'</span>)</span><br><span class="line"><span class="comment">// Thu Dec 11 2014 00:00:00 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure><p>注：上面代码中，第一个日期字符串是ISO格式，第二个不是</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 时间戳 </tag>
            
            <tag> 时区 </tag>
            
            <tag> 时间格式 </tag>
            
            <tag> UTC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>pushState和replaceState</title>
      <link href="/2018/12/24/pushState%E5%92%8CreplaceState/"/>
      <url>/2018/12/24/pushState%E5%92%8CreplaceState/</url>
      <content type="html"><![CDATA[<p><code>window</code> 对象通过 <code>history</code> 对象提供了对浏览器历史的访问。它暴露了很多有用的方法和属性，允许你在用户浏览历史中向前和向后跳转，同时——从<code>HTML5</code>开始——提供了对<code>history栈</code>中内容的操作。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.history.back(); <span class="comment">// 与点击浏览器回退按钮的效果相同</span></span><br><span class="line"><span class="built_in">window</span>.history.forward(); <span class="comment">// 与点击浏览器前进按钮的效果相同</span></span><br><span class="line"><span class="built_in">window</span>.history.go(<span class="number">-1</span>); <span class="comment">// 通过与当前页面相对位置，来标志某一特定页面</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="一、pushState"><a href="#一、pushState" class="headerlink" title="一、pushState"></a>一、pushState</h4><p><code>pushState()</code> 需要三个参数: <code>一个状态对象</code>， <code>一个标题 (目前被忽略)</code>，和 <code>(可选的) 一个URL</code>。让我们来解释下这三个参数详细内容：</p><ul><li><strong>状态对象</strong><ul><li>状态对象state是一个JavaScript对象</li><li><code>popstate事件</code>被触发时，该事件的state属性包含<code>该历史记录</code><strong>状态对象</strong>的<strong>副本</strong></li><li>状态对象可以是能被序列化的任何东西，但有<code>640k</code>的大小限制</li></ul></li><li><strong>标题</strong><ul><li>Firefox 目前忽略这个参数，但未来可能会用到。传递一个空字符串在这里是安全的，而在将来这是不安全的。二选一的话，你可以为跳转的state传递一个短标题。</li></ul></li><li><strong>URL</strong><ul><li>该参数定义了新的历史URL记录</li><li>注意，调用 <code>pushState()</code> 后浏览器并不会立即加载这个URL</li><li>新URL不必须为绝对路径。如果新URL是相对路径，那么它将被作为相对于当前URL处理</li><li>新URL必须与当前URL<strong>同源</strong>，否则 <code>pushState()</code> 会抛出一个异常。该参数是可选的，缺省为当前URL</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http://mozilla.org/foo.html 假设当前url</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stateObj = &#123; <span class="attr">foo</span>: <span class="string">"bar"</span> &#125;;</span><br><span class="line">history.pushState(stateObj, <span class="string">"page 2"</span>, <span class="string">"bar.html"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这将使浏览器地址栏显示为 http://mozilla.org/bar.html</span></span><br><span class="line"><span class="comment">// 但并不会导致浏览器加载 bar.html ，甚至不会检查bar.html 是否存在。</span></span><br></pre></td></tr></table></figure><p>注： <code>pushState()</code> 绝对不会触发 <code>hashchange</code> 事件，即使新的URL与旧的URL仅哈希不同也是如此。<code>vue-router</code> 底层调用的正是<code>history.pushState</code>和<code>history.replaceState</code>。</p><p><br></p><a id="more"></a><h4 id="二、replaceState"><a href="#二、replaceState" class="headerlink" title="二、replaceState"></a>二、replaceState</h4><p><code>history.replaceState()</code> 的使用与 <code>history.pushState()</code> 非常相似，区别在于  <code>replaceState()</code>  是<code>修改了当前的历史记录项</code>而不是新建一个。 <code>replaceState()</code> 的使用场景在于为了响应用户操作，你想要<code>更新状态对象state</code>或者<code>当前历史记录的URL</code>。 </p><p><br></p><h4 id="三、获取当前状态"><a href="#三、获取当前状态" class="headerlink" title="三、获取当前状态"></a>三、获取当前状态</h4><p> 你可以读取<code>当前历史记录项的状态对象state</code>，而不必等待<code>popstate</code> 事件， 只需要这样使用<code>history.state</code> 属性：  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> currentState = history.state;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="四、改变referrer"><a href="#四、改变referrer" class="headerlink" title="四、改变referrer"></a>四、改变referrer</h4><p>使用 <code>history.pushState()</code> 可以改变<code>referrer</code>，它在用户发送 <code>XMLHttpRequest</code>请求时在<code>HTTP头部</code>使用，改变<code>state</code>后创建的 <code>XMLHttpRequest</code>对象的<code>referrer</code>都会被改变，但<strong>超越不了同源策略</strong>。</p>]]></content>
      
      
        <tags>
            
            <tag> pushState </tag>
            
            <tag> replaceState </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>visibilityState</title>
      <link href="/2018/12/20/visibilityState/"/>
      <url>/2018/12/20/visibilityState/</url>
      <content type="html"><![CDATA[<h4 id="一、document-visibilityState"><a href="#一、document-visibilityState" class="headerlink" title="一、document.visibilityState"></a>一、document.visibilityState</h4><p><code>Page Visibility API</code> 在<code>document</code>对象上，新增了一个<code>document.visibilityState</code>属性。该属性返回一个字符串，表示页面当前的可见性状态，共有三个可能的值。</p><ul><li><code>hidden</code>：页面彻底不可见</li><li><code>visible</code>：页面至少一部分可见</li><li><code>prerender</code>：页面即将或正在渲染，处于不可见状态</li></ul><p>其中，<code>hidden</code>状态和<code>visible</code>状态是所有浏览器都必须支持的。<code>prerender</code>状态只在支持”预渲染”的浏览器上才会出现，比如 Chrome 浏览器就有预渲染功能，可以在用户不可见的状态下，预先把页面渲染出来，等到用户要浏览的时候，直接展示渲染好的网页。 </p><p><br></p><p>只要页面可见，哪怕只露出一个角，<code>document.visibilityState</code>属性就返回<code>visible</code>。只有以下四种情况，才会返回<code>hidden</code>。</p><ul><li>浏览器最小化</li><li>浏览器没有最小化，但是当前页面切换成了背景页</li><li>浏览器将要卸载（unload）页面</li><li>操作系统触发锁屏屏幕</li></ul><p><br></p><p>注意，<code>document.visibilityState</code>属性只针对顶层窗口，内嵌的<code>&lt;iframe&gt;</code>页面的<code>document.visibilityState</code>属性由顶层窗口决定。使用 CSS 属性隐藏<code>&lt;iframe&gt;</code>页面（比如<code>display: none;</code>），并不会影响内嵌页面的可见性。 </p><a id="more"></a><h4 id="二、visibilitychange-事件"><a href="#二、visibilitychange-事件" class="headerlink" title="二、visibilitychange 事件"></a>二、visibilitychange 事件</h4><p>只要<code>document.visibilityState</code>属性发生变化，就会触发<code>visibilitychange</code>事件，通过<code>document.addEventListener()</code>方法或<code>document.onvisibilitychange</code>属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'visibilitychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 用户离开了当前页面</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.visibilityState === <span class="string">'hidden'</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">'页面不可见'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 用户打开或回到页面</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">document</span>.visibilityState === <span class="string">'visible'</span>) &#123;</span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">'页面可见'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><h4 id="三、Page-Lifecycle-API-原文"><a href="#三、Page-Lifecycle-API-原文" class="headerlink" title="三、Page Lifecycle API(原文)"></a>三、<code>Page Lifecycle API</code>(<a href="http://www.ruanyifeng.com/blog/2018/11/page_lifecycle_api.html" target="_blank" rel="noopener">原文</a>)</h4><p><code>Android</code>、<code>iOS</code> 和最新的 <code>Windows</code> 系统可以随时自主地停止后台进程，及时释放系统资源。也就是说，网页可能随时被系统丢弃掉。<code>Page Visibility API</code> 只在网页对用户不可见时触发，至于网页会不会被系统丢弃掉，它就无能为力了。</p><p>为了解决这个问题，W3C 新制定了一个 <a href="https://github.com/WICG/page-lifecycle" target="_blank" rel="noopener">Page Lifecycle API</a>，统一了网页从诞生到卸载的行为模式，并且定义了新的事件，允许开发者响应网页状态的各种转换。</p><p>有了这个 API，开发者就可以预测网页下一步的状态，从而进行各种针对性的处理。Chrome 68 支持这个 API，对于老式浏览器可以使用谷歌开发的兼容库 <a href="https://github.com/GoogleChromeLabs/page-lifecycle" target="_blank" rel="noopener">PageLifecycle.js</a>。</p><p><br></p><p>网页的生命周期分成六个阶段，每个时刻只可能处于其中一个阶段</p><p><img src="/2018/12/20/visibilityState/bg2018110401.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> document </tag>
            
            <tag> visibilityState </tag>
            
            <tag> visibilitychange </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Performance</title>
      <link href="/2018/12/20/Performance/"/>
      <url>/2018/12/20/Performance/</url>
      <content type="html"><![CDATA[<h3 id="一、performance"><a href="#一、performance" class="headerlink" title="一、performance"></a>一、performance</h3><p><code>performace</code>允许访问当前页面性能相关的信息，主要功能都是由<code>Performance Timeline API</code>、<code>the Navigation Timing API</code>、<code>the User Timing API</code>、  <code>the Resource Timing API</code>提供的。</p><h5 id="1、performance-timing，提供了各种与浏览器处理相关的时间数据"><a href="#1、performance-timing，提供了各种与浏览器处理相关的时间数据" class="headerlink" title="1、performance.timing，提供了各种与浏览器处理相关的时间数据"></a>1、performance.timing，提供了各种与浏览器处理相关的时间数据</h5><table><thead><tr><th>名称</th><th>作用（这里所有时间戳都代表UNIX毫秒时间戳）</th></tr></thead><tbody><tr><td>connectEnd</td><td>浏览器与服务器之间的连接建立时的时间戳，连接建立指的是所有握手和认证过程全部结束</td></tr><tr><td>connectStart</td><td>HTTP请求开始向服务器发送时的时间戳，如果是持久连接，则等同于fetchStart。</td></tr><tr><td>domComplete</td><td>当前网页DOM结构生成时，也就是Document.readyState属性变为“complete”,并且相应的readystatechange事件触发时的时间戳。</td></tr><tr><td>domContentLoadedEventEnd</td><td>当前网页DOMContentLoaded事件发生时，也就是DOM结构解析完毕、所有脚本运行完成时的时间戳。</td></tr><tr><td>domContentLoadedEventStart</td><td>当前网页DOMContentLoaded事件发生时，也就是DOM结构解析完毕、所有脚本开始运行时的时间戳。</td></tr><tr><td>domInteractive</td><td>当前网页DOM结构结束解析、开始加载内嵌资源时，也就是Document.readyState属性变为“interactive”、并且相应的readystatechange事件触发时的时间戳。</td></tr><tr><td>domLoading</td><td>当前网页DOM结构开始解析时,也就是Document.readyState属性变为“loading”、并且相应的readystatechange事件触发时的时间戳。</td></tr><tr><td>domainLookupEnd</td><td>域名查询结束时的时间戳。如果使用持久连接，或者从本地缓存获取信息的，等同于fetchStart</td></tr><tr><td>domainLookupStart</td><td>域名查询开始时的时间戳。如果使用持久连接，或者从本地缓存获取信息的，等同于fetchStart</td></tr><tr><td>fetchStart</td><td>浏览器准备通过HTTP请求去获取页面的时间戳。在检查应用缓存之前发生。</td></tr><tr><td>loadEventEnd</td><td>当前网页load事件的回调函数结束时的时间戳。如果该事件还没有发生，返回0。</td></tr><tr><td>loadEventStart</td><td>当前网页load事件的回调函数开始时的时间戳。如果该事件还没有发生，返回0。</td></tr><tr><td>navigationStart</td><td>当前浏览器窗口的前一个网页关闭，发生unload事件时的时间戳。如果没有前一个网页，就等于fetchStart</td></tr><tr><td>redirectEnd</td><td>最后一次重定向完成，也就是Http响应的最后一个字节返回时的时间戳。如果没有重定向，或者上次重定向不是同源的。则为0</td></tr><tr><td>redirectStart</td><td>第一次重定向开始时的时间戳，如果没有重定向，或者上次重定向不是同源的。则为0</td></tr><tr><td>requestStart</td><td>浏览器向服务器发出HTTP请求时（或开始读取本地缓存时）的时间戳。</td></tr><tr><td>responseEnd</td><td>浏览器从服务器收到（或从本地缓存读取）最后一个字节时（如果在此之前HTTP连接已经关闭，则返回关闭时）的时间戳</td></tr><tr><td>responseStart</td><td>浏览器从服务器收到（或从本地缓存读取）第一个字节时的时间戳。</td></tr><tr><td>secureConnectionStart</td><td>浏览器与服务器开始安全链接的握手时的时间戳。如果当前网页不要求安全连接，则返回0。</td></tr><tr><td>unloadEventEnd</td><td>如果前一个网页与当前网页属于同一个域下，则表示前一个网页的unload回调结束时的时间戳。如果没有前一个网页，或者之前的网页跳转不是属于同一个域内，则返回值为0。</td></tr><tr><td>unloadEventStart</td><td>如果前一个网页与当前网页属于同一个域下，则表示前一个网页的unload事件发生时的时间戳。如果没有前一个网页，或者之前的网页跳转不是属于同一个域内，则返回值为0。</td></tr></tbody></table><p><img src="/2018/12/20/Performance/perfomance.png" alt=""></p><p><strong>组合值的意义</strong> </p><blockquote><p>DNS查询耗时 ：domainLookupEnd - domainLookupStart</p><p>TCP链接耗时 ：connectEnd - connectStart</p><p>request请求耗时 ：responseEnd - responseStart</p><p>解析dom树耗时 ： domComplete - domInteractive</p><p>白屏时间 ：responseStart - navigationStart</p><p>domready时间 ：domContentLoadedEventEnd - navigationStart</p><p>onload时间 ：loadEventEnd - navigationStart</p></blockquote><p><br></p><a id="more"></a><h5 id="2、performance-navagation，呈现了如何导航到当前文档的信息"><a href="#2、performance-navagation，呈现了如何导航到当前文档的信息" class="headerlink" title="2、performance.navagation，呈现了如何导航到当前文档的信息"></a>2、performance.navagation，呈现了如何导航到当前文档的信息</h5><h5 id="performance-navagation有两个属性"><a href="#performance-navagation有两个属性" class="headerlink" title="performance.navagation有两个属性"></a><code>performance.navagation</code>有两个属性</h5><ul><li><code>type</code>，表示如何导航到当前页面的，主要有4个值<ul><li>type = 0，通过点击链接、书签和表单提交，或者脚本操作，或者在url中直接输入地址访问的</li><li>type=1，点击刷新或者调用Location.reload()方法访问的</li><li>type=2，通过历史记录或者前进后退按钮访问的</li><li>type=255，其他方式访问的</li></ul></li><li><code>redirectCount</code>，表示到达当前页面之前经过几次重定向</li></ul><p><br></p><h5 id="3、performance-timeOrigin"><a href="#3、performance-timeOrigin" class="headerlink" title="3、performance.timeOrigin"></a>3、performance.timeOrigin</h5><p>表示performance性能测试开始的时间，是一个高精度时间戳（千分之一毫秒） </p><p><br></p><h5 id="4、performance-onresourcetimingbufferfull"><a href="#4、performance-onresourcetimingbufferfull" class="headerlink" title="4、performance.onresourcetimingbufferfull"></a>4、performance.onresourcetimingbufferfull</h5><p>表示当浏览器资源时间性能缓冲区已满时会触发的回调函数。下面是mdn上关于这个属性的一个demo。这个demo的主要内容是当缓冲区内容满时，调用buffer_full函数。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buffer_full</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"WARNING: Resource Timing Buffer is FULL!"</span>);</span><br><span class="line">  performance.setResourceTimingBufferSize(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Set a callback if the resource buffer becomes filled</span></span><br><span class="line">  performance.onresourcetimingbufferfull = buffer_full;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;body onload=<span class="string">"init()"</span>&gt;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="5、performance-memory"><a href="#5、performance-memory" class="headerlink" title="5、performance.memory"></a>5、performance.memory</h5><p>一个非标准属性，由chrome浏览器提供，这个属性提供了一个可以获取到基本内存使用情况的对象。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">memory: &#123;</span><br><span class="line">    jsHeapSizeLimit: <span class="number">2217857988</span>, <span class="comment">// 内存大小限制</span></span><br><span class="line">    totalJSHeapSize: <span class="number">27488256</span>, <span class="comment">// 可使用的内存</span></span><br><span class="line">    usedJSHeapSize: <span class="number">23214320</span> <span class="comment">// JS对象(包括V8引擎内部对象)已占用的内存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：<code>usedJSHeapSize</code>表示所有被使用的js堆栈内存；<code>totalJSHeapSize</code>表示当前js堆栈内存总大小，这表示<code>usedJSHeapSize</code>不能大于<code>totalJSHeapSize</code>，如果大于，有可能出现了<strong>内存泄漏</strong>。</p><p><br></p><h5 id="6、performance-getEntries"><a href="#6、performance-getEntries" class="headerlink" title="6、performance.getEntries"></a>6、performance.getEntries</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> resourcesObj = performance.getEntries();</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        connectEnd: <span class="number">1057.4999999989814</span>,</span><br><span class="line">        connectStart: <span class="number">1057.4999999989814</span>,</span><br><span class="line">        decodedBodySize: <span class="number">4263</span>,</span><br><span class="line">        domainLookupEnd: <span class="number">1057.4999999989814</span>,</span><br><span class="line">        domainLookupStart: <span class="number">1057.4999999989814</span>,</span><br><span class="line">        duration: <span class="number">453.3000000010361</span>,</span><br><span class="line">        encodedBodySize: <span class="number">4263</span>,</span><br><span class="line">        entryType: <span class="string">"resource"</span>,</span><br><span class="line">        fetchStart: <span class="number">1057.4999999989814</span>,</span><br><span class="line">        initiatorType: <span class="string">"img"</span>,</span><br><span class="line">        name: <span class="string">"https://cdn.segmentfault.com/v-5c19e300/page/img/app/appQrcode.png"</span>,</span><br><span class="line">        nextHopProtocol: <span class="string">"http/1.1"</span>,</span><br><span class="line">        redirectEnd: <span class="number">0</span>,</span><br><span class="line">        redirectStart: <span class="number">0</span>,</span><br><span class="line">        requestStart: <span class="number">1508.2999999976892</span>,</span><br><span class="line">        responseEnd: <span class="number">1510.8000000000175</span>,</span><br><span class="line">        responseStart: <span class="number">1509.200000000419</span>,</span><br><span class="line">        secureConnectionStart: <span class="number">0</span>,</span><br><span class="line">        serverTiming: [],</span><br><span class="line">        startTime: <span class="number">1057.4999999989814</span>,</span><br><span class="line">        transferSize: <span class="number">0</span>,</span><br><span class="line">        workerStart: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>返回的是一个对象数组，按<code>startTime</code>排序，数组每一个项都是一个对象，这个对象中包含了当前静态资源的加载Timing 。还可以用<code>mark()</code>，<code>measure()</code>方法自定义添加 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标记一个开始点</span></span><br><span class="line">performance.mark(<span class="string">"mySetTimeout-start"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等待1000ms</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 标记一个结束点</span></span><br><span class="line">  performance.mark(<span class="string">"mySetTimeout-end"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 标记开始点和结束点之间的时间戳</span></span><br><span class="line">  performance.measure(</span><br><span class="line">    <span class="string">"mySetTimeout"</span>,</span><br><span class="line">    <span class="string">"mySetTimeout-start"</span>,</span><br><span class="line">    <span class="string">"mySetTimeout-end"</span></span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取所有名称为mySetTimeout的measures</span></span><br><span class="line">  <span class="keyword">var</span> measures = performance.getEntriesByName(<span class="string">"mySetTimeout"</span>);</span><br><span class="line">  <span class="keyword">var</span> measure = measures[<span class="number">0</span>];</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"setTimeout milliseconds:"</span>, measure.duration)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 清除标记</span></span><br><span class="line">  performance.clearMarks();</span><br><span class="line">  performance.clearMeasures();</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="二、一套性能API标准"><a href="#二、一套性能API标准" class="headerlink" title="二、一套性能API标准"></a>二、一套性能API标准</h3><table><thead><tr><th>API</th><th style="text-align:left">名称</th><th>功能</th></tr></thead><tbody><tr><td>Navigation Timing</td><td style="text-align:left">导航计时</td><td>能够帮助网站开发者检测真实用户数据（RUM），例如带宽、延迟或主页的整体页面加载时间。</td></tr><tr><td>Resource Timing</td><td style="text-align:left">资源计时</td><td>对单个资源的计时，可以对细粒度的用户体验进行检测。</td></tr><tr><td>High Resolution Timing</td><td style="text-align:left">高精度计时</td><td>该API规范所定义的JavaScript接口能够提供精确到微秒级的当前时间，并且不会受到系统时钟偏差或调整的影响。</td></tr><tr><td>Page Visibility</td><td style="text-align:left">页面可见性</td><td>通过这一规范，网站开发者能够以编程方式确定页面的当前可见状态，从而使网站能够更有效地利用电源与CPU。当页面获得或失去焦点时，文档对象的visibilitychange事件便会被触发。</td></tr><tr><td>Performance Timeline</td><td style="text-align:left">性能时间线</td><td>以一个统一的接口获取由Navigation Timing、Resourcing Timing和User Timing所收集的性能数据。</td></tr><tr><td>Battery Status</td><td style="text-align:left">电池状态</td><td>能够检测当前设备的电池状态，例如是否正在充电、电量等级。可以根据当前电量决定是否显示某些内容，对于移动设备来说非常实用。</td></tr><tr><td>User Timing</td><td style="text-align:left">用户计时</td><td>可以对某段代码、函数进行自定义计时，以了解这段代码的具体运行时间。</td></tr><tr><td>Beacon</td><td style="text-align:left">灯塔</td><td>可以将分析结果或诊断代码发送给服务器，它采用了异步执行的方式，因此不会影响页面中其它代码的运行。</td></tr><tr><td>Animation Timing</td><td style="text-align:left">动画计时</td><td>通过requestAnimationFrame函数让浏览器精通地控制动画的帧数，能够有效地配合显示器的刷新率，提供更平滑的动画效果，减少对CPU和电池的消耗。</td></tr><tr><td>Resource Hits</td><td style="text-align:left">资源提示</td><td>通过html属性指定资源的预加载，例如在浏览相册时能够预先加载下一张图片，加快翻页的显示速度。</td></tr><tr><td>Frame Timing</td><td style="text-align:left">帧计时</td><td>通过一个接口获取与帧相关的性能数据，例如每秒帧数和TTF。</td></tr><tr><td>Navigation Error Logging</td><td style="text-align:left">错误日志记录</td><td>通过一个接口存储及获取与某个文档相关的错误记录。</td></tr></tbody></table><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> Performance </tag>
            
            <tag> 首屏时间 </tag>
            
            <tag> 白屏时间 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>git分支开发规范</title>
      <link href="/2018/12/19/git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
      <url>/2018/12/19/git%E5%88%86%E6%94%AF%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h4 id="分支构成"><a href="#分支构成" class="headerlink" title="分支构成"></a>分支构成</h4><p><code>master</code>和<code>develop</code>分支一直存在，且名称不会变化，一般不直接修改这2个分支，由其他分支合并而来。<code>feature、release、hotfix</code>分别用于<strong>功能点开发、优化</strong>，<strong>特定版本测试</strong>，<strong>线上问题紧急处理</strong>。同一类型的分支会产生多个。</p><a id="more"></a><p><br></p><h4 id="分支划分"><a href="#分支划分" class="headerlink" title="分支划分"></a>分支划分</h4><ul><li>master：与线上版本保持绝对一致</li><li>develop：开发分支，由<code>release、feature、hotfix</code>分支合并过后的代码</li><li>feature：实际功能点开发分支<ul><li>建议每个功能新建一个feature， <strong>具有关联关系的功能公用一个feature分支</strong></li></ul></li><li>release：每一次开发完成之后，从develop创建出来的分支，以此分支为基准，进行测试</li><li>hotfix：该分支主要用于修复线上bug</li></ul><p><br></p><h4 id="分支与环境"><a href="#分支与环境" class="headerlink" title="分支与环境"></a>分支与环境</h4><ul><li><p>生产环境：<code>master</code>分支</p></li><li><p>测试环境：<code>release</code>分支和<code>hotfix</code>分支</p></li></ul><p><br></p><h4 id="命名规范约定"><a href="#命名规范约定" class="headerlink" title="命名规范约定"></a>命名规范约定</h4><ul><li><code>feature</code>分支命名：<code>feature/name</code></li><li><code>release</code>分支命名：<code>release/name</code></li><li><code>hotfix</code>分支命名：<code>hotfix/name</code></li></ul><p>比如有一个「<strong>优化分布式Session</strong>」的需求，可在develop分支的基础上创建新分支 <code>feature/optimize_distributed_session</code>进行开发，开发完成后合并到<code>develop</code>分支。</p><p><br></p><h4 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h4><h5 id="1-master分支"><a href="#1-master分支" class="headerlink" title="1.master分支"></a>1.master分支</h5><p>主分支，与线上运行的版本始终保持一致，任何时候都不要直接修改master分支。</p><p>一个版本的release分支、hotfix分支开发完成后，会合并代码到master分支，也就是说<strong>master分支主要来源于release分支和hotfix分支</strong>。</p><h5 id="2-develop分支"><a href="#2-develop分支" class="headerlink" title="2.develop分支"></a>2.develop分支</h5><p>开发分支，始终保持最新完成以及bug修复后的代码，新增功能时基于该分支创建feature分支。</p><p>一个版本的release分支、hotfix分支开发完成后，也会合并到develop分支，另外，一个版本的feature功能开发完成后，也会合并到develop分支。也就是说<strong>develop分支来源于feature、release、hotfix分支</strong>。</p><h5 id="3-feature分支"><a href="#3-feature分支" class="headerlink" title="3.feature分支"></a>3.feature分支</h5><p>开发新功能或优化现有功能时，会创建feature分支，以develop为基础创建。一般会有多个功能同时开发，但上线时间可能不同，<strong>在适当的时候将特定的feature分支合并到develop分支，并创建release分支，进入测试状态</strong>。</p><h5 id="4-release分支"><a href="#4-release分支" class="headerlink" title="4.release分支"></a>4.release分支</h5><p>当一组feature开发完成，会首先合并到develop分支，开始<strong>进入提测阶段时，会创建release分支</strong>。</p><p>以release分支代码为基准提测，测试过程中若存在bug需要修复，则<strong>直接由开发者在release分支修复并提交</strong>。</p><p>测试完成之后，<strong>合并release分支到master和develop分支</strong>，此时master为最新代码，用作上线。</p><h5 id="5-hotfix分支"><a href="#5-hotfix分支" class="headerlink" title="5.hotfix分支"></a>5.hotfix分支</h5><p>线上出现紧急问题时，需要及时修复，<strong>以master分支为基线，创建hotfix分支</strong>，修复完成后，需要合并到master分支和develop分支。</p><p><br></p><h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ol><li>develop分支已存在未上线的feature代码，此时需要紧急上线一个新功能，但develop的代码不能上，如何处理 ？<ul><li>以master为基线创建feature， 在完成之后，代码合并到master分支</li><li>为了保证develop是最新代码，需要从master合并到develop分支</li></ul></li></ol><ol start="2"><li>以develop为基线，创建了f1和f2两个feature分支之后，f1、f2开发一半的时候，发现两个分支代码需要有依赖怎么办 ？<ul><li>最好在开发开始前确定两个功能是否相关,若相关则只创建一个分支,两个功能在一起开发</li><li>如果已经创建，则需要合并到一个分支</li><li>一定要保证commit历史记录的整洁，代码合并时，根据情况选择merge或rebase</li><li>使用rebase注意，一旦分支中的提交对象发布到公共仓库，就千万不要对该分支进行衍合操作</li></ul></li></ol><p><img src="/2018/12/19/git分支开发规范/1.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>埋点分析定义</title>
      <link href="/2018/12/19/%E5%9F%8B%E7%82%B9%E5%88%86%E6%9E%90%E5%AE%9A%E4%B9%89/"/>
      <url>/2018/12/19/%E5%9F%8B%E7%82%B9%E5%88%86%E6%9E%90%E5%AE%9A%E4%B9%89/</url>
      <content type="html"><![CDATA[<h4 id="一、基础指标"><a href="#一、基础指标" class="headerlink" title="一、基础指标"></a>一、基础指标</h4><p><code>PV</code>、<code>UV</code>、<code>VV</code>、<code>IP</code>是网站分析中最基础、最常见的指标</p><ul><li>访问次数（<code>Visit View</code>）<ul><li>当访客完成所有的浏览并最终<strong>关掉该网站的所有页面</strong>时，便完成了一次访问</li><li>若访客连续30分钟没有<strong>新开</strong>和<strong>刷新</strong>页面，则被计算为本次访问结束</li></ul></li><li>网页浏览数（<code>Page View</code>） <ul><li>指网页的浏览次数，用以衡量用户访问的网页数量。多次<strong>打开</strong>或<strong>刷新</strong>同一网页则浏览量累计</li></ul></li><li>独立访客数（<code>Unique Visitor</code>）<ul><li>1天内相同的访客多次访问网站只计算1个UV，以cookie为依据</li></ul></li><li>独立IP数（<code>IP</code>）<ul><li>1天内相同的访客多次访问网站只计算1个独立IP，以IP为依据</li></ul></li></ul><p><br></p><a id="more"></a><h4 id="二、访问记录模型"><a href="#二、访问记录模型" class="headerlink" title="二、访问记录模型"></a>二、访问记录模型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user  =&gt;  timeStamp  =&gt;  location  =&gt;  action  =&gt;  meta</span><br></pre></td></tr></table></figure><ul><li><p><code>user</code>：触发动作的<code>用户</code>，必要</p><ul><li>有账号，使用<code>userId</code>标识</li><li>没账号，使用浏览器<code>fingerprint</code> + <code>cookie</code></li></ul></li><li><p><code>timeStamp</code>：触发动作的<code>时间戳</code>，必要</p></li><li><p><code>location</code>：动作发生的页面，必要</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location: &#123;</span><br><span class="line">    siteId: <span class="string">''</span>, <span class="comment">// 标识一个站点集合，必要</span></span><br><span class="line">    <span class="built_in">module</span>: <span class="string">''</span>, <span class="comment">// 标识当前url属于哪个模块，可选</span></span><br><span class="line">    url: <span class="string">''</span>, <span class="comment">// 用于定位具体某一页，必要</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// siteId字段、module字段是对url字段的特定描述</span></span><br></pre></td></tr></table></figure></li><li><p><code>action</code>：具体动作，必要</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">action: &#123;</span><br><span class="line">    name: <span class="string">''</span>, <span class="comment">//</span></span><br><span class="line">meta: <span class="string">''</span> <span class="comment">// 对动作的描述补充，如download的文件类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>action.name</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问次数(Visit View): enter, leave</span><br><span class="line">浏览数(Page View)：view</span><br><span class="line">其他：click, download, upload</span><br></pre></td></tr></table></figure></li><li><p><code>meta</code>：补充额外的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">meta: &#123;</span><br><span class="line">    brower: <span class="string">''</span>, <span class="comment">// 浏览器统计</span></span><br><span class="line">system: <span class="string">''</span>, <span class="comment">// 操作系统统计</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><br></p><h4 id="三、埋点接口"><a href="#三、埋点接口" class="headerlink" title="三、埋点接口"></a>三、埋点接口</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统一传参格式</span></span><br><span class="line">&#123;</span><br><span class="line">    userId: <span class="string">''</span>,</span><br><span class="line">siteId: <span class="string">''</span>,</span><br><span class="line"><span class="built_in">module</span>: <span class="string">'module1&amp;module2&amp;module3'</span>, <span class="comment">//多级模块通过&amp;拼接</span></span><br><span class="line">pageViewUrl: <span class="string">''</span>,</span><br><span class="line">timeStamp: <span class="string">''</span>,</span><br><span class="line">action: <span class="string">''</span>,</span><br><span class="line">meta: <span class="string">''</span> <span class="comment">// 对动作的描述补充，如download的文件类型</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：用户表、site表、module表、action表</p><p>1、埋点采集数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    url: <span class="regexp">/api/</span>statistics / collection,</span><br><span class="line">    method: post,</span><br><span class="line">    Content - Type: application / json;charset = utf - <span class="number">8</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        userId: <span class="string">''</span>,</span><br><span class="line">        siteId: <span class="string">''</span>,</span><br><span class="line">        <span class="built_in">module</span>: <span class="string">'module1&amp;module2&amp;module3'</span>, <span class="comment">//多级模块通过&amp;拼接</span></span><br><span class="line">        pageViewUrl: <span class="string">''</span>,</span><br><span class="line">        timeStamp: <span class="string">''</span>,</span><br><span class="line">        action: <span class="string">''</span>,</span><br><span class="line">        meta: <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 埋点 </tag>
            
            <tag> 分析 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>white-space与换行</title>
      <link href="/2018/12/14/white-space/"/>
      <url>/2018/12/14/white-space/</url>
      <content type="html"><![CDATA[<p><code>white-space</code> CSS 属性是用来设置如何处理元素中的空白。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">white-space: normal | pre | nowrap | pre-wrap | pre-line</span><br></pre></td></tr></table></figure><p><code>normal</code>：连续的空白符会被合并，换行符会被当作空白符来处理。填充line盒子时，必要的话会换行。</p><p><code>nowrap</code>：和 <code>normal</code> 一样，连续的空白符会被合并。但文本内的换行无效。</p><p><code>pre</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br/&gt;</code>元素时才会换行。 </p><p><code>pre-wrap</code>：连续的空白符会被保留。在遇到换行符或者<code>&lt;br/&gt;</code>元素，或者需要为了填充line盒子时才会换行。</p><p><code>pre-line</code>：连续的空白符会被合并。在遇到换行符或者<code>&lt;br/&gt;</code>元素，或者需要为了填充line盒子时会换行。</p><p><br></p><a id="more"></a><table><thead><tr><th></th><th>换行符</th><th>空格和制表符</th><th>文本超出容器宽度</th></tr></thead><tbody><tr><td><code>normal</code></td><td>合并</td><td>合并</td><td>换行</td></tr><tr><td><code>nowrap</code></td><td>合并</td><td>合并</td><td>不换行</td></tr><tr><td><code>pre</code></td><td>保留</td><td>保留</td><td>不换行</td></tr><tr><td><code>pre-wrap</code></td><td>保留</td><td>保留</td><td>换行</td></tr><tr><td><code>pre-line</code></td><td>保留</td><td>合并</td><td>换行</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> white-space </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-Scroll-Snap</title>
      <link href="/2018/12/11/CSS-Scroll-Snap/"/>
      <url>/2018/12/11/CSS-Scroll-Snap/</url>
      <content type="html"><![CDATA[<p><code>CSS Scroll Snap</code>是<code>CSS</code>中一个独立的模块，可以让<strong>网页容器滚动停止的时候，自动平滑定位到指定元素的指定位置</strong>，包含<code>scroll-*</code>以及<code>scroll-snap-*</code>等诸多CSS属性。 </p><p><code>Scroll Snap</code>模块相关<code>CSS</code>属性可以分为两类，一类作用在滚动容器上，一拨作用在你希望有滚动定位点的子元素上。具体参见下表：</p><table><thead><tr><th>作用在滚动容器上</th><th>作用在定位子项上</th></tr></thead><tbody><tr><td>scroll-snap-type</td><td>scroll-snap-align</td></tr><tr><td>scroll-snap-stop</td><td>scroll-margin/scroll-margin-*</td></tr><tr><td>scroll-padding/scroll-padding-*</td></tr></tbody></table><p><br></p><a id="more"></a><h4 id="1-scroll-snap-type"><a href="#1-scroll-snap-type" class="headerlink" title="1. scroll-snap-type"></a>1. scroll-snap-type</h4><p><code>scroll-snap-type</code>作用就是确定是水平滚动定位，还是垂直滚动定位。支持的属性值如下：</p><ul><li><strong>none</strong> ：默认值，表示滚动时候忽略捕捉点。 </li><li><strong>x</strong> ：捕捉水平定位点。 </li><li><strong>y</strong>  ：捕捉垂直平定位点。 </li><li><strong>block</strong> ： 捕捉和块状元素排列一个滚动方向的定位点，默认文档流下指的就是垂直轴。 </li><li><strong>inline</strong> ：捕捉和内联元素排列一个滚动方向的定位点，默认文档流下指的就是水平轴。 </li><li><strong>both</strong> ：横轴纵轴都捕捉。  </li><li><strong>mandatory</strong> ：强制定位，可选参数。无论是添加删除元素，或者滚动窗口较小，不足以放下子元素。  </li><li><strong>proximity</strong> ：表示“大约”，可选参数。 </li></ul><p><br></p><h4 id="2-scroll-snap-stop"><a href="#2-scroll-snap-stop" class="headerlink" title="2. scroll-snap-stop"></a>2. scroll-snap-stop</h4><p><code>scroll-snap-stop</code>表示是否允许滚动容器忽略捕获位置。其中，支持的属性值：</p><ul><li><strong>normal</strong> ：默认值。可以忽略捕获位置。  </li><li><strong>always</strong>：不能忽略捕获位置。且必须定位到第一个捕获元素的位置。  </li></ul><p><br></p><h4 id="3-scroll-snap-align"><a href="#3-scroll-snap-align" class="headerlink" title="3. scroll-snap-align"></a>3. scroll-snap-align</h4><p><code>scroll-snap-align</code>是作用在滚动容器子元素上的，表示捕获点是上边缘，下边缘，还是中间位置。其中，支持的属性值：</p><ul><li><p><strong>none</strong>：默认值。不定义位置。  </p></li><li><p><strong>start</strong>：起始位置对齐，例如，垂直滚动，子元素和容器同上边缘对齐。  </p></li><li><strong>end</strong>：结束位置对齐，例如，垂直滚动，子元素和容器同下边缘对齐。  </li><li><strong>center</strong>：居中对齐。子元素中心和滚动容器中心一致。  </li></ul><p>注：<code>scroll-snap-align</code>还支持同时使用两个属性值，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">scroll-snap-align</span>: <span class="selector-tag">start</span> <span class="selector-tag">end</span>;</span><br></pre></td></tr></table></figure><p>此时，第一个属性值表示<code>block元素</code>排列方向（通常垂直），第二个属性值表示inline元素`的排列方向（通常水平）。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> scroll-snap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>字符编码与存储_UCS_UTF</title>
      <link href="/2018/12/07/UCS-2%E5%92%8CUCS-4/"/>
      <url>/2018/12/07/UCS-2%E5%92%8CUCS-4/</url>
      <content type="html"><![CDATA[<h3 id="1、字节和字符的区别"><a href="#1、字节和字符的区别" class="headerlink" title="1、字节和字符的区别"></a>1、字节和字符的区别</h3><p><code>ASCII</code>时代，字节和字符是一样的。当<code>Unicode</code>出现后，事情有所不同了。<code>字节（octet）</code>是一个八位的<strong>存储单元</strong>，取值范围一定是<code>0～255</code>。而<code>字符（character，或者word）</code>为<strong>语言意义上的符号</strong>，范围就不一定了。例如在<code>UCS-2</code>中定义的字符范围为<code>0～65535</code>，它的一个字符占用两个字节。</p><p><br></p><h3 id="2、UCS-2和UCS-4"><a href="#2、UCS-2和UCS-4" class="headerlink" title="2、UCS-2和UCS-4"></a>2、<code>UCS-2</code>和<code>UCS-4</code></h3><p><code>Unicode</code>是为整合全世界的所有语言文字而诞生的。任何文字在<code>Unicode</code>中都对应一个值，这个值称为<code>代码点（code point）</code>。代码点的值通常写成<code>U+ABCD</code>的格式。而文字和代码点之间的对应关系就是<code>UCS-2（Universal Character Set coded in 2 octets）</code>。顾名思义，<code>UCS-2</code>是用两个字节来表示代码点，其取值范围为 <code>U+0000～U+FFFF</code>。</p><p><br></p><p>为了能表示更多的文字，人们又提出了<code>UCS-4</code>，即用四个字节表示代码点。它的范围为 <code>U+00000000～U+7FFFFFFF</code>，其中 <code>U+00000000～U+0000FFFF</code>和<code>UCS-2</code>是一样的。</p><p><br></p><p>要注意，<code>UCS-2</code>和<code>UCS-4</code>只规定了<code>代码点</code>和<code>文字</code>之间的对应关系，并没有规定代码点在计算机中如何存储。规定存储方式的称为<code>UTF（Unicode Transformation Format）</code>，其中应用较多的就是<code>UTF-8</code>。</p><p><br></p><p>注：</p><ul><li><code>Unicode</code>不是一次性定义的，而是<strong>分区定义</strong>。每个区可以存放<code>65536</code>个字符，称为一个平面（<code>plane</code>），定义了<code>17</code>个平面，目前<code>Unicode</code>字符集的大小是<code>1,114,112</code>。 </li></ul><ul><li>最前面的<code>65536</code>个字符位，称为<strong>基本平面（缩写BMP）</strong>，是<code>Unicode</code>最先定义和公布的一个平面。 </li></ul><p><br></p><a id="more"></a><h3 id="3、UTF-8"><a href="#3、UTF-8" class="headerlink" title="3、UTF-8"></a>3、<code>UTF-8</code></h3><p><code>UTF-8</code> 最大的一个特点，就是它是一种变长的编码方式。它可以使用<code>1~6</code>个字节表示一个符号，根据不同的符号而变化字节长度。</p><p>UTF-8 的编码规则很简单，只有二条：</p><ul><li>对于单字节的符号，字节的第一位设为<code>0</code>，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和 ASCII 码是相同的。</li><li>对于<code>n</code>字节的符号（<code>n &gt; 1</code>），第一个字节的前<code>n</code>位都设为<code>1</code>，第<code>n + 1</code>位设为<code>0</code>，后面字节的前两位一律设为<code>10</code>。剩下的没有提及的二进制位，全部为这个符号的 <code>Unicode</code> 码。</li></ul><p><br></p><p>下表总结了编码规则，字母<code>x</code>表示可用编码的位。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Unicode符号范围      |        UTF-8编码方式</span><br><span class="line">  (十六进制)         |         （二进制）</span><br><span class="line">--------------------+-------------------------------------</span><br><span class="line">0000 0000-0000 007F | 0xxxxxxx</span><br><span class="line">0000 0080-0000 07FF | 110xxxxx 10xxxxxx</span><br><span class="line">0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx</span><br><span class="line">0001 0000-001F FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br><span class="line">0020 0000-03FF FFFF | 111110xx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br><span class="line">0400 0000-7FFF FFFF | 1111110x 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx 10xxxxxx</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>如果一个字节的第一位是<code>0</code>，则这个字节单独就是一个字符；如果第一位是<code>1</code>，则<strong>连续有多少个<code>1</code>，就表示当前字符占用多少个字节</strong>。</li><li>2003年11月<code>UTF-8</code>被<code>RFC 3629</code>重新规范，只能使用原来<code>Unicode</code>定义的区域，<code>U+0000</code>到<code>U+10FFFF</code>，也就是最多四个字节，<code>非标准UTF-8</code>仍支持使用<code>1~6</code>个字节表示一个符号。</li></ul><p><br></p><p><code>严</code>的 Unicode 是<code>4E25</code>（<code>100111000100101</code>），根据上表，可以发现<code>4E25</code>处在第三行的范围内（<code>0000 0800 - 0000 FFFF</code>），因此<code>严</code>的 UTF-8 编码需要三个字节，即格式是<code>1110xxxx 10xxxxxx 10xxxxxx</code>。然后，从<code>严</code>的最后一个二进制位开始，依次从后向前填入格式中的<code>x</code>，多出的位补<code>0</code>。这样就得到了，<code>严</code>的 UTF-8 编码是<code>11100100 10111000 10100101</code>，转换成十六进制就是<code>E4B8A5</code>。</p><p><br></p><p><strong>常用</strong>中文<strong>编码范围</strong>（并非全部）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/[\u4e00-\u9fa5]/ 中文：20902个</span><br><span class="line"></span><br><span class="line">/[\u0800-\u4e00]/ 日文：17921个</span><br><span class="line"></span><br><span class="line">/[\uac00-\ud7ff]/ 韩文：11264个</span><br></pre></td></tr></table></figure><p>注：以上正则表达式是<strong>部分中文匹配</strong>，并非精确，但能满足大多数情况。</p><p><br></p><h3 id="4、中文Unicode-编码范围"><a href="#4、中文Unicode-编码范围" class="headerlink" title="4、中文Unicode 编码范围"></a>4、中文Unicode 编码范围</h3><table><thead><tr><th><strong>字符集</strong></th><th><strong>字数</strong></th><th><strong>Unicode 编码</strong></th></tr></thead><tbody><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=jbhz" target="_blank" rel="noopener">基本汉字</a></td><td>20902字</td><td>4E00-9FA5</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=jbhzbc" target="_blank" rel="noopener">基本汉字补充</a></td><td>38字</td><td>9FA6-9FCB</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kza" target="_blank" rel="noopener">扩展A</a></td><td>6582字</td><td>3400-4DB5</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kzb" target="_blank" rel="noopener">扩展B</a></td><td>42711字</td><td>20000-2A6D6</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kzc" target="_blank" rel="noopener">扩展C</a></td><td>4149字</td><td>2A700-2B734</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kzd" target="_blank" rel="noopener">扩展D</a></td><td>222字</td><td>2B740-2B81D</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=kxbs" target="_blank" rel="noopener">康熙部首</a></td><td>214字</td><td>2F00-2FD5</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=bskz" target="_blank" rel="noopener">部首扩展</a></td><td>115字</td><td>2E80-2EF3</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=jrhz" target="_blank" rel="noopener">兼容汉字</a></td><td>477字</td><td>F900-FAD9</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=jrkz" target="_blank" rel="noopener">兼容扩展</a></td><td>542字</td><td>2F800-2FA1D</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=puabj" target="_blank" rel="noopener">PUA(GBK)部件</a></td><td>81字</td><td>E815-E86F</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=bjkz" target="_blank" rel="noopener">部件扩展</a></td><td>452字</td><td>E400-E5E8</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=puazb" target="_blank" rel="noopener">PUA增补</a></td><td>207字</td><td>E600-E6CF</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=hzbh" target="_blank" rel="noopener">汉字笔画</a></td><td>36字</td><td>31C0-31E3</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=hzjg" target="_blank" rel="noopener">汉字结构</a></td><td>12字</td><td>2FF0-2FFB</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=hyzy" target="_blank" rel="noopener">汉语注音</a></td><td>22字</td><td>3105-3120</td></tr><tr><td><a href="http://www.qqxiuzi.cn/zh/hanzi-unicode-bianma.php?zfj=zykz" target="_blank" rel="noopener">注音扩展</a></td><td>22字</td><td>31A0-31BA</td></tr><tr><td>〇</td><td>1字</td><td>3007</td></tr></tbody></table><p><br></p><h3 id="5、UTF-16"><a href="#5、UTF-16" class="headerlink" title="5、UTF-16"></a>5、<code>UTF-16</code></h3><p><code>UTF-16</code>的编码规则很简单：<strong>基本平面</strong>的字符占用2个字节，辅助平面的字符占用4个字节。<strong>也就是说，UTF-16的编码长度要么是2个字节（U+0000到U+FFFF），要么是4个字节（U+010000到U+10FFFF）。</strong><code>UTF-16</code>编码是<code>UCS-2</code>的超集，介于<code>UTF-32</code>与<code>UTF-8</code>之间，同时结合了定长和变长两种编码方法的特点。</p><table><thead><tr><th>Unicode 编号范围 （十六进制）</th><th>0000 0000 ~ 0000 FFFF</th><th>0001 0000 ~ 0010 FFFF</th></tr></thead><tbody><tr><td>Unicode 编号 （二进制）</td><td>xxxx-xxxx ~ xxxx-xxxx</td><td>xxxx xxxx xxxx xxxx xxxx</td></tr><tr><td>UTF-16 编码</td><td>xxxx-xxxx ~ xxxx-xxxx</td><td>110110xx xxxx xxxx 110111xx  xxxx xxxx</td></tr><tr><td>字节数</td><td>2</td><td>4</td></tr></tbody></table><p>四字节存储：将字符编号的所有<strong>比特位</strong>分成两部分，较高的一些比特位用一个值介于 <code>D800~DBFF</code> 之间的双字节存储，较低的一些比特位用一个值介于<code>DC00~DFFF</code> 之间的双字节存储。 </p><p>注：标准的<code>UTF-8</code>和<code>UTF-16</code>都是最多支持<code>U+0000</code>到<code>U+10FFFF</code>的<code>Unicode</code>码点</p><p><br></p><h3 id="6、Unicode与JavaScript"><a href="#6、Unicode与JavaScript" class="headerlink" title="6、Unicode与JavaScript"></a>6、Unicode与JavaScript</h3><p><code>JavaScript</code>语言采用<code>Unicode</code>字符集，但是只支持一种编码方法。这种编码既不是<code>UTF-16</code>，也不是<code>UTF-8</code>，更不是<code>UTF-32</code>。<strong>JavaScript用的是<code>UCS-2</code></strong>。</p><p>注：在 level 3 或者更高等级的实现中，遵循国际标准，<code>JavaScript 引擎</code>是允许使用 <code>UCS-2</code>或者 <code>UTF-16</code> 进行编码的。 </p><p><br></p><p><code>JavaScript</code> 允许采用<code>\uxxxx</code>形式表示一个字符，其中<code>xxxx</code>表示字符的 <code>Unicode</code> 码点。 但是，这种表示法只限于码点在<code>\u0000</code>~<code>\uFFFF</code>之间的字符。超出这个范围的字符，必须用两个双字节的形式表示。 <code>ES6</code> 对这一点做出了改进，只要将码点放入大括号，就能正确解读该字符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"\u20BB7"</span></span><br><span class="line"><span class="comment">// "₻7" JavaScript会理解成\u20BB+7</span></span><br><span class="line"></span><br><span class="line"><span class="string">"\u&#123;20BB7&#125;"</span></span><br><span class="line"><span class="comment">// "𠮷"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"\u&#123;41&#125;\u&#123;42&#125;\u&#123;43&#125;"</span></span><br><span class="line"><span class="comment">// "ABC"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hello = <span class="number">123</span>;</span><br><span class="line">hell\u&#123;<span class="number">6</span>F&#125; <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="string">'\u&#123;1F680&#125;'</span> === <span class="string">'\uD83D\uDE80'</span></span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><br></p><ul><li>JavaScript 内部，字符以 <code>UTF-16</code> 的格式储存，每个字符固定为<code>2</code>个字节。 使用<code>for...of</code>循环，它会正确识别 32 位的 UTF-16 字符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">'𠮷a'</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> ch <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(ch.codePointAt(<span class="number">0</span>).toString(<span class="number">16</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 20bb7</span></span><br><span class="line"><span class="comment">// 61</span></span><br></pre></td></tr></table></figure><ul><li><code>Array.from()</code>可以将字符串转为数组，然后返回字符串的长度。它能正确处理各种 <code>Unicode</code> 字符，可以避免 <code>JavaScript</code> 将大于<code>\uFFFF</code>的 <code>Unicod</code>e 字符，算作两个字符的 bug。 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(string).length</span><br></pre></td></tr></table></figure><p><br></p><p><code>codePointAt</code>方法是测试一个字符由两个字节还是由四个字节组成的最简单方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is32Bit</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> c.codePointAt(<span class="number">0</span>) &gt; <span class="number">0xFFFF</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">is32Bit(<span class="string">"𠮷"</span>) <span class="comment">// true</span></span><br><span class="line">is32Bit(<span class="string">"a"</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> UCS-2 </tag>
            
            <tag> UCS-4 </tag>
            
            <tag> UTF-8 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>console.log格式化输出</title>
      <link href="/2018/12/07/console%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/"/>
      <url>/2018/12/07/console%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</url>
      <content type="html"><![CDATA[<h4 id="字符串替代和格式设置"><a href="#字符串替代和格式设置" class="headerlink" title="字符串替代和格式设置"></a>字符串替代和格式设置</h4><p>传递到任何记录方法的<strong>第一个参数可能包含一个或多个格式说明符</strong>。格式说明符由一个 <code>%</code> 符号与后面紧跟的一个字母组成，字母指示应用到值的格式。<strong>字符串后面的参数会按顺序应用到占位符</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// Sam has 100 points</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"%s has %d points"</span>, <span class="string">"Sam"</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Node count: 2, and the time is 1544184144238.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Node count: %d, and the time is %f."</span>, <span class="built_in">document</span>.childNodes.length, <span class="built_in">Date</span>.now());</span><br></pre></td></tr></table></figure><p>格式说明符的完整列表为： </p><table><thead><tr><th>说明符</th><th>输出</th></tr></thead><tbody><tr><td>%s</td><td>将值格式化为字符串</td></tr><tr><td>%i 或 %d</td><td>将值格式化为整型</td></tr><tr><td>%f</td><td>将值格式化为浮点值</td></tr><tr><td>%o</td><td>将值格式化为可扩展 DOM 元素。如同在 Elements 面板中显示的一样</td></tr><tr><td>%O</td><td>将值格式化为可扩展 JavaScript 对象</td></tr><tr><td>%c</td><td>将 CSS 样式规则应用到第二个参数指定的输出字符串</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> console.log </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>getComputedStyle和currentStyle</title>
      <link href="/2018/12/07/getComputedStyle%E5%92%8CcurrentStyle/"/>
      <url>/2018/12/07/getComputedStyle%E5%92%8CcurrentStyle/</url>
      <content type="html"><![CDATA[<h4 id="getComputedStyle"><a href="#getComputedStyle" class="headerlink" title="getComputedStyle"></a>getComputedStyle</h4><p><code>Window.getComputedStyle()</code>方法返回一个对象，该对象在应用活动样式表并解析这些值可能包含的任何基本计算后报告元素的所有CSS属性的值。 私有的CSS属性值可以通过对象提供的API或通过简单地使用CSS属性名称进行索引来访问。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> style = <span class="built_in">window</span>.getComputedStyle(element, [pseudoElt]);</span><br><span class="line"><span class="comment">// let afterStyle = window.getComputedStyle(h3, '::after');</span></span><br></pre></td></tr></table></figure><ul><li><code>pseudoElt</code> 可选，指定一个要匹配的<strong>伪元素</strong>的字符串。</li></ul><p><br></p><a id="more"></a><h3 id="defaultView"><a href="#defaultView" class="headerlink" title="defaultView"></a>defaultView</h3><p>在许多在线的演示代码中，<code>getComputedStyle</code>是通过 <code>document.defaultView</code> 对象来调用的。大部分情况下，这是不需要的，因为可以直接通过<code>window</code>对象调用。但有一种情况，你必需要使用 <code>defaultView</code>,  那是在<code>firefox3.6</code>上访问子框架内的样式 。 </p><p><br></p><h3 id="currentStyle"><a href="#currentStyle" class="headerlink" title="currentStyle"></a>currentStyle</h3><p><code>Element.currentStyle</code> 是一个与 <code>window.getComputedStyle</code>方法功能相同的属性。这个属性实现在旧版本的<code>IE</code>浏览器中。</p>]]></content>
      
      
        <tags>
            
            <tag> getComputedStyle </tag>
            
            <tag> currentStyle </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>supporst属性</title>
      <link href="/2018/12/07/css3-supporst%E5%B1%9E%E6%80%A7/"/>
      <url>/2018/12/07/css3-supporst%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p><code>@supports</code>是<code>CSS3</code>新引入的规则之一，主要用于检测当前浏览器是否支持某个<code>CSS</code>属性并加载具体样式。</p><h4 id="1、基本使用"><a href="#1、基本使用" class="headerlink" title="1、基本使用"></a>1、基本使用</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">supports</span> (display: grid) &#123;</span><br><span class="line">    <span class="selector-class">.container</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类似<code>@media</code>媒体查询，当浏览器支持<code>display:grid</code>这个CSS属性时才应用其中的样式。</p><p><br></p><a id="more"></a><h4 id="2、逻辑运算"><a href="#2、逻辑运算" class="headerlink" title="2、逻辑运算"></a>2、逻辑运算</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**not*/</span></span><br><span class="line">@<span class="keyword">supports</span> not(display: grid)&#123;...&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">/**and*/</span></span><br><span class="line">@<span class="keyword">supports</span> (display: grid) and (position: sticky)&#123;...&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**or*/</span></span><br><span class="line">@<span class="keyword">supports</span> (display: grid) or (display: flex)&#123;...&#125;</span><br></pre></td></tr></table></figure><p><br></p><p>注：括号内不一定都要是“关键字”，只要是CSS语法都可以 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">supports</span> (border-radius: <span class="number">4px</span>) or (--btn-color: red)&#123;...&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="3、js方法查询"><a href="#3、js方法查询" class="headerlink" title="3、js方法查询"></a>3、js方法查询</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(CSS.supports(<span class="string">'display'</span>, <span class="string">'grid'</span>))&#123;</span><br><span class="line">    alert(<span class="string">'it support!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> supporst </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BASIC_HTTP认证_nginx</title>
      <link href="/2018/12/05/BASIC-HTTP%E8%AE%A4%E8%AF%81/"/>
      <url>/2018/12/05/BASIC-HTTP%E8%AE%A4%E8%AF%81/</url>
      <content type="html"><![CDATA[<h3 id="一、BASIC认证概述"><a href="#一、BASIC认证概述" class="headerlink" title="一、BASIC认证概述"></a>一、BASIC认证概述</h3><p>HTTP协议定义了<strong>基本认证过程</strong>，允许HTTP服务器对WEB浏览器进行用户身份证的方法。</p><ol><li>当一个客户端向HTTP服务器进行数据请求时，如果客户端未被认证，则HTTP服务器将通过基本认证过程对客户端的用户名及密码进行验证，以决定用户是否合法。</li><li>客户端在接收到HTTP服务器的身份认证要求后，会提示用户输入用户名及密码，然后将用户名及密码以<strong>BASE64加密</strong>，加密后的密文将附加于请求信息中， 如当用户名为anjuta，密码为：123456时，客户端将用户名和密码<strong>用“<code>：</code>”合并</strong>，并将合并后的字符串用BASE64加密为密文，并于每次请求数据 时，将密文附加于请求头（Request Header）中。</li><li>HTTP服务器在<strong>每次收到请求包</strong>后，根据协议取得客户端附加的用户信息（BASE64加密的用户名和密码），解开请求包，对用户名及密码进行验证，如果用 户名及密码正确，则根据客户端请求，返回客户端所需要的数据;否则，返回错误代码或重新要求客户端提供用户名及密码。</li></ol><p><br></p><a id="more"></a><h3 id="二、BASIC认证的过程"><a href="#二、BASIC认证的过程" class="headerlink" title="二、BASIC认证的过程"></a>二、BASIC认证的过程</h3><p>1、客户端向服务器请求数据，请求的内容可能是一个网页或者是一个其它的MIME类型，此时，假设客户端尚未被验证(即header中不带正确的Authorization字段)，则客户端提供如下请求至服务器:</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Get /index.html HTTP/1.0</span><br><span class="line"><span class="attribute">Host:www.google.com</span></span><br></pre></td></tr></table></figure><p><br></p><p>2、  服务器向客户端发送验证请求代码401,服务器返回的数据大抵如下： </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.0 <span class="number">401</span> Unauthorised</span><br><span class="line"><span class="attribute">Server</span>: SokEvo/1.0</span><br><span class="line"><span class="attribute">WWW-Authenticate</span>: Basic realm="google.com"</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html</span><br><span class="line"><span class="attribute">Content-Length</span>: xxx</span><br></pre></td></tr></table></figure><p><br></p><p>3、当符合http规范的客户端收到<code>401</code>返回值时，将自动弹出一个登录窗口，要求用户输入用户名和密码。 </p><p><br></p><p>4、用户输入用户名和密码后，将用户名及密码以<code>BASE64</code>加密方式加密，并将密文放入前一条请求信息中，则客户端发送的第一条请求信息则变成如下内容(即在header中自动加入<code>Authorization</code>字段)： </p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Get /index.html HTTP/1.0</span><br><span class="line"><span class="attribute">Host:www.google.com</span></span><br><span class="line"><span class="attribute">Authorization</span>: Basic xxxxxxxxxxxxxxxxxxxxxxxxxxxx</span><br></pre></td></tr></table></figure><p><br></p><p>5、服务器收到上述请求信息后，将<code>Authorization</code>字段后的用户信息取出、解密，将解密后的用户名及密码与用户数据库进行比较验证，如用户名及密码正确，服务器则根据请求，将所请求资源发送给客户端。</p><p><br></p><h3 id="三、nginx用户认证配置"><a href="#三、nginx用户认证配置" class="headerlink" title="三、nginx用户认证配置"></a>三、nginx用户认证配置</h3><p><code>nginx_http_auth_basic_module</code>模块实现让访问着，只有输入正确的用户密码才允许访问web内容。默认情况下nginx已经安装了<code>ngx_http_auth_basic_module</code>模块，如果不需要这个模块，可以加上<code>--without-http_auth_basic_module</code>。</p><h5 id="1、nginx-basic-auth指令"><a href="#1、nginx-basic-auth指令" class="headerlink" title="1、nginx basic auth指令"></a>1、nginx basic auth指令</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法:       auth_basic string | off;</span><br><span class="line">默认值:     auth_basic off;</span><br><span class="line">配置段:     http, server, location, limit_except</span><br></pre></td></tr></table></figure><p>默认表示不开启认证，后面如果跟上字符，这些字符会在弹窗中显示。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">语法:       auth_basic_user_file file;</span><br><span class="line">默认值:     —</span><br><span class="line">配置段:     http, server, location, limit_except</span><br></pre></td></tr></table></figure><p>生成密码可以使用htpasswd，或者使用openssl。用户密码文件，文件内容类似如下： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># printf &quot;ttlsa:$(openssl passwd -crypt 123456)\n&quot; &gt;&gt;conf/htpasswd</span><br><span class="line"># cat conf/htpasswd</span><br><span class="line">ttlsauser1:password1</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> www.ttlsa.comttlsa.com;</span><br><span class="line">    <span class="attribute">index</span> index.html index.php;</span><br><span class="line">    <span class="attribute">root</span> /data/site/www.ttlsa.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">auth_basic</span> <span class="string">"nginx basic http test for ttlsa.com"</span>;</span><br><span class="line">        <span class="attribute">auth_basic_user_file</span> conf/htpasswd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> BASIC </tag>
            
            <tag> authentication </tag>
            
            <tag> nginx_http_auth_basic_module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>npm依赖包版本号</title>
      <link href="/2018/12/05/npm%E4%BE%9D%E8%B5%96%E5%8C%85%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
      <url>/2018/12/05/npm%E4%BE%9D%E8%B5%96%E5%8C%85%E7%89%88%E6%9C%AC%E5%8F%B7/</url>
      <content type="html"><![CDATA[<h3 id="一、版本号"><a href="#一、版本号" class="headerlink" title="一、版本号"></a>一、版本号</h3><p>版本号的格式：<code>主版本号(major).次版本号(minor).补丁版本号(patch)</code></p><ul><li><code>主版本号</code>： 新的架构调整，不兼容老版本</li><li><code>次版本号</code>： 新增功能，兼容老版本</li><li><code>补丁版本号</code>： 修复bug，兼容老版本</li></ul><a id="more"></a><p><br></p><p><a href="https://docs.npmjs.com/files/package.json" target="_blank" rel="noopener">Dependencies规则</a></p><ul><li><code>version</code> Must match <code>version</code> exactly</li><li><code>&gt;version</code> Must be greater than <code>version</code></li><li><code>&gt;=version</code> etc</li><li><code>&lt;version</code></li><li><code>&lt;=version</code></li></ul><ul><li><code>version1 - version2</code> Same as <code>&gt;=version1 &lt;=version2</code>.</li><li><code>1.2.x</code> 1.2.0, 1.2.1, etc., but not 1.3.0</li><li><code>range1 || range2</code> Passes if either range1 or range2 are satisfied.</li></ul><ul><li><code>~version</code> “Approximately equivalent to version” See <a href="https://docs.npmjs.com/misc/semver" target="_blank" rel="noopener">semver</a></li><li><code>^version</code> “Compatible with version” See <a href="https://docs.npmjs.com/misc/semver" target="_blank" rel="noopener">semver</a></li><li><code>*</code> Matches any version</li><li><code>&quot;&quot;</code> (just an empty string) Same as <code>*</code></li></ul><ul><li><code>http://...</code> See ‘URLs as Dependencies’ below</li><li><code>git...</code> See ‘Git URLs as Dependencies’ below</li><li><code>user/repo</code> See ‘GitHub URLs’ below</li><li><code>tag</code> A specific version tagged and published as <code>tag</code> See <code>npm-dist-tag</code></li><li><code>path/path/path</code> See <a href="https://docs.npmjs.com/files/package.json#local-paths" target="_blank" rel="noopener">Local Paths</a> below</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;dependencies&quot; :</span><br><span class="line">  &#123; &quot;foo&quot; : &quot;1.0.0 - 2.9999.9999&quot;</span><br><span class="line">  , &quot;bar&quot; : &quot;&gt;=1.0.2 &lt;2.1.2&quot;</span><br><span class="line">  , &quot;baz&quot; : &quot;&gt;1.0.2 &lt;=2.3.4&quot;</span><br><span class="line">  , &quot;boo&quot; : &quot;2.0.1&quot;</span><br><span class="line">  , &quot;qux&quot; : &quot;&lt;1.0.0 || &gt;=2.3.1 &lt;2.4.5 || &gt;=2.5.2 &lt;3.0.0&quot;</span><br><span class="line">  , &quot;asd&quot; : &quot;http://asdf.com/asdf.tar.gz&quot;</span><br><span class="line">  , &quot;til&quot; : &quot;~1.2&quot;</span><br><span class="line">  , &quot;elf&quot; : &quot;~1.2.3&quot;</span><br><span class="line">  , &quot;two&quot; : &quot;2.x&quot;</span><br><span class="line">  , &quot;thr&quot; : &quot;3.3.x&quot;</span><br><span class="line">  , &quot;lat&quot; : &quot;latest&quot;</span><br><span class="line">  , &quot;dyl&quot; : &quot;file:../dyl&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~version：大概匹配某个版本</span><br><span class="line">1、如果minor版本号指定了，那么minor版本号不变，而patch版本号任意</span><br><span class="line">2、如果minor和patch版本号未指定，那么minor和patch版本号任意</span><br><span class="line"></span><br><span class="line">1.1.2  &lt;=  ~1.1.2  &lt;1.2.0</span><br><span class="line">1.1.0  &lt;=  ~1.1    &lt;1.2.0</span><br><span class="line">1.0.0  &lt;=  ~1      &lt;2.0.0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">^version：兼容某个版本</span><br><span class="line">1、版本号中最左边的非0数字的右侧可以任意</span><br><span class="line">2、如果缺少某个版本号，则这个版本号的位置可以任意</span><br><span class="line"></span><br><span class="line">1.1.2  &lt;=  ^1.1.2  &lt; 2.0.0</span><br><span class="line">0.2.3  &lt;=  ^0.2.3  &lt; 0.3.0</span><br><span class="line">0.0.0  &lt;=  ^0.0    &lt; 0.1.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> 版本号 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tcp三次握手</title>
      <link href="/2018/11/30/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/"/>
      <url>/2018/11/30/tcp%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B/</url>
      <content type="html"><![CDATA[<h3 id="一、TCP报文格式"><a href="#一、TCP报文格式" class="headerlink" title="一、TCP报文格式"></a>一、TCP报文格式</h3><p>  TCP报文格式图：</p><p><img src="/2018/11/30/tcp三次握手/1.png" alt=""></p><p>上图中有几个字段需要重点介绍下：</p><ol><li>序号：<code>Seq序号</code>，占32位，用来标识从TCP源端向目的端发送的字节流，发起方发送数据时对此进行标记。</li><li>确认序号：<code>Ack序号</code>，占32位，只有<code>ACK标志位</code>为1时，确认序号字段才有效，<code>Ack=Seq+1</code>。</li><li>标志位：共6个，即<code>URG、ACK、PSH、RST、SYN、FIN</code>等，具体含义如下：<ul><li><code>URG</code>：紧急指针（urgent pointer）有效。</li><li><code>ACK</code>：确认序号有效。</li><li><code>PSH</code>：接收方应该尽快将这个报文交给应用层。</li><li><code>RST</code>：重置连接。</li><li><code>SYN</code>：发起一个新连接。</li><li><code>FIN</code>：释放一个连接。 </li></ul></li></ol><p>注：</p><ul><li>不要将<code>确认序号Ack</code>与<code>标志位中的ACK</code>搞混了。</li><li><code>确认方Ack=发起方Req+1</code>，<strong>两端配对</strong>。 </li></ul><a id="more"></a><p><br></p><h3 id="二、三次握手"><a href="#二、三次握手" class="headerlink" title="二、三次握手"></a>二、三次握手</h3><p><img src="/2018/11/30/tcp三次握手/3.png" alt=""></p><p><img src="/2018/11/30/tcp三次握手/2.png" alt=""></p><p>（1）第一次握手：<strong>Client将标志位SYN置为1</strong>，随机产生一个值seq=J，并将该数据包发送给Server，<strong>Client进入SYN_SENT状态</strong>，等待Server确认。</p><p>  （2）第二次握手：<strong>Server收到数据包后由标志位SYN=1知道Client请求建立连接</strong>，Server将标志位SYN和ACK都置为1，ack (number )=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，<strong>Server进入SYN_RCVD状态</strong>。</p><p>  （3）第三次握手：<strong>Client收到确认后，检查ack是否为J+1，ACK是否为1</strong>，如果正确则将标志位ACK置为1，ack=K+1，并将该数据包发送给Server，Server检查ack是否为K+1，ACK是否为1，<strong>如果正确则连接建立成功，Client和Server进入ESTABLISHED状态</strong>，完成三次握手，随后Client与Server之间可以开始传输数据了。</p><h4 id="为什么TCP客户端最后还要发送一次确认呢？"><a href="#为什么TCP客户端最后还要发送一次确认呢？" class="headerlink" title="为什么TCP客户端最后还要发送一次确认呢？"></a>为什么TCP客户端最后还要发送一次确认呢？</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">一句话，主要防止已经失效的连接请求报文突然又传送到了服务器，从而产生错误。</span><br><span class="line"></span><br><span class="line">如果使用的是两次握手建立连接，假设有这样一种场景，客户端发送了第一个请求连接并且没有丢失，只是因为在网络结点中滞留的时间太长了，由于TCP的客户端迟迟没有收到确认报文，以为服务器没有收到，此时重新向服务器发送这条报文，此后客户端和服务器经过两次握手完成连接，传输数据，然后关闭连接。此时此前滞留的那一次请求连接，网络通畅了到达了服务器，这个报文本该是失效的，但是，两次握手的机制将会让客户端和服务器再次建立连接，这将导致不必要的错误和资源的浪费。</span><br><span class="line"></span><br><span class="line">如果采用的是三次握手，就算是那一次失效的报文传送过来了，服务端接受到了那条失效报文并且回复了确认报文，但是客户端不会再次发出确认。由于服务器收不到确认，就知道客户端并没有请求连接。</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> tcp </tag>
            
            <tag> 三次握手 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>缓动公式</title>
      <link href="/2018/11/28/%E7%BC%93%E5%8A%A8%E5%85%AC%E5%BC%8F/"/>
      <url>/2018/11/28/%E7%BC%93%E5%8A%A8%E5%85%AC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="一、过渡函数"><a href="#一、过渡函数" class="headerlink" title="一、过渡函数"></a>一、过渡函数</h1><ul><li><code>ease</code> 规定<strong>慢速</strong>开始，然后<strong>变快</strong>，然后<strong>慢速</strong>结束的过渡效果</li><li><code>ease-in</code> 规定以<strong>慢速开始</strong>的过渡效果</li><li><code>ease-out</code> 规定以<strong>慢速结束</strong>的过渡效果</li><li><code>ease-in-out</code> 规定以<strong>慢速开始和结束</strong>的过渡效果 </li></ul><a id="more"></a><p><br></p><h3 id="二、参数解析"><a href="#二、参数解析" class="headerlink" title="二、参数解析"></a>二、参数解析</h3><p>首先说说四个参数的含义：</p><ul><li>t：timestamp，动画执行到<strong>当前帧所进过的时间</strong></li><li>b：begining，起始值</li><li>c：change，需要变化的量</li><li>d：duration，动画的总时间</li></ul><p><br></p><h3 id="三、数学原理"><a href="#三、数学原理" class="headerlink" title="三、数学原理"></a>三、数学原理</h3><p>首先要清楚一点，动画中每一帧所经过的<strong>时间是相同的</strong>，只是由于上一帧与下一帧的位移量不同，因此速度在视觉上感受不同，位移量小，感觉上速度就慢了。 </p><p>下面简要分析一下原理，一步一步来：</p><ol><li>动画<strong>执行时间</strong>的变化可表达为<code>0 -&gt; d</code>，提取出常数<code>d</code>，就变成<code>d*(0 -&gt; 1)</code>，变化部分为<code>(0-&gt;1)</code>，记为<code>x</code>轴变化</li></ol><ol start="2"><li>动画总的<strong>变化量</strong>和<strong>开始值</strong>是已知的，其变化可以表达为<code>b -&gt; b+c</code>,提取一下变为<code>b+c*(0 -&gt; 1)</code>，变化部分也是<code>(0-&gt;1)</code>，记为<code>y</code>轴变化</li></ol><ol start="3"><li><code>t</code>用来指示事件当前的时间点，将其变为<strong>指示动画完成的百分比</strong>，即<code>t/d</code>；</li></ol><ol start="4"><li>通过上面的变换，我们需要做的事情就是构造<code>x</code>轴区间为<code>[0,1]</code>,<code>y</code>轴区间也为<code>[0,1]</code>的线性或者非线性关系了。线性关系多数是<code>y=x</code>，也就是常用的<code>linear</code>了，非线性复杂一点。</li></ol><ol start="5"><li><p>然后我们看看可以构造出哪些非线性关系，并给出函数关系表达式：</p><ol><li><p>利用<strong>指数函数</strong>(<code>x的n次方</code>)可以构造一大堆<code>easein</code>的效果，再根据他们的轴对称或者中心对称做翻转和位移，又可以构造出其对应的<code>easeout</code>效果：</p><p>  <img src="/2018/11/28/缓动公式/1-png.png" alt=""></p><p>  <img src="/2018/11/28/缓动公式/2-1.png" alt=""></p></li><li><p>利用<strong>平方根</strong>(<code>Math.sqrt</code>)或者<strong>立方根</strong>来实现这种非线性关系： </p><p>   <img src="/2018/11/28/缓动公式/3.png" alt=""></p></li><li><p><code>sin</code>或者<code>cos</code>函数可以通过调节参数构造两种运动趋势(下面主要给函数表达式): </p><ul><li><code>easein: y = 1-cos(0.5πx)</code></li><li><code>easeout: y = sin(0.5πx)</code></li></ul></li><li><p>通过幂函数或者对数函数： </p><ul><li><code>easein: y = 2^(10x-10) (当x=0时，y=0)</code></li><li><code>easeout: y = 1-2^(-10x) (当x=1时，y=1)</code></li></ul></li><li><p>效果还可以叠加呀，叠加的结果除以2，就能创造弹簧效果了。</p></li></ol></li></ol><ol start="6"><li><p>下面来看看缓动公式运用了哪些吧 </p><ul><li><code>Sine</code>表示由三角函数实现</li><li><code>Quad</code>是二次方，<code>Cubic</code>是三次方，<code>Quart</code>是四次方，<code>Quint</code>是五次方</li><li><code>Circ</code>是开平方根(<code>Math.sqit</code>)，<code>Expo</code>是幂函数(<code>Math.pow</code>)</li><li><code>Elastic</code>是结合三角函数和开立方根</li><li><code>Back</code>则引入了常数<code>1.70158</code></li></ul></li></ol><p><br></p><h3 id="四、代码实现"><a href="#四、代码实现" class="headerlink" title="四、代码实现"></a>四、代码实现</h3><p>原理也就差不多分析完了，那么来看看具体实现吧，下面一2次方Quad为例子来实现，其它的都差不多。</p><p>首先是实现<code>easein</code>，函数表达是为： <code>y = x*x</code>，因此实现为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">easeInQuad</span>(<span class="params">t,b,c,d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = t/d; <span class="comment">//x值</span></span><br><span class="line">    <span class="keyword">var</span> y = x*x; <span class="comment">//y值</span></span><br><span class="line">    <span class="keyword">return</span> b+c*y; <span class="comment">//套入最初的公式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后来看看<code>easeout</code>，函数表达式为： <code>y = -x*x+2*x</code>，因此实现为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">easeOutQuad</span>(<span class="params">t,b,c,d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = t/d;         <span class="comment">//x值</span></span><br><span class="line">    <span class="keyword">var</span> y = -x*x + <span class="number">2</span>*x;  <span class="comment">//y值</span></span><br><span class="line">    <span class="keyword">return</span> b+c*y;        <span class="comment">//套入最初的公式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面再看看<code>easeinout</code>的实现，它的实现就是一半的时间用<code>easein</code>走完一半的路程，另一半时间用<code>easeout</code>走完另一半路程，那么我们计算就套用上面两个公式就会非常直观了。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">easeInOutQuad</span>(<span class="params">t,b,c,d</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(t&lt;d/<span class="number">2</span>)&#123; <span class="comment">//前半段时间</span></span><br><span class="line">      <span class="keyword">return</span> easeInQuad(t,b,c/<span class="number">2</span>,d/<span class="number">2</span>);<span class="comment">//改变量和时间都除以2</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> t1 = t-d/<span class="number">2</span>; <span class="comment">//注意时间要减去前半段时间</span></span><br><span class="line">      <span class="keyword">var</span> b1 = b + c/<span class="number">2</span>;<span class="comment">//初始量要加上前半段已经完成的</span></span><br><span class="line">      <span class="keyword">return</span> easeOutQuad(t1,b1,c/<span class="number">2</span>,d/<span class="number">2</span>);<span class="comment">//改变量和时间都除以2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/gdsmith/jquery.easing" target="_blank" rel="noopener">jquery.easing.js</a>里面一样是经过代码优化的，不会那么好理解。这里这样写只是为了便于理解，其它的原理都差不多。</p><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 滚动到顶部的缓冲效果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backToTop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="built_in">window</span>.pageYOffset;</span><br><span class="line">    <span class="keyword">let</span> backPosition = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> duration = <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">let</span> fps = <span class="number">16.7</span>;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> interval = setInterval(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> next = <span class="built_in">Math</span>.floor(easeInOutQuad(fps * i, start, -start, duration));</span><br><span class="line">        <span class="keyword">if</span> (next &lt;= backPosition || fps * i &gt; duration) &#123;</span><br><span class="line">            <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, backPosition);</span><br><span class="line">            clearInterval(interval);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.scrollTo(<span class="number">0</span>, next);</span><br><span class="line">        &#125;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;, fps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 缓动公式 </tag>
            
            <tag> ease </tag>
            
            <tag> easein </tag>
            
            <tag> easeout </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>几种常见的contentType类型</title>
      <link href="/2018/11/27/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84contentType%E7%B1%BB%E5%9E%8B/"/>
      <url>/2018/11/27/%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E7%9A%84contentType%E7%B1%BB%E5%9E%8B/</url>
      <content type="html"><![CDATA[<h4 id="1、application-x-www-form-urlencoded"><a href="#1、application-x-www-form-urlencoded" class="headerlink" title="1、application/x-www-form-urlencoded"></a>1、<code>application/x-www-form-urlencoded</code></h4><p>浏览器的原生<code>&lt;form&gt;</code> 表单，如果不设置 <code>enctype</code> 属性，那么最终就会以 <code>application/x-www-form-urlencoded</code> 方式提交数据。 对应<code>postman</code>中的<code>x-www-form-urlencoded</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">http://www.example.com</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Type</span>: application/x-www-form-urlencoded;charset=utf-8</span><br><span class="line"></span><br><span class="line">title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">decodeURI</span>(<span class="string">'title=test&amp;sub%5B%5D=1&amp;sub%5B%5D=2&amp;sub%5B%5D=3'</span>)</span><br><span class="line"><span class="comment">// "title=test&amp;sub[]=1&amp;sub[]=2&amp;sub[]=3"</span></span><br><span class="line"><span class="comment">// sub：[1,2,3]</span></span><br></pre></td></tr></table></figure><p>注：提交的数据按照 <code>key1=val1&amp;key2=val2</code> 的方式进行编码，<code>key</code>和<code>val</code>都进行了<code>URL</code>转码 </p><a id="more"></a><p><br></p><h4 id="2、multipart-form-data"><a href="#2、multipart-form-data" class="headerlink" title="2、multipart/form-data"></a>2、<code>multipart/form-data</code></h4><p>常见的 POST 数据提交的方式。我们使用表单<strong>上传文件</strong>时，必须让 <code>form</code> 的<code>enctype</code> 等于这个值。对应<code>postman</code>中的<code>form-data</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/"</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">value</span>=<span class="string">"some text"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"myFile"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/foo</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Content-Length</span>: 68137</span><br><span class="line"><span class="attribute">Content-Type</span>: multipart/form-data; boundary=---------------------------974767299852498929531610575</span><br><span class="line"></span><br><span class="line">---------------------------974767299852498929531610575</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="description"</span><br><span class="line"></span><br><span class="line">some text</span><br><span class="line">---------------------------974767299852498929531610575</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="myFile"; filename="foo.txt"</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br><span class="line"></span><br><span class="line">(content of the uploaded file foo.txt)</span><br><span class="line">---------------------------974767299852498929531610575--</span><br></pre></td></tr></table></figure><p><br></p><h4 id="3、application-json"><a href="#3、application-json" class="headerlink" title="3、application/json"></a>3、<code>application/json</code></h4><p>消息主体是序列化后的 JSON 字符串,这个类型越来越多地被大家所使用 。对应<code>postman</code>中的<code>json</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">POST [http://www.example.com](http://www.example.com) HTTP/1.1 </span><br><span class="line"><span class="attribute">Content-Type</span>: application/json;charset=utf-8 </span><br><span class="line"></span><br><span class="line">&#123;"title":"test","sub":[1,2,3]&#125;</span><br></pre></td></tr></table></figure><p>方便的提交复杂的结构化数据，特别适合 RESTful 的接口 </p><p><br></p><h5 id="4、text-xml"><a href="#4、text-xml" class="headerlink" title="4、text/xml"></a>4、<code>text/xml</code></h5><p>是一种使用<code>HTTP</code> 作为传输协议，<code>XML</code> 作为编码方式的远程调用规范 。对应<code>postman</code>中的<code>xml</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST [http://www.example.com](http://www.example.com) HTTP/1.1 </span><br><span class="line"><span class="attribute">Content-Type</span>: text/xml </span><br><span class="line">&lt;!--?xml version="1.0"?--&gt; </span><br><span class="line">&lt;methodcall&gt; </span><br><span class="line">    &lt;methodname&gt;examples.getStateName&lt;/methodname&gt; </span><br><span class="line">    &lt;params&gt; </span><br><span class="line">        &lt;param&gt; </span><br><span class="line">            &lt;value&gt;&lt;i4&gt;41&lt;/i4&gt;&lt;/value&gt; </span><br><span class="line">    &lt;/params&gt; </span><br><span class="line">&lt;/methodcall&gt;</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> contentType </tag>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>跨站请求伪造CSRF</title>
      <link href="/2018/11/26/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0CSRF/"/>
      <url>/2018/11/26/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0CSRF/</url>
      <content type="html"><![CDATA[<h3 id="一、CSRF攻击原理"><a href="#一、CSRF攻击原理" class="headerlink" title="一、CSRF攻击原理"></a>一、CSRF攻击原理</h3><p><img src="/2018/11/26/跨站请求伪造CSRF/2009040916453171.jpg" alt=""></p><p>从上图可以看出，要完成一次<code>CSRF</code>攻击，受害者必须依次完成两个步骤：</p><p>　　1.登录受信任网站A，并在本地生成Cookie</p><p>　　2.在不登出A的情况下，访问危险网站B</p><p>注：</p><ul><li>如果<strong>不满足以上两个条件中的一个</strong>，就不会受到<code>CSRF</code>的攻击</li><li><strong>网站B</strong>向<strong>网站A</strong>发送请求时，如果网站A在<strong>打开</strong>状态下，那么<strong>该请求</strong>会携带<strong>网站A页面</strong>下的<code>cookie</code>（待验证）</li><li><code>CSRF</code>攻击是以<strong>突破同源策略</strong>限制为前提的</li></ul><a id="more"></a><p><br></p><h3 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h3><p>银行网站A：它以GET请求来完成银行转账的操作，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//www.mybank.com/Transfer.php?toBankId=11&amp;money=1000</span></span><br><span class="line"><span class="comment">// 使用get来更改资源，真是作死！！！</span></span><br></pre></td></tr></table></figure><p>危险网站B：它里面有一段HTML的代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">http://www.mybank.com/Transfer.php?toBankId</span>=<span class="string">11&amp;money</span>=<span class="string">1000</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先，你登录了银行网站A，然后访问危险网站B，噢，这时你会发现你的银行账户少了1000块…… </p><p><br></p><h3 id="三、CSRF防御"><a href="#三、CSRF防御" class="headerlink" title="三、CSRF防御"></a>三、CSRF防御</h3><h4 id="1、Cookie-Hashing"><a href="#1、Cookie-Hashing" class="headerlink" title="1、Cookie Hashing"></a>1、Cookie Hashing</h4><p>所有表单中，生成一个隐藏域 ，它的值就是<code>Cookie</code>中的<code>token</code> 。</p><p>注：<code>CSRF</code>能模拟请求，不能跨域读取<code>cookie</code>。如果<code>cookie</code>已经被<code>xss</code>攻击，还是很危险。</p><p><br></p><h4 id="2、检查Referer字段"><a href="#2、检查Referer字段" class="headerlink" title="2、检查Referer字段"></a>2、检查Referer字段</h4><p>HTTP头中有一个Referer字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer字段应和请求的地址位于同一域名下。 </p><p>注：http协议对此字段的内容有明确的规定，但并无法<strong>保证来访的浏览器的具体实现</strong>，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，<strong>篡改</strong>其Referer字段的可能。 </p><p><br></p><h4 id="3、使用JSON格式"><a href="#3、使用JSON格式" class="headerlink" title="3、使用JSON格式"></a>3、使用JSON格式</h4><p>使用<code>JavaScript</code>发起<code>AJAX</code>请求是限制跨域的，并不能通过简单的 <code>&lt;form&gt;</code> 表单来发送<code>JSON</code>，所以，通过只接收<code>JSON</code>可以很大可能避免<code>CSRF</code>攻击。 </p><p>注：<a href="https://chenoge.github.io/2018/04/10/nginx-CORS%E8%B7%A8%E5%9F%9F/" target="_blank" rel="noopener"><code>CORS</code></a>规范中对跨域访问资源规定了明确的限制</p><p><br></p><p>　</p>]]></content>
      
      
        <tags>
            
            <tag> CSRF </tag>
            
            <tag> 攻击 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Cookie 和 Referer</title>
      <link href="/2018/11/26/cookie/"/>
      <url>/2018/11/26/cookie/</url>
      <content type="html"><![CDATA[<h3 id="一、Cookie"><a href="#一、Cookie" class="headerlink" title="一、Cookie"></a>一、Cookie</h3><h4 id="1、Secure-和HttpOnly-标记"><a href="#1、Secure-和HttpOnly-标记" class="headerlink" title="1、Secure 和HttpOnly 标记"></a>1、<code>Secure</code> 和<code>HttpOnly</code> 标记</h4><ul><li><p><code>Secure</code> ：标记为 <code>Secure</code> 的<code>Cookie</code>，只应通过被<code>HTTPS</code>协议加密过的请求发送给服务端</p></li><li><p><code>HttpOnly</code> ：标记为 <code>HttpOnly</code> 的<code>Cookie</code>，<code>JavaScript</code> 无法访问带有 <code>HttpOnly</code> 标记的<code>Cookie</code>，它们只应该发送给服务端，避免跨域脚本 <code>XSS</code> </p></li></ul><h4 id="2、SameSite-Cookies"><a href="#2、SameSite-Cookies" class="headerlink" title="2、SameSite Cookies"></a>2、<code>SameSite</code> Cookies</h4><p><code>SameSite</code> Cookie允许服务器要求某个cookie在<strong>跨站请求</strong>时不会被发送，从而可以阻止跨站请求伪造攻击<code>CSRF</code>。但目前<code>SameSite</code> Cookie还处于<strong>实验阶段</strong>，并不是所有浏览器都支持。 </p><a id="more"></a><h4 id="3、跟localStorage、sessionStorage-相比"><a href="#3、跟localStorage、sessionStorage-相比" class="headerlink" title="3、跟localStorage、sessionStorage 相比"></a>3、跟localStorage、sessionStorage 相比</h4><table><thead><tr><th>特性</th><th>Cookie</th><th>localStorage</th><th style="text-align:left">sessionStorage</th></tr></thead><tbody><tr><td>生命期</td><td>可设置失效时间，默认为<code>session cookie</code>；<code>session cookie</code>无法保证<strong>会话</strong>结束后，一定会被删除</td><td>除非被清除，否则永久保存</td><td style="text-align:left">仅在当前会话下有效，关闭会话（标签页）后被清除；如果标签页由其他页面打开，当前的<code>sessionStorage</code>会根据前一个页面的<code>sessionStorage</code>数据进行<strong>初始化</strong></td></tr><tr><td>大小</td><td>4K左右</td><td>一般为5MB</td><td style="text-align:left">一般为5MB</td></tr><tr><td>通信</td><td>每次都会携带在HTTP头中</td><td>仅在客户端中保存，不参与和服务器的通信</td><td style="text-align:left">仅在客户端中保存，不参与和服务器的通信</td></tr><tr><td>作用域</td><td>通过<code>domain、path</code>来确定</td><td>通过<code>协议、主机名、端口</code>来确定</td><td style="text-align:left">通过<code>协议、主机名、端口、标签</code>来确定。不同标签页面，<code>sessionStorage</code>数据无法共享</td></tr></tbody></table><p>注：<code>cookie</code>通过【<code>name,doamin,path</code>】来确定其唯一性，倘若三个属性都一样方为同一个<code>cookie</code></p><p><br></p><h4 id="4、读写cookie"><a href="#4、读写cookie" class="headerlink" title="4、读写cookie"></a>4、读写cookie</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取所有可从此位置访问的Cookie</span></span><br><span class="line"><span class="keyword">let</span> allCookies = <span class="built_in">document</span>.cookie;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次只能对一个cookie进行设置或更新</span></span><br><span class="line"><span class="comment">// newCookie是一个键值对形式的字符串</span></span><br><span class="line"><span class="built_in">document</span>.cookie = newCookie;</span><br></pre></td></tr></table></figure><p>注：以下可选的<strong>cookie属性值</strong>可以跟在键值对后，用来具体化对cookie的<strong>设定/更新</strong>，<strong>使用分号以作分隔</strong>。在浏览器控制台中，<code>document.cookie</code>值，对应<strong>当前资源</strong>的可见cookie值。</p><ul><li><code>;path=path</code> 如果没有定义，默认为当前文档位置的路径</li><li><code>;domain=domain</code> 如果没有定义，默认为当前文档位置的路径的域名部分</li><li><code>;max-age=max-age-in-seconds</code></li><li><code>;expires=date-in-GMTString-format</code> 如果没有定义，cookie会在对话结束时过期</li><li><code>;secure</code> 只通过<code>https</code>协议传输</li></ul><p><br></p><h4 id="5、cookie匹配规则"><a href="#5、cookie匹配规则" class="headerlink" title="5、cookie匹配规则"></a>5、cookie匹配规则</h4><p>浏览器在<strong>加载静态资源</strong>或者<strong>发出ajax请求</strong>时，会根据<code>url</code>中的<strong>域名与路径</strong>，对每个cookie的<code>domain属性</code>和<code>path属性</code>进行验证，存在多个同名cookie时，按一定排序都带上。</p><p>请求<code>http://news.example.com/news/hot</code>时， 带上的cookie要满足：</p><ul><li><code>domain属性</code>是<code>news.example.com</code>，及其<strong>上级域名</strong></li><li><code>path属性</code>是<code>/news/hot</code>，及其<strong>上级路径</strong></li></ul><p><br></p><h4 id="6、cookie排序原则"><a href="#6、cookie排序原则" class="headerlink" title="6、cookie排序原则"></a>6、cookie排序原则</h4><ul><li>具有<strong>更长path</strong>的cookie更靠前</li><li>如果path长度相等，<strong>更早创建</strong>的cookie更靠前</li></ul><p><br></p><h3 id="二、Referer"><a href="#二、Referer" class="headerlink" title="二、Referer"></a>二、Referer</h3><p><code>Referer</code> 表示<strong>请求页面</strong>是通过<strong>此来源页面</strong>里的链接进入的，在以下两种情况下，<code>Referer</code> 不会被发送：</p><ul><li><strong>来源页面</strong>采用的协议为表示<strong>本地文件</strong>的 “file” 或者 “data” URI</li><li>当前<strong>请求页面</strong>采用的是非安全协议，而<strong>来源页面</strong>采用的是安全协议（HTTPS）</li></ul><p>注：</p><ul><li>在浏览器中，<code>Referer</code> 属性只读不写。但可以通过代理服务进行修改</li><li>如果需要通过 document.referrer 采集页面访问来源，最好不要使用 JS 跳转或打开新窗口，也不要使用 meta 跳转</li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> Cookie </tag>
            
            <tag> XSS </tag>
            
            <tag> CSRF </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>gulp入门</title>
      <link href="/2018/11/23/gulp%E5%85%A5%E9%97%A8/"/>
      <url>/2018/11/23/gulp%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<h2 id="一、安装gulp和插件"><a href="#一、安装gulp和插件" class="headerlink" title="一、安装gulp和插件"></a>一、安装gulp和插件</h2><h4 id="1、安装gulp"><a href="#1、安装gulp" class="headerlink" title="1、安装gulp"></a>1、安装gulp</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp -g</span><br><span class="line">npm install gulp --save-dev</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="2、常用插件"><a href="#2、常用插件" class="headerlink" title="2、常用插件"></a>2、常用插件</h4><ul><li>sass的编译（<a href="https://github.com/sindresorhus/gulp-ruby-sass" target="_blank" rel="noopener">gulp-ruby-sass</a>）</li><li>自动添加css前缀（<a href="https://github.com/Metrime/gulp-autoprefixer" target="_blank" rel="noopener">gulp-autoprefixer</a>）</li><li>压缩css（<a href="https://github.com/jonathanepollack/gulp-minify-css" target="_blank" rel="noopener">gulp-minify-css</a>）</li><li>js代码校验（<a href="https://github.com/spenceralger/gulp-jshint" target="_blank" rel="noopener">gulp-jshint</a>）</li><li>合并js文件（<a href="https://github.com/wearefractal/gulp-concat" target="_blank" rel="noopener">gulp-concat</a>）</li><li>压缩js代码（<a href="https://github.com/terinjokes/gulp-uglify" target="_blank" rel="noopener">gulp-uglify</a>）</li><li>压缩图片（<a href="https://github.com/sindresorhus/gulp-imagemin" target="_blank" rel="noopener">gulp-imagemin</a>）</li><li>自动刷新页面（<a href="https://github.com/vohof/gulp-livereload" target="_blank" rel="noopener">gulp-livereload</a>）</li><li>图片缓存，只有图片替换了才压缩（<a href="https://github.com/jgable/gulp-cache" target="_blank" rel="noopener">gulp-cache</a>）</li><li>更改提醒（<a href="https://github.com/mikaelbr/gulp-notify" target="_blank" rel="noopener">gulp-notify</a>）</li><li>清除文件（<a href="https://www.npmjs.org/package/del" target="_blank" rel="noopener">del</a>）</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-ruby-sass gulp-autoprefixer gulp-minify-css gulp-jshint gulp-concat gulp-uglify gulp-imagemin gulp-notify gulp-rename gulp-livereload gulp-cache del --save-dev</span><br></pre></td></tr></table></figure><p><br></p><h3 id="二、新建gulpfile-js"><a href="#二、新建gulpfile-js" class="headerlink" title="二、新建gulpfile.js"></a>二、新建<code>gulpfile.js</code></h3><p>现在，组件安装完毕，我们需要新建<code>gulpfile</code>文件以指定<code>gulp</code>需要为我们完成什么任务。</p><p>在项目根目录新建一个js文件并命名为<code>gulpfile.j</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 gulp</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入组件</span></span><br><span class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查脚本</span></span><br><span class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</span><br><span class="line">        .pipe(jshint())</span><br><span class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译Sass</span></span><br><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./scss/*.scss'</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并，压缩文件</span></span><br><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</span><br><span class="line">        .pipe(concat(<span class="string">'all.js'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>))</span><br><span class="line">        .pipe(rename(<span class="string">'all.min.js'</span>))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听文件变化</span></span><br><span class="line">    gulp.watch(<span class="string">'./js/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注：</p><p><strong>gulp五个常用方法</strong><code>task</code>，<code>run</code>，<code>watch</code>，<code>src</code>，<code></code>dest`</p><p><br></p><h4 id="1、引入组件"><a href="#1、引入组件" class="headerlink" title="1、引入组件"></a>1、引入组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jshint = <span class="built_in">require</span>(<span class="string">'gulp-jshint'</span>);</span><br><span class="line"><span class="keyword">var</span> sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"><span class="keyword">var</span> concat = <span class="built_in">require</span>(<span class="string">'gulp-concat'</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>);</span><br><span class="line"><span class="keyword">var</span> rename = <span class="built_in">require</span>(<span class="string">'gulp-rename'</span>);</span><br></pre></td></tr></table></figure><p>我们引入了核心的gulp和其他依赖组件，接下来，分开创建lint, sass, scripts 和 default这四个不同的任务。 </p><p><br></p><h4 id="2、Lint任务"><a href="#2、Lint任务" class="headerlink" title="2、Lint任务"></a>2、Lint任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'lint'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</span><br><span class="line">        .pipe(jshint())</span><br><span class="line">        .pipe(jshint.reporter(<span class="string">'default'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Link任务会检查<code>js/</code>目录下得js文件有没有报错或警告。 </p><p><br></p><h4 id="3、Sass任务"><a href="#3、Sass任务" class="headerlink" title="3、Sass任务"></a>3、Sass任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'sass'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./scss/*.scss'</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./css'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Sass任务会编译<code>scss/</code>目录下的scss文件，并把编译完成的css文件保存到<code>/css</code>目录中。 </p><p><br></p><h4 id="4、Scripts-任务"><a href="#4、Scripts-任务" class="headerlink" title="4、Scripts 任务"></a>4、Scripts 任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'scripts'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'./js/*.js'</span>)</span><br><span class="line">        .pipe(concat(<span class="string">'all.js'</span>))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>))</span><br><span class="line">        .pipe(rename(<span class="string">'all.min.js'</span>))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'./dist'</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>scripts任务会合并<code>js/</code>目录下得所有得js文件并输出到<code>dist/</code>目录，然后gulp会重命名、压缩合并的文件，也输出到<code>dist/</code>目录。 </p><p><br></p><h4 id="5、default任务"><a href="#5、default任务" class="headerlink" title="5、default任务"></a>5、default任务</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">gulp.task(<span class="string">'default'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</span><br><span class="line">    gulp.watch(<span class="string">'./js/*.js'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        gulp.run(<span class="string">'lint'</span>, <span class="string">'sass'</span>, <span class="string">'scripts'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这时，我们创建了一个基于其他任务的default任务。使用<code>.run()</code>方法关联和运行我们上面定义的任务，使用<code>.watch()</code>方法去监听指定目录的文件变化，当有文件变化时，会运行回调定义的其他任务。</p><p>现在，回到命令行，可以直接运行gulp任务了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp default</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>语义化标签整理</title>
      <link href="/2018/11/22/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE%E6%95%B4%E7%90%86/"/>
      <url>/2018/11/22/%E8%AF%AD%E4%B9%89%E5%8C%96%E6%A0%87%E7%AD%BE%E6%95%B4%E7%90%86/</url>
      <content type="html"><![CDATA[<h3 id="一、语义化"><a href="#一、语义化" class="headerlink" title="一、语义化"></a>一、语义化</h3><h4 id="1、语义化属性"><a href="#1、语义化属性" class="headerlink" title="1、语义化属性"></a>1、语义化属性</h4><ul><li>添加<a href="https://chenoge.github.io/2018/11/19/itemprop/" target="_blank" rel="noopener"><code>itemprop、itemscope</code></a>属性，到达<strong>数据结构化</strong>，属性名可参考 <a href="https://schema.org/" target="_blank" rel="noopener">schema.org</a>；</li><li><code>meta</code>标签和<code>itemprop</code>属性，<code>&lt;meta itemprop=&quot;dateModified&quot; content=&quot;2018-11-17T04:14:51.000Z&quot;&gt;</code>；</li></ul><p>注：参考知乎页面，改动一下<code>meta</code>的读取位置</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--可以尝试，将meta标签放在需要元信息的块中--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">"dateModified"</span> <span class="attr">content</span>=<span class="string">"2018-11-17T04:14:51.000Z"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、语义化标签"><a href="#2、语义化标签" class="headerlink" title="2、语义化标签"></a>2、语义化标签</h4><ul><li>各个标签的含义，使用场景</li></ul><p>注：<strong>语义化</strong>，即<strong>面向对象</strong>写<code>html</code>，方便<strong>网络蜘蛛</strong>或<strong>人</strong>快速理解网页结构和内容。</p><p><br></p><a id="more"></a><h3 id="二、语义化标签"><a href="#二、语义化标签" class="headerlink" title="二、语义化标签"></a>二、语义化标签</h3><h4 id="1、-lt-main-gt"><a href="#1、-lt-main-gt" class="headerlink" title="1、&lt;main&gt;"></a>1、<code>&lt;main&gt;</code></h4><p><code>&lt;main&gt;</code> 标签规定了<code>document</code>的主要内容，主要内容包括与<strong>中心主题</strong>直接<strong>相关或扩展</strong>的内容，或应用程序的<strong>中心功能</strong>。<code>&lt;main&gt;</code>元素中的内容对于文档来说应当是唯一的。</p><p>注：在一个文档中，不得包含多个未指定<code>hidden</code> 属性的<code>&lt;main&gt;</code>元素。<code>&lt;main&gt;</code> 元素不能是以下元素的后代：<code>&lt;article&gt;</code>、<code>&lt;aside&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;header&gt;</code> 或 <code>&lt;nav&gt;</code>。 </p><p><br></p><h4 id="2、-lt-header-gt"><a href="#2、-lt-header-gt" class="headerlink" title="2、&lt;header&gt;"></a>2、<code>&lt;header&gt;</code></h4><p><code>&lt;header&gt;</code> 标签定义<strong>文档</strong>或者文档的<strong>一部分区域</strong>的<strong>页眉</strong>。<code>&lt;header&gt;</code> 元素应该作为<strong>介绍内容</strong>或者<strong>导航链接栏</strong>的容器。在一个文档中，您可以定义<strong>多个</strong> <code>&lt;header&gt;</code>元素。</p><p>注：<code>&lt;header&gt;</code>标签不能被放在 <code>&lt;footer&gt;</code>、<code>&lt;address&gt;</code> 或者另一个 <code>&lt;header&gt;</code>元素内部</p><p><br></p><h4 id="3、-lt-footer-gt"><a href="#3、-lt-footer-gt" class="headerlink" title="3、&lt;footer&gt;"></a>3、<code>&lt;footer&gt;</code></h4><p><code>&lt;footer&gt;</code> 标签定义<strong>文档</strong>或者文档的<strong>一部分区域</strong>的<strong>页脚</strong>。在典型情况下，该元素会包含文档创作者的姓名、文档的版权信息、使用条款的链接、联系信息等等。在一个文档中，您可以定义多 <code>&lt;footer&gt;</code>元素。</p><p>注：<code>&lt;footer&gt;</code>元素必须不能是 <code>&lt;header&gt;</code>、<code>&lt;address&gt;</code> 或者另一个<code>&lt;footer&gt;</code> 元素的后代元素</p><p><br></p><h4 id="4、-lt-nav-gt"><a href="#4、-lt-nav-gt" class="headerlink" title="4、&lt;nav&gt;"></a>4、<code>&lt;nav&gt;</code></h4><p><code>&lt;nav&gt;</code> 标签定义导航链接的部分。并不是所有的 HTML 文档都要使用到<code>&lt;nav&gt;</code>元素。<code>&lt;nav&gt;</code>元素只是作为标注一个导航链接的区域。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Contact<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="5、-lt-section-gt"><a href="#5、-lt-section-gt" class="headerlink" title="5、&lt;section&gt;"></a>5、<code>&lt;section&gt;</code></h4><p><code>&lt;section&gt;</code>元素表示文档中的一个区域（或节），比如，内容中的一个专题组，一般来说会有包含一个标题（<code>heading</code>）。一般通过是否包含一个标题 (<code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>element) 作为子节点 来 辨识每一个<code>&lt;section&gt;</code>。 </p><ul><li>如果元素内容可以分为几个部分的话，应该使用 <code>article</code> 而不是 <code>section</code>。</li><li>不要把 <code>section</code>元素作为一个普通的容器来使用，这是<code>div</code>的用法（特别是当片段（the sectioning ）仅仅是为了美化样式的时候）。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"bird.jpg"</span> <span class="attr">alt</span>=<span class="string">"bird"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="6、-lt-article-gt"><a href="#6、-lt-article-gt" class="headerlink" title="6、&lt;article&gt;"></a>6、<code>&lt;article&gt;</code></h4><p><code>&lt;article&gt;</code>元素表示文档、页面、应用或网站中的独立结构，其意在成为可独立分配的或可复用的结构，如在发布中，它可能是论坛帖子、杂志或新闻文章、博客、用户提交的评论、交互式组件，或者其他独立的内容项目。 </p><ul><li>当<code>&lt;article&gt;</code>元素嵌套使用时，则该元素代表与外层元素有关的文章。例如，代表博客评论的<code>&lt;article&gt;</code>元素可嵌套在代表博客文章的<code>&lt;article&gt;</code>元素中。</li><li><code>&lt;article&gt;</code>元素的作者信息可通过<code>&lt;address&gt;</code>元素提供，但是不适用于嵌套的<code>&lt;article&gt;</code>元素。</li><li><code>&lt;article&gt;</code>元素的发布日期和时间可通过<code>&lt;time&gt;</code>元素的<code>pubdate</code>属性表示。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"film_review"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Jurassic Park<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"main_review"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Dinos were great!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"user_reviews"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"user_review"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Way too scary for me.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          Posted on <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"2015-05-16 19:00"</span>&gt;</span>May 16<span class="tag">&lt;/<span class="name">time</span>&gt;</span> by Lisa.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"user_review"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>I agree, dinos are my favorite.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          Posted on <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"2015-05-17 19:00"</span>&gt;</span>May 17<span class="tag">&lt;/<span class="name">time</span>&gt;</span> by Tom.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      Posted on <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"2015-05-15 19:00"</span>&gt;</span>May 15<span class="tag">&lt;/<span class="name">time</span>&gt;</span> by Staff.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="注：section与article的区别"><a href="#注：section与article的区别" class="headerlink" title="注：section与article的区别"></a>注：section与article的区别</h5><ul><li><strong>section</strong>：用来表示文档或应用的<strong>一部分。</strong>它主要来对一个整体部分划分为多个小部分，所以一般会使用<code>&lt;h1&gt;</code>-<code>&lt;h6&gt;</code>标签与<code>&lt;p&gt;</code>标签，每个小部分用标题来进行标示。</li><li><strong>acticle：</strong>定义文章、页面或者是应用程序中<strong>独立完整</strong>可被外部<strong>引用</strong>的内容。一般有自己的<code>&lt;header&gt;</code>与<code>&lt;footer&gt;</code>，通常内部会用<code>&lt;aside&gt;</code>来进行辅助性说明等。</li></ul><p><br></p><h4 id="7、-lt-aside-gt"><a href="#7、-lt-aside-gt" class="headerlink" title="7、&lt;aside&gt;"></a>7、<code>&lt;aside&gt;</code></h4><p><code>&lt;aside&gt;</code> 标签定义 <code>&lt;article&gt;</code>标签外的内容，<code>&lt;aside&gt;</code> 的内容应该与附近的内容相关。</p><p>通常表现为侧边栏或者嵌入内容。他们通常包含在工具条，例如来自词汇表的定义。也可能有其他类型的信息，例如相关的广告、笔者的传记、web 应用程序、个人资料信息，或在博客上的相关链接。 </p><p>注： <code>&lt;aside&gt;</code> 元素不能成为<code>&lt;address&gt;</code>元素的子元素 </p><p><br></p><h4 id="8、-lt-address-gt"><a href="#8、-lt-address-gt" class="headerlink" title="8、&lt;address&gt;"></a>8、<code>&lt;address&gt;</code></h4><p><code>&lt;address&gt;</code> 标签定义文档作者/所有者的<strong>联系信息</strong>。</p><p>如果 <code>&lt;address&gt;</code>元素位于 <code>&lt;body&gt;</code> 元素内部，则它表示该文档作者/所有者的联系信息。</p><p>如果<code>&lt;address&gt;</code> 元素位于 <code>&lt;article&gt;</code>元素内部，则它表示该文章作者/所有者的联系信息。</p><p>注：<code>&lt;address&gt;</code> 元素通常被包含在<code>&lt;footer&gt;</code>元素的其他信息中</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 标签 </tag>
            
            <tag> 语义化 </tag>
            
            <tag> 属性 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>itemprop</title>
      <link href="/2018/11/19/itemprop/"/>
      <url>/2018/11/19/itemprop/</url>
      <content type="html"><![CDATA[<h3 id="一、itemprop属性"><a href="#一、itemprop属性" class="headerlink" title="一、itemprop属性"></a>一、<code>itemprop</code>属性</h3><p>全局属性 <code>itemprop</code>被用于向一个物体中添加属性。每一个HTML元素都可以指定一个itemprop属性，一个<code>itemprop</code>属性由name-value对组成。属性值可以是一个string或者一个URL，并且可以和大部分元素进行组合，包括<code>img</code>、<code>video</code>、<code>link</code>、<code>source</code> 、<code>audio</code>等。</p><a id="more"></a><p><br></p><h3 id="二、结构化数据"><a href="#二、结构化数据" class="headerlink" title="二、结构化数据"></a>二、结构化数据</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span> =<span class="string">"http://schema.org/Movie"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span>Avatar<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>Director:</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"director"</span>&gt;</span>James Cameron<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    (born August 16, 1954)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"genre"</span>&gt;</span>Science fiction<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../movies/avatar-theatrical-trailer.html"</span> <span class="attr">itemprop</span>=<span class="string">"trailer"</span>&gt;</span>Trailer<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>Item</th><th></th></tr></thead><tbody><tr><td><strong>itemprop name</strong></td><td><strong>itemprop value</strong></td><td></td></tr><tr><td>itemprop</td><td>name</td><td>Avatar</td></tr><tr><td>itemprop</td><td>director</td><td>James Cameron</td></tr><tr><td>itemprop</td><td>genre</td><td>Science fiction</td></tr><tr><td>itemprop</td><td>trailer</td><td>../movies/avatar-theatrical-trailer.html</td></tr></tbody></table><p><br></p><h3 id="三、itemscope"><a href="#三、itemscope" class="headerlink" title="三、itemscope"></a>三、<code>itemscope</code></h3><p><code>itemscope</code> 是一个布尔值的 全局属性。它定义了一个与元数据关联的数据项。就是说一个元素的 <code>itemscope</code> 属性会创建一个项，包含了一组与元素相关的键值对。 相关的属性 <code>itemtype</code>通常表示表中一个有效的 URL （比如 <a href="http://schema.org/" target="_blank" rel="noopener">schema.org</a>） 来表述项目和上下文。下面每个例子中的概念表都来自 <a href="https://schema.org/" target="_blank" rel="noopener">schema.org</a>. </p><p>每个 HTML 元素都可以有指定的 <code>itemscope</code> 属性。一个具有 <code>itemscope</code> 属性的元素可以没有关联的 <code>itemtype</code> ，但必须有相关的 <code>itemref</code>。 </p><p>Schema.org 提供了一份共享的词汇表，站长可以使用它来标记网页，而这些标记则被主要的搜索引擎： Google， Microsoft， Yandex 和 Yahoo! 所支持。 </p>]]></content>
      
      
        <tags>
            
            <tag> itemprop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tabindex</title>
      <link href="/2018/11/19/tabindex/"/>
      <url>/2018/11/19/tabindex/</url>
      <content type="html"><![CDATA[<h3 id="一、tabindex-属性"><a href="#一、tabindex-属性" class="headerlink" title="一、tabindex 属性"></a>一、<strong>tabindex</strong> 属性</h3><p><strong>tabindex</strong> 是一个全局属性，值为整数类型，表示元素（如果可聚焦）是否能够接受输入焦点。 如果它应该参与键盘序列导航，那么就是它的位置。它可以设为多种值：</p><ul><li><p><code>tabindex=负值</code> (通常是<code>tabindex=“-1”</code>)，表示元素是可聚焦的，但是不能通过键盘导航来访问到该元素，用JS做页面小组件内部键盘导航的时候非常有用。</p></li><li><p><code>tabindex=&quot;0&quot;</code> ，表示元素是可聚焦的，并且可以通过键盘导航来聚焦到该元素，它的相对顺序是当前<strong>处于的DOM结构来决定</strong>的。</p></li><li><p><code>tabindex=正值</code>，表示元素是可聚焦的，并且可以通过键盘导航来访问到该元素；它的相对顺序按照<strong>tabindex</strong> 的数值递增而滞后获焦。如果多个元素拥有相同的 <strong>tabindex</strong>，它们的相对顺序按照他们在当前DOM中的先后顺序决定。</p></li></ul><p>如果我们在<code>div</code>上设置了 <code>tabindex</code> 属性，它的子元素内容不能使用箭头键来滚动，除非我们在内容上也设置 <code>tabindex</code>。</p><p><strong>注：</strong>tabindex 的最大值不应超过 32767。如果没有指定，它的默认值为 -1。</p><a id="more"></a><p><br></p><h3 id="二、访问顺序"><a href="#二、访问顺序" class="headerlink" title="二、访问顺序"></a>二、访问顺序</h3><p>根据键盘序列导航的顺序，值为 <code>0</code> 、非法值、或者没有 tabindex 值的元素应该<strong>放置在 tabindex 值为正值的元素后面</strong>。</p>]]></content>
      
      
        <tags>
            
            <tag> TAB </tag>
            
            <tag> tabindex </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx基本使用</title>
      <link href="/2018/11/19/nginx%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2018/11/19/nginx%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="一、常用命令"><a href="#一、常用命令" class="headerlink" title="一、常用命令"></a>一、<a href="http://nginx.org/en/docs/beginners_guide.html" target="_blank" rel="noopener">常用命令</a></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nginx -?,-h #查看帮助</span><br><span class="line">nginx -v #查看版本</span><br><span class="line">nginx #启动服务</span><br><span class="line">service nginx restart #重启服务</span><br><span class="line">nginx -s reload|stop|quit #重载配置、停止服务</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>reload：重新加载配置文件，Nginx服务不会中断。检查语法，如果出错会rollback</li><li>stop：快速停止 ，不管有没有正在处理的请求 </li><li>quit：正常停止，退出前完成已经接受的连接请求 。只有启动<code>Nginx</code>的用户才能执行该命令</li></ul><a id="more"></a><p><br></p><h3 id="二、nginx配置"><a href="#二、nginx配置" class="headerlink" title="二、nginx配置"></a>二、nginx配置</h3><h4 id="1、配置文件-etc-nginx-nginx-conf"><a href="#1、配置文件-etc-nginx-nginx-conf" class="headerlink" title="1、配置文件/etc/nginx/nginx.conf"></a>1、配置文件<code>/etc/nginx/nginx.conf</code></h4><h4 id="2、文件结构"><a href="#2、文件结构" class="headerlink" title="2、文件结构"></a>2、文件结构</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...              #全局块</span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;         <span class="comment">#events块</span></span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">http</span>      <span class="comment">#http块</span></span><br><span class="line">&#123;</span><br><span class="line">    ...   #http全局块</span><br><span class="line">    <span class="attribute">server</span>        <span class="comment">#server块</span></span><br><span class="line">    &#123; </span><br><span class="line">        ...       #server全局块</span><br><span class="line">        <span class="attribute">location</span> [PATTERN]   <span class="comment">#location块</span></span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="3、文件详情"><a href="#3、文件详情" class="headerlink" title="3、文件详情"></a>3、文件详情</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#这是一个注释</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">user</span>  nginx nginxs;  <span class="comment">#配置用户和组</span></span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">1</span>; <span class="comment">#允许生成的进程数，默认为1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#设置错误日志路径，级别。这个设置可以放入全局块，http块，server块</span></span><br><span class="line"><span class="comment">#级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span></span><br><span class="line"><span class="attribute">error_log</span>  logs/error.log;</span><br><span class="line"><span class="attribute">error_log</span>  logs/error.log  <span class="literal">notice</span>;</span><br><span class="line"><span class="attribute">error_log</span>  logs/error.log  <span class="literal">info</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">pid</span>  logs/nginx.pid; <span class="comment">#指定nginx进程运行文件存放地址</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">accept_mutex</span> <span class="literal">on</span>;  <span class="comment">#设置网路连接序列化，防止惊群现象发生，默认为on</span></span><br><span class="line">    <span class="attribute">multi_accept</span> <span class="literal">on</span>;  <span class="comment">#设置一个进程是否同时接受多个网络连接，默认为off</span></span><br><span class="line">    <span class="attribute">use</span> <span class="literal">epoll</span>;        <span class="comment">#事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span></span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">1024</span>;    <span class="comment">#最大连接数，默认为512</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types; <span class="comment">#文件扩展名与文件类型映射表</span></span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;  <span class="comment">#默认文件类型，默认为text/plain</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#自定义main日志格式</span></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>; </span><br><span class="line">    <span class="attribute">access_log</span>  logs/access.log  main; <span class="comment">#设置访问日志</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>; <span class="comment">#允许sendfile方式传输文件，默认为off，可以在http块，server块，location块</span></span><br><span class="line">    <span class="attribute">sendfile_max_chunk</span> <span class="number">100k</span>;  <span class="comment">#每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限</span></span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;  <span class="comment">#连接超时时间，默认为75s，可以在http，server，location块</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">gzip</span>  <span class="literal">on</span>; <span class="comment">#使用gzip压缩响应</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">#是否拦截4xx和5xx错误信息到客户端，默认值off</span></span><br><span class="line">    <span class="comment">#可以在http，server，location块，与error_page配合使用</span></span><br><span class="line">    <span class="attribute">fastcgi_intercept_errors</span> <span class="literal">on</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#负载均衡</span></span><br><span class="line">    <span class="attribute">upstream</span> mysvr &#123;   </span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:7878</span>;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.10.121:3333</span> backup;  <span class="comment">#热备</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>; <span class="comment">#监听端口</span></span><br><span class="line">        <span class="attribute">server_name</span>  localhost; <span class="comment">#监听地址</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">charset</span> utf-<span class="number">8</span>; <span class="comment">#指定字符集添加到“Content-Type”响应头字段</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">access_log</span>  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html; <span class="comment">#根目录</span></span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;  <span class="comment">#设置默认页</span></span><br><span class="line">            <span class="attribute">keepalive_requests</span> <span class="number">120</span>; <span class="comment">#单连接请求上限次数</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="attribute">location</span>  ~*^.+$ &#123;  <span class="comment">#请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写</span></span><br><span class="line">            <span class="attribute">proxy_pass</span>  http://mysvr;  <span class="comment">#请求转向mysvr 定义的服务器列表</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">#仅允许IPv4网络访问 10.1.1.0/16并且192.168.1.0/24 不包括地址192.168.1.1</span></span><br><span class="line">            <span class="comment">#以及IPv6网络2001:0db8::/32</span></span><br><span class="line">            <span class="comment">#如果有很多规则， 最好使用 ngx_http_geo_module模块变量</span></span><br><span class="line">            <span class="attribute">deny</span>  <span class="number">192.168.1.1</span>; <span class="comment">#拒绝的ip</span></span><br><span class="line">            <span class="attribute">allow</span> <span class="number">192.168.1.0</span>/<span class="number">24</span>; <span class="comment">#允许的ip</span></span><br><span class="line">            <span class="attribute">allow</span> <span class="number">10.1.1.0</span>/<span class="number">16</span>;</span><br><span class="line">            <span class="attribute">allow</span> <span class="number">2001</span>:0db8::/<span class="number">32</span>;</span><br><span class="line">            <span class="attribute">deny</span>  all;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>   http://127.0.0.1;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment"># 前提：设置fastcgi_intercept_errors on</span></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">404</span> https://www.baidu.com; <span class="comment">#错误页</span></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">500</span> /<span class="number">500</span>.html;</span><br><span class="line">        <span class="attribute">location</span> = /<span class="number">500</span>.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># @定义一个命名的 location，使用在内部定向时</span></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> <span class="variable">@errpage</span>;</span><br><span class="line">        <span class="attribute">location</span> <span class="variable">@errpage</span> &#123;</span><br><span class="line">            <span class="attribute">access_log</span>  logs/host.access.log  main;</span><br><span class="line">            <span class="attribute">proxy_pass</span>  http://127.0.0.1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#other server</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8000</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  www.somename.com;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">#HTTPS server</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">        <span class="attribute">server_name</span>  localhost;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#配置ssl证书路径</span></span><br><span class="line">        <span class="attribute">ssl_certificate</span>      /etc/nginx/cer/www.somename.com.pem;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /etc/nginx/cer/www.somename.com.key;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>变量说明：</p><ul><li><code>remote_addr</code> 与<code>http_x_forwarded_for</code> 用以记录客户端的ip地址</li><li><code>remote_user</code> ：用来记录客户端用户名称</li><li><code>time_local</code> ： 用来记录访问时间与时区</li><li><code>request</code> ： 用来记录请求的url与http协议</li><li><code>status</code> ： 用来记录请求状态，成功是200</li><li><code>body_bytes_s ent</code> ：记录发送给客户端文件主体内容大小</li><li><code>http_referer</code> ：用来记录从那个页面链接访问过来的</li><li><code>http_user_agent</code> ：记录客户端浏览器的相关信息</li></ul><p><br></p><h4 id="4、简化nginx-conf文件"><a href="#4、简化nginx-conf文件" class="headerlink" title="4、简化nginx.conf文件"></a>4、简化nginx.conf文件</h4><p>通过<code>include</code> 命令，按<code>server</code>引入</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># nginx.conf</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load dynamic modules. See /usr/share/nginx/README.dynamic.</span></span><br><span class="line"><span class="comment"># 加载动态模块</span></span><br><span class="line"><span class="attribute">include</span> /usr/share/nginx/modules/\<span class="regexp">*.conf</span>; <span class="comment">#/usr/share/nginx/modules/*.conf;</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>             /etc/nginx/mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>        application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从/etc/nginx/conf.d目录加载模块化配置</span></span><br><span class="line">    <span class="comment"># See http://nginx.org/en/docs/ngx_core_module.html#include</span></span><br><span class="line">    <span class="attribute">include</span> /etc/nginx/conf.d/\<span class="regexp">*.conf</span>; <span class="comment">#/etc/nginx/conf.d/*.conf</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">listen</span>       [::]:<span class="number">80</span> default_server;</span><br><span class="line">        <span class="attribute">root</span>         /usr/share/nginx/html;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Load configuration files for the default server block.</span></span><br><span class="line">        <span class="attribute">include</span> /etc/nginx/default.d/\<span class="regexp">*.conf</span>; <span class="comment">#/etc/nginx/default.d/*.conf</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">error_page</span> <span class="number">404</span> /<span class="number">404</span>.html;</span><br><span class="line">            <span class="attribute">location</span> = /40x.html &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># /etc/nginx/conf.d/example.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#负载均衡</span></span><br><span class="line"><span class="attribute">upstream</span> mysvr &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#HTTPS server</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CommonJS/AMD/CMD区别</title>
      <link href="/2018/11/14/CommonJS-AMD-CMD%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/11/14/CommonJS-AMD-CMD%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h3 id="一、概括"><a href="#一、概括" class="headerlink" title="一、概括"></a>一、概括</h3><p><code>CommonJs</code>用在服务器端，<code>AMD</code>和<code>CMD</code>用在浏览器环境。<code>AMD</code> 是 <code>RequireJS</code> 在推广过程中对模块定义的规范化产出。<code>CMD</code> 是 <code>SeaJS</code> 在推广过程中对模块定义的规范化产出。</p><p><br></p><a id="more"></a><h3 id="二、CommonJs"><a href="#二、CommonJs" class="headerlink" title="二、CommonJs"></a>二、CommonJs</h3><p><code>CommonJS</code>是服务器端模块的规范，由<code>Node</code>推广使用。由于服务端编程的复杂性，如果没有模块很难与操作系统及其他应用程序互动。使用方法如下： <code>module.exports</code>和<code>require</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line"><span class="built_in">module</span>.exports.add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sum = <span class="number">0</span>, i = <span class="number">0</span>, args = <span class="built_in">arguments</span>, l = args.length;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; l) &#123;</span><br><span class="line">      sum += args[i++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// increment.js</span></span><br><span class="line"><span class="keyword">var</span> add = <span class="built_in">require</span>(<span class="string">'math'</span>).add;</span><br><span class="line"><span class="built_in">module</span>.exports.increment = <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> add(val, <span class="number">1</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">var</span> increment = <span class="built_in">require</span>(<span class="string">'increment'</span>).increment;</span><br><span class="line"><span class="keyword">var</span> a = increment(<span class="number">1</span>); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>注：<code>CommonJs</code>中的<code>require</code>是同步的 </p><p><br></p><h3 id="三、AMD"><a href="#三、AMD" class="headerlink" title="三、AMD"></a>三、AMD</h3><p><code>AMD</code>（<code>Asynchronous Module Definition</code>），意思就是”异步模块定义”。由于不是<code>JavaScript</code>原生支持，使用<code>AMD</code>规范进行页面开发需要用到对应的库函数，也就是大名鼎鼎<code>RequireJS</code>，实际上<code>AMD</code> 是 <code>RequireJS</code> 在推广过程中对模块定义的规范化的产出。</p><p>它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p><h4 id="1、define-函数"><a href="#1、define-函数" class="headerlink" title="1、define()函数"></a>1、define()函数</h4><p>RequireJS定义了一个函数 define，它是全局变量，用来定义模块: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define(id?, dependencies?, factory);</span><br></pre></td></tr></table></figure><p>id：指定义中模块的名字，可选；如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字。如果提供了该参数，模块名必须是“顶级”的和绝对的（不允许相对名字）。 </p><p>dependencies：是一个当前模块依赖的，已被模块定义的模块标识的数组字面量。 依赖参数是可选的，如果忽略此参数，它应该默认为[“require”, “exports”, “module”]。然而，如果工厂方法的长度属性小于3，加载器会选择以函数的长度属性指定的参数个数调用工厂方法。 </p><p>factory：模块初始化要执行的函数或对象。如果为函数，它应该只被执行一次。如果是对象，此对象应该为模块的输出值。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="string">"alpha"</span>, [<span class="string">"require"</span>, <span class="string">"exports"</span>, <span class="string">"beta"</span>], <span class="function"><span class="keyword">function</span> (<span class="params">require, exports, beta</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">       exports.verb = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> beta.verb();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//Or:</span></span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">"beta"</span>).verb();</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="2、RequireJs使用"><a href="#2、RequireJs使用" class="headerlink" title="2、RequireJs使用"></a>2、RequireJs使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//别名配置</span></span><br><span class="line">requirejs.config(&#123;</span><br><span class="line">    paths: &#123;</span><br><span class="line">        jquery: <span class="string">'jquery.min'</span> <span class="comment">//可以省略.js</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入模块，用变量$表示jquery模块</span></span><br><span class="line">requirejs([<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'body'</span>).css(<span class="string">'background-color'</span>,<span class="string">'red'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// math.js</span></span><br><span class="line">define(<span class="string">'math'</span>,[<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$</span>) </span>&#123;<span class="comment">//引入jQuery模块</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        add: <span class="function"><span class="keyword">function</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> x + y;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>,<span class="string">'math'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">$,math</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(math.add(<span class="number">10</span>,<span class="number">100</span>));<span class="comment">//110</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><h3 id="四、CMD"><a href="#四、CMD" class="headerlink" title="四、CMD"></a>四、CMD</h3><p><code>CMD</code> 即<code>Common Module Definition</code>通用模块定义，<code>CMD</code>规范是国内发展出来的，就像<code>AMD</code>有个<code>requireJS</code>，<code>CMD</code>有个浏览器的实现<code>SeaJS</code>，<code>SeaJS</code>要解决的问题和<code>requireJS</code>一样，只不过在模块定义方式和模块加载（可以说运行、解析）时机上有所不同。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 模块代码</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// require是可以把其他模块导入进来的一个参数;</span></span><br><span class="line"><span class="comment">// 而exports是可以把模块内的一些属性和方法导出的;</span></span><br><span class="line"><span class="comment">// module 是一个对象，上面存储了与当前模块相关联的一些属性和方法。</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义模块  myModule.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery.js'</span>)</span><br><span class="line">  $(<span class="string">'p'</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">  exports.data = <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加载模块</span></span><br><span class="line">seajs.use([<span class="string">'myModule.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">my</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> star= my.data;</span><br><span class="line">    <span class="built_in">console</span>.log(star);  <span class="comment">//1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> CommonJS </tag>
            
            <tag> AMD </tag>
            
            <tag> CMD </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>echarts配置项的data格式</title>
      <link href="/2018/11/13/echarts%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9A%84data%E6%A0%BC%E5%BC%8F/"/>
      <url>/2018/11/13/echarts%E9%85%8D%E7%BD%AE%E9%A1%B9%E7%9A%84data%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="echarts配置"><a href="#echarts配置" class="headerlink" title="echarts配置"></a>echarts配置</h4><h5 id="图例legend的data"><a href="#图例legend的data" class="headerlink" title="图例legend的data"></a>图例<code>legend</code>的data</h5><ul><li>字符串数组项</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">    data: [<span class="string">'邮件营销'</span>, <span class="string">'联盟广告'</span>, <span class="string">'视频广告'</span>, <span class="string">'直接访问'</span>, <span class="string">'搜索引擎'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对象数组项</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">legend: &#123;</span><br><span class="line">    data: [</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'系列1'</span>,</span><br><span class="line">            <span class="comment">// 强制设置图形为圆。</span></span><br><span class="line">            icon: <span class="string">'circle'</span>,</span><br><span class="line">            <span class="comment">// 设置文本为红色</span></span><br><span class="line">            textStyle: &#123;</span><br><span class="line">                color: <span class="string">'red'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">'系列2'</span>,</span><br><span class="line">            <span class="comment">// 强制设置图形为圆。</span></span><br><span class="line">            icon: <span class="string">'circle'</span>,</span><br><span class="line">            <span class="comment">// 设置文本为红色</span></span><br><span class="line">            textStyle: &#123;</span><br><span class="line">                color: <span class="string">'red'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h5 id="坐标轴xAxis与yAxis的data"><a href="#坐标轴xAxis与yAxis的data" class="headerlink" title="坐标轴xAxis与yAxis的data"></a>坐标轴<code>xAxis</code>与<code>yAxis</code>的data</h5><ul><li>字符串数组项</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">xAxis: &#123;</span><br><span class="line">    type: <span class="string">'category'</span>,</span><br><span class="line">    data: [<span class="string">'周一'</span>,<span class="string">'周二'</span>,<span class="string">'周三'</span>,<span class="string">'周四'</span>,<span class="string">'周五'</span>,<span class="string">'周六'</span>,<span class="string">'周日'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>对象数组项</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">xAxis: &#123;</span><br><span class="line">    type: <span class="string">'category'</span>,</span><br><span class="line">    data: [</span><br><span class="line">        &#123;</span><br><span class="line">            value: <span class="string">'周一'</span>,</span><br><span class="line">            <span class="comment">// 突出周一</span></span><br><span class="line">            textStyle: &#123;</span><br><span class="line">                fontSize: <span class="number">20</span>,</span><br><span class="line">                color: <span class="string">'red'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="数据series的data"><a href="#数据series的data" class="headerlink" title="数据series的data"></a>数据<code>series</code>的data</h5><ul><li>通常来说，数据用一个二维数组表示</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">series: [&#123;</span><br><span class="line">    data: [</span><br><span class="line">        <span class="comment">// 维度X   维度Y   其他维度 ...</span></span><br><span class="line">        [  <span class="number">3.4</span>,    <span class="number">4.5</span>,   <span class="number">15</span>,   <span class="number">43</span>],</span><br><span class="line">        [  <span class="number">4.2</span>,    <span class="number">2.3</span>,   <span class="number">20</span>,   <span class="number">91</span>],</span><br><span class="line">        [  <span class="number">10.8</span>,   <span class="number">9.5</span>,   <span class="number">30</span>,   <span class="number">18</span>],</span><br><span class="line">        [  <span class="number">7.2</span>,    <span class="number">8.8</span>,   <span class="number">18</span>,   <span class="number">57</span>]</span><br><span class="line">    ]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><ul><li>当某维度对应于类目轴（axis.type 为 <code>&#39;category&#39;</code>）的时候：其值须为类目的『<strong>序数</strong>』（从 <code>0</code> 开始）或者类目的『<strong>字符串值</strong>』</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">xAxis: &#123;</span><br><span class="line">  type: <span class="string">'category'</span>,</span><br><span class="line">  data: [<span class="string">'星期一'</span>, <span class="string">'星期二'</span>, <span class="string">'星期三'</span>, <span class="string">'星期四'</span>]</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">yAxis: &#123;</span><br><span class="line">  type: <span class="string">'category'</span>,</span><br><span class="line">  data: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>]</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">series: [&#123;</span><br><span class="line">  data: [</span><br><span class="line">  <span class="comment">// xAxis   yAxis</span></span><br><span class="line">  [   <span class="number">0</span>,       <span class="number">0</span>,       <span class="number">2</span>], <span class="comment">// 意思是此点位于 xAxis: '星期一', yAxis: 'a'。</span></span><br><span class="line">  [ <span class="string">'星期四'</span>,   <span class="number">2</span>,       <span class="number">1</span>], <span class="comment">// 意思是此点位于 xAxis: '星期四', yAxis: 'm'。</span></span><br><span class="line">  [   <span class="number">2</span>,      <span class="string">'p'</span>,      <span class="number">2</span>], <span class="comment">// 意思是此点位于 xAxis: '星期三', yAxis: 'p'。</span></span><br><span class="line">  [   <span class="number">3</span>,       <span class="number">3</span>,       <span class="number">5</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><ul><li><strong>简化</strong>：只有一个轴为类目轴（axis.type 为 ‘category’）</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">xAxis: &#123;</span><br><span class="line">    data: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>]</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">series: [&#123;</span><br><span class="line">    <span class="comment">// 与 xAxis.data 一一对应。</span></span><br><span class="line">    data: [<span class="number">23</span>,  <span class="number">44</span>,  <span class="number">55</span>,  <span class="number">19</span>]</span><br><span class="line">    <span class="comment">// 它其实是下面这种形式的简化：</span></span><br><span class="line">    <span class="comment">// data: [[0, 23], [1, 44], [2, 55], [3, 19]]</span></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><ul><li><p>数组项可用对象，其中的 <code>value</code> 像表示具体的数值</p><ul><li><p>二维状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">series: [&#123;</span><br><span class="line">    data: [</span><br><span class="line">        [<span class="number">12</span>, <span class="number">33</span>],</span><br><span class="line">        [<span class="number">34</span>, <span class="number">313</span>],</span><br><span class="line">        &#123;</span><br><span class="line">            value: [<span class="number">56</span>, <span class="number">44</span>],</span><br><span class="line">            label: &#123;&#125;,</span><br><span class="line">            itemStyle: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        [<span class="number">10</span>, <span class="number">33</span>]</span><br><span class="line">    ]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li><li><p>简化状态</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">series: [&#123;</span><br><span class="line">    data: [</span><br><span class="line">        <span class="number">12</span>,</span><br><span class="line">        <span class="number">34</span>,</span><br><span class="line">        &#123;</span><br><span class="line">            value: <span class="number">56</span>,</span><br><span class="line">            <span class="comment">//自定义标签样式，仅对该数据项有效</span></span><br><span class="line">            label: &#123;&#125;,</span><br><span class="line">            <span class="comment">//自定义特殊 itemStyle，仅对该数据项有效</span></span><br><span class="line">            itemStyle: &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="number">10</span></span><br><span class="line">    ]</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
        <tags>
            
            <tag> echarts </tag>
            
            <tag> data </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>滚动条归属问题</title>
      <link href="/2018/11/08/%E6%BB%9A%E5%8A%A8%E6%9D%A1%E5%BD%92%E5%B1%9E%E9%97%AE%E9%A2%98/"/>
      <url>/2018/11/08/%E6%BB%9A%E5%8A%A8%E6%9D%A1%E5%BD%92%E5%B1%9E%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="谁的滚动条"><a href="#谁的滚动条" class="headerlink" title="谁的滚动条"></a>谁的滚动条</h1><ul><li>当元素的<code>内容区</code><strong>恰好</strong>包含了<code>滚动条</code>时，<code>滚动条</code>属于当前元素（<code>div.outer</code>）</li></ul><p><img src="/2018/11/08/滚动条归属问题/snipaste20181108_114658.png" alt=""></p><p><br></p><a id="more"></a><h1 id="overflow溢出的高度是谁的"><a href="#overflow溢出的高度是谁的" class="headerlink" title="overflow溢出的高度是谁的"></a><code>overflow</code>溢出的高度是谁的</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">    <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.inner</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: aliceblue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">250px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: saddlebrown;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: cadetblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/11/08/滚动条归属问题/snipaste20181108_115559.png" alt=""></p><ul><li><p><code>inner</code>的高度只有<code>200px</code>，但是<code>inner</code>的子元素<code>h1</code>和<code>p</code>的高度加起来超过了<code>200px</code>。</p><p><img src="/2018/11/08/滚动条归属问题/snipaste20181108_125013.png" alt=""></p></li><li><p><code>inner</code>的<code>height</code>属性为<strong>固定值</strong>，所以高度没有被撑开，仍然是<code>200px</code>。</p></li><li><code>inner</code>的<code>overflow</code>属性为默认值<code>visiable</code>，所以<strong>内容不会被修剪，会呈现在元素框之外</strong> 。</li></ul><p><img src="/2018/11/08/滚动条归属问题/snipaste20181108_114658.png" alt=""></p><ul><li>从<code>inner</code>往上追溯，<code>outer</code>的高度也是固定值，也不会被撑开。</li><li><code>outer</code>的<code>overflow</code>属性为<code>auto</code>。 因此从<code>inner</code>溢出的<strong>内容高度</strong>被<code>outer</code><strong>捕获</strong>。</li></ul><p>注：如果<code>outer</code>的<code>overflow</code>属性也是<code>visiable</code>，则<code>outer</code>不会出现滚动条，会继续向上抛出溢出内容的高度，直到被更上一层元素捕获。</p><p>同理：如果<code>html</code>的<code>overflow</code>属性也是<code>visiable</code>，<code>html</code>会将<code>溢出的内容高度</code>抛给<code>浏览器</code>，所以会有这样的情况：<strong>整个页面出现了滚动条，但是滚动条不属于<code>html</code>，也不属于<code>body</code>。</strong>但是可以通过<code>window.scrollTo()</code>或者<code>document.documentElement.scrollTop</code>来控制滚动条的移动。</p><p>  <img src="/2018/11/08/滚动条归属问题/snipaste20181108_134948.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> 滚动条 </tag>
            
            <tag> height </tag>
            
            <tag> overflow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html和body的背景色问题</title>
      <link href="/2018/11/08/html%E5%92%8Cbody%E7%9A%84%E8%83%8C%E6%99%AF%E8%89%B2%E9%97%AE%E9%A2%98/"/>
      <url>/2018/11/08/html%E5%92%8Cbody%E7%9A%84%E8%83%8C%E6%99%AF%E8%89%B2%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>当<code>&lt;html&gt;</code>标签无背景样式时，<code>&lt;body&gt;</code>的背景色其实不是<code>&lt;body&gt;</code>标签的背景色，而是浏览器的。</p><p>一旦html标签含有背景色，则<code>&lt;body&gt;</code>的背景色变成了正常的<code>&lt;body&gt;</code>标签（一个实实在在，普普通通标签）的背景色，而此时的<code>&lt;html&gt;</code>标签最顶级，背景色被浏览器获取，成为浏览器的背景色。 </p>]]></content>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> body </tag>
            
            <tag> background-color </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>vertical-align与line-height</title>
      <link href="/2018/11/07/vertical-align%E4%B8%8Eline-height/"/>
      <url>/2018/11/07/vertical-align%E4%B8%8Eline-height/</url>
      <content type="html"><![CDATA[<h1 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a>vertical-align</h1><p><a href="https://developer.mozilla.org/en-US/docs/CSS" target="_blank" rel="noopener">CSS</a> 的属性 <strong>vertical-align</strong> 用来指定行内元素（inline）或表格单元格（table-cell）元素的垂直对齐方式。 </p><p><br></p><h4 id="相对父元素的值"><a href="#相对父元素的值" class="headerlink" title="相对父元素的值"></a>相对父元素的值</h4><p>这些值使元素相对其父元素垂直对齐：</p><ul><li><p><code>baseline</code></p><p>使元素的<strong>基线</strong>与父元素的<strong>基线</strong>对齐。HTML规范没有详细说明部分<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element" target="_blank" rel="noopener">可替换元素</a>的基线，如<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/textarea" target="_blank" rel="noopener"><code>textarea</code></a> ，这意味着这些元素使用此值的表现因浏览器而异。</p></li></ul><ul><li><p><code>sub</code></p><p>使元素的<strong>基线</strong>与父元素的<strong>下标基线</strong>对齐。</p></li></ul><ul><li><p><code>super</code></p><p>使元素的<strong>基线</strong>与父元素的<strong>上标基线</strong>对齐。</p></li></ul><ul><li><p><code>text-top</code></p><p>使元素的<strong>顶部</strong>与父元素的<strong>字体顶部</strong>对齐。</p></li></ul><ul><li><p><code>text-bottom</code></p><p>使元素的<strong>底部</strong>与父元素的<strong>字体底部</strong>对齐。</p></li></ul><ul><li><p><code>middle</code></p><p>使元素的<strong>中部</strong>与父元素的<strong>基线加上父元素x-height</strong>（译注：<a href="https://www.zhangxinxu.com/wordpress/2015/06/about-letter-x-of-css/" target="_blank" rel="noopener">x高度</a>）的一半对齐。</p></li></ul><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/length" target="_blank" rel="noopener"><code>height</code></a></p><p>使元素的<strong>基线</strong>对齐到父元素的<strong>基线之上的给定长度</strong>。可以是负数。</p></li></ul><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/percentage" target="_blank" rel="noopener"><code>percentage</code></a></p><p>使元素的<strong>基线</strong>对齐到父元素的<strong>基线之上的给定百分比</strong>，该百分比是<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/line-height" target="_blank" rel="noopener"><code>line-height</code></a>属性的百分比。可以是负数。</p><p><br></p><a id="more"></a></li></ul><h4 id="相对行的值"><a href="#相对行的值" class="headerlink" title="相对行的值"></a>相对行的值</h4><p>下列值使元素相对整行垂直对齐：</p><ul><li><p><code>top</code></p><p>使元素及其后代元素的<strong>顶部</strong>与整行的<strong>顶部</strong>对齐。</p></li></ul><ul><li><p><code>bottom</code></p><p>使元素及其后代元素的<strong>底部</strong>与整行的<strong>底部</strong>对齐。</p></li></ul><p>注：特别重要一点，<strong>没有基线的元素，使用外边距的下边缘替代</strong>，解析如下</p><p><br></p><h4 id="inline-block和baseline"><a href="#inline-block和baseline" class="headerlink" title="inline-block和baseline"></a><strong><code>inline-block</code>和<code>baseline</code></strong></h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The baseline of an ‘inline-block’ is the baseline of its last line box in the normal flow, unless it has either no in-flow line boxes or if its ‘overflow’ property has a computed value other than ‘visible’, in which case the baseline is the bottom margin edge.</span><br></pre></td></tr></table></figure><p><strong>一个<code>inline-block</code>元素，如果里面没有<code>inline</code>内联元素，或者<code>overflow</code>不是<code>visible</code>，则该元素的<code>基线</code>就是其margin底边缘，否则，其基线就是元素里面<code>最后一行内联元素</code>的基线。</strong> </p><p><br></p><h1 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a>line-height</h1><p><strong>行内框</strong>，每个行内元素会生成一个行内框，行内框是一个浏览器渲染模型中的一个概念，无法显示出来，在没有其他因素影响的时候（padding等），行内框等于内容区域，而设定行高时行内框高度不变，半行距【（行高-字体size）/2】分别增加/减少到内容区域的上下两边（深蓝色区域）</p><p><strong>行框（line box），</strong>行框是指本行的一个虚拟的矩形框，是浏览器渲染模式中的一个概念，并没有实际显示。行框高度等于本行内所有元素中行内框最大的值（<strong>以行高值最大的行内框为基准，其他行内框采用自己的对齐方式向基准对齐，最终计算行框的高度</strong>），当有多行内容时，每行都会有自己的行框。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:#ccc;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-size:1em;background-color:#666;"</span>&gt;</span>中文English<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-size:3em;background-color:#999;"</span>&gt;</span>中文English<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-size:3em;background-color:#999;"</span>&gt;</span>English中文<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"font-size:1em;background-color:#666;"</span>&gt;</span>English中文<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2018/11/07/vertical-align与line-height/snipaste20181107_212101.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> line-height </tag>
            
            <tag> vertical-align </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>BEM命名规范</title>
      <link href="/2018/10/30/BEM%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
      <url>/2018/10/30/BEM%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h3 id="BEM命名规范"><a href="#BEM命名规范" class="headerlink" title="BEM命名规范"></a>BEM命名规范</h3><p>BEM代表 <strong>“块（block），元素（element），修饰符（modifier）”</strong>，我们常用这三个实体开发组件。</p><p><img src="/2018/10/30/BEM书写规范/1.png" alt=""></p><p><img src="/2018/10/30/BEM书写规范/2.png" alt=""></p><p><img src="/2018/10/30/BEM书写规范/2_1.png" alt=""></p><p>在选择器中，由以下三种符号来表示扩展的关系：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-   中划线 ：仅作为连字符使用，表示某个块或者某个子元素的多单词之间的连接记号。</span><br><span class="line">__  双下划线：双下划线用来连接块和块的子元素</span><br><span class="line">_   单下划线：单下划线用来描述一个块或者块的子元素的一种状态</span><br><span class="line"></span><br><span class="line">.block__element_modifier</span><br></pre></td></tr></table></figure><h4 id="块（block）"><a href="#块（block）" class="headerlink" title="块（block）"></a>块（block）</h4><p>一个块是设计或布局的一部分，它<strong>有具体且唯一地意义</strong> ，要么是语义上的，要么是视觉上的。</p><p>在大多数情况下，任何独立的页面元素（或复杂，或简单）都可以被视作一个块。它的HTML容器会有一个唯一的CSS类名，也就是这个块的名字。</p><p>针对块的CSS类名会加一些前缀（ <code>ui-</code>），这些前缀在CSS中有类似 <a href="https://github.com/Tencent/tmt-workflow/wiki/%E2%92%9B-%5B%E8%A7%84%E8%8C%83%5D--CSS-BEM-%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83" target="_blank" rel="noopener">命名空间</a> 的作用。</p><p>一个块的正式（实际上是半正式的）定义有下面三个基本原则：</p><ol><li>CSS中只能使用类名（不能是ID）</li><li>每一个块名应该有一个命名空间（前缀）</li><li>每一条CSS规则必须属于一个块</li></ol><h4 id="元素（element）"><a href="#元素（element）" class="headerlink" title="元素（element）"></a>元素（element）</h4><p>在块中<strong>子元素的子元素也被认为是块的直接子元素，元素的类名必须用父级块的名称作为前缀。</strong></p><h4 id="修饰符（modifier）"><a href="#修饰符（modifier）" class="headerlink" title="修饰符（modifier）"></a>修饰符（modifier）</h4><p><strong>一个“修饰符”可以理解为一个块的特定状态</strong>，标识着它持有一个特定的属性。</p><p>###其他命名规范（CSS设计模式）</p><p><img src="/2018/10/30/BEM书写规范/3.png" alt=""></p><h4 id="OOCSS"><a href="#OOCSS" class="headerlink" title="OOCSS"></a>OOCSS</h4><p>OOCSS（Object Oriented CSS），是由Nicole Sullivan提出的css理论，其主要的两个原则是：</p><ul><li><p>分离结构和主题（<strong>Separate structure and skin</strong>），分离结构和主题是在于将一些视觉样式效果作为单独的“主题”来应用</p></li><li><p>分离容器和内容（<strong>Separate container and content</strong>），分离容器和内容要求使页面元素不依赖于其所处位置</p></li></ul><h4 id="SMACSS"><a href="#SMACSS" class="headerlink" title="SMACSS"></a>SMACSS</h4><p>SMACSS主要原则有3条：</p><ul><li>Categorizing CSS Rules（为css分类）</li><li>Naming Rules（命名规则）</li><li>Minimizing the Depth of Applicability（最小化适配深度）</li></ul><h5 id="Categorizing-CSS-Rules（为css分类）"><a href="#Categorizing-CSS-Rules（为css分类）" class="headerlink" title="Categorizing CSS Rules（为css分类）"></a>Categorizing CSS Rules（为css分类）</h5><p>Categorizing CSS Rules，是SMACSS的核心。SMACSS认为css有5个类别，分别是：</p><ol><li><strong>Base Rules</strong>， <strong>基础样式</strong>，描述的是任何场合下，页面元素的默认外观。它的定义不会用到class和ID。css reset也属于此类。</li><li><strong>Layout Rules</strong>， <strong>布局样式</strong>。它和后面的Module Rules一同，描述的是页面中的各类具体元素。元素是有层次级别之分的，Layout Rules属于较高的一层，它可以作为层级较低的Module Rules元素的容器。左右分栏、栅格系统等都属于布局样式。</li><li><strong>Module Rules</strong>， <strong>模块样式</strong>。它可以是一个产品列表，一个导航条。一般来说，Module Rules定义的元素放置于前面说的Layout Rules元素之内。模块是独立的，可以在各种场合重用。</li><li><strong>State Rules</strong>， <strong>状态样式</strong>，描述的是任一元素在特定状态下的外观。例如，一个消息框可能有<code>success</code>和<code>error</code>两种状态，导航条中的任一项都可能有<code>current</code>状态。</li><li><strong>Theme Rules</strong>， <strong>主题样式</strong>，描述了页面主题外观，一般是指颜色、背景图。Theme Rules可以修改前面4个类别的样式，且应和前面4个类别分离开来。</li></ol><h5 id="Naming-Rules（命名规则）"><a href="#Naming-Rules（命名规则）" class="headerlink" title="Naming Rules（命名规则）"></a>Naming Rules（命名规则）</h5><ul><li>Layout Rules用<code>l-</code>或<code>layout-</code>这样的前缀，例如：<code>.l-header</code>、<code>.l-sidebar</code>。</li><li>Module Rules用模块本身的命名，例如图文排列的<code>.media</code>、<code>.media-image</code>。</li><li>State Rules用<code>is-</code>前缀，例如：<code>.is-active</code>、<code>.is-hidden</code>。</li><li>Theme Rules如果作为单独class，用<code>theme-</code>前缀，例如<code>.theme-a-background</code>、<code>.theme-a-shadow</code>。</li><li>Base Rules不会用到class和ID，是以标签选择符为主的样式，例如<code>p</code>、<code>a</code>，无需命名。</li></ul><h5 id="Minimizing-the-Depth-of-Applicability（最小化适配深度）"><a href="#Minimizing-the-Depth-of-Applicability（最小化适配深度）" class="headerlink" title="Minimizing the Depth of Applicability（最小化适配深度）"></a>Minimizing the Depth of Applicability（最小化适配深度）</h5><p>在不造成样式冲突的允许范围之内，尽可能使用短的、不限定html结构的选择符。这一点和OOCSS的分离容器和内容的原则非常相似。</p>]]></content>
      
      
        <tags>
            
            <tag> BEM命名规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>SOLID原则</title>
      <link href="/2018/10/23/SOLID%E5%8E%9F%E5%88%99/"/>
      <url>/2018/10/23/SOLID%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<h2 id="S-O-L-I-D-原则"><a href="#S-O-L-I-D-原则" class="headerlink" title="S.O.L.I.D 原则"></a>S.O.L.I.D 原则</h2><p>面向对象的编程并不能防止难以理解或不可维护的程序。因此，Robert C. Martin 制定了五项指导原则，使开发人员很容易创建出可读性强且可维护的程序。这五项原则被称为 S.O.L.I.D 原则（这种缩写是由 Michael Feathers 提出的）：</p><ul><li>S：单一职责原则    （The Single Responsibility Principle）<ul><li><strong>相关的特性</strong>放在一起，因相同的原因而改变</li></ul></li></ul><ul><li><p>O：开闭原则  （The Open Closed Principle ）</p><ul><li>如何区别相关特性？<strong>继承</strong></li><li>是否真的不可修改 ？<strong>可扩展时，不可修改</strong></li></ul><p>注：印证了“<strong>没有通过增加中间层（继承）不能解决的问题</strong>”</p></li></ul><ul><li>L：里氏替换原则 （Liskov Substitution Principle ）<ul><li>继承中，父类与子类的关系？子类<strong>无隙替换</strong>父类</li></ul></li></ul><ul><li>I：接口隔离原则 （The Interface Segregation Principle ）<ul><li>如果继承产生了冗余接口？定义<strong>细粒度接口</strong></li></ul></li></ul><ul><li>D：依赖倒置原则 （The Dependency Inversion Principle ）<ul><li>不同模块之间如何产生联系？模块间的依赖是通过抽象发生 </li><li><strong>相对于细节的多变性，抽象的东西要稳定的多</strong></li></ul></li></ul><p><br></p><a id="more"></a><h2 id="单一职责原则（SRP）"><a href="#单一职责原则（SRP）" class="headerlink" title="单一职责原则（SRP）"></a>单一职责原则（SRP）</h2><p>一个类只应该负责一件事。<strong>如果一个类有多个职责，那么它变成了耦合的。对一个职责的修改会导致对另一个职责的修改。</strong></p><p>注意：这个原则不仅适用于类，也适用于软件组件和微服务。</p><p>例如，考虑下面的设计：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; &#125;</span><br><span class="line">    getAnimalName() &#123; &#125;</span><br><span class="line">    saveAnimal(a: Animal) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 Animal 就违反了单一职责原则（SRP）。它为什么违反了 SRP？</p><p>SRP 指出，类应该有一个职责，在这里，我们可以得出两个职责：<strong>动物数据库管理</strong>和<strong>动物属性管理</strong>。构造函数和 getAnimalName 管理动物属性，而 saveAnimal 管理 Animal 在数据库中的存储。</p><p> 这种设计将来会带来什么问题？</p><p>如果应用程序的修改影响了数据库管理功能，使用 Animal 属性的类就必须修改和重新编译，以适应这种新的变化。这个系统就有点像多米诺骨牌，触碰一张牌就会影响到其他牌。</p><p>为了使这个类符合 SRP，我们创建了另一个类，它负责将动物存储到数据库中这个单独的职责：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; &#125;</span><br><span class="line">    getAnimalName() &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnimalDB</span> </span>&#123;</span><br><span class="line">    getAnimal(a: Animal) &#123; &#125;</span><br><span class="line">    saveAnimal(a: Animal) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>在设计我们的类时，我们应该把相关的特性放在一起，这样，每当它们需要改变的时候，它们都是因为同样的原因而改变。如果它们因不同的原因而改变，我们就应该尝试将它们分开。——Steve Fenton</strong></p></blockquote><p>恰当运用这条原则，我们的应用程序就会变成高内聚的。</p><p><br></p><h2 id="开闭原则（OCP）"><a href="#开闭原则（OCP）" class="headerlink" title="开闭原则（OCP）"></a>开闭原则（OCP）</h2><blockquote><p>软件实体（类、模块、函数）应该对扩展开放，对修改关闭。</p></blockquote><p>让我们继续以 Animal 类为例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name: string)&#123; &#125;</span><br><span class="line">    getAnimalName() &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们希望遍历一个动物列表，发出它们的声音。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">const</span> animals: <span class="built_in">Array</span>&lt;Animal&gt; = [</span><br><span class="line">    <span class="keyword">new</span> Animal(<span class="string">'lion'</span>),</span><br><span class="line">    <span class="keyword">new</span> Animal(<span class="string">'mouse'</span>)</span><br><span class="line">];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AnimalSound</span>(<span class="params">a: Array&lt;Animal&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt;= a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].name == <span class="string">'lion'</span>)</span><br><span class="line">            log(<span class="string">'roar'</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i].name == <span class="string">'mouse'</span>)</span><br><span class="line">            log(<span class="string">'squeak'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">AnimalSound(animals);</span><br></pre></td></tr></table></figure><p>函数 AnimalSound 不符合开闭原则，因为它不能对新的动物关闭。如果我们添加一种新的动物蛇：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">const</span> animals: <span class="built_in">Array</span>&lt;Animal&gt; = [</span><br><span class="line">    <span class="keyword">new</span> Animal(<span class="string">'lion'</span>),</span><br><span class="line">    <span class="keyword">new</span> Animal(<span class="string">'mouse'</span>),</span><br><span class="line">    <span class="keyword">new</span> Animal(<span class="string">'snake'</span>)</span><br><span class="line">]</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>我们就不得不修改 AnimalSound 函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AnimalSound</span>(<span class="params">a: Array&lt;Animal&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt;= a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].name == <span class="string">'lion'</span>)</span><br><span class="line">            log(<span class="string">'roar'</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i].name == <span class="string">'mouse'</span>)</span><br><span class="line">            log(<span class="string">'squeak'</span>);</span><br><span class="line">        <span class="keyword">if</span>(a[i].name == <span class="string">'snake'</span>)</span><br><span class="line">            log(<span class="string">'hiss'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">AnimalSound(animals);</span><br></pre></td></tr></table></figure><p>如你所见，对于每一种新的动物，一段新的逻辑会被添加到 AnimalSound 函数。这是一个非常简单的例子。当应用程序变得庞大而复杂时，你会看到，每添加一种新动物，if 语句就得在 AnimalSound 函数中重复一遍。</p><p> 如何使它（AnimalSound）符合 OCP？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">        makeSound();</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    makeSound() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'roar'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Squirrel</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    makeSound() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'squeak'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snake</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    makeSound() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'hiss'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AnimalSound</span>(<span class="params">a: Array&lt;Animal&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt;= a.length; i++) &#123;</span><br><span class="line">        log(a[i].makeSound());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">AnimalSound(animals);</span><br></pre></td></tr></table></figure><p>Animal 现在有了一个虚方法 makeSound。我们让每一种动物扩展 Animal 类并实现 makeSound 方法。</p><p>每一种动物都加入自己的发声方法（makeSound）实现。AnimalSound 遍历动物数组并调用每种动物的 makeSound 方法。</p><p>现在，如果我们添加一种新动物，AnimalSound 不需要修改。我们需要做的就是把新动物加入到动物数组中。</p><p>AnimalSound 方法符合 OCP 原则了。</p><p><br></p><p>再举个例子。假如你有一家商店，你使用下面的类给自己最喜欢的客户 20% 的折扣：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Discount</span> </span>&#123;</span><br><span class="line">    giveDiscount() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.price * <span class="number">0.2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当你决定给 VIP 客户双倍的折扣（40%）时，你可能会这样修改这个类：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Discount</span> </span>&#123;</span><br><span class="line">    giveDiscount() &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.customer == <span class="string">'fav'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.price * <span class="number">0.2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.customer == <span class="string">'vip'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.price * <span class="number">0.4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就违反了 OCP 原则。OCP 禁止这样做。如果想给不同类型的客户一个新的折扣百分比，就得添加一段新的逻辑。</p><p>为了使它遵循 OCP 原则，我们将新建一个类来扩展 Discount。在这个新类中，我们将重新实现它的行为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class VIPDiscount: Discount &#123;</span><br><span class="line">    getDiscount() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDiscount() * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你决定给超级 VIP 客户 80% 的折扣，那么代码是下面这个样子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class SuperVIPDiscount: VIPDiscount &#123;</span><br><span class="line">    getDiscount() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDiscount() * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是这样，扩展而不修改。</p><p><br></p><h2 id="里氏替换原则（LSP）"><a href="#里氏替换原则（LSP）" class="headerlink" title="里氏替换原则（LSP）"></a>里氏替换原则（LSP）</h2><blockquote><p>子类必须可以替换它的超类（父类）。</p></blockquote><p>这个原则的目的是确保子类可以替换它的超类而没有错误。如果你发现自己的代码在检查类的类型，那么它一定违反了这个原则。</p><p>让我们以 Animal 为例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AnimalLegCount</span>(<span class="params">a: Array&lt;Animal&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt;= a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> a[i] == Lion)</span><br><span class="line">            log(LionLegCount(a[i]));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> a[i] == Mouse)</span><br><span class="line">            log(MouseLegCount(a[i]));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> a[i] == Snake)</span><br><span class="line">            log(SnakeLegCount(a[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">AnimalLegCount(animals);</span><br></pre></td></tr></table></figure><p>上述方法违反了 LSP 原则（也违反了 OCP 原则）。它必须知道每一种 Animal 类型，并调用相应的数腿函数。</p><p>每次创建一个新的动物类，都得修改这个函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pigeon</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> animals[]: <span class="built_in">Array</span>&lt;Animal&gt; = [</span><br><span class="line">    <span class="comment">//...,</span></span><br><span class="line">    <span class="keyword">new</span> Pigeon();</span><br><span class="line">]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AnimalLegCount</span>(<span class="params">a: Array&lt;Animal&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(int i = <span class="number">0</span>; i &lt;= a.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> a[i] == Lion)</span><br><span class="line">            log(LionLegCount(a[i]));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> a[i] == Mouse)</span><br><span class="line">            log(MouseLegCount(a[i]));</span><br><span class="line">         <span class="keyword">if</span>(<span class="keyword">typeof</span> a[i] == Snake)</span><br><span class="line">            log(SnakeLegCount(a[i]));</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> a[i] == Pigeon)</span><br><span class="line">            log(PigeonLegCount(a[i]));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">AnimalLegCount(animals);</span><br></pre></td></tr></table></figure><p>为了使这个函数符合 LSP 原则，我们将遵循 Steve Fenton 提出的 LSP 要求：</p><ul><li>如果超类（Animal）有一个方法接受超类类型（Anima）的参数，那么它的子类（Pigeon）应该接受超类类型（Animal 类型）或子类类型（Pigeon 类型）作为参数。</li><li>如果超类返回一个超类类型（Animal）, 那么它的子类应该返回一个超类类型（Animal 类型）或子类类型（Pigeon 类型）。</li></ul><p>现在，我们可以重新实现 AnimalLegCount 函数了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AnimalLegCount</span>(<span class="params">a: Array&lt;Animal&gt;</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= a.length; i++) &#123;</span><br><span class="line">        a[i].LegCount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">AnimalLegCount(animals);</span><br></pre></td></tr></table></figure><p>AnimalLegCount 函数并不关心传递的动物类型，它只管调用 LegCount 方法。它只知道参数必须是 Animal 类型，要么是 Animal 类，要么是它的子类。</p><p>现在，Animal 类必须实现 / 定义一个 LegCount 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    LegCount();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而它的子类必须实现 LegCount 方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span> <span class="keyword">extends</span> <span class="title">Animal</span></span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    LegCount() &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>当它被传递给 AnimalLegCount 函数时，它会返回一头狮子的腿数。</p><p>如你所见，AnimalLegCount 不需要知道动物的类型就可以返回它的腿数，它只调用了 Animal 类型的 LegCount 方法，因为根据约定，Animal 类的一个子类必须实现 LegCount 函数。</p><p><br></p><h2 id="接口隔离原则（ISP）"><a href="#接口隔离原则（ISP）" class="headerlink" title="接口隔离原则（ISP）"></a>接口隔离原则（ISP）</h2><blockquote><p>创建特定于客户端的细粒度接口。不应该强迫客户端依赖于它们不使用的接口。</p></blockquote><p>这个原则是为了克服实现大接口的缺点。让我们看看下面的 IShape 接口：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface IShape &#123;</span><br><span class="line">    drawCircle();</span><br><span class="line">    drawSquare();</span><br><span class="line">    drawRectangle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个接口可以绘制正方形、圆形、矩形。实现 IShape 接口的类 <code>Circle</code>、<code>Square</code> 和 <code>Rectangle</code> 必须定义方法 <code>drawCircle()</code>、<code>drawSquare()</code>、<code>drawRectangle()</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="title">implements</span> <span class="title">IShape</span> </span>&#123;</span><br><span class="line">    drawCircle()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    drawSquare()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    drawRectangle()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="title">implements</span> <span class="title">IShape</span> </span>&#123;</span><br><span class="line">    drawCircle()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    drawSquare()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    drawRectangle()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="title">implements</span> <span class="title">IShape</span> </span>&#123;</span><br><span class="line">    drawCircle()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    drawSquare()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">    drawRectangle()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码很有趣。类 Rectangle 实现了它没有使用的方法 drawCircle 和 drawSquare，同样，Square 实现了 drawCircle 和 drawRectangle，Circle 实现了 drawSquare 和 drawRectangle。</p><p>如果我们向 IShape 接口添加另一个方法，比如 drawTriangle()：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IShape</span> </span>&#123;</span><br><span class="line">    drawCircle();</span><br><span class="line">    drawSquare();</span><br><span class="line">    drawRectangle();</span><br><span class="line">    drawTriangle();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么，这些类就必须实现新方法，否则就会抛出错误。</p><p>我们看到，不可能实现这样一种形状类，它可以画圆，但不能画矩形、正方形或三角形。我们在实现方法时可以只抛出一个错误，表明操作无法执行。</p><p>ISP 反对 IShape 接口的这种设计。客户端（这里是 Rectangle、Circle 和 Square）不应该被迫依赖于它们不需要或不使用的方法。另外，ISP 指出，接口应该只执行一个任务（就像 SRP 原则一样），任何额外的行为都应该抽象到另一个接口中。</p><p>在这里，我们的 IShape 接口执行了应该由其他接口独立处理的操作。为了使 IShape 接口符合 ISP 原则，我们将对不同接口的操作进行隔离：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IShape</span> </span>&#123;</span><br><span class="line">    draw();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ICircle</span> </span>&#123;</span><br><span class="line">    drawCircle();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ISquare</span> </span>&#123;</span><br><span class="line">    drawSquare();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IRectangle</span> </span>&#123;</span><br><span class="line">    drawRectangle();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ITriangle</span> </span>&#123;</span><br><span class="line">    drawTriangle();</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">ICircle</span> </span>&#123;</span><br><span class="line">    drawCircle() &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">ISquare</span> </span>&#123;</span><br><span class="line">    drawSquare() &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">IRectangle</span> </span>&#123;</span><br><span class="line">    drawRectangle() &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">implements</span> <span class="title">ITriangle</span> </span>&#123;</span><br><span class="line">    drawTriangle() &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CustomShape</span> <span class="keyword">implements</span> <span class="title">IShape</span> </span>&#123;</span><br><span class="line">   draw()&#123;</span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ICircle 接口仅处理圆的绘制，IShape 处理任何形状的绘制，ISquare 只处理正方形的绘制，IRectangle 处理矩形的绘制。</p><p>或者，类（Circle、Rectangle、Square、Triangle）必须继承 IShape 接口，并实现自己的绘制行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">implements</span> <span class="title">IShape</span> </span>&#123;</span><br><span class="line">    draw()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">implements</span> <span class="title">IShape</span> </span>&#123;</span><br><span class="line">    draw()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> <span class="keyword">implements</span> <span class="title">IShape</span> </span>&#123;</span><br><span class="line">    draw()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">implements</span> <span class="title">IShape</span> </span>&#123;</span><br><span class="line">    draw()&#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我们可以使用 I- 接口创建具体的形状，如半圆、直角三角形、等边三角形、钝边矩形等。</p><p><br></p><h2 id="依赖倒置原则（DIP）"><a href="#依赖倒置原则（DIP）" class="headerlink" title="依赖倒置原则（DIP）"></a>依赖倒置原则（DIP）</h2><ul><li>依赖应该是抽象的，而不是具体的。</li><li>高级模块不应该依赖于低级模块。两者都应该依赖于抽象。</li><li>抽象不应该依赖于细节。细节应该依赖于抽象。</li></ul><p>在软件开发中，我们的应用程序最终主要是由模块组成。当这种情况出现时，我们必须使用依赖注入来解决。高级组件依赖于低级组件发挥作用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XMLHttpService</span> <span class="keyword">extends</span> <span class="title">XMLHttpRequestService</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</span><br><span class="line">    constructor(<span class="keyword">private</span> xmlhttpService: XMLHttpService) &#123; &#125;</span><br><span class="line">    get(url: string , options: any) &#123;</span><br><span class="line">        <span class="keyword">this</span>.xmlhttpService.request(url,<span class="string">'GET'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    post() &#123;</span><br><span class="line">        <span class="keyword">this</span>.xmlhttpService.request(url,<span class="string">'POST'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，Http 是高级组件，而 HttpService 是低级组件。这种设计违反了 DIP A：高级模块不应该依赖于低级模块。它应该依赖于它的抽象。</p><p>该 Http 类被迫依赖于 XMLHttpService 类。如果我们要修改 Http 连接服务，也许我们想通过 Nodejs 连接到互联网，甚至模拟 http 服务。我们将不得不费力地遍历所有 Http 实例来编辑代码，这违反了 OCP 原则。</p><p>Http 类不应该关心使用的 Http 服务的类型。我们做了一个 Connection 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line">    request(url: string, opts:any);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Connection 接口有一个 request 方法。有了这个接口，我们就可以向 Http 类传递一个 Connection 类型的参数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Http</span> </span>&#123;</span><br><span class="line">    constructor(<span class="keyword">private</span> httpConnection: Connection) &#123; &#125;</span><br><span class="line">    get(url: string , options: any) &#123;</span><br><span class="line">        <span class="keyword">this</span>.httpConnection.request(url,<span class="string">'GET'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    post() &#123;</span><br><span class="line">        <span class="keyword">this</span>.httpConnection.request(url,<span class="string">'POST'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因此，无论传递给 Http 类的 Http 连接服务是什么类型，它都可以轻松地连接到网络，而无需知道网络连接的类型。</p><p>现在，我们重新实现 XMLHttpService 类来实现 Connection 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">XMLHttpService</span> <span class="keyword">implements</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    request(url: string, opts:any) &#123;</span><br><span class="line">        xhr.open();</span><br><span class="line">        xhr.send();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以创建许多 Http 连接类型，并将其传递给 Http 类，而不必担心错误。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NodeHttpService</span> <span class="keyword">implements</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line">    request(url: string, opts:any) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MockHttpService</span> <span class="keyword">implements</span> <span class="title">Connection</span> </span>&#123;</span><br><span class="line">    request(url: string, opts:any) &#123;</span><br><span class="line">        <span class="comment">//...</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以看到，高级模块和低级模块都依赖于抽象。Http 类（高级模块）依赖于 Connection 接口（抽象），而 Http 服务类型（低级模块）也依赖于 Connection 接口（抽象）。</p><p>此外，DIP 原则会强制我们遵循里氏替换原则：Connection 类型 Node-XML-MockHttpService 可以替换它们的父类型连接。</p><p> 依赖倒置原则基于这样一个事实：<strong>相对于细节的多变性，抽象的东西要稳定的多</strong>。以抽象为基础搭建起来的架构比以细节为基础搭建起来的架构要稳定的多。 </p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> solid </tag>
            
            <tag> SOLID </tag>
            
            <tag> S.O.L.I.D </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正确评估项目开发时间</title>
      <link href="/2018/10/19/%E6%AD%A3%E7%A1%AE%E8%AF%84%E4%BC%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%97%B6%E9%97%B4/"/>
      <url>/2018/10/19/%E6%AD%A3%E7%A1%AE%E8%AF%84%E4%BC%B0%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E6%97%B6%E9%97%B4/</url>
      <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常遇到开发时间预估不准，当然大多数是延期，那么延期的项目是因为什么呢一般？</p><p><br></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="部分时间未考虑"><a href="#部分时间未考虑" class="headerlink" title="部分时间未考虑"></a>部分时间未考虑</h3><p>一般情况下是因为我们评估的是直接的开发时间，而且是顺利情况、大家都了解需求，没有任何疑问和阻碍的情况下。实际上，这种非常顺利的场景基本不存在。</p><p><br></p><a id="more"></a><p>那么我们除了正常的开发时间还需要评估几类时间到你的项目时间预估中。</p><ul><li>需求熟悉时间以及代码定位 </li></ul><blockquote><p> 原因 ：尽量减少大量时间找代码，少数时间修代码的场景，也能避免改错位置  时间占比： 开发时间30%~50%  </p></blockquote><ul><li>开发时间：（正常时间）</li></ul><blockquote><p> 原因 ：正常开发时间需要  时间占比：开发时间100%  </p></blockquote><ul><li>前后端联调以及ui矫正 </li></ul><blockquote><p> 原因 ：一般联调是比较占时间，字段不一致、各种场景、联调高效性、来回验证、产品以及ui的校验效果  时间占比：开发时间20%~50%  </p></blockquote><ul><li>等待时间以及与产品确定时间：</li></ul><blockquote><p> 原因 ：某些不确定需求商榷时间，团队成员时间空档不一致，各个职能思考确定  时间占比：开发时间20%~30%  </p></blockquote><ul><li>Buffer 时间</li></ul><blockquote><p> 原因 ：开发完成自测之后，需要对开发阶段暴露的问题进行记录甚至项目中统一优化，避免下个阶段的问题重现，个人时间的缓冲期，做下个阶段的预研以及本阶段可能遗留问题的方案的研究。  时间占比 ：开发时间20%~30%  </p></blockquote><p><br></p><p><strong>综上</strong>：一般情况下，我们最少要留出20%的buffer时间，这是最少前提；有风险以及不确定情况，或者追加团队不熟悉项目，团队互相不熟悉情况下，<strong>建议评估时间为:正常开发时间的150%~200%</strong>，以保证在该阶段能尽快的磨合，找到合理的开发进度。（如果觉得这样的评估时间太长，可以将需求量减少，但是需求细化）。</p><p><br></p><p><strong>最终目的</strong> ：让项目估期具有可参考性；给出团队合理的磨合期以及总结缓冲时间。</p>]]></content>
      
      
        <tags>
            
            <tag> 开发时间 </tag>
            
            <tag> 评估 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript隐式转换</title>
      <link href="/2018/10/18/js%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>/2018/10/18/js%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h2 id="javascript隐式转换规则"><a href="#javascript隐式转换规则" class="headerlink" title="javascript隐式转换规则"></a>javascript隐式转换规则</h2><h3 id="1-ToString，ToNumber，ToBoolean，ToPrimitive"><a href="#1-ToString，ToNumber，ToBoolean，ToPrimitive" class="headerlink" title="1. ToString，ToNumber，ToBoolean，ToPrimitive"></a>1. ToString，ToNumber，ToBoolean，ToPrimitive</h3><p>我们需要先了解一下js数据类型之间转换的基本规则，比如数字、字符串、布尔型、数组、对象之间的相互转换。</p><p><br></p><h4 id="1-1-ToString"><a href="#1-1-ToString" class="headerlink" title="1.1 ToString"></a>1.1 ToString</h4><blockquote><p>这里所说的<code>ToString</code>可不是对象的<code>toString方法</code>，而是<strong>指其他类型的值转换为字符串类型的操作</strong>。</p></blockquote><p>这里我们讨论<code>null</code>、<code>undefined</code>、<code>布尔型</code>、<code>数字</code>、<code>数组</code>、<code>普通对象</code>转换为字符串的规则。</p><ul><li>null：转为<code>&quot;null&quot;</code></li><li>undefined：转为<code>&quot;undefined&quot;</code></li><li>布尔类型：<code>true</code>和<code>false</code>分别被转为<code>&quot;true&quot;</code>和<code>&quot;false&quot;</code></li><li>数字类型：转为数字的字符串形式，如<code>10</code>转为<code>&quot;10&quot;</code>， <code>1e21</code>转为<code>&quot;1e+21&quot;</code></li><li>数组：转为字符串是将所有元素按照”,”连接起来，相当于调用数组的<code>Array.prototype.join()</code>方法<ul><li><code>[1, 2, 3]</code>转为<code>&quot;1,2,3&quot;</code></li><li><strong>空数组<code>[]</code>转为空字符串</strong></li><li>数组中的<code>null</code>或<code>undefined</code>，会被当做空字符串处理</li></ul></li><li>普通对象：转为字符串相当于直接使用<code>Object.prototype.toString()</code>，返回<code>&quot;[object Object]&quot;</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>(<span class="literal">null</span>) <span class="comment">// 'null'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">undefined</span>) <span class="comment">// 'undefined'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="literal">true</span>) <span class="comment">// 'true'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">10</span>) <span class="comment">// '10'</span></span><br><span class="line"><span class="built_in">String</span>(<span class="number">1e21</span>) <span class="comment">// '1e+21'</span></span><br><span class="line"><span class="built_in">String</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// '1,2,3'</span></span><br><span class="line"><span class="built_in">String</span>([]) <span class="comment">// ''</span></span><br><span class="line"><span class="built_in">String</span>([<span class="literal">null</span>]) <span class="comment">// ''</span></span><br><span class="line"><span class="built_in">String</span>([<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">3</span>]) <span class="comment">// '1,,3'</span></span><br><span class="line"><span class="built_in">String</span>(&#123;&#125;) <span class="comment">// '[object Objecr]'</span></span><br></pre></td></tr></table></figure><p>对象的<code>toString</code>方法，满足<code>ToString</code>操作的规则。</p><blockquote><p>注意：上面所说的规则是在默认的情况下，如果修改默认的<code>toString()</code>方法，会导致不同的结果</p></blockquote><p><br></p><a id="more"></a><h4 id="1-2-ToNumber"><a href="#1-2-ToNumber" class="headerlink" title="1.2 ToNumber"></a>1.2 ToNumber</h4><blockquote><p><code>ToNumber</code>指<strong>其他类型转换为数字类型的操作</strong>。</p></blockquote><ul><li>null： 转为<code>0</code></li><li>undefined：转为<code>NaN</code></li><li>字符串：如果是纯数字形式，则转为对应的数字，<strong>空字符转为<code>0</code></strong>, 否则一律按转换失败处理，转为<code>NaN</code></li><li>布尔型：<code>true</code>和<code>false</code>被转为<code>1</code>和<code>0</code></li><li>数组：数组首先会被转为原始类型，也就是<code>ToPrimitive</code>，然后在根据转换后的原始类型按照上面的规则处理，关于<code>ToPrimitive</code>，会在下文中讲到</li><li>对象：同数组的处理</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>(<span class="literal">null</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">undefined</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'10'</span>) <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">'10a'</span>) <span class="comment">// NaN</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="string">''</span>) <span class="comment">// 0 </span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">true</span>) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(<span class="literal">false</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>([]) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="string">'1'</span>]) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">Number</span>(&#123;&#125;) <span class="comment">// NaN</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="1-3-ToBoolean"><a href="#1-3-ToBoolean" class="headerlink" title="1.3 ToBoolean"></a>1.3 ToBoolean</h4><blockquote><p><code>ToBoolean</code>指其他类型转换为布尔类型的操作。</p></blockquote><p>js中的假值只有<code>false</code>、<code>null</code>、<code>undefined</code>、<code>空字符</code>、<code>0</code>和<code>NaN</code>，其它值转为布尔型都为<code>true</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Boolean</span>(<span class="literal">null</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">undefined</span>) <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="string">''</span>) <span class="comment">// flase</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">NaN</span>) <span class="comment">// flase</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="number">0</span>) <span class="comment">// flase</span></span><br><span class="line"><span class="built_in">Boolean</span>([]) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(&#123;&#125;) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Boolean</span>(<span class="literal">Infinity</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="1-4-ToPrimitive"><a href="#1-4-ToPrimitive" class="headerlink" title="1.4 ToPrimitive"></a>1.4 ToPrimitive</h4><blockquote><p><code>ToPrimitive</code>指<strong>对象类型类型（如：对象、数组）转换为原始类型的操作</strong>。</p></blockquote><ul><li>当对象类型需要被转为原始类型时，它会先查找对象的<code>valueOf</code>方法，如果<code>valueOf</code>方法返回原始类型的值，则<code>ToPrimitive</code>的结果就是这个值</li><li>如果<code>valueOf</code>不存在或者<code>valueOf</code>方法返回的不是原始类型的值，就会尝试调用对象的<code>toString</code>方法，也就是会遵循对象的<code>ToString</code>规则，然后使用<code>toString</code>的返回值作为<code>ToPrimitive</code>的结果。</li></ul><p>如果<code>valueOf</code>和<code>toString</code>都没有返回原始类型的值，则会抛出异常。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>([]) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">Number</span>([<span class="string">'10'</span>]) <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1 = &#123;</span><br><span class="line">  valueOf () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  toString () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">101</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Number</span>(obj1) <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123;</span><br><span class="line">  toString () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">102</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Number</span>(obj2) <span class="comment">// 102</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj3 = &#123;</span><br><span class="line">  toString () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Number</span>(obj3) <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>前面说过，对象类型在<code>ToNumber</code>时会先<code>ToPrimitive</code>，再根据转换后的原始类型<code>ToNumber</code></p><ul><li><p><code>Number([])</code>， 空数组会先调用<code>valueOf</code>，但返回的是数组本身，不是原始类型，所以会继续调用<code>toString</code>，得到<code>空字符串</code>，<strong>相当于<code>Number(&#39;&#39;)</code></strong>，所以转换后的结果为<code>&quot;0&quot;</code></p></li><li><p>同理，<code>Number([&#39;10&#39;])</code><strong>相当于<code>Number(&#39;10&#39;)</code></strong>，得到结果<code>10</code></p></li><li><code>obj1</code>的<code>valueOf</code>方法返回原始类型<code>100</code>，所以<code>ToPrimitive</code>的结果为<code>100</code></li><li><code>obj2</code>没有<code>valueOf</code>，但存在<code>toString</code>，并且返回一个原始类型，所以<code>Number(obj2)</code>结果为<code>102</code></li><li><code>obj3</code>的<code>toString</code>方法返回的不是一个原始类型，无法<code>ToPrimitive</code>，所以会抛出错误</li></ul><p><br></p><h3 id="2-宽松相等（-）比较时的隐式转换规则"><a href="#2-宽松相等（-）比较时的隐式转换规则" class="headerlink" title="2. 宽松相等（==）比较时的隐式转换规则"></a>2. 宽松相等（==）比较时的隐式转换规则</h3><p><code>宽松相等（==）</code>和<code>严格相等（===）</code>的区别在于宽松相等会在比较中进行<code>隐式转换</code>。现在我们来看看不同情况下的转换规则。</p><h4 id="2-1-布尔类型和其他类型的相等比较"><a href="#2-1-布尔类型和其他类型的相等比较" class="headerlink" title="2.1 布尔类型和其他类型的相等比较"></a>2.1 布尔类型和其他类型的相等比较</h4><ul><li><strong>只要<code>布尔类型</code>参与比较，该<code>布尔类型</code>的值首先会被转换为<code>数字类型</code></strong></li><li>根据<code>布尔类型</code>的<code>ToNumber</code>规则，<code>true</code>转为<code>1</code>，<code>false</code>转为<code>0</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">false</span> == <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span> == <span class="number">1</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span> == <span class="number">2</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><blockquote><p>之前有的人可能觉得数字<code>2</code>是一个真值，所以<code>true == 2</code>应该为真，现在明白了，布尔类型<code>true</code>参与相等比较会先转为数字<code>1</code>，相当于<code>1 == 2</code>，结果当然是<code>false</code></p></blockquote><p><br></p><p>我们平时在使用<code>if</code>判断时，一般都是这样写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> (x) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里<code>if(x)</code>的<code>x</code>会在这里被转换为布尔类型，所以代码可以正常执行。但是如果写成这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> (x == <span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码不会按照预期执行，因为<code>x == true</code>相当于<code>10 == 1</code></p><p><br></p><h4 id="2-2-数字类型和字符串类型的相等比较"><a href="#2-2-数字类型和字符串类型的相等比较" class="headerlink" title="2.2 数字类型和字符串类型的相等比较"></a>2.2 数字类型和字符串类型的相等比较</h4><ul><li><strong>当<code>数字类型</code>和<code>字符串类型</code>做相等比较时，<code>字符串类型</code>会被转换为<code>数字类型</code></strong></li><li>根据字符串的<code>ToNumber</code>规则，如果是纯数字形式的字符串，则转为对应的数字，空字符转为<code>0</code>, 否则一律按转换失败处理，转为<code>NaN</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> == <span class="string">''</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">1</span> == <span class="string">'1'</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">1e21</span> == <span class="string">'1e21'</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">Infinity</span> == <span class="string">'Infinity'</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">true</span> == <span class="string">'1'</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">'0'</span> <span class="comment">// true</span></span><br><span class="line"><span class="literal">false</span> == <span class="string">''</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面比较的结果和你预期的一致吗？ 根据规则，字符串转为数字，布尔型也转为数字，所以结果就显而易见了。</p><blockquote><p>这里就不讨论<code>NaN</code>了，因为<code>NaN</code>和任何值都不相等，包括它自己。</p></blockquote><p><br></p><h4 id="2-3-对象类型和原始类型的相等比较"><a href="#2-3-对象类型和原始类型的相等比较" class="headerlink" title="2.3 对象类型和原始类型的相等比较"></a>2.3 对象类型和原始类型的相等比较</h4><ul><li>当<code>对象类型</code>和<code>原始类型</code>做相等比较时，<strong><code>对象类型</code>会依照<code>ToPrimitive</code>规则转换为<code>原始类型</code></strong></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'[object Object]'</span> == &#123;&#125; <span class="comment">// true</span></span><br><span class="line"><span class="string">'1,2,3'</span> == [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>看一下文章开始时给出的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>] == <span class="number">2</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>数组<code>[2]</code>是对象类型，所以会进行<code>ToPrimitive</code>操作，也就是先调用<code>valueOf</code>再调用<code>toString</code>，根据数组<code>ToString</code>操作规则，会得到结果<code>&quot;2&quot;</code>， 而字符串<code>&quot;2&quot;</code>再和数字<code>2</code>比较时，会先转为数字类型，所以最后得到的结果为<code>true</code>。</p><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="literal">null</span>] == <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line">[<span class="literal">undefined</span>] == <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line">[] == <span class="number">0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>根据上文中提到的数组<code>ToString</code>操作规则，数组元素为<code>null</code>或<code>undefined</code>时，该元素被当做<code>空字符串</code>处理，而空数组<code>[]</code>也被转为<code>空字符串</code>，所以上述代码相当于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">''</span> == <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">''</span> == <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">''</span> == <span class="number">0</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>空字符串</code>会转换为数字<code>0</code>，所以结果为<code>true</code>。</p><p><br></p><p>试试valueOf方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  valueOf () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">10</span></span><br><span class="line">  &#125;</span><br><span class="line">  toString () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">20</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a == <span class="number">10</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><blockquote><p>对象的<code>ToPrimitive</code>操作会先调用<code>valueOf</code>方法，并且<code>a</code>的<code>valueOf</code>方法返回一个原始类型的值，所以<code>ToPrimitive</code>的操作结果就是<code>valueOf</code>方法的返回值<code>10</code>。</p></blockquote><p><br></p><p>对象每次和原始类型做<code>==</code>比较时，都会进行一次<code>ToPrimitive</code>操作，那我们是不是可以定义一个包含<code>valueOf</code>方法的对象，然后通过某个值的累加来实现？</p><p>试一试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="comment">// 定义一个属性来做累加</span></span><br><span class="line">  i: <span class="number">1</span>,</span><br><span class="line">  valueOf () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.i++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>结果正如你所想的，是正确的。当然，当没有定义<code>valueOf</code>方法时，用<code>toString</code>方法也是可以的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line">  <span class="comment">// 定义一个属性来做累加</span></span><br><span class="line">  i: <span class="number">1</span>,</span><br><span class="line">  toString () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.i++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">a == <span class="number">1</span> &amp;&amp; a == <span class="number">2</span> &amp;&amp; a == <span class="number">3</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="2-4-null、undefined和其他类型的比较"><a href="#2-4-null、undefined和其他类型的比较" class="headerlink" title="2.4 null、undefined和其他类型的比较"></a>2.4 null、undefined和其他类型的比较</h4><ul><li><strong><code>null</code>和<code>undefined</code>宽松相等的结果为true</strong>，这一点大家都知道</li></ul><p>其次，<code>null</code>和<code>undefined</code>都是假值，那么</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">false</span> <span class="comment">// false</span></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">false</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>居然跟我想的不一样？为什么呢？ 首先，<code>false</code>转为<code>0</code>，然后呢？ 没有然后了，<strong><code>ECMAScript规范</code>中规定<code>null</code>和<code>undefined</code>之间互相<code>宽松相等（==）</code>，并且也与其自身相等，但和其他所有的值都不<code>宽松相等（==）</code>。</strong></p><p><br></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>现在这一段代码就明了了许多</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[] == ![] <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[] == <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>] == <span class="number">2</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'0'</span>] == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="string">'0'</span> == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[] == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">null</span>] == <span class="number">0</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> == <span class="number">0</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">null</span>] == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> == <span class="literal">false</span> <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">[<span class="literal">undefined</span>] == <span class="literal">false</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">undefined</span> == <span class="literal">false</span> <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 隐式转换 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通用性与适用性</title>
      <link href="/2018/10/13/%E9%80%9A%E7%94%A8%E6%80%A7%E4%B8%8E%E9%80%82%E7%94%A8%E6%80%A7/"/>
      <url>/2018/10/13/%E9%80%9A%E7%94%A8%E6%80%A7%E4%B8%8E%E9%80%82%E7%94%A8%E6%80%A7/</url>
      <content type="html"><![CDATA[<h2 id="通用性高"><a href="#通用性高" class="headerlink" title="通用性高"></a>通用性高</h2><ul><li><p>优点：满足<strong>多种使用场景</strong></p></li><li><p>缺点：糅合多种使用场景，必然有相应的<strong>代价</strong></p><ul><li>代码逻辑会变得<strong>更加复杂</strong>，甚至难以理解</li><li>复杂的代码，不利于维护</li></ul></li></ul><p><br></p><a id="more"></a><h2 id="适用性高"><a href="#适用性高" class="headerlink" title="适用性高"></a>适用性高</h2><ul><li><p>优点：<strong>只适用特定场景</strong></p></li><li><p>缺点：功能单一</p></li></ul><p><br></p><h2 id="如何满足多种使用场景，又便于维护？"><a href="#如何满足多种使用场景，又便于维护？" class="headerlink" title="如何满足多种使用场景，又便于维护？"></a>如何满足多种使用场景，又便于维护？</h2><ul><li><strong>函数单一职责</strong><ul><li>要么<strong>全职</strong>负责拧螺丝钉</li><li>要么<strong>全职</strong>负责<strong>调度</strong></li></ul></li></ul><p>注：<strong>函数</strong>通过调度，分派任务给拧螺丝钉的<strong>其他函数</strong>。</p>]]></content>
      
      
        <tags>
            
            <tag> 通用性 </tag>
            
            <tag> 适用性 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>scrollTop</title>
      <link href="/2018/10/13/scrollTop/"/>
      <url>/2018/10/13/scrollTop/</url>
      <content type="html"><![CDATA[<h4 id="scrollTop"><a href="#scrollTop" class="headerlink" title="scrollTop"></a>scrollTop</h4><p>元素的scrollTop值是从元素<strong>顶部</strong>到其<strong>最顶部可见内容</strong>的距离的度量（<code>An element&#39;s scrollTop value is a measurement of the distance from the element&#39;s top to its topmost visible content</code>）。</p><p>注：<code>overflow</code>属性值为<code>hidden</code>的元素，改变元素的<code>scrollTop</code>值，可以触发滚动效果</p><p><br></p><a id="more"></a><h4 id="document-compatMode"><a href="#document-compatMode" class="headerlink" title="document.compatMode"></a>document.compatMode</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode = document.compatMode</span><br></pre></td></tr></table></figure><ul><li>如果文档处于“怪异模式”，则该属性值为<code>&quot;BackCompat&quot;</code></li><li>如果文档处于“标准模式”或者“准标准模式(almost standards mode)”，则该属性为<code>&quot;CSS1Compat&quot;</code></li></ul><p>注：还有另外一种渲染模式, <a href="https://developer.mozilla.org/zh-cn/Gecko&#39;s_%22Almost_Standards%22_Mode" target="_blank" rel="noopener">Gecko的”准标准模式”</a>, 该模式和标准规范模式的区别仅为表格单元内的图片布局方式不同. 且该模式的类型字符串仍为: “CSS1Compat”. </p><p><br></p><h4 id="Document-scrollingElement"><a href="#Document-scrollingElement" class="headerlink" title="Document.scrollingElement"></a>Document.scrollingElement</h4><p><strong>scrollingElement</strong> （ <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document" target="_blank" rel="noopener"><code>Document</code></a> 的只读属性）返回滚动文档的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Element" target="_blank" rel="noopener"><code>Element</code></a> 对象的引用。 </p><p>在标准模式（<code>Standards Mode</code>）下, 这是文档的根元素, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/documentElement" target="_blank" rel="noopener"><code>document.documentElement</code></a>.</p><p>当在怪异模式（<code>Quirks Mode</code>）下， <code>scrollingElement</code> 属性返回 HTML <code>body</code> 元素（若不存在返回 null ）。</p><p>注：<code>document.body.scrollTop</code>与<code>document.documentElement.scrollTop</code>同时只会有一个值生效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sTop = <span class="built_in">document</span>.body.scrollTop || <span class="built_in">document</span>.documentElement.scrollTop;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="Window-scrollTo"><a href="#Window-scrollTo" class="headerlink" title="Window.scrollTo"></a>Window.scrollTo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// window.scrollTo(x-coord,y-coord )</span></span><br><span class="line"><span class="built_in">window</span>.scrollTo( <span class="number">0</span>, <span class="number">1000</span> );</span><br><span class="line"></span><br><span class="line"><span class="comment">// window.scrollTo(options)</span></span><br><span class="line"><span class="comment">// 设置滚动行为改为平滑的滚动</span></span><br><span class="line"><span class="built_in">window</span>.scrollTo(&#123; </span><br><span class="line">    top: <span class="number">1000</span>, </span><br><span class="line">    behavior: <span class="string">"smooth"</span> </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><code>x-coord</code> 是文档中的横轴坐标。</li><li><code>y-coord</code> 是文档中的纵轴坐标。</li><li><code>options</code> 是一个包含三个属性的对象:<ul><li><code>top</code> 等同于  <code>y-coord</code></li><li><code>left</code> 等同于  <code>x-coord</code></li><li><code>behavior</code>  类型 String，表示滚动行为。<ul><li>支持参数 smooth(平滑滚动)，instant(瞬间滚动)</li><li>默认值auto，实测效果等同于instant</li></ul></li></ul></li></ul><p><strong>注：window.scrollTo滚动的容器为<code>document.documentElement</code></strong></p><p><br></p><h4 id="window-scrollBy"><a href="#window-scrollBy" class="headerlink" title="window.scrollBy"></a>window.scrollBy</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.scrollBy(x-coord, y-coord);</span><br><span class="line"><span class="built_in">window</span>.scrollBy(options)</span><br></pre></td></tr></table></figure><p>注：<code>window.scrollBy</code>的参数与<code>window.scrollTo</code>一样，但是<code>window.scrollBy</code>中的<code>x-coord</code> 、<code>y-coord</code>、<code>top</code>、<code>left</code> 可以是<strong>负值</strong>。<code>window.scrollBy</code>是<strong>以自身为参考点</strong>，<code>window.scrollTo</code><strong>以浏览器窗口为参考点</strong>。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> scrollTop </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Pointfree编程风格指南</title>
      <link href="/2018/10/11/Pointfree%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/"/>
      <url>/2018/10/11/Pointfree%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97/</url>
      <content type="html"><![CDATA[<h2 id="一、程序的本质"><a href="#一、程序的本质" class="headerlink" title="一、程序的本质"></a>一、程序的本质</h2><p>为了理解 Pointfree，请大家先想一想，什么是程序？</p><p><img src="/2018/10/11/Pointfree编程风格指南/bg2017031202.png" alt="img"></p><p>上图是一个编程任务，左侧是数据输入（input），中间是一系列的运算步骤，对数据进行加工，右侧是最后的数据输出（output）。<strong>一个或多个这样的任务，就组成了程序。</strong></p><p>输入和输出（统称为 I/O）与键盘、屏幕、文件、数据库等相关，这些跟本文无关。<font color="#A52A2A" size="4"><strong>这里的关键是，中间的运算部分不能有 I/O 操作，应该是纯运算，即通过纯粹的数学运算来求值。</strong>否则，就应该拆分出另一个任务。</font></p><h4 id="注：函数单一职责原则：拆分依据（纯粹数学运算）"><a href="#注：函数单一职责原则：拆分依据（纯粹数学运算）" class="headerlink" title="注：函数单一职责原则：拆分依据（纯粹数学运算）"></a>注：函数单一职责原则：拆分依据（纯粹数学运算）</h4><a id="more"></a><p>I/O 操作往往有现成命令，大多数时候，编程主要就是写中间的那部分运算逻辑。现在，主流写法是过程式编程和面向对象编程，但是我觉得，最合适纯运算的是函数式编程。</p><p><br></p><h2 id="二、函数的拆分与合成"><a href="#二、函数的拆分与合成" class="headerlink" title="二、函数的拆分与合成"></a>二、函数的拆分与合成</h2><p>上面那张图中，运算过程可以用一个函数<code>fn</code>表示。</p><p><img src="/2018/10/11/Pointfree编程风格指南/bg2017031203.png" alt="img"></p><p><code>fn</code>的类型如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; fn :: a -&gt; b</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面的式子表示，函数<code>fn</code>的输入是数据<code>a</code>，输出是数据<code>b</code>。</p><p>如果运算比较复杂，通常需要将<code>fn</code>拆分成多个函数。</p><p><img src="/2018/10/11/Pointfree编程风格指南/bg2017031204.png" alt="img"></p><p><code>f1</code>、<code>f2</code>、<code>f3</code>的类型如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; f1 :: a -&gt; m</span><br><span class="line">&gt; f2 :: m -&gt; n</span><br><span class="line">&gt; f3 :: n -&gt; b</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面的式子中，输入的数据还是<code>a</code>，输出的数据还是<code>b</code>，但是多了两个中间值<code>m</code>和<code>n</code>。</p><p>我们可以把整个运算过程，想象成一根水管（pipe），数据从这头进去，那头出来。</p><p><img src="/2018/10/11/Pointfree编程风格指南/bg2017031205.png" alt="img"></p><p>函数的拆分，无非就是将一根水管拆成了三根。</p><p><img src="/2018/10/11/Pointfree编程风格指南/bg2017031206.png" alt="img"></p><p>进去的数据还是<code>a</code>，出来的数据还是<code>b</code>。<code>fn</code>与<code>f1</code>、<code>f2</code>、<code>f3</code>的关系如下。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; fn = R.pipe(f1, f2, f3);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，我用到了 <a href="http://www.ruanyifeng.com/blog/2017/03/ramda.html" target="_blank" rel="noopener">Ramda</a> 函数库的<a href="http://ramdajs.com/docs/#pipe" target="_blank" rel="noopener"><code>pipe</code></a>方法，将三个函数合成为一个。Ramda 是一个非常有用的库，后面的例子都会使用它，如果你还不了解，可以先读一下<a href="http://www.ruanyifeng.com/blog/2017/03/ramda.html" target="_blank" rel="noopener">教程</a>。</p><p><br></p><h2 id="三、Pointfree-的概念"><a href="#三、Pointfree-的概念" class="headerlink" title="三、Pointfree 的概念"></a>三、Pointfree 的概念</h2><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; fn = R.pipe(f1, f2, f3);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>这个公式说明，如果先定义<code>f1</code>、<code>f2</code>、<code>f3</code>，就可以算出<code>fn</code>。整个过程，根本不需要知道<code>a</code>或<code>b</code>。</p><p>也就是说，我们完全可以把数据处理的过程，定义成一种与参数无关的合成运算。不需要用到代表数据的那个参数，只要把一些简单的运算步骤合成在一起即可。</p><h4 id="这就叫做-Pointfree：不使用所要处理的值，只合成运算过程。中文可以译作”无值”风格。"><a href="#这就叫做-Pointfree：不使用所要处理的值，只合成运算过程。中文可以译作”无值”风格。" class="headerlink" title="这就叫做 Pointfree：不使用所要处理的值，只合成运算过程。中文可以译作”无值”风格。"></a><strong>这就叫做 Pointfree：不使用所要处理的值，只合成运算过程。</strong>中文可以译作”无值”风格。</h4><p>请看下面的例子。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> addOne = <span class="function"><span class="params">x</span> =&gt;</span> x + <span class="number">1</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> square = <span class="function"><span class="params">x</span> =&gt;</span> x * x;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面是两个简单函数<code>addOne</code>和<code>square</code>。</p><p>把它们合成一个运算。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> addOneThenSquare = R.pipe(addOne, square);</span><br><span class="line">&gt; </span><br><span class="line">&gt; addOneThenSquare(<span class="number">2</span>) <span class="comment">//  9</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>addOneThenSquare</code>是一个合成函数。定义它的时候，根本不需要提到要处理的值，这就是 Pointfree。</p><p><br></p><h2 id="四、Pointfree-的本质"><a href="#四、Pointfree-的本质" class="headerlink" title="四、Pointfree 的本质"></a>四、Pointfree 的本质</h2><p>Pointfree 的本质就是使用一些通用的函数，组合出各种复杂运算。上层运算不要直接操作数据，而是通过底层函数去处理。这就要求，将一些常用的操作封装成函数。</p><p>比如，读取对象的<code>role</code>属性，不要直接写成<code>obj.role</code>，而是要把这个操作封装成函数。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> prop = <span class="function">(<span class="params">p, obj</span>) =&gt;</span> obj[p];</span><br><span class="line">&gt; <span class="keyword">var</span> propRole = R.curry(prop)(<span class="string">'role'</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>prop</code>函数封装了读取操作。它需要两个参数<code>p</code>（属性名）和<code>obj</code>（对象）。这时，要把数据<code>obj</code>要放在最后一个参数，这是为了方便柯里化。函数<code>propRole</code>则是指定读取<code>role</code>属性，下面是它的用法（查看<a href="http://jsbin.com/nevuje/edit?js,console" target="_blank" rel="noopener">完整代码</a>）。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> isWorker = <span class="function"><span class="params">s</span> =&gt;</span> s === <span class="string">'worker'</span>;</span><br><span class="line">&gt; <span class="keyword">var</span> getWorkers = R.filter(R.pipe(propRole, isWorker));</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="keyword">var</span> data = [</span><br><span class="line">&gt;   &#123;<span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">role</span>: <span class="string">'worker'</span>&#125;,</span><br><span class="line">&gt;   &#123;<span class="attr">name</span>: <span class="string">'李四'</span>, <span class="attr">role</span>: <span class="string">'worker'</span>&#125;,</span><br><span class="line">&gt;   &#123;<span class="attr">name</span>: <span class="string">'王五'</span>, <span class="attr">role</span>: <span class="string">'manager'</span>&#125;,</span><br><span class="line">&gt; ];</span><br><span class="line">&gt; getWorkers(data)</span><br><span class="line">&gt; <span class="comment">// [</span></span><br><span class="line">&gt; <span class="comment">//   &#123;"name": "张三", "role": "worker"&#125;,</span></span><br><span class="line">&gt; <span class="comment">//   &#123;"name": "李四", "role": "worker"&#125;</span></span><br><span class="line">&gt; <span class="comment">// ]</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面代码中，<code>data</code>是传入的值，<code>getWorkers</code>是处理这个值的函数。定义<code>getWorkers</code>的时候，完全没有提到<code>data</code>，这就是 Pointfree。</p><p>简单说，Pointfree 就是运算过程抽象化，处理一个值，但是不提到这个值。这样做有很多好处，它能够让代码更清晰和简练，更符合语义，更容易复用，测试也变得轻而易举。</p><p><br></p><h2 id="五、Pointfree-的示例一"><a href="#五、Pointfree-的示例一" class="headerlink" title="五、Pointfree 的示例一"></a>五、Pointfree 的示例一</h2><p>下面，我们来看一个示例。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> str = <span class="string">'Lorem ipsum dolor sit amet consectetur adipiscing elit'</span>;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>上面是一个字符串，请问其中最长的单词有多少个字符？</p><p>我们先定义一些基本运算。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">// 以空格分割单词</span></span><br><span class="line">&gt; <span class="keyword">var</span> splitBySpace = <span class="function"><span class="params">s</span> =&gt;</span> s.split(<span class="string">' '</span>);</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">// 每个单词的长度</span></span><br><span class="line">&gt; <span class="keyword">var</span> getLength = <span class="function"><span class="params">w</span> =&gt;</span> w.length;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">// 词的数组转换成长度的数组</span></span><br><span class="line">&gt; <span class="keyword">var</span> getLengthArr = <span class="function"><span class="params">arr</span> =&gt;</span> R.map(getLength, arr); </span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">// 返回较大的数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> getBiggerNumber = <span class="function">(<span class="params">a, b</span>) =&gt;</span> a &gt; b ? a : b;</span><br><span class="line">&gt; </span><br><span class="line">&gt; <span class="comment">// 返回最大的一个数字</span></span><br><span class="line">&gt; <span class="keyword">var</span> findBiggestNumber = </span><br><span class="line">&gt;   <span class="function"><span class="params">arr</span> =&gt;</span> R.reduce(getBiggerNumber, <span class="number">0</span>, arr);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>然后，把基本运算合成为一个函数（查看<a href="http://jsbin.com/qusohax/edit?js,console" target="_blank" rel="noopener">完整代码</a>）。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">var</span> getLongestWordLength = R.pipe(</span><br><span class="line">&gt;   splitBySpace,</span><br><span class="line">&gt;   getLengthArr,</span><br><span class="line">&gt;   findBiggestNumber</span><br><span class="line">&gt; );</span><br><span class="line">&gt; </span><br><span class="line">&gt; getLongestWordLength(str) <span class="comment">// 11</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p>可以看到，整个运算由三个步骤构成，每个步骤都有语义化的名称，非常的清晰。这就是 Pointfree 风格的优势。</p><p>Ramda 提供了很多现成的方法，可以直接使用这些方法，省得自己定义一些常用函数（查看<a href="http://jsbin.com/vutoxis/edit?js,console" target="_blank" rel="noopener">完整代码</a>）。</p><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="comment">// 上面代码的另一种写法</span></span><br><span class="line">&gt; <span class="keyword">var</span> getLongestWordLength = R.pipe(</span><br><span class="line">&gt;   R.split(<span class="string">' '</span>),</span><br><span class="line">&gt;   R.map(R.length),</span><br><span class="line">&gt;   R.reduce(R.max, <span class="number">0</span>)</span><br><span class="line">&gt; );</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
        <tags>
            
            <tag> Pointfree </tag>
            
            <tag> 函数式编程 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>柯里化-currying</title>
      <link href="/2018/10/11/%E6%9F%AF%E9%87%8C%E5%8C%96-currying/"/>
      <url>/2018/10/11/%E6%9F%AF%E9%87%8C%E5%8C%96-currying/</url>
      <content type="html"><![CDATA[<h1 id="什么是柯里化？"><a href="#什么是柯里化？" class="headerlink" title="什么是柯里化？"></a>什么是柯里化？</h1><p>在计算机科学中，柯里化<strong>（Currying）</strong>是把接受<strong>多个参数</strong>的函数变换成接受一个<strong>单一参数</strong>（最初函数的第一个参数）的函数，并且返回接受<strong>余下的参数</strong>且返回结果的新函数的技术。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">currying</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> slice = <span class="built_in">Array</span>.prototype.slice,</span><br><span class="line">        __args = slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> __inargs = slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, __args.concat(__inargs));</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：柯里化主要是利用闭包，将<strong>单一参数</strong>封装起来。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">square</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> i * i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">map</span>(<span class="params">handeler, list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> list.map(handeler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用性写法</span></span><br><span class="line">map(square, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">map(square, [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]);</span><br><span class="line">map(square, [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 柯里化写法</span></span><br><span class="line"><span class="comment">// 固定mapSQ的单一参数，降低通用性，提高适用性</span></span><br><span class="line"><span class="keyword">var</span> mapSQ = currying(map, square);  <span class="comment">// square 为单一参数</span></span><br><span class="line">mapSQ([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]);</span><br><span class="line">mapSQ([<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]);</span><br><span class="line">mapSQ([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用设计与专门设计相比，功能更多，但效率却更低。</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h1 id="柯里化的用途"><a href="#柯里化的用途" class="headerlink" title="柯里化的用途"></a>柯里化的用途</h1><ol><li><p><strong>降低通用性，提高适用性</strong></p></li><li><p><strong>延迟执行</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> add = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="keyword">this</span>,</span><br><span class="line">        _args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">            <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, c; c = _args[i++];) &#123;</span><br><span class="line">                sum += c;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">Array</span>.prototype.push.apply(_args, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">arguments</span>.callee;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(); <span class="comment">//10</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
        <tags>
            
            <tag> 柯里化 </tag>
            
            <tag> currying </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>减少if-else和switch</title>
      <link href="/2018/10/10/%E5%87%8F%E5%B0%91if-else%E5%92%8Cswitch/"/>
      <url>/2018/10/10/%E5%87%8F%E5%B0%91if-else%E5%92%8Cswitch/</url>
      <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5bb9e3085188255c352d7326" target="_blank" rel="noopener">原文</a><br></p><h2 id="1-使用-Array-includes-来处理多重条件"><a href="#1-使用-Array-includes-来处理多重条件" class="headerlink" title="1. 使用 Array.includes 来处理多重条件"></a>1. 使用 Array.includes 来处理多重条件</h2><p>举个栗子 🌰：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 条件语句</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (fruit == <span class="string">'apple'</span> || fruit == <span class="string">'strawberry'</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看，这么写似乎没什么大问题。然而，如果我们想要匹配更多的红色水果呢，比方说『樱桃』和『蔓越莓』？我们是不是得用更多的 <code>||</code> 来扩展这条语句？</p><p>我们可以使用 <code>Array.includes</code><a href="https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FArray%2Fincludes" target="_blank" rel="noopener">(Array.includes)</a> 重写以上条件句。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 把条件提取到数组中</span></span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line">  <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们把<code>红色的水果</code>（条件）都提取到一个数组中，这使得我们的代码看起来更加整洁。</p><p><br></p><a id="more"></a><h2 id="2-少写嵌套，尽早返回"><a href="#2-少写嵌套，尽早返回" class="headerlink" title="2. 少写嵌套，尽早返回"></a>2. 少写嵌套，尽早返回</h2><p>让我们为之前的例子添加两个条件：</p><ul><li>如果没有提供水果，抛出错误。</li><li>如果该水果的数量大于 10，将其打印出来。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line">  <span class="comment">// 条件 1：fruit 必须有值</span></span><br><span class="line">  <span class="keyword">if</span> (fruit) &#123;</span><br><span class="line">    <span class="comment">// 条件 2：必须为红色</span></span><br><span class="line">    <span class="keyword">if</span> (redFruits.includes(fruit)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line">      <span class="comment">// 条件 3：必须是大量存在</span></span><br><span class="line">      <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'big quantity'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No fruit!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// 报错：No fruits</span></span><br><span class="line">test(<span class="string">'apple'</span>); <span class="comment">// 打印：red</span></span><br><span class="line">test(<span class="string">'apple'</span>, <span class="number">20</span>); <span class="comment">// 打印：red，big quantity</span></span><br></pre></td></tr></table></figure><p> 遵循的一个总的规则是<strong>当发现无效条件时尽早返回</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/_ 当发现无效条件时尽早返回 _/</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">fruit, quantity</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> redFruits = [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>, <span class="string">'cherry'</span>, <span class="string">'cranberries'</span>];</span><br><span class="line">  <span class="keyword">if</span> (!fruit) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'No fruit!'</span>); <span class="comment">// 条件 1：尽早抛出错误</span></span><br><span class="line">  <span class="keyword">if</span> (!redFruits.includes(fruit)) <span class="keyword">return</span>; <span class="comment">// 条件 2：当 fruit 不是红色的时候，直接返回</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'red'</span>);</span><br><span class="line">  <span class="comment">// 条件 3：必须是大量存在</span></span><br><span class="line">  <span class="keyword">if</span> (quantity &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'big quantity'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h2 id="3-相较于-switch，Map-Object-也许是更好的选择"><a href="#3-相较于-switch，Map-Object-也许是更好的选择" class="headerlink" title="3. 相较于 switch，Map / Object 也许是更好的选择"></a>3. 相较于 switch，Map / Object 也许是更好的选择</h2><p>让我们看下面的例子，我们想要根据颜色打印出各种水果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 使用 switch case 来找到对应颜色的水果</span></span><br><span class="line">  <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'red'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'yellow'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>];</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'purple'</span>:</span><br><span class="line">      <span class="keyword">return</span> [<span class="string">'grape'</span>, <span class="string">'plum'</span>];</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试结果</span></span><br><span class="line">test(<span class="literal">null</span>); <span class="comment">// []</span></span><br><span class="line">test(<span class="string">'yellow'</span>); <span class="comment">// ['banana', 'pineapple']</span></span><br></pre></td></tr></table></figure><p> 上面的代码看上去并没有错，但是它看上去很冗长。同样的结果可以通过对象字面量来实现，语法也更加简洁：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用对象字面量来找到对应颜色的水果</span></span><br><span class="line">  <span class="keyword">const</span> fruitColor = &#123;</span><br><span class="line">    red: [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>],</span><br><span class="line">    yellow: [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>],</span><br><span class="line">    purple: [<span class="string">'grape'</span>, <span class="string">'plum'</span>]</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruitColor[color] || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 或者，你也可以使用 <a href="https://link.juejin.im?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FJavaScript%2FReference%2FGlobal_Objects%2FMap" target="_blank" rel="noopener">Map</a> 来实现同样的效果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Map 来找到对应颜色的水果</span></span><br><span class="line">  <span class="keyword">const</span> fruitColor = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    .set(<span class="string">'red'</span>, [<span class="string">'apple'</span>, <span class="string">'strawberry'</span>])</span><br><span class="line">    .set(<span class="string">'yellow'</span>, [<span class="string">'banana'</span>, <span class="string">'pineapple'</span>])</span><br><span class="line">    .set(<span class="string">'purple'</span>, [<span class="string">'grape'</span>, <span class="string">'plum'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> fruitColor.get(color) || [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> if-else </tag>
            
            <tag> switch </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>微信问题专题</title>
      <link href="/2018/10/10/%E5%BE%AE%E4%BF%A1%E9%97%AE%E9%A2%98%E4%B8%93%E9%A2%98/"/>
      <url>/2018/10/10/%E5%BE%AE%E4%BF%A1%E9%97%AE%E9%A2%98%E4%B8%93%E9%A2%98/</url>
      <content type="html"><![CDATA[<h4 id="一、微信转发分享"><a href="#一、微信转发分享" class="headerlink" title="一、微信转发分享"></a>一、微信转发分享</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">朋友圈    from=timeline&amp;isappinstalled=0</span><br><span class="line"></span><br><span class="line">微信群    from=groupmessage&amp;isappinstalled=0</span><br><span class="line"></span><br><span class="line">好友分享  from=singlemessage&amp;isappinstalled=0</span><br></pre></td></tr></table></figure><p>现象：根据不同途径的转发分享，微信浏览器会<strong>偷偷添加</strong>以上参数。</p><p>坑点：对于配置了<strong>JSSDK</strong>使用权限的网页，会导致二次分享，权限认证失败。</p><p><br></p><a id="more"></a><h4 id="二、微信临时链接与永久链接"><a href="#二、微信临时链接与永久链接" class="headerlink" title="二、微信临时链接与永久链接"></a>二、微信临时链接与永久链接</h4><p>搜狗微信搜索出来的文章链接均为微信的<strong>临时链接，</strong>通过客户端查看的文章链接均为<strong>永久链接</strong> </p><h5 id="1、临时链接"><a href="#1、临时链接" class="headerlink" title="1、临时链接"></a>1、临时链接</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">临时链接：https://mp.weixin.qq.com/s?src=11&amp;timestamp=1532856601&amp;ver=1028&amp;signature=eJN640RjdfsNhOXpOBZF9blBd4fbsYzDp9va9p8yhHGwDSc1*UPlviVRt*o2do10V-WJ-lxf8eD5FYWEC8ZMfNhyu1iTwYw9Qel1BqVhNlF8cKAxXIorsK-Bu2BcplG2&amp;new=1</span><br></pre></td></tr></table></figure><p>特点为：</p><ul><li>浏览有效期自生成起<code>6个小时</code>，超出时间直接使用浏览器访问将会显示<strong>‘链接已过期’</strong>，可以通过微信客户端访问(此时将自动转变为微信永久链接的短连接形式)</li><li>链接有效期自生成起约<code>50天</code>，超出该期限的链接将无法在客户端中打开，将显示<strong>‘系统错误’。</strong>这就是微信临时链接在微信客户端查看显示系统错误的原因。</li><li>临时链接直接在浏览器中浏览不显示阅读数以及点赞数，页面中仅包含<code>biz</code>，<code>mid</code>，<code>idx</code>，不包含<code>sn</code>参数（稍后解释）</li></ul><p>快速辨识方法：链接中含有<code>timestamp</code>、<code>signature</code>字段。</p><p><br></p><h5 id="2、永久链接"><a href="#2、永久链接" class="headerlink" title="2、永久链接"></a>2、<strong>永久链接</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">微信永久链接-短连接：https://mp.weixin.qq.com/s/AEfszx7uOxVgfVlmUls7UA</span><br><span class="line">微信永久链接-原始长链接：https://mp.weixin.qq.com/s?__biz=MzI2MjAwODM0Ng==&amp;mid=2660080082&amp;idx=1&amp;sn=f84457b8ee976e373eacc698d2b276db&amp;scene=0</span><br></pre></td></tr></table></figure><p>特点为：</p><ul><li>永久有效，可直接在浏览器中访问不会有时效限制</li><li>直接访问仍然没有阅读数以及点赞数，页面中包含<code>biz</code>，<code>mid</code>，<code>idx</code>和<code>sn</code>参数</li><li>短连接可以通过拼接参数的方式还原成长链接，长链接需借助客户端转为短连接</li></ul><p><br></p><h5 id="3、参数解释"><a href="#3、参数解释" class="headerlink" title="3、参数解释"></a>3、参数解释</h5><p><strong>biz</strong>：微信公众号的唯一标识ID</p><p><strong>mid：</strong>每次推送生成一个mid，同一次推送下mid相同</p><p><strong>idx：</strong>当次推送的位置（1为首篇，2为第二篇…）</p><p><strong>sn：</strong>每一篇文章的唯一ID，也是区别临时链接和永久链接的关键参数</p><p>临时链接的页面上是没有<code>sn</code>的，只能通过临时链接中本身的<code>signature</code>参数来找到该篇文章，但是该参数如前所述是有有效期的。<strong>因此抓取到的微信临时链接只能保证6小时内可以打开，超出时效后只能复制到微信中查看。</strong> </p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>promise、async和await的执行顺序</title>
      <link href="/2018/10/10/promise%E3%80%81async%E5%92%8Cawait%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
      <url>/2018/10/10/promise%E3%80%81async%E5%92%8Cawait%E7%9A%84%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/</url>
      <content type="html"><![CDATA[<h2 id="1、题目和答案"><a href="#1、题目和答案" class="headerlink" title="1、题目和答案"></a>1、题目和答案</h2><p>一道题题目：下面这段promise、async和await代码，请问控制台打印的顺序？ </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 start'</span>)</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async1 end'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'async2'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script start'</span>)</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'setTimeout'</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>)</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'script end'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p>上述，在<code>Chrome 66</code>和<code>node v10</code>中，正确输出是： </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">async2</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">promise2</span><br><span class="line">async1 end</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure><p><br></p><h2 id="2、知识点"><a href="#2、知识点" class="headerlink" title="2、知识点"></a>2、知识点</h2><p>显然，这考察的是js中的事件循环和回调队列。注意以下几点：</p><ul><li><code>Promise</code>优先于<code>setTimeout</code>宏任务。所以，<code>setTimeout</code>回调会在最后执行。</li><li><code>Promise</code>一旦被定义，就会立即执行。</li><li><code>Promise</code>的<code>reject</code>和<code>resolve</code>是异步执行的回调。所以，<code>resolve()</code>会被放到回调队列中，在主函数执行完和<code>setTimeout</code>前调用。</li><li><code>await</code>执行完后，会让出线程。<code>async</code>标记的函数会返回一个<code>Promise</code>对象</li></ul><p><br></p><h2 id="3、-难点"><a href="#3、-难点" class="headerlink" title="3、 难点"></a>3、 难点</h2><blockquote><p>最令人困惑的，就是<code>async1 end</code>在<code>promise2</code>之后输出</p></blockquote><p><br></p><h2 id="4、-猜测await表达式"><a href="#4、-猜测await表达式" class="headerlink" title="4、 猜测await表达式"></a>4、 猜测await表达式</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[return_value] = <span class="keyword">await</span> expression;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// expression 可能被转换成如下代码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_expression</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="built_in">eval</span>(expression);</span><br><span class="line">    <span class="keyword">let</span> isPromise = result.toString().includes(<span class="string">'Promise'</span>);</span><br><span class="line">    <span class="keyword">if</span> (isPromise) &#123;</span><br><span class="line">        result.then(<span class="built_in">Promise</span>.resolve, <span class="built_in">Promise</span>.reject);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 无果</span></span><br><span class="line"><span class="comment">// 这段时间太忙了（2018/10/10），逃~~~</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> promise </tag>
            
            <tag> async </tag>
            
            <tag> await </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>不支持伪元素的标签</title>
      <link href="/2018/09/21/%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%A0%87%E7%AD%BE/"/>
      <url>/2018/09/21/%E4%B8%8D%E6%94%AF%E6%8C%81%E4%BC%AA%E5%85%83%E7%B4%A0%E7%9A%84%E6%A0%87%E7%AD%BE/</url>
      <content type="html"><![CDATA[<h4 id="单标签不支持-伪元素"><a href="#单标签不支持-伪元素" class="headerlink" title="单标签不支持 伪元素"></a>单标签不支持 伪元素</h4><p>　　<strong><code>img</code>、 <code>input</code>、<code>select</code> 这种单标签不支持<code>::before</code>、 <code>::after</code></strong> </p><p>注：不能包含其他元素，所以不能通过伪元素插入内容 </p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 伪元素 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>命名规则</title>
      <link href="/2018/09/07/%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/"/>
      <url>/2018/09/07/%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<h2 id="项目命名"><a href="#项目命名" class="headerlink" title="项目命名"></a>项目命名</h2><p>全部采用小写方式， 以<code>下划线（_）</code>或<code>破折号（-）</code>连接单词</p><p>注：库文件可用<code>逗点（.）</code>，用于体现版本或从属关系</p><p>例：<code>my_project_name</code></p><p><br></p><a id="more"></a><h2 id="目录命名"><a href="#目录命名" class="headerlink" title="目录命名"></a>目录命名</h2><p>参照项目命名规则；</p><p>有复数结构时，要采用复数命名法。</p><p>例：<code>scripts</code>, <code>styles</code>, <code>images</code>, <code>data_models</code></p><p><br></p><h2 id="JS文件命名"><a href="#JS文件命名" class="headerlink" title="JS文件命名"></a>JS文件命名</h2><p>参照项目命名规则。</p><p>例：<code>account_model.js</code></p><p><br></p><h2 id="CSS-SCSS文件命名"><a href="#CSS-SCSS文件命名" class="headerlink" title="CSS, SCSS文件命名"></a>CSS, SCSS文件命名</h2><p>参照项目命名规则。</p><p>例：<code>retina_sprites.scss</code></p><p><br></p><h2 id="HTML文件命名"><a href="#HTML文件命名" class="headerlink" title="HTML文件命名"></a>HTML文件命名</h2><p>参照项目命名规则。</p><p>例：<code>error_report.html</code></p><p><br></p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><ul><li>vue.min.js</li><li>vue-router.js</li><li>jquery.form.js</li><li>jquery-1.4.2.min.js</li></ul><p><br></p><h1 id="变量命名"><a href="#变量命名" class="headerlink" title="变量命名"></a>变量命名</h1><h5 id="强制-变量-使用-Camel命名法。"><a href="#强制-变量-使用-Camel命名法。" class="headerlink" title="[强制] 变量 使用 Camel命名法。"></a>[强制] <code>变量</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingModules = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。"><a href="#强制-常量-使用-全部字母大写，单词间下划线分隔-的命名方式。" class="headerlink" title="[强制] 常量 使用 全部字母大写，单词间下划线分隔 的命名方式。"></a>[强制] <code>常量</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> HTML_ENTITY = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="强制-函数-使用-Camel命名法。"><a href="#强制-函数-使用-Camel命名法。" class="headerlink" title="[强制] 函数 使用 Camel命名法。"></a>[强制] <code>函数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stringFormat</span>(<span class="params">source</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="强制-函数的-参数-使用-Camel命名法。"><a href="#强制-函数的-参数-使用-Camel命名法。" class="headerlink" title="[强制] 函数的 参数 使用 Camel命名法。"></a>[强制] 函数的 <code>参数</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hear</span>(<span class="params">theBells</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="强制-类-使用-Pascal命名法。"><a href="#强制-类-使用-Pascal命名法。" class="headerlink" title="[强制] 类 使用 Pascal命名法。"></a>[强制] <code>类</code> 使用 <code>Pascal命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="强制-类的-方法-属性-使用-Camel命名法。"><a href="#强制-类的-方法-属性-使用-Camel命名法。" class="headerlink" title="[强制] 类的 方法 / 属性 使用 Camel命名法。"></a>[强制] 类的 <code>方法</code> / <code>属性</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TextNode</span>(<span class="params">value, engine</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.engine = engine;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TextNode.prototype.clone = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。"><a href="#强制-枚举变量-使用-Pascal命名法，枚举的属性-使用-全部字母大写，单词间下划线分隔-的命名方式。" class="headerlink" title="[强制] 枚举变量 使用 Pascal命名法，枚举的属性 使用 全部字母大写，单词间下划线分隔 的命名方式。"></a>[强制] <code>枚举变量</code> 使用 <code>Pascal命名法</code>，<code>枚举的属性</code> 使用 <code>全部字母大写，单词间下划线分隔</code> 的命名方式。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TargetState = &#123;</span><br><span class="line">    READING: <span class="number">1</span>,</span><br><span class="line">    READED: <span class="number">2</span>,</span><br><span class="line">    APPLIED: <span class="number">3</span>,</span><br><span class="line">    READY: <span class="number">4</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="强制-命名空间-使用-Camel命名法。"><a href="#强制-命名空间-使用-Camel命名法。" class="headerlink" title="[强制] 命名空间 使用 Camel命名法。"></a>[强制] <code>命名空间</code> 使用 <code>Camel命名法</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">equipments.heavyWeapons = &#123;&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。"><a href="#强制-由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。" class="headerlink" title="[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。"></a>[强制] 由多个单词组成的缩写词，在命名中，根据当前命名法和出现的位置，所有字母的大小写与首字母的大小写保持一致。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">XMLParser</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertHTML</span>(<span class="params">element, html</span>) </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpRequest = <span class="keyword">new</span> HTTPRequest();</span><br></pre></td></tr></table></figure><p><br></p><h5 id="强制-类名-使用-名词。"><a href="#强制-类名-使用-名词。" class="headerlink" title="[强制] 类名 使用 名词。"></a>[强制] <code>类名</code> 使用 <code>名词</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Engine</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="建议-函数名-使用-动宾短语。"><a href="#建议-函数名-使用-动宾短语。" class="headerlink" title="[建议] 函数名 使用 动宾短语。"></a>[建议] <code>函数名</code> 使用 <code>动宾短语</code>。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getStyle</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="建议-boolean-类型的变量使用-is-或-has-开头。"><a href="#建议-boolean-类型的变量使用-is-或-has-开头。" class="headerlink" title="[建议] boolean 类型的变量使用 is 或 has 开头。"></a>[建议] <code>boolean</code> 类型的变量使用 <code>is</code> 或 <code>has</code> 开头。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> isReady = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> hasMoreCommands = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="建议-Promise对象-用-动宾短语的进行时-表达。"><a href="#建议-Promise对象-用-动宾短语的进行时-表达。" class="headerlink" title="[建议] Promise对象 用 动宾短语的进行时 表达。"></a>[建议] <code>Promise对象</code> 用 <code>动宾短语的进行时</code> 表达。</h5><p>示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> loadingData = ajax.get(<span class="string">'url'</span>);</span><br><span class="line">loadingData.then(callback);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 命名规则 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css规范</title>
      <link href="/2018/08/24/css%E8%A7%84%E8%8C%83/"/>
      <url>/2018/08/24/css%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h1 id="数值与单位"><a href="#数值与单位" class="headerlink" title="数值与单位"></a><strong>数值与单位</strong></h1><ul><li>当属性值或颜色参数为 0 – 1 之间的数时，<strong>省略小数点前的 0</strong> 。</li><li>当长度<strong>值为 0 时省略单位</strong>。</li><li>十六进制的颜色属性值<strong>使用小写和尽量简写</strong>。</li></ul><a id="more"></a><p><br></p><h1 id="样式属性顺序"><a href="#样式属性顺序" class="headerlink" title="样式属性顺序"></a><strong>样式属性顺序</strong></h1><p>单个样式规则下的属性在书写时，应按功能进行分组，并以 <code>Positioning Model</code> &gt; <code>Box Model</code> &gt; <code>Typographic</code> &gt; <code>Visual</code> 的顺序书写，提高代码的可读性。</p><ul><li><strong>如果包含 content 属性，应放在最前面；</strong></li><li><code>Positioning Model</code> <strong>布局方式、位置</strong>，相关属性包括：<code>position / top / right / bottom / left / z-index / display / float / …</code></li><li><code>Box Model</code> 盒模型，相关属性包括：<code>width / height / padding / margin / border / overflow / …</code></li><li><code>Typographic</code> 文本排版，相关属性包括：<code>font / line-height / text-align / word-wrap / …</code></li><li><code>Visual</code>视觉外观，相关属性包括：<code>color / background / list-style / transform / animation / transition / …</code></li></ul><p>注：</p><p><code>Positioning</code> 处在第一位，因为他可以使一个元素脱离正常文本流，并且覆盖盒模型相关的样式。</p><p>盒模型紧跟其后，因为他决定了一个组件的大小和位置。</p><p>其他属性只在组件内部起作用或者不会对前面两种情况的结果产生影响，所以他们排在后面。</p><p><br></p><h1 id="尽量避免使用标签名"><a href="#尽量避免使用标签名" class="headerlink" title="尽量避免使用标签名"></a><strong>尽量避免使用标签名</strong></h1><p>假设我们有如下 html 结构：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"g-content"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"g-content-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在给最里层的标签命名书写样式的时候，我们有两种选择：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.g-content</span> &#123;</span><br><span class="line">    .g-content-list &#123;</span><br><span class="line">        <span class="selector-tag">li</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>或者是</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.g-content</span> &#123;</span><br><span class="line">    .g-content-list &#123;</span><br><span class="line">        <span class="selector-class">.item</span> &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是，编译之后生成了下面这两个，到底使用哪个好呢？</p><ul><li><code>.g-content .g-content-list li { }</code></li><li><code>.g-content .g-content-list .item { }</code></li></ul><p>基于 CSS 选择器的解析规则（从右向左），建议使用上述第二种<code>.g-content .g-content-list .item { }</code> ，<strong>避免使用通用标签名作为选择器的一环可以提高 CSS 匹配性能</strong>。</p><blockquote><p>浏览器的排版引擎解析 CSS 是基于从右向左（right-to-left）的规则，这么做是为了使样式规则能够更快地与渲染树上的节点匹配。</p></blockquote><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>DNS为什么用TCP和UDP</title>
      <link href="/2018/08/09/DNS%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8TCP%E5%92%8CUDP/"/>
      <url>/2018/08/09/DNS%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8TCP%E5%92%8CUDP/</url>
      <content type="html"><![CDATA[<h1 id="TCP与UDP的区别"><a href="#TCP与UDP的区别" class="headerlink" title="TCP与UDP的区别"></a>TCP与UDP的区别</h1><ul><li>TCP是一种面向连接的协议，提供可靠的数据传输，一般服务质量要求比较高的情况，使用这个协议。</li><li>UDP—用户数据报协议，是一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务。  </li></ul><p><br></p><a id="more"></a><p>TCP协议中包含了专门的传递保证机制，当数据接收方收到发送方传来的信息时，会自动向发送方发出确认消息；发送方只有在接收到该确认消息之后才继续传送其它信息，否则将一直等待直到收到确认信息为止。 </p><p><br></p><p>UDP协议并<strong>不提供数据传送的保证机制</strong>。如果在从发送方到接收方的传递过程中出现数据报的丢失，协议本身并不能做出任何检测或提示。<strong>不同于TCP，UDP并不能确保数据的发送和接收顺序。</strong></p><p><br></p><p>UDP是一种不可靠的网络协议，但有些情况下UDP协议可能会变得非常有用。因为<strong>UDP具有TCP所望尘莫及的速度优势</strong>。虽然TCP协议中植入了各种安全保障功能，但是在实际执行的过程中会占用大量的系统开销，无疑使速度受到严重的影响。反观UDP由于排除了信息可靠传递机制，将安全和排序等功能移交给上层应用来完成，极大降低了执行时间，使速度得到了保证。</p><p><br></p><h2 id="DNS分别在什么情况下使用UDP和TCP"><a href="#DNS分别在什么情况下使用UDP和TCP" class="headerlink" title="DNS分别在什么情况下使用UDP和TCP"></a>DNS分别在什么情况下使用UDP和TCP</h2><p>DNS的规范规定了2种类型的DNS服务器，一个叫<strong>主DNS服务器</strong>，一个叫<strong>辅助DNS服务器</strong>。</p><p>在一个区中主DNS服务器从自己本机的数据文件中读取该区的DNS数据信息，而辅助DNS服务器则从区的主DNS服务器中读取该区的DNS数据信息。当一个辅助DNS服务器启动时，它需要与主DNS服务器通信，并加载数据信息，这就叫做<strong>区传送</strong>（zone transfer）。  </p><p><strong>注：DNS在进行区域传输的时候使用TCP协议，其它时候则使用UDP协议；</strong> </p><p><br></p><h1 id="区域传送时使用TCP"><a href="#区域传送时使用TCP" class="headerlink" title="区域传送时使用TCP"></a>区域传送时使用TCP</h1><ol><li>辅域名服务器会定时（一般时3小时）向主域名服务器进行查询以便了解数据是否有变动。如有变动，则会执行一次区域传送，进行数据同步。区域传送将使用TCP而不是UDP，因为数据同步传送的数据量比一个请求和应答的数据量要多得多。</li><li>TCP是一种可靠的连接，保证了数据的准确性。</li></ol><p><br></p><h1 id="为什么既使用TCP又使用UDP"><a href="#为什么既使用TCP又使用UDP" class="headerlink" title="为什么既使用TCP又使用UDP"></a>为什么既使用TCP又使用UDP</h1><p>​     UDP报文的最大长度为512字节，而TCP则允许报文长度超过512字节。<strong>当DNS查询超过512字节时，协议的TC标志出现删除标志，这时则使用TCP发送</strong>。通常传统的UDP报文一般不会大于512字节。  </p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> tcp </tag>
            
            <tag> udp </tag>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>dns解析</title>
      <link href="/2018/08/08/dns%E8%A7%A3%E6%9E%90/"/>
      <url>/2018/08/08/dns%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<h4 id="用户在浏览器的地址栏中敲入了网站的网址-，会发生哪些事情呢？"><a href="#用户在浏览器的地址栏中敲入了网站的网址-，会发生哪些事情呢？" class="headerlink" title="用户在浏览器的地址栏中敲入了网站的网址 ，会发生哪些事情呢？"></a>用户在浏览器的地址栏中敲入了网站的网址 ，会发生哪些事情呢？</h4><ul><li>用户在浏览器的地址栏中敲入了网站的网址</li><li>浏览器查找域名的IP地址</li><li>找到ip地址后，浏览器给web服务器发送一个HTTP请求</li><li>服务器“处理”请求</li><li>服务器发回一个HTML响应</li><li>浏览器开始显示HTML</li></ul><p><br></p><a id="more"></a><h4 id="DNS域名解析过程"><a href="#DNS域名解析过程" class="headerlink" title="DNS域名解析过程"></a>DNS域名解析过程</h4><p>　　当用户在浏览器中输入<strong>ke.qq.com</strong>并按下回车键后：</p><ul><li><p>第1步，查找<strong>浏览器缓存</strong>。</p><blockquote><p>浏览器会检查缓存中有没有这个域名对应的解析过的IP地址，如果缓存中有，这个解析过程就将结束。浏览器缓存域名也是有限制的，不仅浏览器缓存大小有限制，而且缓存的时间也有限制，通常情况下为几分钟到几小时不等。这个缓存时间太长和太短都不好，如果缓存时间太长，一旦域名被解析到的IP有变化，会导致被客户端缓存的域名无法解析到变化后的IP地址，以致该域名不能正常解析，这段时间内有可能会有一部分用户无法访问网站。如果时间设置太短，会导致用户每次访问网站都要重新解析一次域名。</p></blockquote></li></ul><ul><li><p>第2步，查找<strong>系统缓存</strong>。</p><blockquote><p>如果用户的浏览器缓存中没有，浏览器会查找操作系统缓存中是否有这个域名对应的DNS解析结果。其实操作系统也会有一个域名解析的过程，在Windows中可以通过<code>C:\Windows\System32\drivers\etc\hosts</code>文件来设置，你可以将任何域名解析到任何能够访问的IP地址。如果你在这里指定了一个域名对应的IP地址，那么浏览器会首先使用这个IP地址。例如，我们在测试时可以将一个域名解析到一台测试服务器上，这样不用修改任何代码就能测试到单独服务器上的代码的业务逻辑是否正确。正是因为有这种本地DNS解析的规程，所以黑客就有可能通过修改你的域名解析来把特定的域名解析到它指定的IP地址上，导致这些域名被劫持。</p></blockquote></li></ul><p>  第3步，查找<strong>路由器缓存</strong>。</p><blockquote><p>如果系统缓存中也找不到，那么查询请求就会发向路由器，它一般会有自己的DNS缓存。</p></blockquote><p>  第4步，查找<strong>ISP DNS 缓存</strong>。</p><blockquote><p>运气实在不好，就只能查询ISP DNS 缓存服务器了。在我们的网络配置中都会有”DNS服务器地址”这一项，操作系统会把这个域名发送给这里设置的DNS，也就是本地区的域名服务器，通常是提供给你接入互联网的应用提供商。这个专门的域名解析服务器性能都会很好，它们一般都会缓存域名解析结果，当然缓存时间是受域名的失效时间控制的，一般缓存空间不是影响域名失效的主要因素。大约80%的域名解析都到这里就已经完成了，所以ISP DNS主要承担了域名的解析工作。</p></blockquote><ul><li><p>第5步，<strong>递归搜索</strong>。</p><blockquote><p>　最无奈的情况发生了, 在前面都没有办法命中的DNS缓存的情况下：</p><ol><li>本地 DNS服务器即将该请求转发到互联网上的<strong>根域</strong>。</li><li>根域将所要查询域名中的<strong>顶级域</strong>的服务器IP地址返回到本地DNS。</li><li>本地DNS根据返回的IP地址，再向顶级域发送请求。</li><li>com域服务器再将域名中的<strong>二级域</strong>的IP地址返回给本地DNS。</li><li>本地DNS再向二级域发送请求进行查询。</li><li>之后不断重复这样的过程，直到本地DNS服务器得到最终的查询结果，并返回到主机。</li></ol><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  . -&gt; com. -&gt; qq.com. -&gt; ke.qq.com.</span></span><br><span class="line"><span class="quote">&gt;  // .对应的是根域名服务器，默认情况下所有的网址的最后一位都是.</span></span><br><span class="line"><span class="quote">&gt;  // 为了方便用户，通常都会省略，浏览器在请求DNS的时候会自动加上</span></span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><p><strong>注：DNS同时占用UDP和TCP端口53</strong> </p><p><br></p></li></ul><h3 id="DNS有关的网络性能优化"><a href="#DNS有关的网络性能优化" class="headerlink" title="DNS有关的网络性能优化"></a>DNS有关的网络性能优化</h3><p>1、减少DNS查找，避免重定向。浏览器DNS缓存 、计算机DNS缓存、 服务器DNS缓存、使用Keep-Alive特性 来减少DNS查找。考虑影响DNS缓存的因素：</p><ul><li>服务器可以设置TTL值表示DNS记录的存活时间。本机DNS缓存将根据这个TTL值判断DNS记录什么时候被抛弃，这个TTL值一般都不会设置很大，主要是考虑到快速故障转移的问题。</li><li>浏览器DNS缓存也有自己的过期时间，这个时间是独立于本机DNS缓存的，相对也比较短，例如chrome只有1分钟左右。</li><li>浏览器DNS记录的数量也有限制，如果短时间内访问了大量不同域名的网站，则较早的DNS记录将被抛弃，必须重新查找。不过即使浏览器丢弃了DNS记录，操作系统的DNS缓存也有很大机率保留着该记录，这样可以避免通过网络查询而带来的延迟。</li></ul><p>2、DNS的预解析</p><ul><li>可以通过用meta信息来告知浏览器, 我这页面要做DNS预解析</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"x-dns-prefetch-control"</span> <span class="attr">content</span>=<span class="string">"on"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>可以使用link标签来强制对DNS做预解析:</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"dns-prefetch"</span> <span class="attr">href</span>=<span class="string">"http://ke.qq.com/"</span> /&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当客户端的DNS缓存为空时，DNS查找的数量与Web页面中唯一主机名的数量相等。减少唯一主机名的数量就可以减少DNS查找的数量。较少的域名来减少DNS查找（2-4个主机）。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> dns </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>cursor样式</title>
      <link href="/2018/08/03/cursor%E6%A0%B7%E5%BC%8F/"/>
      <url>/2018/08/03/cursor%E6%A0%B7%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="cursor样式"><a href="#cursor样式" class="headerlink" title="cursor样式"></a>cursor样式</h1><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>url</td><td>需使用的自定义光标的 URL。注释：请在此列表的末端始终定义一种普通的光标，以防没有由 URL 定义的可用光标。</td></tr><tr><td>default</td><td>默认光标（通常是一个箭头）</td></tr><tr><td>auto</td><td>默认。浏览器设置的光标。</td></tr><tr><td>crosshair</td><td>光标呈现为十字线。</td></tr><tr><td>pointer</td><td>光标呈现为指示链接的指针（一只手）</td></tr><tr><td>move</td><td>此光标指示某对象可被移动。</td></tr><tr><td>e-resize</td><td>此光标指示矩形框的边缘可被向右（东）移动。</td></tr><tr><td>ne-resize</td><td>此光标指示矩形框的边缘可被向上及向右移动（北/东）。</td></tr><tr><td>nw-resize</td><td>此光标指示矩形框的边缘可被向上及向左移动（北/西）。</td></tr><tr><td>n-resize</td><td>此光标指示矩形框的边缘可被向上（北）移动。</td></tr><tr><td>se-resize</td><td>此光标指示矩形框的边缘可被向下及向右移动（南/东）。</td></tr><tr><td>sw-resize</td><td>此光标指示矩形框的边缘可被向下及向左移动（南/西）。</td></tr><tr><td>s-resize</td><td>此光标指示矩形框的边缘可被向下移动（南）。</td></tr><tr><td>w-resize</td><td>此光标指示矩形框的边缘可被向左移动（西）。</td></tr><tr><td>text</td><td>此光标指示文本。</td></tr><tr><td>vertical-text</td><td>用于标示可编辑的垂直文本的光标。通常是大写字母 I 旋转90度的形状。</td></tr><tr><td>wait</td><td>此光标指示程序正忙（通常是一只表或沙漏）。</td></tr><tr><td>progress</td><td>带有沙漏标记的箭头光标。用于标示一个进程正在后台运行。</td></tr><tr><td>help</td><td>此光标指示可用的帮助（通常是一个问号或一个气球）。</td></tr><tr><td>all-scroll</td><td>有上下左右四个箭头，中间有一个圆点的光标。用于标示页面可以向上下左右任何方向滚动。</td></tr><tr><td>col-resize</td><td>有左右两个箭头，中间由竖线分隔开的光标。用于标示项目或标题栏可以被水平改变尺寸。</td></tr><tr><td>row-resize</td><td>有上下两个箭头，中间由横线分隔开的光标。用于标示项目或标题栏可以被垂直改变尺寸。</td></tr><tr><td>no-drop</td><td>带有一个被斜线贯穿的圆圈的手形光标。用于标示被拖起的对象不允许在光标的当前位置被放下。</td></tr><tr><td>not-allowed</td><td>禁止标记(一个被斜线贯穿的圆圈)光标。用于标示请求的操作不允许被执行。</td></tr></tbody></table><a id="more"></a><p><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>cursor<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-tag">table</span>,<span class="selector-tag">th</span>,<span class="selector-tag">td</span> &#123;<span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">thead</span> <span class="selector-tag">tr</span> &#123;<span class="attribute">background-color</span>: <span class="number">#eee</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-of-type(even)</span> &#123;<span class="attribute">background-color</span>: <span class="number">#f8f8f8</span>;&#125; </span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">cellpadding</span>=<span class="string">"6"</span> <span class="attr">cellspacing</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>值<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">th</span>&gt;</span>描述<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: url;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>url<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>需使用的自定义光标的 URL。注释：请在此列表的末端始终定义一种普通的光标，以防没有由 URL 定义的可用光标。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: default;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>default<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>默认光标（通常是一个箭头）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: auto;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>auto<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>默认。浏览器设置的光标。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: crosshair;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>crosshair<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>光标呈现为十字线。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: pointer;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>pointer<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>光标呈现为指示链接的指针（一只手）<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: move;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>move<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示某对象可被移动。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: e-resize;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>e-resize<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示矩形框的边缘可被向右（东）移动。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: ne-resize;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>ne-resize<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示矩形框的边缘可被向上及向右移动（北/东）。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: nw-resize;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>nw-resize<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示矩形框的边缘可被向上及向左移动（北/西）。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: n-resize;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>n-resize<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示矩形框的边缘可被向上（北）移动。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: se-resize;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>se-resize<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示矩形框的边缘可被向下及向右移动（南/东）。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: sw-resize;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>sw-resize<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示矩形框的边缘可被向下及向左移动（南/西）。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: s-resize;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>s-resize<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示矩形框的边缘可被向下移动（南）。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: w-resize;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>w-resize<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示矩形框的边缘可被向左移动（西）。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: text;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>text<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示文本。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: vertical-text;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>vertical-text<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>用于标示可编辑的垂直文本的光标。通常是大写字母 I 旋转90度的形状。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: wait;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>wait<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示程序正忙（通常是一只表或沙漏）。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: progress;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>progress<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>带有沙漏标记的箭头光标。用于标示一个进程正在后台运行。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: help;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>help<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>此光标指示可用的帮助（通常是一个问号或一个气球）。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: all-scroll;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>all-scroll<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>有上下左右四个箭头，中间有一个圆点的光标。用于标示页面可以向上下左右任何方向滚动。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: col-resize;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>col-resize<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>有左右两个箭头，中间由竖线分隔开的光标。用于标示项目或标题栏可以被水平改变尺寸。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: row-resize;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>row-resize<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>有上下两个箭头，中间由横线分隔开的光标。用于标示项目或标题栏可以被垂直改变尺寸。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: no-drop;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>no-drop<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>带有一个被斜线贯穿的圆圈的手形光标。用于标示被拖起的对象不允许在光标的当前位置被放下。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span> <span class="attr">style</span>=<span class="string">"cursor: not-allowed;"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>not-allowed<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">td</span>&gt;</span>禁止标记(一个被斜线贯穿的圆圈)光标。用于标示请求的操作不允许被执行。<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> cursor </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>层叠上下文-块格式化上下文-包含块</title>
      <link href="/2018/07/31/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87-%E5%9D%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87-%E5%8C%85%E5%90%AB%E5%9D%97/"/>
      <url>/2018/07/31/%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87-%E5%9D%97%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87-%E5%8C%85%E5%90%AB%E5%9D%97/</url>
      <content type="html"><![CDATA[<h1 id="层叠上下文-the-stacking-context"><a href="#层叠上下文-the-stacking-context" class="headerlink" title="层叠上下文(the stacking context)"></a><a href="https://chenoge.github.io/2018/01/21/css-%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/" target="_blank" rel="noopener">层叠上下文(the stacking context)</a></h1><p>职责：处理元素层叠的顺序问题</p><h4 id="父层叠上下文：拥有层叠上下文的最近祖父元素，与position无关。"><a href="#父层叠上下文：拥有层叠上下文的最近祖父元素，与position无关。" class="headerlink" title="父层叠上下文：拥有层叠上下文的最近祖父元素，与position无关。"></a>父层叠上下文：拥有层叠上下文的最近祖父元素，与position无关。</h4><p><br></p><h1 id="块格式化上下文-formatting-context"><a href="#块格式化上下文-formatting-context" class="headerlink" title="块格式化上下文(formatting-context)"></a><a href="https://chenoge.github.io/2018/03/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87-BFC-IFC/" target="_blank" rel="noopener">块格式化上下文(formatting-context)</a></h1><p>职责：决定了其<strong>子元素将如何定位</strong>，以及<strong>和其他元素的关系</strong></p><p><br></p><h1 id="包含块-containing-block"><a href="#包含块-containing-block" class="headerlink" title="包含块(containing-block)"></a><a href="https://chenoge.github.io/2018/06/12/css-position/" target="_blank" rel="noopener">包含块(containing-block)</a></h1><p>职责：由定位(<code>position</code>)决定元素<strong>大小与位置</strong></p><p><strong>注：</strong></p><ul><li><strong>事件的捕获与冒泡仍是根据祖先元素传递，与包含块无关，与position无关</strong></li></ul><p><br></p><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">        background-color: tan;</span></span><br><span class="line"><span class="undefined">        height: 100vh;</span></span><br><span class="line"><span class="undefined">        margin: 0;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.outer</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">background-color</span>: <span class="selector-id">#8980fc</span>;</span></span><br><span class="line"><span class="undefined">        height: 400px;</span></span><br><span class="line"><span class="undefined">        margin: 30px;</span></span><br><span class="line"><span class="undefined">        width: 50%;</span></span><br><span class="line"><span class="undefined">        z-index: 1;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.inner-fixed</span> &#123;</span></span><br><span class="line"><span class="undefined">        position: fixed;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="undefined">        top: 27%;</span></span><br><span class="line"><span class="undefined">        width: 100%;</span></span><br><span class="line"><span class="undefined">        background-color: palevioletred;</span></span><br><span class="line"><span class="undefined">        padding: 30px;</span></span><br><span class="line"><span class="undefined">        box-sizing: border-box;</span></span><br><span class="line"><span class="undefined">        z-index: -1;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 检测事件流与position属性的关系</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">innerClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> e = <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'inner'</span>,e.stopPropagation);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">outerClick</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> e = <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'outer'</span>,e);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"outerClick(this)"</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"innerClick(this)"</span> <span class="attr">class</span>=<span class="string">"inner-fixed"</span>&gt;</span>这是一个绝对定位了的标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2018/07/31/层叠上下文-块格式化上下文-包含块/snipaste20180731_172346.png" alt=""></p><ul><li><code>.inner-fixed</code>元素的<strong>父层叠上下文</strong>是<code>.outer</code>，<strong>父包含块</strong>是<code>body</code>。</li><li><code>.inner-fixed</code>元素的大小和位置由它的<strong>父包含块</strong>（<code>body</code>）决定。</li><li><code>.inner-fixed</code>元素在<code>body</code>中的层叠顺序跟随<strong>父层叠上下文</strong>（<code>.outer</code>）。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#8980fc</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="comment">/*z-index: 1;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/07/31/层叠上下文-块格式化上下文-包含块/snipaste20180731_172735.png" alt=""></p><ul><li><code>.inner-fixed</code>元素的<strong>父层叠上下文</strong>是<code>body</code>，<strong>父包含块</strong>是<code>body</code></li><li><code>.outer</code>元素此时为一个没有层叠上下文的普通元素</li><li><code>.inner-fixed</code>元素和<code>.outer</code>元素出于同一个层叠上下文（<code>body</code>）中</li><li><code>.inner-fixed</code>元素的层叠顺序要比<code>.outer</code>元素的小</li></ul>]]></content>
      
      
        <tags>
            
            <tag> stacking-context </tag>
            
            <tag> containing-block </tag>
            
            <tag> formatting-context </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>offsetParent-offsetTop-offsetHeight</title>
      <link href="/2018/07/25/offsetParent-offsetTop-offsetHeight/"/>
      <url>/2018/07/25/offsetParent-offsetTop-offsetHeight/</url>
      <content type="html"><![CDATA[<h1 id="offsetParent"><a href="#offsetParent" class="headerlink" title="offsetParent"></a>offsetParent</h1><p><strong>HTMLElement.offsetParent</strong> 是一个只读属性，返回一个指向<strong>最近的</strong>包含该元素的<strong>定位元素</strong>。</p><ul><li>如果没有定位的元素，则 <code>offsetParent</code> 为最近的 <code>table</code>, <code>table cell</code> 或根元素（标准模式下为 <code>html</code>；quirks 模式下为 <code>body</code>）</li><li>当元素的 <code>style.display</code> 设置为 “none” 时，<code>offsetParent</code> 返回 <code>null</code>。</li><li><code>offsetParent</code> 很有用，因为 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetTop" target="_blank" rel="noopener"><code>offsetTop</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetLeft" target="_blank" rel="noopener"><code>offsetLeft</code></a> 都是相对于其内边距边界的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">parentObj = element.offsetParent;</span><br><span class="line"><span class="comment">//parentObj 是一个对象引用，当前元素相对于该对象偏移（offset）。</span></span><br></pre></td></tr></table></figure><h4 id="兼容性"><a href="#兼容性" class="headerlink" title="兼容性:"></a>兼容性:</h4><ul><li>在 Webkit 中，如果元素为隐藏的（该元素或其祖先元素的 <code>style.display</code> 为 “none”），或者该元素的 <code>style.position</code> 被设为 “fixed”，则该属性返回 <code>null</code>。</li><li>在 IE 9 中，如果该元素的 <code>style.position</code> 被设置为 “fixed”，则该属性返回 <code>null</code>。（<code>display:none</code> 无影响。）</li></ul><a id="more"></a><p><br></p><h1 id="offsetTop"><a href="#offsetTop" class="headerlink" title="offsetTop"></a>offsetTop</h1><p><strong>HTMLElement.offsetTop</strong> 为只读属性，它返回当前元素相对于其 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLElement/offsetParent" target="_blank" rel="noopener"><code>offsetParent</code></a> 元素的顶部的距离。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span><br><span class="line"><span class="keyword">var</span> topPos = d.offsetTop;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (topPos &gt; <span class="number">10</span>) &#123;</span><br><span class="line">  <span class="comment">// div1 距离它的 offsetParent 元素的顶部的距离大于 10 px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="offsetHeight"><a href="#offsetHeight" class="headerlink" title="offsetHeight"></a>offsetHeight</h1><p><strong>HTMLElement.offsetHeight</strong> 是一个只读属性，它返回该元素的像素高度，高度包含该元素的垂直内边距和边框，且是<strong>一个整数</strong>。</p><ul><li>通常，元素的offsetHeight是一种元素CSS高度的衡量标准，<strong>包括元素的边框、内边距和元素的水平滚动条</strong>（如果存在且渲染的话），不包含:before或:after等伪类元素的高度。</li><li>对于文档的body对象，它包括代替元素的<strong>CSS高度线性总含量高</strong>。浮动元素的向下延伸内容高度是被忽略的。</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个属性值会被四舍五入为整数值，如果你需要一个浮点数值，请用 element.getBoundingClientRect().</span><br></pre></td></tr></table></figure><p><br></p><h1 id="clientHeight"><a href="#clientHeight" class="headerlink" title="clientHeight"></a>clientHeight</h1><p>这个属性是只读属性，对于没有定义CSS或者内联布局盒子的元素为0，否则，它是元素内部的高度(单位像素)，包含内边距，但<strong>不包括水平滚动条、边框和外边距</strong>。 </p><p><br></p><h1 id="clientTop"><a href="#clientTop" class="headerlink" title="clientTop"></a>clientTop</h1><p>一个元素上边框的宽度（以像素表示），当没有指定边框厚底时，一般为0。 </p><p><br></p><p><img src="/2018/07/25/offsetParent-offsetTop-offsetHeight/746339-20150915163721539-1441659862.jpg" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> offsetParent </tag>
            
            <tag> offsetTop </tag>
            
            <tag> offsetHeight </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>点击取词-Selection和Range</title>
      <link href="/2018/07/21/%E7%82%B9%E5%87%BB%E5%8F%96%E8%AF%8D-Selection%E5%92%8CRange/"/>
      <url>/2018/07/21/%E7%82%B9%E5%87%BB%E5%8F%96%E8%AF%8D-Selection%E5%92%8CRange/</url>
      <content type="html"><![CDATA[<p><a href="http://www.fedlab.tech/archives/2420.html" target="_blank" rel="noopener">原文</a></p><p><br></p><h1 id="一、对象"><a href="#一、对象" class="headerlink" title="一、对象"></a>一、对象</h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Selection" target="_blank" rel="noopener">Selection</a> 对象表示用户<strong>选择的文本范围</strong>或<strong>插入符号的当前位置</strong>。它代表页面中的文本选区，可能横跨多个元素。文本选区由用户拖拽鼠标经过文字而产生。要获取用于检查或修改的Selection对象，请调用 <code>window.getSelection()</code>。</p><p><br></p><p><a href="https://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html" target="_blank" rel="noopener">Range</a>，表示<strong>包含节点</strong>和<strong>部分文本节点的文档片段</strong>，可以通过 Selection 对象的 getRangeAt 方法取得，也可以通过 Document 对象的 createRange 方法创建。</p><p><br></p><a id="more"></a><h1 id="二、应用"><a href="#二、应用" class="headerlink" title="二、应用"></a>二、应用</h1><p>在我们日常前端开发中，可能会遇到这样的场景，实现<strong>划词翻译</strong>、<strong>点击取词翻译</strong>、<strong>编辑器中的复制、粘贴等需求</strong>，下面我们通过对这两种需求场景来介绍 Selection 对象 和 Range 对象在实际项目中的应用。</p><p><br></p><h4 id="实现点击取词并翻译"><a href="#实现点击取词并翻译" class="headerlink" title="实现点击取词并翻译"></a>实现点击取词并翻译</h4><p>实现基本思路，点击时获取 Selection 对象，并创建选取，通过 Range 的 setStart 和 setEnd 方法扩大文档片段的范围，以空格或者特殊符号为临界状态，终止循环。</p><h5 id="1-方法一实现相关逻辑如下："><a href="#1-方法一实现相关逻辑如下：" class="headerlink" title="1.方法一实现相关逻辑如下："></a>1.方法一实现相关逻辑如下：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.getSelection) &#123;</span><br><span class="line">    <span class="keyword">let</span> selection, range, node, start, end, text, rect, isFun, isText;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回调函数判断</span></span><br><span class="line">    isFun = !!<span class="built_in">window</span>.JSInvoker &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">window</span>.JSInvoker.toggleWordTooltip === <span class="string">'function'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 文本判断</span></span><br><span class="line">    isText = <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> text &amp;&amp; <span class="regexp">/^[a-zA-Z]+$/</span>.test(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果 tooltip 存在，需要先关闭</span></span><br><span class="line">    isFun &amp;&amp; <span class="built_in">window</span>.JSInvoker.toggleWordTooltip(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    selection = <span class="built_in">window</span>.getSelection();</span><br><span class="line">    range = selection.getRangeAt(<span class="number">0</span>);</span><br><span class="line">    node = selection.anchorNode;</span><br><span class="line">    start = range.startOffset;</span><br><span class="line">    end = range.endOffset;</span><br><span class="line">    text = range.toString();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &lt;&lt;&lt;向前判断非空格边界</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="regexp">/^\s+/</span>.test(text)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (start === <span class="number">0</span>) &#123;</span><br><span class="line">            range.setStart(node, start);</span><br><span class="line">            text = range.toString();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            start -= <span class="number">1</span>;</span><br><span class="line">            range.setStart(node, start);</span><br><span class="line">            text = range.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isText(text)) &#123;</span><br><span class="line">            start += <span class="number">1</span>;</span><br><span class="line">            range.setStart(node, start);</span><br><span class="line">            text = range.toString();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// &gt;&gt;&gt;向后判断非空格边界</span></span><br><span class="line">    <span class="keyword">while</span> (!<span class="regexp">/\s+$/</span>.test(text)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (end === node.length) &#123;</span><br><span class="line">            range.setEnd(node, end);</span><br><span class="line">            text = range.toString();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            end += <span class="number">1</span>;</span><br><span class="line">            range.setEnd(node, end);</span><br><span class="line">            text = range.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!isText(text)) &#123;</span><br><span class="line">            end -= <span class="number">1</span>;</span><br><span class="line">            range.setEnd(node, end);</span><br><span class="line">            text = range.toString();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取当前文档片段位置信息</span></span><br><span class="line">    rect = range.getBoundingClientRect();</span><br><span class="line">    text = text.trim();</span><br><span class="line">    <span class="keyword">if</span> (isText(text) &amp;&amp; isFun &amp;&amp; rect) &#123;</span><br><span class="line">        <span class="comment">// 打开 tooltip</span></span><br><span class="line">        <span class="built_in">window</span>.JSInvoker.toggleWordTooltip(<span class="literal">true</span>, text, rect.x, rect.y, rect.width, rect.height);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        alert(<span class="string">`Text: <span class="subst">$&#123;text&#125;</span>, isFun: <span class="subst">$&#123;isFun&#125;</span>, Rect: <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(rect)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h5 id="2-方法二实现方案比较简单，实现代码逻辑如下："><a href="#2-方法二实现方案比较简单，实现代码逻辑如下：" class="headerlink" title="2.方法二实现方案比较简单，实现代码逻辑如下："></a>2.方法二实现方案比较简单，实现代码逻辑如下：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">window</span>.getSelection) &#123;</span><br><span class="line">    <span class="keyword">let</span> selection, start, end, word;</span><br><span class="line"></span><br><span class="line">    selection = <span class="built_in">window</span>.getSelection();</span><br><span class="line"></span><br><span class="line">    selection.modify(<span class="string">'extend'</span>, <span class="string">'backward'</span>, <span class="string">'word'</span>);</span><br><span class="line">    start = selection.toString();</span><br><span class="line"></span><br><span class="line">    selection.modify(<span class="string">'extend'</span>, <span class="string">'forward'</span>, <span class="string">'word'</span>);</span><br><span class="line">    end = selection.toString();</span><br><span class="line"></span><br><span class="line">    selection.modify(<span class="string">'move'</span>, <span class="string">'forward'</span>, <span class="string">'character'</span>);</span><br><span class="line"></span><br><span class="line">    word = start + end;</span><br><span class="line">    alert(<span class="string">`Selected Text: <span class="subst">$&#123;word&#125;</span>`</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="实现划词翻译"><a href="#实现划词翻译" class="headerlink" title="实现划词翻译"></a>实现划词翻译</h4><h5 id="1-获取划词文本"><a href="#1-获取划词文本" class="headerlink" title="1.获取划词文本"></a>1.获取划词文本</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSelected</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> selection;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.getSelection) &#123;</span><br><span class="line">        <span class="comment">// webkit and mozilla and IE9 +</span></span><br><span class="line">        selection = <span class="built_in">window</span>.getSelection();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.getSelection) &#123;</span><br><span class="line">        <span class="comment">// 同上</span></span><br><span class="line">        selection = <span class="built_in">document</span>.getSelection();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.selection) &#123;</span><br><span class="line">        <span class="comment">// IE</span></span><br><span class="line">        selection = <span class="built_in">document</span>.selection.createRange().text;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> selection.toString().trim();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-清空选中文本"><a href="#2-清空选中文本" class="headerlink" title="2.清空选中文本"></a>2.清空选中文本</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeSelection</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.getSelection) &#123;</span><br><span class="line">        <span class="built_in">window</span>.getSelection().removeAllRanges();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.getSelection &amp;&amp; <span class="built_in">document</span>.getSelection.empty) &#123;</span><br><span class="line">        <span class="built_in">document</span>.getSelection().empty();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.selection &amp;&amp; <span class="built_in">document</span>.selection.empty) &#123;</span><br><span class="line">        <span class="built_in">document</span>.selection.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Selection </tag>
            
            <tag> Range </tag>
            
            <tag> 点击取词 </tag>
            
            <tag> 划词 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>contenteditable与user-modify</title>
      <link href="/2018/07/21/contenteditable/"/>
      <url>/2018/07/21/contenteditable/</url>
      <content type="html"><![CDATA[<h1 id="元素可编辑"><a href="#元素可编辑" class="headerlink" title="元素可编辑"></a>元素可编辑</h1><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-webkit-user-modify: read-only | read-write | read-write-plaintext-only</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">contenteditable=""</span><br><span class="line">contenteditable="events"</span><br><span class="line">contenteditable="caret"</span><br><span class="line">contenteditable="plaintext-only"</span><br><span class="line">contenteditable="true"</span><br><span class="line">contenteditable="false"</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>read-only：只读</li><li>read-write ：读写，可以<strong>输入富文本</strong></li><li>read-write-plaintext-only：读写，只能<strong>输入纯文本</strong> </li></ul><h4 id="注：contenteditable中默认可以输入-粘贴-富文本"><a href="#注：contenteditable中默认可以输入-粘贴-富文本" class="headerlink" title="注：contenteditable中默认可以输入(粘贴)富文本"></a>注：contenteditable中默认可以输入(粘贴)富文本</h4><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> contenteditable </tag>
            
            <tag> user-modify </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>版权格式</title>
      <link href="/2018/07/08/%E7%89%88%E6%9D%83%E6%A0%BC%E5%BC%8F/"/>
      <url>/2018/07/08/%E7%89%88%E6%9D%83%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>从法律角度看，版权保护是随着作品的问世的即刻就得到版权的保护的，并不是必须要声明。但是作为惯例，这一小行文字还是有很好加强意识，提醒浏览者，所观看的内容是受到版权保护的。</p><p>正确的格式应该是：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Copyright [dates] by [author/owner]</span><br></pre></td></tr></table></figure><p>© 通常可以代替Copyright。 All Rights Reserved 在某些国家曾经是必须的，但是现在在大多数国家，都不是法律上必须有的字样。</p><p><br></p><a id="more"></a><p><strong>参见下面几个正确的格式：</strong></p><ul><li>©1995-2004 Macromedia, Inc. All rights reserved.</li><li>©2004 Microsoft Corporation. All rights reserved.</li><li><strong>Copyright © 2004 Adobe Systems Incorporated. All rights reserved.</strong></li><li>©1995-2004 Eric A. and Kathryn S. Meyer. All Rights Reserved.</li></ul>]]></content>
      
      
        <tags>
            
            <tag> 版权格式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>编写一个简单的JavaScript模板引擎</title>
      <link href="/2018/07/05/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84JavaScript%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/"/>
      <url>/2018/07/05/%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84JavaScript%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<h4 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &lt;% for ( var i = 0; i &lt; users.length; i++ ) &#123; %&gt;</span><br><span class="line">         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=users[i].url%&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=users[i].name%</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a><h4 id="JS数据"><a href="#JS数据" class="headerlink" title="JS数据"></a>JS数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"google"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"https://www.google.com"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"baidu"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"https://www.baidu.com/"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"凯斯"</span>,</span><br><span class="line">        <span class="string">"url"</span>: <span class="string">"https://www.zhihu.com/people/Uncle-Keith/activities"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> html = tmpl(<span class="string">'list'</span>, arr)</span><br><span class="line"><span class="built_in">console</span>.log(html)</span><br></pre></td></tr></table></figure><p><br></p><h4 id="打印出的结果为"><a href="#打印出的结果为" class="headerlink" title="打印出的结果为"></a>打印出的结果为</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">"<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.google.com"</span>&gt;</span>google<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.baidu.com/"</span>&gt;</span>baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.zhihu.com/people/Uncle-Keith/activities"</span>&gt;</span>凯斯<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>"</span><br></pre></td></tr></table></figure><p><br></p><p>从以上的代码可以看出，将结构和数据传入tmpl函数中，就能实现拼接。而tmpl正是我们所说的模板引擎（函数）。接下来我们就来实现一下这个函数。  </p><p><br> </p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>模板引擎函数实现的本质，就是将<strong>模板中HTML结构与JavaScript语句、变量分离，通过Function构造函数 + apply(call)动态生成具有数据性的HTML代码。</strong>而如果要考虑性能的话，可以将模板进行<strong>缓存处理。</strong> </p><p>实现一个模板引擎函数，大致有以下步骤：</p><ol><li><strong>模板获取</strong></li><li><strong>模板中HTML结构与JavaScript语句、变量分离</strong></li><li><strong>Function + apply(call)动态生成JavaScript代码</strong></li><li><strong>模板缓存</strong></li></ol><p><br></p><ol><li><strong>模板获取</strong></li></ol><p>一般情况下，我们会把模板写在script标签中，赋予id属性，标识模板的唯一性；赋予type=’text/html’属性，标识其MIME类型为HTML，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/html"</span> <span class="attr">id</span>=<span class="string">"template"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="javascript">&lt;% <span class="keyword">if</span> (obj.show) &#123; %&gt;</span></span><br><span class="line"><span class="javascript">&lt;% <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; obj.users.length; i++) &#123; %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%= obj.users[i].url %&gt;"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">obj.users</span>[<span class="attr">i</span>]<span class="attr">.name</span> %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span></span><br><span class="line"><span class="javascript">&lt;% &#125; <span class="keyword">else</span> &#123; %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>不展示列表<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在模板引擎中，选用<code>&lt;% xxx %&gt;</code>标识JavaScript语句，主要用于流程控制，无输出；<code>&lt;%= xxx %&gt;</code>标识JavaScript变量，用于将数据输出到模板；其余部分都为HTML代码。（与EJS类似）。 </p><p><strong>注：如果是模板放在一个独立的文件，可以先获取<code>&lt;script&gt;</code>的<code>scr</code>属性，再<code>ajax</code>请求获取文件内容。</strong></p><p><br></p><ol start="2"><li><strong>HTML结构与JavaScript语句、变量分离</strong> </li></ol><p>主要是通过replace函数替换实现的。说明一下主要流程：</p><ol><li><strong>创建数组arr，再拼接字符串arr.push(‘</strong></li><li><strong>遇到换行回车，替换为空字符串</strong></li><li><strong>遇到&lt;%时，替换为’);</strong></li><li><strong>遇到&gt;%时，替换为arr.push(‘</strong></li><li><strong>遇到&lt;%= xxx %&gt;，结合第3、4步，替换为’); arr.push(xxx); arr.push(‘</strong></li><li><p><strong>最后拼接字符串’); return p.join(‘’);</strong></p><p>在代码中，需要将第5步写在2、3步骤前面，因为有<strong>更高的优先级</strong>，否则会匹配出错。如下 </p></li></ol><p><br> </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tpl = <span class="string">''</span></span><br><span class="line"><span class="keyword">const</span> tmpl = <span class="function">(<span class="params">str, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果是模板字符串，会包含非单词部分（&lt;, &gt;, %,  等）；如果是id，则需要通过getElementById获取</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/[\s\W]/g</span>.test(str)) &#123;</span><br><span class="line">      tpl = <span class="built_in">document</span>.getElementById(str).innerHTML</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tpl = str</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">`let p = []; p.push('`</span></span><br><span class="line">  result += <span class="string">`<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">tpl.replace(<span class="regexp">/[\r\n\t]/g</span>, <span class="string">''</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">   .replace(<span class="regexp">/&lt;%=\s*([^%&gt;]+?)\s*%&gt;/g</span>, <span class="string">"'); p.push($1); p.push('"</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">   .replace(<span class="regexp">/&lt;%/g</span>, <span class="string">"');"</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">   .replace(<span class="regexp">/%&gt;/g</span>, <span class="string">"p.push('"</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">  &#125;</span>`</span></span><br><span class="line">  result += <span class="string">"'); return p.join('');"</span>      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果模板中出现了单引号，那会影响整个函数的执行的。还有一点，如果出现了 \ 反引号，会将单引号转义了。所以需要对单引号和反引号做一下优化处理。</p><ol><li>模板中遇到 \ 反引号，需要转义</li><li>遇到 ‘ 单引号，需要将其转义</li></ol><p>转换为代码，即为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str.replace(<span class="regexp">/\\/g</span>, <span class="string">'\\\\'</span>)</span><br><span class="line">    .replace(<span class="regexp">/'/g</span>, <span class="string">"\\'"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tpl = <span class="string">''</span></span><br><span class="line"><span class="keyword">const</span> tmpl = <span class="function">(<span class="params">str, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果是模板字符串，会包含非单词部分（&lt;, &gt;, %,  等）；如果是id，则需要通过getElementById获取</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/[\s\W]/g</span>.test(str)) &#123;</span><br><span class="line">      tpl = <span class="built_in">document</span>.getElementById(str).innerHTML</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      tpl = str</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">`let p = []; p.push('`</span></span><br><span class="line">  result += <span class="string">`<span class="subst">$&#123;</span></span></span><br><span class="line"><span class="string"><span class="subst">tpl.replace(<span class="regexp">/[\r\n\t]/g</span>, <span class="string">''</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">           .replace(<span class="regexp">/\\/g</span>, <span class="string">'\\\\'</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">           .replace(<span class="regexp">/'/g</span>, <span class="string">"\\'"</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">   .replace(<span class="regexp">/&lt;%=\s*([^%&gt;]+?)\s*%&gt;/g</span>, <span class="string">"'); p.push($1); p.push('"</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">   .replace(<span class="regexp">/&lt;%/g</span>, <span class="string">"');"</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">   .replace(<span class="regexp">/%&gt;/g</span>, <span class="string">"p.push('"</span>)</span></span></span><br><span class="line"><span class="string"><span class="subst">  &#125;</span>`</span></span><br><span class="line">  result += <span class="string">"'); return p.join('');"</span>      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Template<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"results"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/html"</span> <span class="attr">id</span>=<span class="string">"user_tmpl"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="javascript">            &lt;% <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; users.length; i++ ) &#123; %&gt;</span></span><br><span class="line"><span class="javascript">            &lt;li&gt;<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&lt;%=users[i].url%&gt;"</span>&gt;</span><span class="tag">&lt;<span class="name">%=users[i].name%</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">%</span> &#125; %&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> results = <span class="built_in">document</span>.getElementById(<span class="string">"results"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> users=[</span></span><br><span class="line"><span class="javascript">            &#123;<span class="string">"name"</span>:<span class="string">"Byron"</span>, <span class="string">"url"</span>:<span class="string">"http://localhost"</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="string">"name"</span>:<span class="string">"Casper"</span>, <span class="string">"url"</span>:<span class="string">"http://localhost"</span>&#125;,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="string">"name"</span>:<span class="string">"Frank"</span>, <span class="string">"url"</span>:<span class="string">"http://localhost"</span>&#125;</span></span><br><span class="line"><span class="undefined">        ];</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">tmpl</span>(<span class="params">id,data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> html=<span class="built_in">document</span>.getElementById(id).innerHTML;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> result=<span class="string">"var p=[];with(obj)&#123;p.push('"</span></span></span><br><span class="line"><span class="javascript">                +html.replace(<span class="regexp">/[\r\n\t]/g</span>,<span class="string">" "</span>)</span></span><br><span class="line"><span class="javascript">                .replace(<span class="regexp">/&lt;%=(.*?)%&gt;/g</span>,<span class="string">"');p.push($1);p.push('"</span>)</span></span><br><span class="line"><span class="javascript">                .replace(<span class="regexp">/&lt;%/g</span>,<span class="string">"');"</span>)</span></span><br><span class="line"><span class="javascript">                .replace(<span class="regexp">/%&gt;/g</span>,<span class="string">"p.push('"</span>)</span></span><br><span class="line"><span class="javascript">                +<span class="string">"');&#125;return p.join('');"</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> fn=<span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"obj"</span>,result);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> fn(data);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        results.innerHTML = tmpl(<span class="string">"user_tmpl"</span>, users);</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 模板引擎 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javaScript运行机制，从浏览器多进程到JS单线程</title>
      <link href="/2018/07/04/javaScript%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%EF%BC%8C%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%B0JS%E5%8D%95%E7%BA%BF%E7%A8%8B/"/>
      <url>/2018/07/04/javaScript%E8%BF%90%E8%A1%8C%E6%9C%BA%E5%88%B6%EF%BC%8C%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%88%B0JS%E5%8D%95%E7%BA%BF%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="区分进程和线程"><a href="#区分进程和线程" class="headerlink" title="区分进程和线程"></a>区分进程和线程</h1><p>线程和进程区分不清，先看看下面这个形象的比喻：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 进程是一个工厂，工厂有它的独立资源</span><br><span class="line"></span><br><span class="line">- 工厂之间相互独立</span><br><span class="line"></span><br><span class="line">- 线程是工厂中的工人，多个工人协作完成任务</span><br><span class="line"></span><br><span class="line">- 工厂内有一个或多个工人</span><br><span class="line"></span><br><span class="line">- 工人之间共享空间</span><br></pre></td></tr></table></figure><p>再完善完善概念：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 工厂的资源 -&gt; 系统分配的内存（独立的一块内存）</span><br><span class="line"></span><br><span class="line">- 工厂之间的相互独立 -&gt; 进程之间相互独立</span><br><span class="line"></span><br><span class="line">- 多个工人协作完成任务 -&gt; 多个线程在进程中协作完成任务</span><br><span class="line"></span><br><span class="line">- 工厂内有一个或多个工人 -&gt; 一个进程由一个或多个线程组成</span><br><span class="line"></span><br><span class="line">- 工人之间共享空间 -&gt; 同一进程下的各个线程之间共享程序的内存空间（包括代码段、数据集、堆等）</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后再巩固下：</p><p>windows中，打开任务管理器。在后台进程列表中，可以看到每个进程的内存资源信息以及cpu占有率。</p><p><img src="/2018/07/04/javaScript运行机制，从浏览器多进程到JS单线程/1611938b2d7c9377" alt="img"></p><p>所以，应该更容易理解了：<strong>进程是cpu资源分配的最小单位（系统会给它分配内存）</strong></p><p>最后，再用较为官方的术语描述一遍：</p><ul><li>进程是cpu<strong>资源分配的最小单位</strong>（是能拥有资源和独立运行的最小单位）</li><li>线程是cpu<strong>调度的最小单位</strong>（线程是建立在进程的基础上的一次程序运行单位）</li></ul><p><strong>tips</strong></p><ul><li>不同进程之间也可以通信，不过代价较大</li><li>一般通用的叫法：<strong>单线程与多线程</strong>，都是指<strong>在一个进程内</strong>的单和多。</li></ul><p><br></p><h1 id="浏览器是多进程的"><a href="#浏览器是多进程的" class="headerlink" title="浏览器是多进程的"></a>浏览器是多进程的</h1><p>理解了进程与线程了区别后，接下来对浏览器进行一定程度上的认识：（先看下简化理解）</p><ul><li>浏览器是多进程的</li><li>浏览器之所以能够运行，是因为系统给它的进程分配了资源（cpu、内存）</li><li>简单点理解，每打开一个Tab页，就相当于创建了一个独立的浏览器进程。</li></ul><p>关于以上几点的验证，<strong>请再第一张图</strong>：</p><p><img src="/2018/07/04/javaScript运行机制，从浏览器多进程到JS单线程/1611938b2d813f16" alt="img"></p><p>图中打开了<code>Chrome</code>浏览器的多个标签页，然后可以在<code>Chrome的任务管理器</code>中看到有多个进程（分别是每一个Tab页面有一个独立的进程，以及一个主进程）。 感兴趣的可以自行尝试下，如果再多打开一个Tab页，进程正常会+1以上</p><p><strong>注意：</strong>在这里浏览器应该也有自己的优化机制，有时候打开多个tab页后，可以在Chrome任务管理器中看到，有些进程被合并了 （所以每一个Tab标签对应一个进程并不一定是绝对的）</p><p><br></p><h1 id="浏览器都包含哪些进程？"><a href="#浏览器都包含哪些进程？" class="headerlink" title="浏览器都包含哪些进程？"></a>浏览器都包含哪些进程？</h1><p>知道了浏览器是多进程后，再来看看它到底包含哪些进程：（为了简化理解，仅列举主要进程）</p><ol><li><strong>Browser进程</strong>：浏览器的主进程（负责协调、主控），<strong>只有一个</strong>。作用有<ul><li>负责<strong>浏览器界面显示</strong>，与用户交互。如前进，后退等</li><li>负责各个页面的管理，<strong>创建和销毁其他进程</strong></li><li>将Renderer进程得到的内存中的Bitmap，<strong>绘制到用户界面</strong>上</li><li><strong>网络资源</strong>的管理，下载等</li></ul></li><li><strong>第三方插件进程</strong>：每种类型的插件对应一个进程，仅当使用该插件时才创建</li><li><strong>GPU进程</strong>：最多一个，用于3D绘制等</li><li>浏览器<strong>渲染进程</strong>（<strong>浏览器内核</strong>）（<strong>Renderer进程，内部是多线程的</strong>）：<strong>默认每个Tab页面一个进程</strong>，互不影响。主要作用为<ul><li><strong>页面渲染，脚本执行，事件处理等</strong></li></ul></li></ol><p>强化记忆：<strong>在浏览器中打开一个网页相当于新起了一个进程（进程内有自己的多线程）</strong></p><p>当然，浏览器有时会将多个进程合并（譬如打开多个空白标签页后，会发现多个空白标签页被合并成了一个进程），如图</p><p><img src="/2018/07/04/javaScript运行机制，从浏览器多进程到JS单线程/1611938b32460672" alt="img"></p><p>另外，可以通过Chrome的<code>更多工具 -&gt; 任务管理器</code>自行验证</p><p><br></p><h1 id="浏览器多进程的优势"><a href="#浏览器多进程的优势" class="headerlink" title="浏览器多进程的优势"></a>浏览器多进程的优势</h1><p>相比于单进程浏览器，多进程有如下优点：</p><ul><li>避免单个page crash影响整个浏览器</li><li>避免第三方插件crash影响整个浏览器</li><li>多进程充分利用多核优势</li><li>方便使用沙盒模型隔离插件等进程，<strong>提高浏览器稳定性</strong></li></ul><p>简单点理解：<strong>如果浏览器是单进程，那么某个Tab页崩溃了，就影响了整个浏览器，体验有多差；同理如果是单进程，插件崩溃了也会影响整个浏览器；而且多进程还有其它的诸多优势。。。</strong></p><p>当然，内存等资源消耗也会更大，有点空间换时间的意思。</p><p><br></p><h1 id="重点是浏览器内核（渲染进程）"><a href="#重点是浏览器内核（渲染进程）" class="headerlink" title="重点是浏览器内核（渲染进程）"></a>重点是浏览器内核（渲染进程）</h1><p>那么，对于普通的前端操作来说，<strong>页面的渲染，JS的执行，事件的循环，都在这个进程内进行</strong>。接下来重点分析这个进程<strong>请牢记，浏览器的渲染进程是多线程的</strong>。</p><p>终于到了线程这个概念了😭，好亲切。那么接下来看看它都包含了哪些线程（列举一些主要常驻线程）：</p><ol><li><h4 id="GUI渲染线程"><a href="#GUI渲染线程" class="headerlink" title="GUI渲染线程"></a>GUI渲染线程</h4><ul><li>负责<strong>渲染浏览器界面</strong>，<strong>解析HTML，CSS</strong>，<strong>构建DOM树和RenderObject树</strong>，<strong>布局</strong>和<strong>绘制</strong>等。</li><li>当界面需要<strong>重绘（Repaint）</strong>或由于某种操作引发<strong>回流(reflow)</strong>时，该线程就会执行。</li><li>注意，<strong>GUI渲染线程与JS引擎线程是互斥的</strong>，当JS引擎执行时GUI线程会被挂起（相当于被冻结了），GUI更新会被保存在一个队列中<strong>等到JS引擎空闲时</strong>立即被执行。</li></ul></li><li><h4 id="JS引擎线程"><a href="#JS引擎线程" class="headerlink" title="JS引擎线程"></a>JS引擎线程</h4><ul><li>也称为<strong>JS内核</strong>，负责处理Javascript脚本程序。（例如<strong>V8引擎</strong>）</li><li>JS引擎线程负责解析Javascript脚本，运行代码。</li><li>JS引擎一直等待着任务队列中任务的到来，然后加以处理，<strong>一个Tab页（renderer进程）中无论什么时候都只有一个JS线程在运行JS程序</strong></li><li>同样注意，<strong>GUI渲染线程与JS引擎线程是互斥的</strong>，所以如果JS执行的时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞。</li></ul></li><li><h4 id="事件触发线程"><a href="#事件触发线程" class="headerlink" title="事件触发线程"></a>事件触发线程</h4><ul><li>归属于浏览器而不是JS引擎，用来<strong>控制事件循环</strong>（可以理解，JS引擎自己都忙不过来，需要浏览器另开线程协助）</li><li>当JS引擎执行代码块如setTimeOut时（也可来自浏览器内核的其他线程,如<strong>鼠标点击</strong>、<strong>AJAX异步请求</strong>等），会<strong>将对应任务添加到事件线程中</strong></li><li>当<strong>对应的事件符合触发条件被触发时，该线程会把事件添加到待处理队列的队尾，等待JS引擎的处理</strong></li><li>注意，由于JS的单线程关系，所以这些待处理队列中的事件都得排队等待JS引擎处理（当JS引擎空闲时才会去执行）</li></ul></li><li><h4 id="定时触发器线程"><a href="#定时触发器线程" class="headerlink" title="定时触发器线程"></a>定时触发器线程</h4><ul><li>传说中的<code>setInterval</code>与<code>setTimeout</code>所在线程</li><li>浏览器<strong>定时计数器并不是由JavaScript引擎计数</strong>的,（因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确）</li><li>因此通过<strong>单独线程来计时并触发定时</strong>（计时完毕后，<strong>添加到事件队列中</strong>，等待JS引擎空闲后执行）</li><li>注意，<strong>W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms</strong>。</li></ul></li><li><h4 id="异步http请求线程"><a href="#异步http请求线程" class="headerlink" title="异步http请求线程"></a>异步http请求线程</h4><ul><li><strong>XMLHttpRequest</strong>在连接后是通过浏览器<strong>新开一个线程请求</strong></li><li>将检测到状态变更时，如果设置有回调函数，异步线程就<strong>产生状态变更事件</strong>，将这个回调再<strong>放入事件队列</strong>中。再由JavaScript引擎执行。</li></ul></li></ol><p><br></p><p>看到这里，如果觉得累了，可以先休息下，这些概念需要被消化，毕竟后续将提到的事件循环机制就是基于<code>事件触发线程</code>的，所以如果仅仅是看某个碎片化知识， 可能会有一种似懂非懂的感觉。要完成的梳理一遍才能快速沉淀，不易遗忘。放张图巩固下吧：</p><p><img src="/2018/07/04/javaScript运行机制，从浏览器多进程到JS单线程/1611938b2d39a5b2" alt="img"></p><p><br></p><h1 id="Browser进程和Renderer进程的通信过程"><a href="#Browser进程和Renderer进程的通信过程" class="headerlink" title="Browser进程和Renderer进程的通信过程"></a>Browser进程和Renderer进程的通信过程</h1><p>看到这里，首先，应该对浏览器内的进程和线程都有一定理解了，那么接下来，再谈谈浏览器的Browser进程（控制进程）是如何和内核通信的， 这点也理解后，就可以将这部分的知识串联起来，从头到尾有一个完整的概念。</p><p>如果自己打开任务管理器，然后打开一个浏览器，就可以看到：<strong>任务管理器中出现了两个进程（一个是主控进程，一个则是打开Tab页的渲染进程）</strong>， 然后在这前提下，看下整个的过程：(简化了很多)</p><ul><li><strong>Browser进程</strong>收到用户请求，先获取页面内容，将该任务通过RendererHost接口传递给Render进程</li><li><strong>Renderer进程</strong>的Renderer接口收到消息，简单解释后，交给渲染线程，然后开始渲染<ul><li><strong>渲染线程</strong>接收请求，加载并渲染网页，可能需要Browser进程获取资源和需要GPU进程来帮助渲染</li><li>当然可能会有JS线程操作DOM（这样可能会造成回流并重绘）</li><li>最后Render进程将结果传递给Browser进程</li></ul></li><li>Browser进程接收到结果并将结果绘制出来</li></ul><p>这里绘一张简单的图：（很简化）</p><p><img src="/2018/07/04/javaScript运行机制，从浏览器多进程到JS单线程/1611938b2e66d44f" alt="img"></p><p>看完这一整套流程，应该对浏览器的运作有了一定理解了，这样有了知识架构的基础后，后续就方便往上填充内容。这块再往深处讲的话就涉及到浏览器内核源码解析了，不属于本文范围。如果这一块要深挖，建议去读一些浏览器内核源码解析文章，或者可以先看看参考下来源中的第一篇文章，写的不错</p><p><br></p><h1 id="梳理浏览器内核中线程之间的关系"><a href="#梳理浏览器内核中线程之间的关系" class="headerlink" title="梳理浏览器内核中线程之间的关系"></a>梳理浏览器内核中线程之间的关系</h1><h4 id="GUI渲染线程与JS引擎线程互斥"><a href="#GUI渲染线程与JS引擎线程互斥" class="headerlink" title="GUI渲染线程与JS引擎线程互斥"></a>GUI渲染线程与JS引擎线程互斥</h4><p>由于JavaScript是可操纵DOM的，如果在修改这些元素属性同时渲染界面（即JS线程和UI线程同时运行），那么渲染线程前后获得的元素数据就可能不一致了。</p><p>因此为了防止渲染出现不可预期的结果，浏览器设置GUI渲染线程与JS引擎为<strong>互斥的关系</strong>，当JS引擎执行时GUI线程会被挂起， <strong>GUI更新则会被保存在一个队列中</strong>等到JS引擎线程空闲时立即被执行。</p><p><br></p><h4 id="JS阻塞页面加载"><a href="#JS阻塞页面加载" class="headerlink" title="JS阻塞页面加载"></a>JS阻塞页面加载</h4><p>从上述的互斥关系，可以推导出，<strong>JS如果执行时间过长就会阻塞页面</strong>。</p><p>譬如，假设JS引擎正在进行巨量的计算，此时就算GUI有更新，也会被保存到队列中，等待JS引擎空闲后执行。 然后，由于巨量计算，所以JS引擎很可能很久很久后才能空闲，自然会感觉到巨卡无比。</p><p>所以，要尽量避免JS执行时间过长，这样就会造成页面的渲染不连贯，导致页面渲染加载阻塞的感觉。</p><p><br></p><h4 id="WebWorker，JS的多线程？"><a href="#WebWorker，JS的多线程？" class="headerlink" title="WebWorker，JS的多线程？"></a>WebWorker，JS的多线程？</h4><p>前文中有提到JS引擎是单线程的，而且JS执行时间过长会阻塞页面，那么JS就真的对cpu密集型计算无能为力么？</p><p>所以，后来HTML5中支持了<code>Web Worker</code>。</p><p>MDN的官方解释是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Web Worker为Web内容在后台线程中运行脚本提供了一种简单的方法。线程可以执行任务而不干扰用户界面</span><br><span class="line"></span><br><span class="line">一个worker是使用一个构造函数创建的一个对象(e.g. Worker()) 运行一个命名的JavaScript文件 </span><br><span class="line"></span><br><span class="line">这个文件包含将在工作线程中运行的代码; workers 运行在另一个全局上下文中,不同于当前的window</span><br><span class="line"></span><br><span class="line">因此，使用 window快捷方式获取当前全局的范围 (而不是self) 在一个 Worker 内将返回错误</span><br></pre></td></tr></table></figure><p>这样理解下：</p><ul><li>创建Worker时，<strong>JS引擎向浏览器申请开一个子线程</strong>（子线程是浏览器开的，<strong>完全受主线程控制</strong>，而且不能操作DOM）</li><li>JS引擎线程与worker线程间通过特定的方式通信（<strong>postMessage</strong> API，需要通过序列化对象来与线程交互特定的数据）</li></ul><p>所以，如果有非常耗时的工作，请单独开一个Worker线程，这样里面不管如何翻天覆地都不会影响JS引擎主线程， 只待计算出结果后，将结果通信给主线程即可，perfect!</p><p>而且注意下，<strong>JS引擎是单线程的</strong>，这一点的本质仍然未改变，Worker可以理解是浏览器给JS引擎开的外挂，专门用来解决那些大量计算问题。</p><p>其它，关于Worker的详解就不是本文的范畴了，因此不再赘述。</p><p><br></p><h3 id="WebWorker与SharedWorker"><a href="#WebWorker与SharedWorker" class="headerlink" title="WebWorker与SharedWorker"></a>WebWorker与SharedWorker</h3><p>既然都到了这里，就再提一下<code>SharedWorker</code>（避免后续将这两个概念搞混）</p><ul><li><strong>WebWorker只属于某个页面，不会和其他页面的Render进程（浏览器内核进程）共享</strong><ul><li>所以Chrome在Render进程中（每一个Tab页就是一个render进程）创建一个新的线程来运行Worker中的JavaScript程序。</li></ul></li><li><strong>SharedWorker是浏览器所有页面共享的</strong>，不能采用与Worker同样的方式实现，因为它不隶属于某个Render进程，<strong>可以为多个Render进程共享使用</strong><ul><li>所以Chrome浏览器<strong>为SharedWorker单独创建一个进程来运行JavaScript程序</strong>，在浏览器中每个相同的JavaScript<strong>只存在一个SharedWorker进程</strong>，不管它被创建多少次。</li></ul></li></ul><p>看到这里，应该就很容易明白了，本质上就是进程和线程的区别。<strong>SharedWorker由独立的进程管理，WebWorker只是属于render进程下的一个线程</strong></p><p><br></p><h1 id="简单梳理下浏览器渲染流程"><a href="#简单梳理下浏览器渲染流程" class="headerlink" title="简单梳理下浏览器渲染流程"></a>简单梳理下浏览器渲染流程</h1><p>本来是直接计划开始谈JS运行机制的，但想了想，既然上述都一直在谈浏览器，直接跳到JS可能再突兀，因此，中间再补充下浏览器的渲染流程（简单版本）</p><p>为了简化理解，前期工作直接省略成：（要展开的或完全可以写另一篇超长文）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 浏览器输入url，浏览器主进程接管，开一个下载线程，</span><br><span class="line">然后进行 http请求（略去DNS查询，IP寻址等等操作），然后等待响应，获取内容，</span><br><span class="line">随后将内容通过RendererHost接口转交给Renderer进程</span><br><span class="line"></span><br><span class="line">- 浏览器渲染流程开始</span><br></pre></td></tr></table></figure><p>浏览器器内核拿到内容后，渲染大概可以划分成以下几个步骤：</p><ol><li><strong>解析html建立dom树</strong></li><li><strong>解析css构建render树（将CSS代码解析成树形的数据结构，然后结合DOM合并成render树）</strong></li><li><strong>布局render树（Layout/reflow），负责各元素尺寸、位置的计算</strong></li><li><strong>绘制render树（paint），绘制页面像素信息</strong></li><li><strong>浏览器会将各层的信息发送给GPU，GPU会将各层合成（composite），显示在屏幕上。</strong></li></ol><p><img src="/2018/07/04/javaScript运行机制，从浏览器多进程到JS单线程/1611cb18d3a3938b" alt="img"></p><p><br></p><h4 id="onload-属性是资源加载完成还是渲染完成"><a href="#onload-属性是资源加载完成还是渲染完成" class="headerlink" title="onload 属性是资源加载完成还是渲染完成?"></a>onload 属性是资源加载完成还是渲染完成?</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.currentImg</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">alert(<span class="string">'first'</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"load()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"currentImg"</span> <span class="attr">onload</span>=<span class="string">"alert('img1')"</span> <span class="attr">src</span>=<span class="string">"0.jpg"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"currentImg"</span> <span class="attr">onload</span>=<span class="string">"alert('img2')"</span> <span class="attr">src</span>=<span class="string">"1.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">load</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    alert(<span class="string">'last'</span>)</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原理：利用alert阻断浏览器渲染</p><p>结果：</p><ul><li>输出依次是<code>first</code>、<code>img2</code>、<code>img</code>、<code>last</code>, 竟然先加载了第二个图片，说明是<strong>并行加载资源</strong>的</li><li>浏览器弹屏<code>img2</code>、<code>img1</code>时图片并<strong>未完全渲染</strong>，说明<strong>onload调用时机是资源加载而非资源渲染结束后</strong></li><li>去掉两个<code>&lt;img&gt;</code>中的<code>onload</code>属性发现弹屏<code>last</code>时图片尚<strong>未完全渲染</strong>，即window.onload表示资源加载而非渲染结束后调用</li><li>将<code>&lt;img&gt;</code>中的URL改成错误的URL发现window.onload同样调用了，但此时发现浏览器控制台已经输出了图片加载失败的error，而该<code>&lt;img&gt;</code>中的onload函数未调用</li><li>将两个<code>&lt;img&gt;</code>中的URL都改成错误的URL，发现window.onload同样调用了，说明其表示的是资源加载完了，至于成功与否无所谓</li></ul><p><br></p><h4 id="load事件与DOMContentLoaded事件的先后"><a href="#load事件与DOMContentLoaded事件的先后" class="headerlink" title="load事件与DOMContentLoaded事件的先后"></a>load事件与DOMContentLoaded事件的先后</h4><p>你能分清楚<code>load</code>事件与<code>DOMContentLoaded</code>事件的先后么？很简单，知道它们的定义就可以了：</p><ul><li>当 DOMContentLoaded 事件触发时，仅当DOM加载完成，不包括样式表，图片。 (譬如如果有async加载的脚本就不一定完成)</li><li>当 onload 事件触发时，页面上所有的DOM，样式表，脚本，图片都已经加载完成了。</li></ul><p>所以，顺序是：<code>DOMContentLoaded -&gt; load</code></p><p><br></p><h4 id="css加载是否会阻塞dom树渲染？"><a href="#css加载是否会阻塞dom树渲染？" class="headerlink" title="css加载是否会阻塞dom树渲染？"></a>css加载是否会阻塞dom树渲染？</h4><p>这里说的是头部引入css的情况</p><p>首先，我们都知道：<strong>css是由单独的下载线程异步下载的。</strong></p><p>然后再说下几个现象：</p><ul><li><strong>css加载不会阻塞DOM树解析（异步加载时DOM照常构建）</strong></li><li><strong>但会阻塞render树渲染（渲染时需等css加载完毕，因为render树需要css信息）</strong></li></ul><p>这可能也是浏览器的一种优化机制。</p><p>因为你加载css的时候，可能会修改下面DOM节点的样式， 如果css加载不阻塞render树渲染的话，那么当css加载完之后， render树可能又得重新重绘或者回流了，这就造成了一些没有必要的损耗。 所以干脆就先把DOM树的结构先解析完，把可以做的工作做完，然后等你css加载完之后， 在根据最终的样式来渲染render树，这种做法性能方面确实会比较好一点。</p><p><br></p><h4 id="普通图层和复合图层"><a href="#普通图层和复合图层" class="headerlink" title="普通图层和复合图层"></a>普通图层和复合图层</h4><p>渲染步骤中就提到了<code>composite</code>概念。</p><p>可以简单的这样理解，浏览器渲染的图层一般包含两大类：<code>普通图层</code>以及<code>复合图层</code></p><p>首先，<strong>普通文档流内可以理解为一个复合图层</strong>（这里称为<code>默认复合层</code>，里面不管添加多少元素，其实都是在同一个复合图层中）</p><p>其次，absolute布局（fixed也一样），虽然可以脱离普通文档流，但它仍然属于<code>默认复合层</code>。</p><p>然后，可以通过<code>硬件加速</code>的方式，声明一个<code>新的复合图层</code>，它会单独分配资源 （当然也会脱离普通文档流，这样一来，不管这个复合图层中怎么变化，也不会影响<code>默认复合层</code>里的回流重绘）</p><p>可以简单理解下：<strong>GPU中，各个复合图层是单独绘制的，所以互不影响</strong>，这也是为什么某些场景硬件加速效果一级棒</p><p>可以<code>Chrome源码调试 -&gt; More Tools -&gt; Rendering -&gt; Layer borders</code>中看到，黄色的就是复合图层信息</p><p>如下图。可以验证上述的说法</p><p><img src="/2018/07/04/javaScript运行机制，从浏览器多进程到JS单线程/1611938b2d83a384" alt="img"></p><p><br></p><h4 id="如何变成复合图层（硬件加速）"><a href="#如何变成复合图层（硬件加速）" class="headerlink" title="如何变成复合图层（硬件加速）"></a>如何变成复合图层（硬件加速）</h4><p>将该元素变成一个复合图层，就是传说中的硬件加速技术</p><ul><li>最常用的方式：<code>translate3d</code>、<code>translateZ</code></li><li><code>opacity</code>属性/过渡动画（需要动画执行的过程中才会创建合成层，动画没有开始或结束后元素还会回到之前的状态）</li><li><code>will-chang</code>属性（这个比较偏僻），一般配合opacity与translate使用（而且经测试，除了上述可以引发硬件加速的属性外，其它属性并不会变成复合层）， 作用是提前告诉浏览器要变化，这样浏览器会开始做一些优化工作（这个最好用完后就释放）</li><li><code>&lt;video&gt;&lt;iframe&gt;&lt;canvas&gt;&lt;webgl&gt;</code>等元素</li><li>其它，譬如以前的flash插件</li></ul><p><br></p><h4 id="absolute和硬件加速的区别"><a href="#absolute和硬件加速的区别" class="headerlink" title="absolute和硬件加速的区别"></a>absolute和硬件加速的区别</h4><p>可以看到，absolute虽然可以脱离普通文档流，但是无法脱离默认复合层。 所以，就算absolute中信息改变时不会改变普通文档流中render树， 但是，浏览器最终绘制时，是整个复合层绘制的，所以absolute中信息的改变，仍然会影响整个复合层的绘制。 （浏览器会重绘它，如果复合层中内容多，absolute带来的绘制信息变化过大，资源消耗是非常严重的）</p><p>而硬件加速直接就是在另一个复合层了（另起炉灶），所以它的信息改变不会影响默认复合层 （当然了，内部肯定会影响属于自己的复合层），仅仅是引发最后的合成（输出视图）</p><p><br></p><h4 id="复合图层的作用？"><a href="#复合图层的作用？" class="headerlink" title="复合图层的作用？"></a>复合图层的作用？</h4><p>一般一个元素开启硬件加速后会变成复合图层，可以独立于普通文档流中，改动后可以避免整个页面重绘，提升性能。但是尽量不要大量使用复合图层，否则由于资源消耗过度，页面反而会变的更卡。</p><p><br></p><h4 id="硬件加速时请使用index"><a href="#硬件加速时请使用index" class="headerlink" title="硬件加速时请使用index"></a>硬件加速时请使用index</h4><p>使用硬件加速时，尽可能的使用index，防止浏览器默认给后续的元素创建复合层渲染</p><p>具体的原理时这样的： <strong>webkit CSS3中，如果这个元素添加了硬件加速，并且index层级比较低， 那么在这个元素的后面其它元素（层级比这个元素高的，或者相同的，并且releative或absolute属性相同的）， 会默认变为复合层渲染，如果处理不当会极大的影响性能</strong></p><p>简单点理解，其实可以认为是一个隐式合成的概念：<strong>如果a是一个复合图层，而且b在a上面，那么b也会被隐式转为一个复合图层</strong>，这点需要特别注意</p><p>另外，这个问题可以在这个地址看到重现（原作者分析的挺到位的，直接上链接）：</p><p><a href="https://link.juejin.im?target=http%3A%2F%2Fweb.jobbole.com%2F83575%2F" target="_blank" rel="noopener">web.jobbole.com/83575/</a></p><p><br></p><h1 id="从Event-Loop谈JS的运行机制"><a href="#从Event-Loop谈JS的运行机制" class="headerlink" title="从Event Loop谈JS的运行机制"></a>从Event Loop谈JS的运行机制</h1><p>到此时，已经是属于浏览器页面<strong>初次渲染完毕后的事情</strong>，JS引擎的一些运行机制分析。</p><p>注意，这里不谈<code>可执行上下文</code>，<code>VO</code>，<code>scop chain</code>等概念（这些完全可以整理成另一篇文章了），这里主要是结合<code>Event Loop</code>来谈JS代码是如何执行的。</p><p>读这部分的前提是已经知道了JS引擎是单线程，而且这里会用到上文中的几个概念：</p><ul><li>JS引擎线程</li><li>事件触发线程</li><li>定时触发器线程</li></ul><p>然后再理解一个概念：</p><ul><li>JS分为同步任务和异步任务</li><li>同步任务都在主线程上执行，形成一个<code>执行栈</code></li><li>主线程之外，<strong>事件触发线程</strong>管理着一个<code>任务队列</code>，只要异步任务有了运行结果，就在<code>任务队列</code>之中放置一个事件。</li><li>一旦<code>执行栈</code>中的所有同步任务执行完毕（此时JS引擎空闲），系统就会读取<code>任务队列</code>，将可运行的异步任务添加到可执行栈中，开始执行。</li></ul><p>看图：</p><p><img src="/2018/07/04/javaScript运行机制，从浏览器多进程到JS单线程/1611938b898ed9ef" alt="img"></p><p>看到这里，应该就可以理解了：为什么有时候setTimeout推入的事件不能准时执行？因为可能在它推入到事件列表时，主线程还不空闲，正在执行其它代码， 所以自然有误差。</p><p><br></p><h1 id="事件循环机制进一步补充"><a href="#事件循环机制进一步补充" class="headerlink" title="事件循环机制进一步补充"></a>事件循环机制进一步补充</h1><p>这里就直接引用一张图片来协助理解：（参考自Philip Roberts的演讲《<a href="https://link.juejin.im?target=http%3A%2F%2Fvimeo.com%2F96425312" target="_blank" rel="noopener">Help, I’m stuck in an event-loop</a>》）</p><p><img src="/2018/07/04/javaScript运行机制，从浏览器多进程到JS单线程/1611938ba2b4b9f4" alt="img"></p><p>上图大致描述就是：</p><ul><li>主线程运行时会产生执行栈， 栈中的代码调用某些api时，它们会在事件队列中添加各种事件（当满足触发条件后，如ajax请求完毕）</li><li>而栈中的代码执行完毕，就会读取事件队列中的事件，去执行那些回调</li><li>如此循环</li><li>注意，总是要等待栈中的代码执行完毕后才会去读取事件队列中的事件</li></ul><p><br></p><h4 id="单独说说定时器"><a href="#单独说说定时器" class="headerlink" title="单独说说定时器"></a>单独说说定时器</h4><p>上述事件循环机制的核心是：JS引擎线程和事件触发线程</p><p>但事件上，里面还有一些隐藏细节，譬如调用<code>setTimeout</code>后，是如何等待特定时间后才添加到事件队列中的？</p><p>是JS引擎检测的么？当然不是了。它是由<strong>定时器线程</strong>控制（因为JS引擎自己都忙不过来，根本无暇分身）</p><p>为什么要单独的定时器线程？因为JavaScript引擎是单线程的, 如果处于阻塞线程状态就会影响记计时的准确，因此很有必要单独开一个线程用来计时。</p><p>什么时候会用到定时器线程？<strong>当使用setTimeout或setInterval时</strong>，它需要定时器线程计时，计时完成后就会将特定的事件推入事件队列中。</p><p>譬如:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><p>这段代码的作用是当<code>1000</code>毫秒计时完毕后（由定时器线程计时），将回调函数推入事件队列中，等待主线程执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello!'</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'begin'</span>);</span><br></pre></td></tr></table></figure><p>这段代码的效果是最快的时间内将回调函数推入事件队列中，等待主线程执行</p><p>注意：</p><ul><li>执行结果是：先<code>begin</code>后<code>hello!</code></li><li>虽然代码的本意是0毫秒后就推入事件队列，但是W3C在HTML标准中规定，规定要求setTimeout中低于4ms的时间间隔算为4ms。 (不过也有一说是不同浏览器有不同的最小时间设定)</li><li>就算不等待4ms，就算假设0毫秒就推入事件队列，也会先执行<code>begin</code>（因为只有可执行栈内空了后才会主动读取事件队列）</li></ul><p><br></p><h4 id="setTimeout而不是setInterval"><a href="#setTimeout而不是setInterval" class="headerlink" title="setTimeout而不是setInterval"></a>setTimeout而不是setInterval</h4><p><strong>用setTimeout模拟定期计时和直接用setInterval是有区别的。</strong></p><p>因为每次setTimeout计时到后就会去执行，然后执行一段时间后才会继续setTimeout，中间就多了误差 （误差多少与代码执行时间有关）</p><p>而setInterval则是<strong>每次都精确的隔一段时间推入一个事件</strong> （但是，事件的实际执行时间不一定就准确，还有可能是这个事件还没执行完毕，下一个事件就来了）</p><p>而且<strong>setInterval有一些比较致命的问题</strong>就是：</p><ul><li><strong>累计效应</strong>（上面提到的），如果setInterval代码在（setInterval）再次添加到队列之前还没有完成执行， 就会导致定时器代码连续运行好几次，而之间没有间隔。 就算正常间隔执行，多个setInterval的代码执行时间可能会比预期小（因为代码执行需要一定时间）</li><li>譬如像iOS的webview,或者Safari等浏览器中都有一个特点，<strong>在滚动的时候是不执行JS的</strong>，如果使用了setInterval，会发现在滚动结束后会执行多次由于滚动不执行JS积攒回调，如果回调执行时间过长,就会非常容器造成卡顿问题和一些不可知的错误（这一块后续有补充，setInterval自带的优化，不会重复添加回调）</li><li>而且把浏览器<strong>最小化显示等操作</strong>时，setInterval并不是不执行程序， 它会把setInterval的回调函数放在队列中，等浏览器窗口再次打开时，一瞬间全部执行时</li></ul><p>所以，鉴于这么多但问题，目前一般认为的最佳方案是：<strong>用setTimeout模拟setInterval，或者特殊场合直接用requestAnimationFrame</strong></p><p><strong>补充：JS高程中有提到，JS引擎会对setInterval进行优化，如果当前事件队列中有setInterval的回调，不会重复添加。不过，仍然是有很多问题。。。</strong></p><p><br></p><h1 id="事件循环进阶：macrotask与microtask"><a href="#事件循环进阶：macrotask与microtask" class="headerlink" title="事件循环进阶：macrotask与microtask"></a>事件循环进阶：macrotask与microtask</h1><p>这段参考了参考来源中的第2篇文章（英文版的），（加了下自己的理解重新描述了下）， 强烈推荐有英文基础的同学直接观看原文，作者描述的很清晰，示例也很不错，如下：</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fjakearchibald.com%2F2015%2Ftasks-microtasks-queues-and-schedules%2F" target="_blank" rel="noopener">jakearchibald.com/2015/tasks-…</a></p><p>上文中将JS事件循环机制梳理了一遍，在ES5的情况是够用了，但是在ES6盛行的现在，仍然会遇到一些问题，譬如下面这题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">console.log(&apos;script start&apos;);</span><br><span class="line"></span><br><span class="line">setTimeout(function() &#123;</span><br><span class="line">    console.log(&apos;setTimeout&apos;);</span><br><span class="line">&#125;, 0);</span><br><span class="line"></span><br><span class="line">Promise.resolve().then(function() &#123;</span><br><span class="line">    console.log(&apos;promise1&apos;);</span><br><span class="line">&#125;).then(function() &#123;</span><br><span class="line">    console.log(&apos;promise2&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">console.log(&apos;script end&apos;);</span><br></pre></td></tr></table></figure><p>嗯哼，它的正确执行顺序是这样子的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">script end</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure><p>为什么呢？因为Promise里有了一个一个新的概念：<code>microtask</code>。或者，进一步，JS中分为两种任务类型：<strong>macrotask和microtask</strong>，在ECMAScript中，microtask称为<code>jobs</code>，macrotask可称为<code>task</code></p><p>它们的定义？区别？简单点可以按如下理解：</p><ul><li>macrotask（又称之为宏任务），可以理解是每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）<ul><li>每一个task会从头到尾将这个任务执行完毕，不会执行其它</li><li>浏览器为了能够使得JS内部task与DOM任务能够有序的执行，会在一个task执行结束后，在下一个 task 执行开始前，对页面进行重新渲染 （<code>task-&gt;渲染-&gt;task-&gt;...</code>）</li></ul></li><li>microtask（又称为微任务），可以理解是在当前 task 执行结束后立即执行的任务<ul><li>也就是说，在当前task任务后，下一个task之前，在渲染之前</li><li>所以它的响应速度相比setTimeout（setTimeout是task）会更快，因为无需等渲染</li><li>也就是说，在某一个macrotask执行完后，就会将在它执行期间产生的所有microtask都执行完毕（在渲染前）</li></ul></li></ul><p>分别很么样的场景会形成macrotask和microtask呢？</p><ul><li>macrotask：主代码块，setTimeout，setInterval等（可以看到，事件队列中的每一个事件都是一个macrotask）</li><li>microtask：Promise，process.nextTick等</li></ul><p><strong>补充：在node环境下，process.nextTick的优先级高于Promise</strong>，也就是可以简单理解为：在宏任务结束后会先执行微任务队列中的nextTickQueue部分，然后才会执行微任务中的Promise部分。</p><p>参考：<a href="https://link.juejin.im?target=https%3A%2F%2Fsegmentfault.com%2Fq%2F1010000011914016" target="_blank" rel="noopener">segmentfault.com/q/101000001…</a></p><p>再根据线程来理解下：</p><ul><li>macrotask中的事件都是放在一个事件队列中的，而这个队列由<strong>事件触发线程</strong>维护</li><li>microtask中的所有微任务都是添加到微任务队列（Job Queues）中，等待当前macrotask执行完毕后执行，而这个队列由<strong>JS引擎线程维护</strong> （这点由自己理解+推测得出，因为它是在主线程下无缝执行的）</li></ul><p>所以，总结下运行机制：</p><ul><li>执行一个宏任务（栈中没有就从事件队列中获取）</li><li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li><li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li><li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li><li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）</li></ul><p>如图：</p><p><img src="/2018/07/04/javaScript运行机制，从浏览器多进程到JS单线程/1611938b96e93485" alt="img"></p><p>另外，请注意下<code>Promise</code>的<code>polyfill</code>与官方版本的区别：</p><ul><li>官方版本中，是标准的microtask形式</li><li>polyfill，一般都是通过setTimeout模拟的，所以是macrotask形式</li><li>请特别注意这两点区别</li></ul><p>注意，有一些浏览器执行结果不一样（因为它们可能把microtask当成macrotask来执行了）， 但是为了简单，这里不描述一些不标准的浏览器下的场景（但记住，有些浏览器可能并不标准）</p><p><br></p><h4 id="使用MutationObserver实现microtask"><a href="#使用MutationObserver实现microtask" class="headerlink" title="使用MutationObserver实现microtask"></a>使用MutationObserver实现microtask</h4><p>MutationObserver可以用来实现microtask （它属于microtask，优先级小于Promise， 一般是Promise不支持时才会这样做）</p><p>它是HTML5中的新特性，作用是：监听一个DOM变动， 当DOM对象树发生任何变动时，Mutation Observer会得到通知</p><p>像以前的Vue源码中就是利用它来模拟nextTick的， 具体原理是，创建一个TextNode并监听内容变化， 然后要nextTick的时候去改一下这个节点的文本内容， 如下：（Vue的源码，未修改）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var counter = 1</span><br><span class="line">var observer = new MutationObserver(nextTickHandler)</span><br><span class="line">var textNode = document.createTextNode(String(counter))</span><br><span class="line"></span><br><span class="line">observer.observe(textNode, &#123;</span><br><span class="line">    characterData: true</span><br><span class="line">&#125;)</span><br><span class="line">timerFunc = () =&gt; &#123;</span><br><span class="line">    counter = (counter + 1) % 2</span><br><span class="line">    textNode.data = String(counter)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue%2Fblob%2F9cfd63a7d08c1eba029c8bd7463b3047c3347826%2Fsrc%2Fcore%2Futil%2Fenv.js%23L86-L95" target="_blank" rel="noopener">对应Vue源码链接</a></p><p>不过，现在的Vue（2.5+）的nextTick实现移除了MutationObserver的方式（据说是兼容性原因）， 取而代之的是使用MessageChannel （当然，默认情况仍然是Promise，不支持才兼容的）。</p><p>MessageChannel属于宏任务，优先级是：<code>MessageChannel-&gt;setTimeout</code>， 所以Vue（2.5+）内部的nextTick与2.4及之前的实现是不一样的，需要注意下。</p><p>这里不展开，可以看下<a href="https://link.juejin.im?target=https%3A%2F%2Fjuejin.im%2Fpost%2F5a1af88f5188254a701ec230" target="_blank" rel="noopener">juejin.im/post/5a1af8…</a> </p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 多进程 </tag>
            
            <tag> JS单线程 </tag>
            
            <tag> 运行机制 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>javaScript易忽略语法集</title>
      <link href="/2018/07/04/javaScript%E6%98%93%E5%BF%BD%E7%95%A5%E8%AF%AD%E6%B3%95%E9%9B%86/"/>
      <url>/2018/07/04/javaScript%E6%98%93%E5%BF%BD%E7%95%A5%E8%AF%AD%E6%B3%95%E9%9B%86/</url>
      <content type="html"><![CDATA[<h4 id="箭头函数与this"><a href="#箭头函数与this" class="headerlink" title="箭头函数与this"></a>箭头函数与this</h4><p>箭头函数体内的<code>this</code>对象，就是定义时所在的对象，而不是使用时所在的对象 。</p><p><code>this</code>指向的固定化，并不是因为箭头函数内部有绑定<code>this</code>的机制，实际原因是<strong>箭头函数根本没有自己的<code>this</code>，导致内部的<code>this</code>就是外层代码块的<code>this</code>。</strong>正是因为它没有<code>this</code>，所以也就不能用作构造函数。 箭头函数转成 ES5 的代码如下 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, <span class="keyword">this</span>.id);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'id:'</span>, _this.id);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a><h4 id="顶层对象的属性与全局变量"><a href="#顶层对象的属性与全局变量" class="headerlink" title="顶层对象的属性与全局变量"></a>顶层对象的属性与全局变量</h4><p>顶层对象的属性与全局变量挂钩，被认为是 JavaScript 语言最大的设计败笔之一。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">window.a = <span class="number">1</span>;</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line">window.a <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>ES6 为了改变这一点，一方面规定，为了保持兼容性，<code>var</code>命令和<code>function</code>命令声明的全局变量，依旧是顶层对象的属性；另一方面规定，<strong><code>let</code>命令、<code>const</code>命令、<code>class</code>命令声明的全局变量，不属于顶层对象的属性。</strong>也就是说，从 ES6 开始，全局变量将逐步与顶层对象的属性脱钩。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 如果在 Node 的 REPL 环境，可以写成 global.a</span></span><br><span class="line"><span class="comment">// 或者采用通用方法，写成 this.a</span></span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.b <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="for与let"><a href="#for与let" class="headerlink" title="for与let"></a>for与let</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// 变量i是let声明的，当前的i只在本轮循环有效，所以每一次循环的i其实都是一个新的变量</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//babel es5</span></span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line"><span class="keyword">var</span> a = [];</span><br><span class="line"><span class="keyword">var</span> _loop = <span class="function"><span class="keyword">function</span> <span class="title">_loop</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">  a[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  _loop(i);</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="for循环父作用域"><a href="#for循环父作用域" class="headerlink" title="for循环父作用域"></a><code>for</code>循环父作用域</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="string">'abc'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br></pre></td></tr></table></figure><ul><li><strong>设置循环变量</strong>的那部分是一个<strong>父作用域</strong></li><li><strong>循环体内部</strong>是一个单独的<strong>子作用域</strong></li></ul><p><br></p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><h5 id="1、性质"><a href="#1、性质" class="headerlink" title="1、性质"></a>1、性质</h5><ul><li><code>javaScript</code>将指定的<strong>数字索引值</strong>转换成<strong>字符串</strong>，然后将其作为<strong>属性名</strong>来使用（索引范围：<code>0~(2^32)-2</code>）</li><li>所有的数组都是对象，可以为其创建任意名字的属性。</li><li>如果使用了负数或非整数，数值转换为字符串，字符串作为<strong>属性名</strong>来用。</li><li>如果使用了非负整数，数值转换为字符串，字符串当做<strong>数组索引</strong>，而非对象属性。</li></ul><h5 id="2、特殊行为"><a href="#2、特殊行为" class="headerlink" title="2、特殊行为"></a>2、特殊行为</h5><ul><li>如果为一个数组元素赋值，它的索引<code>i</code>大于或等于现有数组的长度时，length属性的值将设置为<code>i+1</code></li><li>设置length属性为一个小于当前长度的非负整数<code>n</code>时，当前数组中那些索引值大于或者等于<code>n</code>的元素将从中删除。</li></ul><p><br></p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><h5 id="1、调用方式"><a href="#1、调用方式" class="headerlink" title="1、调用方式"></a>1、调用方式</h5><ul><li>作为函数</li><li>作为方法</li><li>作为构造函数</li><li>通过<code>call()</code>和<code>apply()</code>方法间接调用</li></ul><h5 id="2、特性"><a href="#2、特性" class="headerlink" title="2、特性"></a>2、特性</h5><ul><li>一条<strong>函数声明语句</strong>实际上<strong>声明了一个变量</strong>，并把一个函数对象赋值给它。而定义<strong>函数表达式</strong>时并<strong>没有声明一个变量</strong>。</li><li>如果<strong>函数表达式</strong>包含名称，函数的局部作用域将会包含一个绑定到<strong>函数对象</strong>的名称。</li><li><strong>如果嵌套函数作为函数调用，其this值不是全局对象就是undefined。</strong></li></ul><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>雅虎前端优化的35条军规</title>
      <link href="/2018/07/03/%E9%9B%85%E8%99%8E%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E7%9A%8435%E6%9D%A1%E5%86%9B%E8%A7%84/"/>
      <url>/2018/07/03/%E9%9B%85%E8%99%8E%E5%89%8D%E7%AB%AF%E4%BC%98%E5%8C%96%E7%9A%8435%E6%9D%A1%E5%86%9B%E8%A7%84/</url>
      <content type="html"><![CDATA[<h1 id="内容部分"><a href="#内容部分" class="headerlink" title="内容部分"></a>内容部分</h1><h4 id="1-尽量减少HTTP请求数"><a href="#1-尽量减少HTTP请求数" class="headerlink" title="1.尽量减少HTTP请求数"></a>1.尽量减少HTTP请求数</h4><p>页面大部分的响应时间都在下载页面上的各种组件：图片，样式表，脚本等等。减少组件数必然能够减少页面提交的HTTP请求数。这是让页面更快的关键。</p><p><strong>合并文件</strong>是通过把所有脚本放在一个文件中的方式来减少请求数的，当然，也可以合并所有的CSS。</p><p><strong>CSS Sprites</strong>是减少图片请求数量的首选方式。把背景图片都整合到一张图片中。</p><p><strong>行内图片（Base64编码）</strong>用<code>data: URL</code>模式来把图片放在（缓存的）样式表中。</p><p><br></p><h4 id="2-减少DNS查找"><a href="#2-减少DNS查找" class="headerlink" title="2.减少DNS查找"></a>2.减少DNS查找</h4><p>DNS是有成本的，它需要20到120毫秒去查找给定主机名的IP地址。在DNS查找完成之前，浏览器无法从主机名下载任何东西。</p><p><strong>DNS查找数</strong>等于页面上不同的主机名数，包括页面URL，图片，脚本文件，样式表等等组件中的主机名，减少不同的主机名就可以减少DNS查找。</p><p>HTTP客户端一般对同一个服务器的<strong>并发连接个数都是有限制的</strong> 。减少不同主机名的数量同时也减少了页面能够并行下载的组件数量，削减了避免DNS查找的响应时间，而减少并行下载数量却增加了响应时间。我的原则是把组件分散在2到4个主机名下，这是同时<strong>减少DNS查找</strong>和允<strong>许高并发下载</strong>的折中方案。</p><p><br></p><a id="more"></a><h4 id="3-避免重定向"><a href="#3-避免重定向" class="headerlink" title="3.避免重定向"></a>3.避免重定向</h4><p>有一种常见的极其浪费资源的重定向，就是<strong>URL尾部缺少一个斜线</strong>。</p><p>当Web服务器接收到对<strong>末尾不含斜杠的url请求</strong>时（<code>www.abc.com/home/efg</code>），服务器会搜索<code>/home目录</code>下有没有名为<code>efg</code>的文件，如果没有就把<code>efg</code>当做目录处理，然后返回<code>efg</code>目录下的默认首页，造成一次不必要的握手 。<strong>当Web服务器接收到的是末尾带斜杠的请求时就会直接当做目录处理。</strong> </p><p><br></p><h4 id="4-Ajax可缓存"><a href="#4-Ajax可缓存" class="headerlink" title="4.Ajax可缓存"></a>4.Ajax可缓存</h4><ul><li>必须是GET请求</li><li>必须在response中发送正确的HTTP头信息：Expires</li></ul><p><br></p><h4 id="5-延迟加载组件"><a href="#5-延迟加载组件" class="headerlink" title="5.延迟加载组件"></a>5.延迟加载组件</h4><p><br></p><h4 id="6-预加载组件"><a href="#6-预加载组件" class="headerlink" title="6.预加载组件"></a>6.预加载组件</h4><p>预加载可能看起来和延迟加载是相反的，但它其实有不同的目标。</p><p>通过预加载组件可以充分利用浏览器空闲的时间来请求将来会用到的组件（图片，样式和脚本）。</p><p><br></p><h4 id="7-减少DOM元素的数量"><a href="#7-减少DOM元素的数量" class="headerlink" title="7.减少DOM元素的数量"></a>7.减少DOM元素的数量</h4><p>一个复杂的页面意味着要下载更多的字节，而且用JavaScript访问DOM也会更慢。 </p><p><br></p><h4 id="8-跨域分离组件"><a href="#8-跨域分离组件" class="headerlink" title="8.跨域分离组件"></a>8.跨域分离组件</h4><p>分离组件可以最大化并行下载，但要确保只用不超过2-4个域，因为存在DNS查找的代价。 </p><p><br></p><h4 id="9-尽量少用iframe"><a href="#9-尽量少用iframe" class="headerlink" title="9.尽量少用iframe"></a>9.尽量少用iframe</h4><p>用iframe可以把一个HTML文档插入到父文档里，重要的是明白iframe是如何工作的并高效地使用它。</p><p><code>&lt;iframe&gt;</code>的优点：</p><ul><li>引入缓慢的第三方内容，比如标志和广告</li><li>安全沙箱</li><li>并行下载脚本</li></ul><p><code>&lt;iframe&gt;</code>的缺点：</p><ul><li>代价高昂，即使是空白的iframe</li><li>阻塞页面加载</li><li>非语义</li></ul><p><br></p><h4 id="10-杜绝404"><a href="#10-杜绝404" class="headerlink" title="10.杜绝404"></a>10.杜绝404</h4><p>HTTP请求代价高昂，完全没有必要用一个HTTP请求去获取一个无用的响应（比如404 Not Found），只会拖慢用户体验而没有任何好处。 </p><p><br></p><h1 id="css部分"><a href="#css部分" class="headerlink" title="css部分"></a>css部分</h1><h4 id="11-避免使用CSS表达式"><a href="#11-避免使用CSS表达式" class="headerlink" title="11.避免使用CSS表达式"></a>11.避免使用CSS表达式</h4><p>用CSS表达式动态设置CSS属性，是一种强大又危险的方式。例如，可以用CSS表达式把背景颜色设置成按小时交替的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>: <span class="selector-tag">expression</span>( (<span class="selector-tag">new</span> <span class="selector-tag">Date</span>())<span class="selector-class">.getHours</span>()%2 ? "<span class="selector-id">#B8D4FF</span>" : "<span class="selector-id">#F08A00</span>" );</span><br></pre></td></tr></table></figure><p><br></p><h4 id="12-选择-lt-link-gt-舍弃-import"><a href="#12-选择-lt-link-gt-舍弃-import" class="headerlink" title="12.选择&lt;link&gt;舍弃@import"></a>12.选择<code>&lt;link&gt;</code>舍弃<code>@import</code></h4><p>页面被加载时，<code>link</code>会同时被加载，而<code>@impor</code>t引用的<code>css</code>会等到页面加载结束后加载 。</p><p><br></p><h4 id="13-避免使用滤镜"><a href="#13-避免使用滤镜" class="headerlink" title="13.避免使用滤镜"></a>13.避免使用滤镜</h4><p>IE专有的<code>AlphaImageLoader</code>滤镜可以用来修复IE7之前的版本中<strong>半透明PNG图片的问题</strong>。在图片加载过程中，这个滤镜会阻塞渲染，卡住浏览器，还会增加内存消耗而且是被应用到每个元素的，而不是每个图片，所以会存在一大堆问题。</p><p>最好的方法是干脆不要用<code>AlphaImageLoader</code>，而优雅地降级到用在IE中支持性很好的PNG8图片来代替。如果非要用<code>AlphaImageLoader</code>，应该用下划线hack：<code>_filter</code>来避免影响IE7及更高版本的用户。</p><p><br></p><h3 id="14-把样式表放在顶部"><a href="#14-把样式表放在顶部" class="headerlink" title="14.把样式表放在顶部"></a>14.把样式表放在顶部</h3><p>把样式表放在head里能让页面逐步渲染 。</p><p><br></p><h1 id="js部分"><a href="#js部分" class="headerlink" title="js部分"></a>js部分</h1><h4 id="15-去除重复脚本"><a href="#15-去除重复脚本" class="headerlink" title="15.去除重复脚本"></a>15.去除重复脚本</h4><p>除了<strong>产生没有意义的HTTP请求之外</strong>，<strong>多次对脚本求值</strong>也会浪费时间。因为无论脚本是否可缓存，在Firefox和IE中都会执行冗余的JavaScript代码。</p><p>避免不小心把相同脚本引入两次的一种方法就是在模版系统中实现脚本管理模块。典型的脚本引入方法就是在HTML页面中用SCRIPT标签：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"menu_1.0.17.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="16-尽量减少DOM访问"><a href="#16-尽量减少DOM访问" class="headerlink" title="16.尽量减少DOM访问"></a>16.尽量减少DOM访问</h4><p>用JavaScript访问DOM元素是很慢的，所以，为了让页面反应更迅速，应该：</p><ul><li><strong>缓存已访问过的元素的索引</strong></li><li><strong>先“离线”更新节点</strong>，再把它们添到DOM树上</li><li><strong>避免用JavaScript修复布局问题</strong> </li></ul><p><br></p><h4 id="17-用智能的事件处理器"><a href="#17-用智能的事件处理器" class="headerlink" title="17.用智能的事件处理器"></a>17.用智能的事件处理器</h4><p>太多<strong>频繁执行</strong>的<strong>事件处理器</strong>被添加到了DOM树的不同元素上会导致页面不灵敏，这就是<strong>推荐使用事件委托</strong>的原因。</p><p><br></p><h4 id="18-把脚本放在底部"><a href="#18-把脚本放在底部" class="headerlink" title="18.把脚本放在底部"></a>18.把脚本放在底部</h4><p>脚本会阻塞并行下载，HTTP/1.1官方文档建议浏览器每个主机名下并行下载的组件数不要超过两个，如果图片来自多个主机名，并行下载的数量就可以超过两个。如果脚本正在下载，浏览器就不开始任何其它下载任务，即使是在不同主机名下的。 </p><p><br></p><h1 id="javascript-css"><a href="#javascript-css" class="headerlink" title="javascript, css"></a>javascript, css</h1><h4 id="19-把JavaScript和CSS放到外面"><a href="#19-把JavaScript和CSS放到外面" class="headerlink" title="19.把JavaScript和CSS放到外面"></a>19.把JavaScript和CSS放到外面</h4><p>用外部文件可以让页面更快，因为JavaScript和CSS文件会被缓存在浏览器。 </p><p><br></p><h4 id="20-压缩JavaScript和CSS"><a href="#20-压缩JavaScript和CSS" class="headerlink" title="20.压缩JavaScript和CSS"></a>20.压缩JavaScript和CSS</h4><p>压缩具体来说就是从代码中<strong>去除不必要的字符以减少大小</strong>，从而提升加载速度。代码最小化就是去掉所有注释和不必要的空白字符（空格，换行和tab）。在JavaScript中这样做能够提高响应性能，因为要下载的文件变小了。</p><p>两个最常用的JavaScript代码压缩工具是JSMin和YUI Compressor，YUI compressor还可以压缩CSS。 </p><p><br></p><h1 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h1><h4 id="21-优化图片"><a href="#21-优化图片" class="headerlink" title="21.优化图片"></a>21.优化图片</h4><p>尝试把GIF格式转换成PNG格式 </p><p><br></p><h4 id="22-优化CSS-Sprite"><a href="#22-优化CSS-Sprite" class="headerlink" title="22.优化CSS Sprite"></a>22.优化CSS Sprite</h4><ul><li>在Sprite图片中<strong>横向排列一般都比纵向排列的最终文件小</strong></li><li>组合Sprite图片中的相似颜色可以保持低色数，最理想的是256色以下PNG8格式</li><li>“对移动端友好”，不要在Sprite图片中留下太大的空隙。虽然不会在很大程度上影响图片文件的大小，但这样做可以节省用户代理把图片解压成像素映射时消耗的内存。100×100的图片是1万个像素，而1000×1000的图片就是100万个像素了。</li></ul><p><br></p><h4 id="23-不要用HTML缩放图片"><a href="#23-不要用HTML缩放图片" class="headerlink" title="23.不要用HTML缩放图片"></a>23.不要用HTML缩放图片</h4><p><strong>不要因为在HTML中可以设置宽高而使用本不需要的大图</strong>。如果需要</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"100"</span> <span class="attr">height</span>=<span class="string">"100"</span> <span class="attr">src</span>=<span class="string">"mycat.jpg"</span> <span class="attr">alt</span>=<span class="string">"My Cat"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>那么图片本身（mycat.jpg）应该是100x100px的，而不是去缩小500x500px的图片。</p><p><br></p><h4 id="24-用小的可缓存的favicon-ico"><a href="#24-用小的可缓存的favicon-ico" class="headerlink" title="24.用小的可缓存的favicon.ico"></a>24.用小的可缓存的favicon.ico</h4><p>favicon.ico是放在服务器根目录的图片，它会带来一堆麻烦，因为即便你不管它，浏览器也会自动请求它，所以最好不要给一个<code>404 Not Found</code>响应。而且只要在同一个服务器上，每次请求它时都会发送cookie，此外这个图片还会干扰下载顺序，例如在IE中，当你在onload中请求额外组件时，将会先下载favicon。</p><p>所以为了缓解favicon.ico的缺点，应该确保：</p><ul><li>足够小，最好在1K以下</li><li>设置合适的有效期HTTP头，把有效期设置为几个月后一般比较安全，可以通过检查当前favicon.ico的最后修改日期来确保变更能让浏览器知道。</li></ul><p><br></p><h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><h4 id="25-给Cookie减肥"><a href="#25-给Cookie减肥" class="headerlink" title="25.给Cookie减肥"></a>25.给Cookie减肥</h4><p>保证cookie尽可能的小，以最小化对用户响应时间的影响。</p><ul><li>清除不必要的cookie</li><li>保证cookie尽可能小，以最小化对用户响应时间的影响</li><li>注意给cookie设置合适的域级别，以免影响其它子域</li><li>设置合适的有效期，更早的有效期或者none可以更快的删除cookie，提高用户响应时间</li></ul><p><br></p><h4 id="26-把组件放在不含cookie的域下"><a href="#26-把组件放在不含cookie的域下" class="headerlink" title="26.把组件放在不含cookie的域下"></a>26.把组件放在不含cookie的域下</h4><p>当浏览器发送对静态图像的请求时，cookie也会一起发送，而服务器根本不需要这些cookie。所以它们只会造成没有意义的网络通信量，应该确保对静态组件的请求不含cookie。可以创建一个子域，把所有的静态组件都部署在那儿。 如果域名是<code>www.example.org</code>，可以把静态组件部署到<code>static.example.org</code>。 </p><p><br></p><h1 id="移动端"><a href="#移动端" class="headerlink" title="移动端"></a>移动端</h1><h4 id="27-保证所有组件都小于25K"><a href="#27-保证所有组件都小于25K" class="headerlink" title="27.保证所有组件都小于25K"></a>27.保证所有组件都小于25K</h4><p>这个限制是因为iPhone不能缓存大于25K的组件，注意这里指的是未压缩的大小。这就是为什么缩减内容本身也很重要，因为单纯的gzip可能不够。</p><p><br></p><h4 id="28-把组件打包到一个复合文档里"><a href="#28-把组件打包到一个复合文档里" class="headerlink" title="28.把组件打包到一个复合文档里"></a>28.把组件打包到一个复合文档里</h4><p>把各个组件打包成一个像有附件的电子邮件一样的复合文档里，可以用一个HTTP请求获取多个组件（记住一点：HTTP请求是代价高昂的）。用这种方式的时候，要先检查用户代理是否支持（iPhone就不支持）。 </p><p><br></p><h1 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h1><h4 id="29-Gzip组件"><a href="#29-Gzip组件" class="headerlink" title="29.Gzip组件"></a>29.Gzip组件</h4><p>前端工程师可以想办法明显地缩短通过网络传输HTTP请求和响应的时间。毫无疑问，终端用户的带宽速度，网络服务商，对等交换点的距离等等，都是开发团队所无法控制的。但还有别的能够影响响应时间的因素，压缩可以通过减少HTTP响应的大小来缩短响应时间。</p><p>从HTTP/1.1开始，web客户端就有了支持压缩的Accept-Encoding <strong>HTTP请求头</strong>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Accept-Encoding: gzip, deflate</span><br></pre></td></tr></table></figure><p>如果web服务器看到这个请求头，它就会用客户端列出的一种方式来压缩响应。web服务器通过<code>Content-Encoding</code>相应头来通知客户端。 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure><p>尽可能多地用gzip压缩能够给页面减肥，这也是提升用户体验最简单的方法。 </p><p><br></p><h4 id="30-避免图片src属性为空"><a href="#30-避免图片src属性为空" class="headerlink" title="30.避免图片src属性为空"></a>30.避免图片src属性为空</h4><p>Image with empty string <strong>src</strong>属性是空字符串的图片很常见，主要以两种形式出现： </p><ul><li><p><strong>straight HTML</strong> </p><ul><li><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">””</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>JavaScript </p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> Image();</span><br><span class="line">img.src = <span class="string">''</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>这两种形式都会引起相同的问题：浏览器会向服务器发送另一个请求。 </p><p><br></p><h4 id="31-配置ETags"><a href="#31-配置ETags" class="headerlink" title="31.配置ETags"></a>31.配置ETags</h4><p>实体标签（ETags），是服务器和浏览器用来决定浏览器缓存中组件与源服务器中的组件是否匹配的一种机制（“实体”也就是组件：图片，脚本，样式表等等）。添加ETags可以提供一种实体验证机制，比最后修改日期更加灵活。一个ETag是一个字符串，作为一个组件某一具体版本的唯一标识符。唯一的格式约束是字符串必须用引号括起来，源服务器用相应头中的<code>ETag</code>来指定组件的ETag： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">      Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT</span><br><span class="line">      ETag: "10c24bc-4ab-457e1c1f"</span><br><span class="line">      Content-Length: 12195</span><br></pre></td></tr></table></figure><p>然后，如果浏览器必须验证一个组件，它用<code>If-None-Match</code>请求头来把ETag传回源服务器。如果ETags匹配成功，会返回一个304状态码，这样就减少了12195个字节的响应体。 </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">GET</span> /i/yahoo.gif HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line">      Host: us.yimg.com</span><br><span class="line">      If-Modified-Since: Tue, <span class="number">12</span> Dec <span class="number">2006</span> <span class="number">03</span>:<span class="number">03</span>:<span class="number">59</span> GMT</span><br><span class="line">      If-None-Match: <span class="string">"10c24bc-4ab-457e1c1f"</span></span><br><span class="line">      HTTP/<span class="number">1</span>.<span class="number">1</span> <span class="number">304</span> Not Modified</span><br></pre></td></tr></table></figure><p><br></p><h4 id="32-对Ajax用GET请求"><a href="#32-对Ajax用GET请求" class="headerlink" title="32.对Ajax用GET请求"></a>32.对Ajax用GET请求</h4><p>Yahoo!邮箱团队发现使用<code>XMLHttpRequest</code>时，浏览器的<strong>POST请求是通过一个两步的过程来实现的</strong>：先发送HTTP头，再发送数据。所以最好用GET请求，它只需要发送一个TCP报文（除非cookie特别多）。IE的URL长度最大值是2K，所以如果要发送的数据超过2K就无法使用GET了。</p><p>POST请求的一个有趣的副作用是实际上没有发送任何数据，就像GET请求一样。正如<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html" target="_blank" rel="noopener">HTTP说明文档</a>中描述的，GET请求是用来检索信息的。所以它的语义只是用GET请求来请求数据，而不是用来发送需要存储到服务器的数据。</p><p><br></p><h4 id="33-尽早清空缓冲区"><a href="#33-尽早清空缓冲区" class="headerlink" title="33.尽早清空缓冲区"></a>33.尽早清空缓冲区</h4><p><br></p><h4 id="34-使用CDN（内容分发网络）"><a href="#34-使用CDN（内容分发网络）" class="headerlink" title="34.使用CDN（内容分发网络）"></a>34.使用CDN（<strong>内容分发网络</strong>）</h4><p><br></p><h4 id="35-添上Expires或者Cache-Control-HTTP头"><a href="#35-添上Expires或者Cache-Control-HTTP头" class="headerlink" title="35.添上Expires或者Cache-Control HTTP头"></a>35.添上Expires或者Cache-Control HTTP头</h4>]]></content>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> 35条军规 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>拦截全局ajax请求与Ajax-hook源码分析</title>
      <link href="/2018/07/03/%E6%8B%A6%E6%88%AA%E5%85%A8%E5%B1%80ajax%E8%AF%B7%E6%B1%82%E4%B8%8EAjax-hook%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2018/07/03/%E6%8B%A6%E6%88%AA%E5%85%A8%E5%B1%80ajax%E8%AF%B7%E6%B1%82%E4%B8%8EAjax-hook%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</url>
      <content type="html"><![CDATA[<h1 id="一、ajax-hook插件"><a href="#一、ajax-hook插件" class="headerlink" title="一、ajax-hook插件"></a>一、<a href="https://github.com/wendux/Ajax-hook" target="_blank" rel="noopener">ajax-hook插件</a></h1><h4 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h4><p><img src="/2018/07/03/拦截全局ajax请求与Ajax-hook源码分析/ajaxhook.png" alt="image"></p><p><br></p><a id="more"></a><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li><p>引入文件</p><ul><li><p>Using cdn</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://unpkg.com/ajax-hook/dist/ajaxhook.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li><li><p>Using npm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ajax-hook</span><br></pre></td></tr></table></figure></li></ul></li><li><p>注册回调函数</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">hookAjax(&#123;</span><br><span class="line">  <span class="comment">//hook callbacks</span></span><br><span class="line">  onreadystatechange:<span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"onreadystatechange called: %O"</span>,xhr)</span><br><span class="line">  &#125;,</span><br><span class="line">  onload:<span class="function"><span class="keyword">function</span>(<span class="params">xhr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"onload called: %O"</span>,xhr)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">//hook function</span></span><br><span class="line">  open:<span class="function"><span class="keyword">function</span>(<span class="params">arg,xhr</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"open called: method:%s,url:%s,async:%s"</span>,arg[<span class="number">0</span>],arg[<span class="number">1</span>],arg[<span class="number">2</span>])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// NPM</span></span><br><span class="line"><span class="comment">// const ah=require("ajax-hook")</span></span><br><span class="line"><span class="comment">// ah.hookAjax(&#123;...&#125;)</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>异步请求</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get current page source code </span></span><br><span class="line">$.get().done(<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(d.substr(<span class="number">0</span>,<span class="number">30</span>)+<span class="string">"..."</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>结果</p><ul><li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; open called: method:GET,<span class="attr">url</span>:http:<span class="comment">//localhost:63342/Ajax-hook/demo.html,async:true</span></span><br><span class="line">&gt; onload called: XMLHttpRequest</span><br><span class="line">&gt; <span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></span><br><span class="line">  &lt;html&gt;</span><br><span class="line">  &lt;head l...</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><br></p><h1 id="二、源码"><a href="#二、源码" class="headerlink" title="二、源码"></a>二、源码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./src/ajaxhook"</span>)(<span class="built_in">module</span>.exports)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /src/ajaxhook.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * author: wendu</span></span><br><span class="line"><span class="comment"> * email: 824783146@qq.com</span></span><br><span class="line"><span class="comment"> * source code: https://github.com/wendux/Ajax-hook</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ob是index.js传入的module.exports</span></span><br><span class="line"><span class="built_in">module</span>.exports=<span class="function"><span class="keyword">function</span> (<span class="params">ob</span>) </span>&#123;</span><br><span class="line">    ob.hookAjax = <span class="function"><span class="keyword">function</span> (<span class="params">funs</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">window</span>._ahrealxhr = <span class="built_in">window</span>._ahrealxhr || XMLHttpRequest</span><br><span class="line">        XMLHttpRequest = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// this是new XMLHttpRequest()返回的对象</span></span><br><span class="line">            <span class="keyword">this</span>.xhr = <span class="keyword">new</span> <span class="built_in">window</span>._ahrealxhr;</span><br><span class="line">            <span class="comment">// 复制this.xhr的属性到this对象</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">in</span> <span class="keyword">this</span>.xhr) &#123;</span><br><span class="line">                <span class="keyword">var</span> type = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    type = <span class="keyword">typeof</span> <span class="keyword">this</span>.xhr[attr]</span><br><span class="line">                &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">                <span class="keyword">if</span> (type === <span class="string">"function"</span>) &#123;</span><br><span class="line">                    <span class="comment">// hookfun为函数调用，this指向window（非严格模式）</span></span><br><span class="line">                    <span class="keyword">this</span>[attr] = hookfun(attr);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="built_in">Object</span>.defineProperty(<span class="keyword">this</span>, attr, &#123;</span><br><span class="line">                        get: getFactory(attr),</span><br><span class="line">                        set: setFactory(attr)</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getFactory</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.hasOwnProperty(attr + <span class="string">"_"</span>)?<span class="keyword">this</span>[attr + <span class="string">"_"</span>]:<span class="keyword">this</span>.xhr[attr];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">setFactory</span>(<span class="params">attr</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">f</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> xhr = <span class="keyword">this</span>.xhr;</span><br><span class="line">                <span class="keyword">var</span> that = <span class="keyword">this</span>;</span><br><span class="line">                <span class="keyword">if</span> (attr.indexOf(<span class="string">"on"</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>[attr + <span class="string">"_"</span>] = f;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (funs[attr]) &#123;</span><br><span class="line">                    xhr[attr] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                        funs[attr](that) || f.apply(xhr, <span class="built_in">arguments</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    xhr[attr] = f;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">hookfun</span>(<span class="params">fun</span>) </span>&#123;</span><br><span class="line">            <span class="comment">// console.log(this)</span></span><br><span class="line">            <span class="comment">// this指向hookfun调用者，此处为window</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> args = [].slice.call(<span class="built_in">arguments</span>)</span><br><span class="line">                <span class="comment">// 函数方法是否在注册回调函数的列表中</span></span><br><span class="line">                <span class="keyword">if</span> (funs[fun] &amp;&amp; funs[fun].call(<span class="keyword">this</span>, args, <span class="keyword">this</span>.xhr)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 匿名函数的调用者为new XMLHttpRequest()对象</span></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.xhr[fun].apply(<span class="keyword">this</span>.xhr, args);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">window</span>._ahrealxhr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 恢复XMLHttpRequest对象</span></span><br><span class="line">    ob.unHookAjax = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>._ahrealxhr)  XMLHttpRequest = <span class="built_in">window</span>._ahrealxhr;</span><br><span class="line">        <span class="built_in">window</span>._ahrealxhr = <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//for typescript</span></span><br><span class="line">    ob.default=ob;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> ajax </tag>
            
            <tag> hook </tag>
            
            <tag> 拦截请求 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浏览器缓存机制</title>
      <link href="/2018/06/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
      <url>/2018/06/28/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/</url>
      <content type="html"><![CDATA[<h1 id="一、缓存类型"><a href="#一、缓存类型" class="headerlink" title="一、缓存类型"></a>一、缓存类型</h1><h4 id="1、缓存类型分为强缓存和协商缓存"><a href="#1、缓存类型分为强缓存和协商缓存" class="headerlink" title="　　1、缓存类型分为强缓存和协商缓存"></a>　　1、缓存类型分为强缓存和协商缓存</h4><ul><li><strong>强缓存</strong>：在用户请求资源时，如果命中强缓存，则不向服务器请求，而直接从本地获取资源。我们可以看到<strong>200</strong>状态码，并提示<strong>from disk cache或from memory cache</strong>。 </li></ul><ul><li><strong>协商缓存</strong>： 在用户请求资源时，浏览器直接则向服务器发送请求，服务器根据 request header 来判断是否命中协商缓存，<strong>如果命中，则返回304和新的response header</strong>，使用本地资源；否则，返回新的资源。 </li></ul><p><br></p><h4 id="2、区别"><a href="#2、区别" class="headerlink" title="2、区别"></a>2、区别</h4><ul><li><strong>共同点</strong>：两者命中后都是从本地读取资源。</li><li><strong>不同点</strong>： 强缓存很强势，是没有向服务器发出请求的； 而协商缓存必须要向服务器发一个请求来协商。 </li></ul><a id="more"></a><p><br></p><h1 id="二、强缓存header"><a href="#二、强缓存header" class="headerlink" title="二、强缓存header"></a>二、强缓存header</h1><p>强缓存是利用http的响应头中的<strong>Expires</strong>字段和<strong>Cache-Control</strong>两个字段来控制，用来表示使用缓存的有效时间。</p><h4 id="1、Expires"><a href="#1、Expires" class="headerlink" title="1、Expires"></a>1、Expires</h4><p>　　Expires是<strong>http1.0</strong>规范的，表示缓存的过期时间。  如某个资源的response heade中的字段： <code>Expires: Fri, 18 Aug 2017 07:57:17 GMT</code>。 表示当浏览器再次加载这个资源时，如果时间没有超过，就命中强缓存，使用内存中缓存的资源。</p><blockquote><p>之所以浏览器在再次加载时可以判断出时间是否超过，是因为浏览器在缓存资源时，不仅缓存了资源，还缓存了response header相关的内容，比如这里Expires字段。</p></blockquote><p>缺点：由于不能保证服务器和用户端的绝对时间保持一致，所以缓存有时可能会出现混乱的情况， 在HTTP1.1版本中开始使用Cache-Control的方法进行缓存。</p><p><br></p><h4 id="2、Cache-Cntrol"><a href="#2、Cache-Cntrol" class="headerlink" title="2、Cache-Cntrol"></a>2、Cache-Cntrol</h4><p>　　Cache-Control是<strong>http1.1</strong>规范的，同样表示缓存的过期时间。 其中的<strong>max-age是作为判断是否过期的主要判据</strong>，它是一个相对时间，单位为s。 如知乎上的某一张图片的response header中的字段：<code>cache-control: public, max-age=31536000</code>。 public代表了这张图片是可以被任何用户缓存的，包括代理服务器等； 而max-age是表示在31536000s（一年）内，如果再次请求就使用本地资源。Cache-Control除了max-age的使用之外，还有几个比较重要的字段：</p><ul><li>no-cache： <strong>不优先使用本地缓存</strong>，而是使用<strong>协商缓存</strong>。注意： 这里并不是说一定不适用本地缓存的资源，而是需要先协商一下，如果命中，还是会使用本地缓存的。</li></ul><ul><li>no-store：<strong>一定不使用本地缓存</strong>，每次用户请求资源，都会下载得到服务器发来的最新的资源。</li></ul><ul><li>public：资源可以被任何用户缓存，包括所有普通用户和代理服务器。</li></ul><ul><li>private：只能被当前的特定用户缓存，其他用户无法缓存。 一般是说代理服务器不能缓存。 </li></ul><p><br></p><p>　　</p><h4 id="3、Expires、Cache-Control比较"><a href="#3、Expires、Cache-Control比较" class="headerlink" title="3、Expires、Cache-Control比较"></a>3、Expires、Cache-Control比较</h4><p><strong>相同点</strong>： 两者都是强缓存。</p><p><strong>不同点</strong>：</p><ul><li>Expires是http1.0规定的，而Cache-Control是http1.1规定的。</li></ul><ul><li>Expires的过期时间采用的是绝对时间，容易造成差错； 而Cache-Control的过期时间采用的时相对时间，在缓存上不会出现问题。</li></ul><ul><li><strong>两者可以同时存在于一次请求中，但是不会同时在一次请求中起作用。</strong> <strong>在HTTP1.0的环境下，Cache-Control不起作用，Expires起作用； 在HTTP1.1的环境之下， Expires不起作用，而Cache-Control起作用。</strong>当前一般都是http1.1的情况，所以Expires是<strong>作为一种向下兼容的形式而存在的</strong>。</li></ul><ul><li>Cache-Control的选择更多，功能更为强大，推荐使用。 Expires作为强缓存，功能单一，不推荐使用。</li></ul><p><br></p><h1 id="三、协商缓存header"><a href="#三、协商缓存header" class="headerlink" title="三、协商缓存header"></a>三、协商缓存header</h1><p><strong>协商缓存</strong>一般是使用<code>if-modified-since</code>/<code>last-modified</code>和 <code>f-none-match</code>/<code>etag</code> 由服务器来决定浏览器缓存的资源是否可以使用。 </p><h4 id="1、if-modified-since-last-modified"><a href="#1、if-modified-since-last-modified" class="headerlink" title="1、if-modified-since/last-modified"></a>1、if-modified-since/last-modified</h4><ol><li><ol><li>在用户请求资源之后，服务器会返回这个资源，并且在response header中返回一个 <code>last-modifed</code> 字段，这时浏览器就会缓存这个<strong>资源以及最后的修改时间</strong>， 可以是： <code>last-modified: Fri, 18 Aug 2017 07:27:24 GMT</code>。 </li><li>接着，当用户再次请求相同的资源时，需要在请求头中添加 <code>if-modified-since</code> 字段，这个字段的<strong>值就是之前存储的</strong><code>last-modifed</code> 的值，服务器得到 if-modified 值之后，会和资源最近的修改时间作比较，<strong>如果命中，则返回304</strong>，让浏览器使用缓存的资源；<strong>否则，返回一个最新的资源</strong>并且在 <code>last-modified</code> 修改为最近的资源修改时间。  </li></ol></li></ol><p><br></p><h4 id="2、if-none-match-etag"><a href="#2、if-none-match-etag" class="headerlink" title="2、if-none-match/etag"></a>2、if-none-match/etag</h4><ol start="2"><li><ol><li>在用户请求到资源之后，会返回这个资源，并且在response heade 中返回一个 <code>etag</code> 字段，即 <code>entity tag</code>，这个字段的值是一个字符串，<strong>唯一的标识了这个资源，只要资源发生了变化，这个etag值就会发生变化</strong>。</li><li>当用户再次请求资源时，会在request header中携带 <code>if-none-match</code> 字段，其值为上次缓存的 <code>etag</code>值，如果命中，则返回304，使用缓存资源；否则，服务器返回最新的资源。</li></ol></li></ol><p><br></p><h4 id="3、两种协商缓存机制的比较"><a href="#3、两种协商缓存机制的比较" class="headerlink" title="3、两种协商缓存机制的比较"></a>3、两种协商缓存机制的比较</h4><p><strong>相同点</strong>： 都是为了协商缓存。 </p><p><strong>不同点</strong>：</p><ul><li><strong>在精度上，Etag优于last-modified</strong>。 如果一个文件在1s内改变了很多次，<strong>通过etag是可以判断出来并返回最新的资源的</strong>，但是<strong>last-modifed的精度只能到s，是无法返回最新资源的，准确地说，UNIX记录只能精确到s。</strong> </li></ul><ul><li><strong>在准确率上，Etag优于last-modified</strong>。有些文件可能整体copy等，只是在时间上发生了变化，而内容上并没有发生变化（etag变化，last-modified不变），如果使用last-modified，那么就会返回最新的资源，实际上这是不需要的。</li></ul><ul><li><strong>在性能上，last-modified优于Etag</strong>。因为last-modified只需要记录时间，而etag需要重新由服务器生成一个hash值，所以在性能上etag略差。</li></ul><ul><li><p><strong>在优先级上，Etag优于last-modified</strong>。  <strong>也就是说，etag和last-modified是可以同时使用的，但是到服务器端，会优先判断etag，如果相同，直接返回304；如果不同，就继续比较last-modified，然后再决定是否返回新的资源。</strong></p><p><br> </p></li></ul><h2 id="四、浏览器缓存过程"><a href="#四、浏览器缓存过程" class="headerlink" title="四、浏览器缓存过程"></a>四、浏览器缓存过程</h2><p><img src="/2018/06/28/浏览器缓存机制/408483-20160525182943272-204994049.png" alt="img"> </p><ul><li>浏览器第一次加载资源，服务器返回200， 浏览器将资源下载下来，把资源和response header相关内容一并缓存。</li></ul><ul><li>下一次加载时，首先比较cache-control，如果没有超过时间，则命中强缓存，不发送请求，直接读取本地文件（如果不支持http1.1，则使用expires来判断）；如果时间已经过期，则发送带有<code>if-none-match</code>和<code>if-modified-since</code>的请求头。</li></ul><ul><li>服务器接受到请求之后，首先判断<code>etag</code>是否和服务器上文件的<code>etag</code>一致，如果一致，则命中协商缓存，返回304；如果不一致，返回新的资源并带上新的etag值返回200。</li></ul><ul><li><p>如果请求中没有<code>etag</code>值，则比较发送来的<code>if-modified-since</code> 值，如果命中，则返回304,；否则，返回新的资源带上新的<code>last-modified</code>的值并返回状态码200。</p><p><br> </p></li></ul><h2 id="五、用户行为与缓存类型"><a href="#五、用户行为与缓存类型" class="headerlink" title="五、用户行为与缓存类型　"></a>五、用户行为与缓存类型　</h2><ol><li><strong>地址栏访问</strong>，链接跳转是正常用户行为，将会<strong>触发浏览器缓存机制</strong>；</li><li><strong>F5刷新</strong>，浏览器会设置<code>max-age=0</code>，<strong>跳过强缓存判断，进行协商缓存判断</strong>；</li><li><strong>ctrl+F5刷新</strong>，跳过强缓存和协商缓存，<strong>直接从服务器拉取资源</strong>。</li></ol>]]></content>
      
      
        <tags>
            
            <tag> Expires </tag>
            
            <tag> Cache-Control </tag>
            
            <tag> modified </tag>
            
            <tag> etag </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx-limit限速</title>
      <link href="/2018/06/27/nginx-limit%E9%99%90%E9%80%9F/"/>
      <url>/2018/06/27/nginx-limit%E9%99%90%E9%80%9F/</url>
      <content type="html"><![CDATA[<h1 id="一、limit-conn"><a href="#一、limit-conn" class="headerlink" title="一、limit_conn"></a>一、<strong>limit_conn</strong></h1><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:limit_conn zone number;</span><br><span class="line">Context:http, server, location</span><br><span class="line"><span class="comment"># zone 特定键值</span></span><br><span class="line"><span class="comment"># number 最大允许连接数</span></span><br></pre></td></tr></table></figure><p>设置<code>特定键值</code>的<code>共享内存区域</code>和<code>最大允许连接数</code>。超过此限制时，服务器将返回错误以回复请求。</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">limit_conn_zone</span> <span class="variable">$binary_remote_addr</span> zone=perip:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">limit_conn_zone</span> <span class="variable">$server_name</span> zone=perserver:<span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">limit_conn_zone</span> <span class="variable">$server_name</span> zone=peradd:<span class="number">10m</span>;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">limit_conn</span> perip <span class="number">10</span>;</span><br><span class="line">        <span class="attribute">limit_conn</span> perserver <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /download/ &#123;</span><br><span class="line">            <span class="attribute">limit_conn</span> peradd <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># perip 、perserver 和 peradd  是自定义的特定键值</span></span><br><span class="line"><span class="comment"># 分别标志着某个共享内存区域</span></span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a><h1 id="二、limit-conn-zone"><a href="#二、limit-conn-zone" class="headerlink" title="二、limit_conn_zone"></a>二、limit_conn_zone</h1><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:limit_conn_zone key zone=name:size;</span><br><span class="line">Context:http</span><br><span class="line"><span class="comment"># size共享内存区域大小</span></span><br></pre></td></tr></table></figure><h4 id="key"><a href="#key" class="headerlink" title="key"></a>key</h4><p>为<code>共享内存区域</code>设置参数，该区域将保留<code>各种键</code>的状态。特别是，该状态包含当前的<code>连接数</code>。<code>key</code>可以包含文本，变量及其组合。在这里，客户端IP地址作为<code>key</code>。 </p><h4 id="size"><a href="#size" class="headerlink" title="size"></a>size</h4><p>一个<code>1M</code>的区域可以保持大约32000个<code>ipv4</code>的状态或大约16000个<code>ipv6</code>的状态。如果区域存储耗尽，服务器会将错误返回给所有其他请求。 </p><p><br></p><h1 id="三、limit-rate"><a href="#三、limit-rate" class="headerlink" title="三、limit_rate"></a>三、<strong>limit_rate</strong></h1><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Syntax:limit_rate rate;</span><br><span class="line">Default:limit_rate 0;</span><br><span class="line">Context:http, server, location, if in location</span><br><span class="line"><span class="comment"># 限制对客户的响应传输速率</span></span><br></pre></td></tr></table></figure><ul><li><p>零值禁用速率限制</p></li><li><p>限制是根据请求设置的，所以如果客户端同时打开两个连接，总体速率将是指定限制的两倍 </p></li><li><p>速率限制也可以在<code>$limit_rate</code>变量中设置 </p><ul><li><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$slow</span>) &#123;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$limit_rate</span> <span class="number">4k</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><p><br></p><h1 id="四、limit-rate-after"><a href="#四、limit-rate-after" class="headerlink" title="四、limit_rate_after"></a>四、<strong>limit_rate_after</strong></h1><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Syntax:limit_rate_after size;</span><br><span class="line">Default:limit_rate_after 0;</span><br><span class="line">Context:http, server, location, if in location</span><br></pre></td></tr></table></figure><p>设置<code>初始流量</code>，<strong>超过设置的流量后</strong>将对客户进一步传送将受到速率限制。 </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /flv/ &#123;</span><br><span class="line">    <span class="attribute">limit_rate_after</span> <span class="number">500k</span>;</span><br><span class="line">    <span class="attribute">limit_rate</span>       <span class="number">50k</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> limit_conn_zone </tag>
            
            <tag> limit_conn </tag>
            
            <tag> limit_rate_after </tag>
            
            <tag> limit_rate </tag>
            
            <tag> 限速 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>直方图拉伸和图像均衡化</title>
      <link href="/2018/06/24/%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%8B%89%E4%BC%B8%E5%92%8C%E5%9B%BE%E5%83%8F%E5%9D%87%E8%A1%A1%E5%8C%96/"/>
      <url>/2018/06/24/%E7%9B%B4%E6%96%B9%E5%9B%BE%E6%8B%89%E4%BC%B8%E5%92%8C%E5%9B%BE%E5%83%8F%E5%9D%87%E8%A1%A1%E5%8C%96/</url>
      <content type="html"><![CDATA[<p><img src="/2018/06/24/直方图拉伸和图像均衡化/v2-a54a4add15661d40d23fa7bbd3e347cd_hd.jpg" alt="img"></p><p><img src="/2018/06/24/直方图拉伸和图像均衡化/v2-74ae762cbeefc361f4ee423ee98b406f_hd.jpg" alt="img"></p><a id="more"></a><p><img src="/2018/06/24/直方图拉伸和图像均衡化/v2-856ada3416db2ead8eb3c03659ba9eb6_hd.jpg" alt="img"></p><p><img src="/2018/06/24/直方图拉伸和图像均衡化/v2-399a2c776a678d9f4c71970d48d06b26_hd.jpg" alt="img"></p><p><img src="/2018/06/24/直方图拉伸和图像均衡化/v2-465944a5d05a13533efe2b392ee7db66_hd.jpg" alt="img"></p>]]></content>
      
      
        <tags>
            
            <tag> 图像处理 </tag>
            
            <tag> 直方图 </tag>
            
            <tag> 拉伸 </tag>
            
            <tag> 均衡化 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>图像处理之亮度与对比度</title>
      <link href="/2018/06/24/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B9%8B%E4%BA%AE%E5%BA%A6%E4%B8%8E%E5%AF%B9%E6%AF%94%E5%BA%A6/"/>
      <url>/2018/06/24/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B9%8B%E4%BA%AE%E5%BA%A6%E4%B8%8E%E5%AF%B9%E6%AF%94%E5%BA%A6/</url>
      <content type="html"><![CDATA[<p><img src="/2018/06/24/图像处理之亮度与对比度/20170719173426437.png" alt=""></p><p>这个公式可以解释对图像的<strong>亮度</strong>和<strong>对比度</strong>操作的原理</p><ul><li>α能使图像像素成倍数的<strong>增长</strong>或<strong>降低</strong>（α&lt;1），使图像的<strong>差值</strong>有<strong>线性变化</strong>，从而改变了图像的对比度。</li><li>β可为负，也可为正。任何一个像素<strong>加上</strong>或<strong>减去</strong>一个值会使这个像素点向<strong>白色</strong>或向<strong>黑色</strong>靠近，从而改变了图像的亮度。 </li></ul><a id="more"></a> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">onchange</span>=<span class="string">"f(this)"</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"250"</span> <span class="attr">id</span>=<span class="string">"scream"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"250"</span> <span class="attr">style</span>=<span class="string">"border:1px solid #d3d3d3;"</span>&gt;</span></span><br><span class="line">        您的浏览器不支持 HTML5 canvas 标签。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">inputBtn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> url = URL.createObjectURL(inputBtn.files[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ctx = c.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"scream"</span>);</span></span><br><span class="line"><span class="javascript">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            ctx.drawImage(img, 0, 0, img.width, img.height);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> imgData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, c.width, c.height);</span></span><br><span class="line"><span class="javascript">            <span class="comment">//对比度系数</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> Contrast  = <span class="number">1.2</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//亮度增量</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> brightness = <span class="number">10</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgData.data.length; i += <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> r = imgData.data[i] * Contrast + brightness;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> g = imgData.data[i + <span class="number">1</span>] * Contrast + brightness;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> b = imgData.data[i + <span class="number">2</span>] * Contrast + brightness;</span></span><br><span class="line"><span class="undefined">                imgData.data[i] = r;</span></span><br><span class="line"><span class="undefined">imgData.data[i + 1] = g;</span></span><br><span class="line"><span class="undefined">imgData.data[i + 2] = b;</span></span><br><span class="line"><span class="undefined">                imgData.data[i + 3] = 255;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            ctx.putImageData(imgData, 0, 0);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        img.src = url;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 亮度 </tag>
            
            <tag> 对比度 </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>相似图片搜索原理</title>
      <link href="/2018/06/23/%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E6%90%9C%E7%B4%A2%E5%8E%9F%E7%90%86/"/>
      <url>/2018/06/23/%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E6%90%9C%E7%B4%A2%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2013/03/similar_image_search_part_ii.html" target="_blank" rel="noopener">阮一峰：相似图片搜索的原理</a></p><p><br></p><h1 id="一、颜色分布法"><a href="#一、颜色分布法" class="headerlink" title="一、颜色分布法"></a>一、颜色分布法</h1><p>每张图片都可以生成<strong>颜色分布的直方图</strong>(color histogram)。<strong>如果两张图片的直方图很接近，就可以认为它们很相似。</strong></p><p><img src="/2018/06/23/相似图片搜索原理/bg2013033103.jpg" alt="img"></p><p>任何一种颜色都是由红绿蓝三原色（RGB）构成的，所以上图共有4张直方图（三原色直方图 + 最后合成的直方图）。</p><p><br></p><a id="more"></a> <p>如果每种原色都可以取256个值，那么整个颜色空间共有1600万种颜色（256的三次方）。针对这1600万种颜色比较直方图，计算量实在太大了，因此需要采用简化方法。可以将0～255分成四个区：0～63为第0区，64～127为第1区，128～191为第2区，192～255为第3区。这意味着红绿蓝分别有4个区，总共可以构成64种组合（4的3次方）。</p><p>任何一种颜色必然属于这64种组合中的一种，这样就可以统计每一种组合包含的像素数量。</p><p><br></p><p><img src="/2018/06/23/相似图片搜索原理/bg2013033105.png" alt="img"></p><p>上图是某张图片的颜色分布表，将表中最后一栏提取出来，组成一个64维向量(7414, 230, 0, 0, 8, …, 109, 0, 0, 3415, 53929)。<strong>这个向量就是这张图片的特征值或者叫”指纹”</strong>。于是，寻找相似图片就变成了找出与其最相似的向量。这可以用<a href="http://en.wikipedia.org/wiki/Pearson_product-moment_correlation_coefficient" target="_blank" rel="noopener">皮尔逊相关系数</a>或者<a href="http://www.ruanyifeng.com/blog/2013/03/cosine_similarity.html" target="_blank" rel="noopener">余弦相似度</a>算出。</p><p><br></p><h1 id="二、内容特征法"><a href="#二、内容特征法" class="headerlink" title="二、内容特征法"></a>二、内容特征法</h1><p>除了颜色构成，还可以<strong>从比较图片内容的相似性入手</strong>。</p><p>首先，将原图转成一张较小的灰度图片，假定为50x50像素。然后，确定一个<strong>阈值</strong>，将灰度图片转成黑白图片。</p><p><img src="/2018/06/23/相似图片搜索原理/bg2013033106.jpg" alt="img"> <img src="/2018/06/23/相似图片搜索原理/bg2013033108.jpg" alt="img"> <img src="/2018/06/23/相似图片搜索原理/bg2013033107.png" alt="img"></p><p><strong>如果两张图片很相似，它们的黑白轮廓应该是相近的</strong>。于是，问题就变成了，第一步如何确定一个<strong>合理的阈值</strong>，正确呈现照片中的轮廓？</p><p><br></p><p>显然，<strong>前景色与背景色反差越大，轮廓就越明显</strong>。这意味着，如果我们找到一个值，可以使得前景色和背景色各自的”<strong>类内差异最小</strong>“（minimizing the intra-class variance），或者”<strong>类间差异最大</strong>“（maximizing the inter-class variance），那么这个值就是理想的阈值。</p><p><br></p><p>1979年，日本学者大津展之证明了，”类内差异最小”与”类间差异最大”是同一件事，即对应同一个阈值。他提出一种简单的算法，可以求出这个阈值，这被称为<a href="http://en.wikipedia.org/wiki/Otsu&#39;s_method" target="_blank" rel="noopener">“大津法”</a>（Otsu’s method）。下面就是他的计算方法。</p><p><br></p><p>假定一张图片共有n个像素，其中灰度值小于阈值的像素为 <code>n1</code> 个，大于等于阈值的像素为 <code>n2</code> 个（<code>n1 + n2 = n</code>）。<code>w1</code> 和 <code>w2</code> 表示这两种像素各自的比重。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">w1 = n1 / n</span><br><span class="line">w2 = n2 / n</span><br></pre></td></tr></table></figure><p>再假定，所有灰度值小于阈值的像素的平均值和方差分别为 <code>μ1</code> 和<code>σ1</code>，所有灰度值大于等于阈值的像素的平均值和方差分别为 <code>μ2</code> 和 <code>σ2</code>。于是，可以得到</p><blockquote><p>　　<code>类内差异 = w1(σ1的平方) + w2(σ2的平方)</code></p><p>　　<code>类间差异 = w1w2(μ1-μ2)^2</code></p></blockquote><p>可以证明，这两个式子是等价的：得到”类内差异”的最小值，等同于得到”类间差异”的最大值。不过，从计算难度看，后者的计算要容易一些。</p><p><br></p><p>下一步用”穷举法”，将阈值从灰度的最低值到最高值，依次取一遍，分别代入上面的算式。使得”类内差异最小”或”类间差异最大”的那个值，就是最终的阈值。具体的实例和Java算法，请看<a href="http://www.labbookpages.co.uk/software/imgProc/otsuThreshold.html" target="_blank" rel="noopener">这里</a>。</p><p><img src="/2018/06/23/相似图片搜索原理/bg2013033109.png" alt="img"></p><p>有了50x50像素的黑白缩略图，就等于有了一个50x50的0-1矩阵。矩阵的每个值对应原图的一个像素，0表示黑色，1表示白色。这个矩阵就是一张图片的特征矩阵。</p><p><br></p><p>两个特征矩阵的不同之处越少，就代表两张图片越相似。这可以用”异或运算”实现（即两个值之中只有一个为1，则运算结果为1，否则运算结果为0）。对不同图片的特征矩阵进行”异或运算”，结果中的1越少，就是越相似的图片。</p>]]></content>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
            <tag> 搜索 </tag>
            
            <tag> 相似 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RGB、YUV和HSV</title>
      <link href="/2018/06/23/RGB%E5%92%8CYUV/"/>
      <url>/2018/06/23/RGB%E5%92%8CYUV/</url>
      <content type="html"><![CDATA[<h1 id="一、颜色空间模型"><a href="#一、颜色空间模型" class="headerlink" title="一、颜色空间模型"></a>一、颜色空间模型</h1><p>颜色通常用三个独立的属性来描述，三个独立变量综合作用，自然就构成一个空间坐标，这就是颜色空间。但被描述的颜色对象本身是客观的，<strong>不同颜色空间只是从不同的角度去衡量同一个对象</strong>。</p><p>颜色空间按照基本机构可以分为两大类：<code>基色颜色空间</code>和<code>色、亮分离颜色空间</code>。前者典型的是<code>RGB</code>，后者包括<code>YUV</code>和<code>HSV</code>等等。 </p><p><br></p><h1 id="二、RGB颜色空间"><a href="#二、RGB颜色空间" class="headerlink" title="二、RGB颜色空间"></a>二、RGB颜色空间</h1><p>计算机和彩色电视机显示色彩的原理一样，都是采用R、G、B相加混色的原理，通过发射出三种不同强度的电子束，使屏幕内侧覆盖的红、绿、蓝磷光材料发光而产生色彩。这种色彩的表示方法称为<strong>RGB色彩空间</strong>表示。</p><p><img src="/2018/06/23/RGB和YUV/536358-20170318083044510-544926603.jpg" alt="img"></p><p><br></p><a id="more"></a> <h1 id="三、YUV颜色空间"><a href="#三、YUV颜色空间" class="headerlink" title="三、YUV颜色空间"></a>三、YUV颜色空间</h1><p><code>YUV</code>(亦称<code>YCrCb</code>)是被欧洲电视系统所采用的一种颜色编码方法。通常采用三管彩色摄像机或彩色CCD摄影机进行取像，然后把取得的彩色图像信号经分色、分别放大校正后得到RGB，再经过矩阵变换电路得到<strong>亮度信号</strong>Y和两个<strong>色差信号</strong><code>R-Y</code>(即U)、<code>B-Y</code>(即V)，最后发送端将亮度和两个色差总共三个信号分别进行编码，用同一信道发送出去。这种色彩的表示方法就是所谓的<strong>YUV色彩空间</strong>表示。</p><p><strong>采用YUV色彩空间的重要性是它的<code>亮度信号</code>Y和<code>色度信号</code>U、V是分离的</strong>。如果只有Y信号分量而没有U、V信号分量，那么这样表示的图像就是黑白灰度图像。彩色电视采用YUV空间正是为了用亮度信号Y解决彩色电视机与黑白电视机的兼容问题，使黑白电视机也能接收彩色电视信号。 </p><ul><li><code>Cr</code>反映了RGB输入信号<strong>红色部分</strong>与RGB信号<strong>亮度值</strong>之间的差异</li><li><code>Cb</code>反映的是RGB输入信号<strong>蓝色部分</strong>与RGB信号<strong>亮度值</strong>之同的差异</li><li><code>对比度</code>是不<strong>同像素点之间的差值</strong>，差值越大，对比度越明显</li></ul><h4 id="未量化转化公式"><a href="#未量化转化公式" class="headerlink" title="未量化转化公式"></a>未量化转化公式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// RGB取值范围均为0-255</span></span><br><span class="line">Y = <span class="number">0.299</span>R + <span class="number">0.587</span>G + <span class="number">0.114</span>B</span><br><span class="line">U = <span class="number">-0.147</span>R - <span class="number">0.289</span>G + <span class="number">0.436</span>B</span><br><span class="line">V = <span class="number">0.615</span>R - <span class="number">0.515</span>G - <span class="number">0.100</span>B</span><br><span class="line"></span><br><span class="line">R = Y + <span class="number">1.140</span>V</span><br><span class="line">G = Y - <span class="number">0.395</span>U - <span class="number">0.581</span>V</span><br><span class="line">B = Y + <span class="number">2.032</span>U</span><br></pre></td></tr></table></figure><p><br></p><h1 id="四、HSV颜色空间"><a href="#四、HSV颜色空间" class="headerlink" title="四、HSV颜色空间"></a>四、HSV颜色空间</h1><p><code>HSV</code>是一种将RGB色彩空间中的点放在倒圆锥体中的表示方法。HSV即<strong>色相</strong>(Hue)、<strong>饱和度</strong>(Saturation)、<strong>明度</strong>(亮度Value)，又称<code>HSB</code>(B即Brightness)。<strong>HSV颜色空间，更类似于人类感觉颜色的方式</strong> 。</p><ul><li><strong>色相</strong>（H）是色彩的基本属性，如<strong>红、橙、黄、绿、蓝、靛、紫</strong>。</li><li><strong>饱和度</strong>（S）是指色彩的纯度，<strong>越高色彩越纯，低则逐渐变灰</strong>，取0-100%的数值。</li><li><strong>明度</strong>（V），取0-max(计算机中HSV取值范围和存储的长度有关)。</li></ul><p>HSV颜色空间可以用一个圆锥空间模型来描述。圆锥的顶点处，V=0，H和S无定义，代表黑色。圆锥的顶面中心处V=max，S=0，H无定义，代表白色。 </p><p><img src="/2018/06/23/RGB和YUV/536358-20170320140444158-1965908932.jpg" alt=""></p><p><br></p><p><strong>色相是一组单独的概念，而纯度和明度是另一组概念。</strong></p><p><img src="/2018/06/23/RGB和YUV/snipaste20180623_181609.png" alt=""></p><p>同圆周角度的两个同心圆上的颜色一定有<strong>相同的色相</strong>，而掺白和掺黑的区别是：</p><ul><li>掺杂了白色，颜色<strong>纯度降低</strong>，<strong>明度增加</strong></li><li>掺杂了黑色，颜色<strong>纯度降低</strong>，<strong>明度降低</strong></li></ul><p><br></p><p><strong>设max等于r、g和b中的最大者，min为最小者。h在0到360°之间，s在0到100%之间，v在0到max之间</strong></p><p><img src="/2018/06/23/RGB和YUV/536358-20170320141419846-1299521890.png" alt=""></p><p><img src="/2018/06/23/RGB和YUV/536358-20170320141740721-1201160535.png" alt=""></p><p><br></p><h5 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h5><ul><li>色相</li><li>饱和度（纯度）</li><li>亮度（明度）</li><li>对比度</li></ul><p><br></p><h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><ul><li><a href="https://www.cnblogs.com/justkong/p/6570914.html" target="_blank" rel="noopener">RGB、YUV和HSV颜色空间模型 - pinhole - 博客园</a></li></ul>]]></content>
      
      
        <tags>
            
            <tag> RGB </tag>
            
            <tag> YUV </tag>
            
            <tag> HSV </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>鼠标事件与触摸事件</title>
      <link href="/2018/06/20/%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6%E4%B8%8E%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6/"/>
      <url>/2018/06/20/%E9%BC%A0%E6%A0%87%E4%BA%8B%E4%BB%B6%E4%B8%8E%E8%A7%A6%E6%91%B8%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<h4 id="一、鼠标事件"><a href="#一、鼠标事件" class="headerlink" title="一、鼠标事件"></a>一、鼠标事件</h4><ul><li><strong>mousedown：</strong>鼠标按钮被按下时触发。不能通过键盘触发。</li><li><strong>mouseup：</strong>鼠标按钮被释放弹起时触发。不能通过键盘触发。</li><li><strong>click：</strong>单击鼠标<strong>左键</strong>或者按下回车键时触发。</li><li><strong>dblclick</strong>：双击鼠标<strong>左键</strong>时触发。</li></ul><a id="more"></a><p><br></p><ul><li><strong>mouseover：</strong>鼠标移入<strong>目标元素</strong>或<strong>后代元素</strong>上时会触发。</li><li><strong>mouseout：</strong>鼠标离开目<strong>标元素</strong>或<strong>后代元素</strong>时会触发 。</li><li><strong>mouseenter：</strong>鼠标移入元素范围内触发，<strong>该事件不冒泡</strong>，即鼠标移到其后代元素上时不会触发。</li><li><strong>mouseleave：</strong>鼠标移出元素范围时触发，<strong>该事件不冒泡</strong>，即鼠标移到其后代元素时不会触发。</li><li><strong>mousemove：</strong>当鼠标移入被选元素内后，<strong>任意移动一个像素点都会触发</strong> 。</li></ul><p>注：</p><ul><li><p>在一个元素上相继触发mousedown和mouseup事件，才会触发click事件。两次click事件相继触发才会触发dblclick事件。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mousedown -&gt;  mouseup -&gt; click -&gt;mousedown -&gt;  mouseup -&gt; click -&gt; dblclick</span><br></pre></td></tr></table></figure></li><li><p>如果取消 了mousedown或mouseup中的一个，click事件就不会被触发。直接或间接取消了click事件，dblclick事件就不会被触发了。</p></li></ul><p><br></p><h4 id="二、触摸事件"><a href="#二、触摸事件" class="headerlink" title="二、触摸事件"></a>二、触摸事件</h4><ul><li><strong>touchstart</strong>：当手指触摸屏幕时触发；即使已经有一个手指放在了屏幕上也会触发。</li><li><strong>touchmove</strong>：当手指在屏幕上滑动时连续地触发。调用preventDefault()可以阻止滚动。</li><li><strong>touchend</strong>：当手指在屏幕上移开时触发。</li><li><strong>touchcancel</strong>：当系统停止跟踪触摸时触发。关于此事件的确切触发时间，文档中没有明确说明。</li></ul><p>注：</p><ul><li><p>点一下的触发顺序</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touchstart -&gt; touchend -&gt; mouseover-&gt; mousedown -&gt;  mouseup -&gt; click</span><br></pre></td></tr></table></figure></li><li><p>移动端的click事件会延迟300ms左右触发事件回调。等待 300 毫秒，以判断用户是否再次点击了屏幕 </p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 鼠标事件 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>事件流与事件委托</title>
      <link href="/2018/06/20/%E4%BA%8B%E4%BB%B6%E6%B5%81%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/"/>
      <url>/2018/06/20/%E4%BA%8B%E4%BB%B6%E6%B5%81%E4%B8%8E%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</url>
      <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/starof/p/4066381.html" target="_blank" rel="noopener">原文</a></p><p><br></p><h1 id="一、事件流"><a href="#一、事件流" class="headerlink" title="一、事件流"></a>一、事件流</h1><p>事件流描述的是从页面中<strong>接收事件</strong>的<strong>顺序</strong>。</p><h4 id="1、事件流感性认识"><a href="#1、事件流感性认识" class="headerlink" title="1、事件流感性认识"></a>1、事件流感性认识</h4><p>问题：单击页面元素，什么样的元素能感应到这样一个事件？</p><p>答案：<strong>单击目标元素的同时，也单击了目标元素的容器元素，甚至整个页面</strong>。</p><p><br></p><a id="more"></a> <p>例子：有三个同心圆， 给每个圆添加对应的事件处理函数，弹出对应的文字。单击最里面的圆，同时也单击了外面的圆，所以外面圆的click事件也会被触发。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#outer</span>&#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 400px;</span></span><br><span class="line"><span class="undefined">        height: 400px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">        right: 0;</span></span><br><span class="line"><span class="undefined">        margin: auto;</span></span><br><span class="line"><span class="undefined">        background-color: deeppink;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#middle</span>&#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 300px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="undefined">        left: 50%;</span></span><br><span class="line"><span class="undefined">        margin-left: -150px;</span></span><br><span class="line"><span class="undefined">        margin-top: -150px;</span></span><br><span class="line"><span class="undefined">        background-color: deepskyblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#inner</span>&#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="undefined">        margin-left: -50px;</span></span><br><span class="line"><span class="undefined">        margin-top: -50px;;</span></span><br><span class="line"><span class="undefined">        background-color: darkgreen;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        line-height: 100px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#outer</span>,<span class="selector-id">#middle</span>,<span class="selector-id">#inner</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border-radius</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            click me!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">       <span class="keyword">var</span> innerCircle= <span class="built_in">document</span>.getElementById(<span class="string">"inner"</span>);</span></span><br><span class="line"><span class="javascript">        innerCircle.onclick= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"innerCircle"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> middleCircle= <span class="built_in">document</span>.getElementById(<span class="string">"middle"</span>);</span></span><br><span class="line"><span class="javascript">        middleCircle.onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"middleCircle"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> outerCircle= <span class="built_in">document</span>.getElementById(<span class="string">"outer"</span>);</span></span><br><span class="line"><span class="javascript">        outerCircle.onclick= <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            alert(<span class="string">"outerCircle"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 效果如下：</p><p><img src="/2018/06/20/事件流与事件委托/010913358782848.png" alt="img"></p><p><img src="/2018/06/20/事件流与事件委托/010913543944892.png" alt=""></p><p><img src="/2018/06/20/事件流与事件委托/010915517849460.png" alt=""></p><p><img src="/2018/06/20/事件流与事件委托/010916084409806.png" alt=""></p><p><br></p><h2 id="2、事件流"><a href="#2、事件流" class="headerlink" title="2、事件流"></a>2、事件流</h2><p>事件发生时会在<strong>元素节点</strong>与<strong>根节点</strong>之间按照特定的顺序传播，<strong>路径所经过的所有节点都会收到该事件</strong>，这个传播过程即DOM事件流。</p><h5 id="1、两种事件流模型"><a href="#1、两种事件流模型" class="headerlink" title="1、两种事件流模型"></a>1、两种事件流模型</h5><p>事件传播的顺序对应浏览器的两种事件流模型：<strong>捕获型事件流</strong>和<strong>冒泡型事件流</strong>。</p><ul><li><strong>冒泡型事件流</strong>：事件的传播是从<strong>最特定</strong>的<strong>事件目标</strong>到最不特定的<strong>事件目标</strong>。即从DOM树的叶子到根</li><li><strong>捕获型事件流</strong>：事件的传播是从<strong>最不特定</strong>的<strong>事件目标</strong>到最特定的<strong>事件目标</strong>。即从DOM树的根到叶子</li></ul><p>事件捕获的思想就是不太具体的节点应该更早接收到事件，而最具体的节点最后接收到事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span>Click me!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这段html代码中，单击了页面中的<code>&lt;div&gt;</code>元素，</p><p>在冒泡型事件流中click事件传播顺序为<code>&lt;div&gt;</code>—》<code>&lt;body&gt;</code>—》<code>&lt;html&gt;</code>—》<code>document</code></p><p>在捕获型事件流中click事件传播顺序为<code>document</code>—》<code>&lt;html&gt;</code>—》<code>&lt;body&gt;</code>—》<code>&lt;div&gt;</code></p><p><img src="/2018/06/20/事件流与事件委托/010945579257474.png" alt=""></p><p><img src="/2018/06/20/事件流与事件委托/010945436598199.png" alt=""></p><p><strong>note</strong>:</p><ul><li><p><strong>所有现代浏览器</strong>都支持<strong>事件冒泡</strong>，但在具体实现中略有差别：</p><ul><li>IE5.5及更早版本中事件冒泡会跳过<code>&lt;html&gt;</code>元素(从<code>body</code>直接跳到<code>document</code>)。</li><li>IE9、Firefox、Chrome、和Safari则将事件一直冒泡到window对象。</li></ul></li><li><p>IE9、Firefox、Chrome、Opera、和Safari都支持<strong>事件捕获</strong>。尽管<strong>DOM标准要求事件应该从document对象开始传播，但这些浏览器都是从window对象开始捕获事件的</strong>。</p></li><li>由于老版本浏览器不支持，很少有人使用事件捕获。<strong>建议使用事件冒泡</strong>。</li></ul><p><br></p><h3 id="2、DOM事件流"><a href="#2、DOM事件流" class="headerlink" title="2、DOM事件流"></a><strong>2、DOM事件流</strong></h3><p>DOM标准采用捕获+冒泡。两种事件流都会触发DOM的所有对象，<strong>从document对象开始，也在document对象结束</strong>。</p><p><img src="/2018/06/20/事件流与事件委托/315302-20160621155328756-279009443.png" alt="img"></p><p>DOM标准规定事件流包括三个阶段：事件捕获阶段、处于目标阶段和事件冒泡阶段。</p><ul><li>事件<strong>捕获阶段</strong>：<strong>实际目标</strong>（<code>&lt;div&gt;</code>）在捕获阶段<strong>不会接收事件</strong>。也就是在捕获阶段，事件从document到<code>&lt;html&gt;</code>再到<code>&lt;body&gt;</code>就停止了。上图中为<code>1~3</code>。</li><li>处于<strong>目标阶段</strong>：事件在<code>&lt;div&gt;</code>上发生并处理，按照添加的顺序执行，忽略<code>捕获/冒泡</code>参数设置。<strong>但是事件处理会被看成是冒泡阶段的一部分</strong>。</li><li><strong>冒泡阶段</strong>：事件又传播回<strong>文档</strong>。</li></ul><p><strong>note</strong>:</p><ul><li>尽管“DOM2级事件”标准规范明确规定事件捕获阶段不会涉及事件目标，但是在IE9、Safari、Chrome、Firefox和Opera9.5及更高版本都会在捕获阶段触发事件对象上的事件。结果，就是有两次机会在目标对象上面操作事件。</li><li>并非所有的事件都会经过冒泡阶段 。<strong>所有的事件都要经过捕获阶段和处于目标阶段</strong>，但是<strong>有些事件会跳过冒泡阶段</strong>：如，获得输入焦点的<strong>focus事件</strong>和失去输入焦点的<strong>blur事件</strong>。</li></ul><p><br></p><p>两次机会在目标对象上面操作事件例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-id">#outer</span>&#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 400px;</span></span><br><span class="line"><span class="undefined">        height: 400px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">        left: 0;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">bottom</span><span class="selector-pseudo">:0</span>;</span></span><br><span class="line"><span class="undefined">        right: 0;</span></span><br><span class="line"><span class="undefined">        margin: auto;</span></span><br><span class="line"><span class="undefined">        background-color: deeppink;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#middle</span>&#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 300px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:300px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="undefined">        left: 50%;</span></span><br><span class="line"><span class="undefined">        margin-left: -150px;</span></span><br><span class="line"><span class="undefined">        margin-top: -150px;</span></span><br><span class="line"><span class="undefined">        background-color: deepskyblue;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#inner</span>&#123;</span></span><br><span class="line"><span class="undefined">        position: absolute;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</span></span><br><span class="line"><span class="undefined">        margin-left: -50px;</span></span><br><span class="line"><span class="undefined">        margin-top: -50px;;</span></span><br><span class="line"><span class="undefined">        background-color: darkgreen;</span></span><br><span class="line"><span class="undefined">        text-align: center;</span></span><br><span class="line"><span class="undefined">        line-height: 100px;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">color</span><span class="selector-pseudo">:white</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#outer</span>,<span class="selector-id">#middle</span>,<span class="selector-id">#inner</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border-radius</span><span class="selector-pseudo">:100</span>%;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"middle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"inner"</span>&gt;</span></span><br><span class="line">            click me!</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> innerCircle= <span class="built_in">document</span>.getElementById(<span class="string">"inner"</span>);</span></span><br><span class="line"><span class="javascript">    innerCircle.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"innerCircle的click事件在捕获阶段被触发"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    innerCircle.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"innerCircle的click事件在冒泡阶段被触发"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> middleCircle= <span class="built_in">document</span>.getElementById(<span class="string">"middle"</span>);</span></span><br><span class="line"><span class="javascript">    middleCircle.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"middleCircle的click事件在捕获阶段被触发"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    middleCircle.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"middleCircle的click事件在冒泡阶段被触发"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> outerCircle= <span class="built_in">document</span>.getElementById(<span class="string">"outer"</span>);</span></span><br><span class="line"><span class="javascript">    outerCircle.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"outerCircle的click事件在捕获阶段被触发"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">    outerCircle.addEventListener(<span class="string">"click"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">"outerCircle的click事件在冒泡阶段被触发"</span>);</span></span><br><span class="line"><span class="javascript">    &#125;,<span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行效果就是会陆续弹出6个框，为说明原理我整合成了一个图：</p><p><img src="/2018/06/20/事件流与事件委托/052135036896502.png" alt=""></p><p><br></p><h2 id="二、事件代理"><a href="#二、事件代理" class="headerlink" title="二、事件代理"></a>二、事件代理</h2><p>传统的事件处理中，需要为<strong>每个元素</strong>添加事件处理器。js事件代理则是一种简单有效的技巧，通过它可以把事件处理器添加到<strong>一个父级元素</strong>上，从而避免把事件处理器添加到<strong>多个子级元素</strong>上。</p><h4 id="1、事件代理"><a href="#1、事件代理" class="headerlink" title="1、事件代理"></a>1、事件代理</h4><p>事件代理的原理用到的就是事件冒泡和目标元素，<strong>把事件处理器添加到父元素，等待子元素事件冒泡，并且父元素能够通过target（IE为srcElement）判断是哪个子元素，从而做相应处理。</strong></p><p>事件代理的处理方式，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"color-list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>red<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>orange<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>yellow<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>green<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>blue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>indigo<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>purple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> colorList = <span class="built_in">document</span>.getElementById(<span class="string">"color-list"</span>);</span></span><br><span class="line"><span class="javascript">        colorList.addEventListener(<span class="string">'click'</span>, showColor, <span class="literal">false</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">showColor</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            e = e || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> targetElement = e.target || e.srcElement;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (targetElement.nodeName.toLowerCase() === <span class="string">"li"</span>) &#123;</span></span><br><span class="line"><span class="undefined">                alert(targetElement.innerHTML);</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)();</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、事件代理的好处"><a href="#2、事件代理的好处" class="headerlink" title="2、事件代理的好处"></a>2、事件代理的好处</h4><p> 总结一下事件代理的好处：</p><ul><li><strong>将多个事件处理器减少到一个，因为事件处理器要驻留内存，这样就提高了性能</strong>。想象如果有一个100行的表格，对比传统的为每个单元格绑定事件处理器的方式和事件代理（即table上添加一个事件处理器），不难得出结论，事件代理确实避免了一些潜在的风险，提高了性能。</li><li>DOM更新无需重新绑定事件处理器，因为事件代理对不同子元素可采用不同处理方法。如果新增其他子元素（a,span,div等），直接修改事件代理的事件处理函数即可，不需要重新绑定处理器，不需要再次循环遍历。</li></ul><h4 id="3、事件代理的问题"><a href="#3、事件代理的问题" class="headerlink" title="3、事件代理的问题"></a>3、事件代理的问题</h4><p>代码如下：事件代理同时绑定了li和span，当点击span的时候，li和span都会冒泡。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>li中的span的内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'li'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'li li'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    $(<span class="built_in">document</span>).on(<span class="string">'click'</span>, <span class="string">'span'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        alert(<span class="string">'li span'</span>);</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>解决办法：</p><p>方法一：span的事件处理程序中阻止事件继续传播（这里是冒泡）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(document).on(&apos;click&apos;, &apos;span&apos;, function(e)&#123;</span><br><span class="line">       alert(&apos;li span&apos;);</span><br><span class="line">       e.stopPropagation();</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure><p>方法二：li的事件处理程序中检测target元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(document).on(&apos;click&apos;, &apos;li&apos;, function (e) &#123;</span><br><span class="line">       if (e.target.nodeName == &apos;SPAN&apos;) &#123;</span><br><span class="line">           e.stopPropagation();</span><br><span class="line">           return;</span><br><span class="line">       &#125;</span><br><span class="line">       alert(&apos;li li&apos;);</span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h4 id="4、事件代理的一个有趣应用"><a href="#4、事件代理的一个有趣应用" class="headerlink" title="4、事件代理的一个有趣应用"></a>4、事件代理的一个有趣应用</h4><p>点击一个列表时，输出对应的索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    var ul=document.querySelector(&apos;ul&apos;);</span><br><span class="line">    var lis=ul.querySelectorAll(&apos;ul li&apos;);</span><br><span class="line">    ul.addEventListener(&apos;click&apos;, function (e) &#123;</span><br><span class="line">        var target= e.target;</span><br><span class="line">        if(target.nodeName.toUpperCase()===&apos;LI&apos;)&#123;</span><br><span class="line">            alert([].indexOf.call(lis,target));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,false)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> event </tag>
            
            <tag> 事件流 </tag>
            
            <tag> 事件代理 </tag>
            
            <tag> 事件委托 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-this原理</title>
      <link href="/2018/06/19/JS-this%E5%8E%9F%E7%90%86/"/>
      <url>/2018/06/19/JS-this%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<p><a href="http://www.ruanyifeng.com/blog/2018/06/javascript-this.html" target="_blank" rel="noopener">原文</a></p><p><br></p><h2 id="一、问题的由来"><a href="#一、问题的由来" class="headerlink" title="一、问题的由来"></a>一、问题的由来</h2><p>学懂 JavaScript 语言，一个标志就是理解下面两种写法，可能有不一样的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = obj.foo;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法一</span></span><br><span class="line">obj.foo()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line">foo()</span><br></pre></td></tr></table></figure><p>上面代码中，虽然<code>obj.foo</code>和<code>foo</code>指向同一个函数，但是执行结果可能不一样。请看下面的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="keyword">this</span>.bar) &#125;,</span><br><span class="line">  bar: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = obj.foo;</span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">obj.foo() <span class="comment">// 1</span></span><br><span class="line">foo() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>这种差异的原因，就在于函数体内部使用了<code>this</code>关键字。很多教科书会告诉你，<code>this</code>指的是函数运行时所在的环境。对于<code>obj.foo()</code>来说，<code>foo</code>运行在<code>obj</code>环境，所以<code>this</code>指向<code>obj</code>；对于<code>foo()</code>来说，<code>foo</code>运行在全局环境，所以<code>this</code>指向全局环境。所以，两者的运行结果不一样。</p><p>这种解释没错，但是教科书往往不告诉你，为什么会这样？也就是说，函数的运行环境到底是怎么决定的？举例来说，为什么<code>obj.foo()</code>就是在<code>obj</code>环境执行，而一旦<code>var foo = obj.foo</code>，<code>foo()</code>就变成在全局环境执行？</p><p>本文就来解释 JavaScript 这样处理的原理。理解了这一点，你就会彻底理解<code>this</code>的作用。</p><p><br></p><h2 id="二、内存的数据结构"><a href="#二、内存的数据结构" class="headerlink" title="二、内存的数据结构"></a>二、内存的数据结构</h2><p>JavaScript 语言之所以有<code>this</code>的设计，跟内存里面的数据结构有关系。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>:  <span class="number">5</span> &#125;;</span><br></pre></td></tr></table></figure><p>上面的代码将一个对象赋值给变量<code>obj</code>。JavaScript 引擎会先在内存里面，生成一个对象<code>{ foo: 5 }</code>，然后把这个对象的内存地址赋值给变量<code>obj</code>。</p><p><img src="/2018/06/19/JS-this原理/bg2018061801.png" alt="img"></p><p>也就是说，变量<code>obj</code>是一个<strong>地址</strong>（reference）。后面如果要读取<code>obj.foo</code>，引擎先<strong>从<code>obj</code>拿到内存地址，然后再从该地址读出原始的对象，返回它的<code>foo</code>属性</strong>。</p><p>原始的对象以字典结构保存，每一个属性名都对应<strong>一个属性描述对象</strong>。举例来说，上面例子的<code>foo</code>属性，实际上是以下面的形式保存的。</p><p><img src="/2018/06/19/JS-this原理/bg2018061802.png" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    [[value]]: <span class="number">5</span></span><br><span class="line">    [[writable]]: <span class="literal">true</span></span><br><span class="line">    [[enumerable]]: <span class="literal">true</span></span><br><span class="line">    [[configurable]]: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，<code>foo</code>属性的值保存在<strong>属性描述对象的<code>value</code>属性</strong>里面。</p><p><br></p><a id="more"></a> <h2 id="三、函数"><a href="#三、函数" class="headerlink" title="三、函数"></a>三、函数</h2><p>这样的结构是很清晰的，问题在于属性的值可能是一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125; &#125;;</span><br></pre></td></tr></table></figure><p>这时，引擎会将函数单独保存在内存中，然后再将函数的地址赋值给<code>foo</code>属性的<code>value</code>属性。</p><p><img src="/2018/06/19/JS-this原理/bg2018061803.png" alt="img"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  foo: &#123;</span><br><span class="line">    [[value]]: 函数的地址</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于函数是一个单独的值，所以它可以在不同的环境（上下文）执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">f</span>: f &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line">f()</span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.f()</span><br></pre></td></tr></table></figure><p><br></p><h2 id="四、环境变量"><a href="#四、环境变量" class="headerlink" title="四、环境变量"></a>四、环境变量</h2><p>JavaScript 允许在函数体内部，<strong>引用当前环境的其他变量</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，函数体里面使用了变量<code>x</code>。该变量由运行环境提供。</p><p><br></p><p>现在问题就来了，由于函数可以在不同的运行环境执行，所以需要有一种机制，能够在函数体内部获得当前的运行环境（context）。所以，<code>this</code>就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，函数体里面的<code>this.x</code>就是指当前运行环境的<code>x</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  f: f,</span><br><span class="line">  x: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 单独执行</span></span><br><span class="line">f() <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// obj 环境执行</span></span><br><span class="line">obj.f() <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数<code>f</code>在全局环境执行，<code>this.x</code>指向全局环境的<code>x</code>。</p><p><img src="/2018/06/19/JS-this原理/bg2018061804.png" alt="img"></p><p>在<code>obj</code>环境执行，<code>this.x</code>指向<code>obj.x</code>。</p><p><img src="/2018/06/19/JS-this原理/bg2018061805.png" alt="img"></p><p>回到本文开头提出的问题，<code>obj.foo()</code>是通过<code>obj</code>找到<code>foo</code>，所以就是在<code>obj</code>环境执行。一旦<code>var foo = obj.foo</code>，变量<code>foo</code>就直接指向函数本身，所以<code>foo()</code>就变成在全局环境执行。</p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-渲染-composite</title>
      <link href="/2018/06/16/css-%E6%B8%B2%E6%9F%93-Composite/"/>
      <url>/2018/06/16/css-%E6%B8%B2%E6%9F%93-Composite/</url>
      <content type="html"><![CDATA[<p><a href="http://taobaofed.org/blog/2016/04/25/performance-composite/" target="_blank" rel="noopener">原文</a></p><p><br></p><ul><li>利用<code>合成层</code>，加速渲染</li><li>防止<code>层爆</code>，优化性能</li></ul><p><br></p><h1 id="一、整体流程"><a href="#一、整体流程" class="headerlink" title="一、整体流程"></a>一、整体流程</h1><p>一个 Web 页面的展示，简单来说可以认为经历了以下几个步骤。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1eabOLpXXXXX3XFXXXXXXXXXX-1093-167.jpg_720x720.jpg" alt="img"></p><ul><li><strong>JavaScript</strong>：一般来说，我们会使用 JavaScript 来实现一些视觉变化的效果。比如做一个动画或者往页面里添加一些 DOM 元素等。</li></ul><ul><li><strong>Style</strong>：计算样式，这个过程是根据 CSS 选择器，对每个 DOM 元素匹配对应的 CSS 样式。这一步结束之后，就确定了每个 DOM 元素上该应用什么 CSS 样式规则。(<strong>Render Tree</strong>)</li></ul><ul><li><strong>Layout</strong>：布局，上一步确定了每个 DOM 元素的样式规则，这一步就是具体计算每个 DOM 元素<strong>最终在屏幕上显示的大小和位置</strong>。web 页面中元素的布局是相对的，因此一个元素的布局发生变化，会联动地引发其他元素的布局发生变化。比如，<code>&lt;body&gt;</code> 元素的宽度的变化会影响其子元素的宽度，其子元素宽度的变化也会继续对其孙子元素产生影响。因此对于浏览器来说，布局过程是经常发生的。</li></ul><ul><li><strong>Paint</strong>：绘制，本质上就是<strong>填充像素的过程</strong>。包括绘制文字、颜色、图像、边框和阴影等，也就是一个 DOM 元素所有的可视效果。一般来说，这个绘制过程是在多个层上完成的。</li></ul><ul><li><strong>Composite</strong>：<strong>渲染层合并</strong>，由上一步可知，对页面中 DOM 元素的绘制是在多个层上进行的。在每个层上完成绘制过程之后，浏览器会将所有层按照合理的顺序合并成一个图层，然后显示在屏幕上。对于有位置重叠的元素的页面，这个过程尤其重要，因为一旦图层的合并顺序出错，将会导致元素显示异常。</li></ul><p>当然，本文我们只来关注 Composite 部分。</p><p><br></p><a id="more"></a> <h2 id="二、浏览器渲染原理"><a href="#二、浏览器渲染原理" class="headerlink" title="二、浏览器渲染原理"></a>二、浏览器渲染原理</h2><p>在讨论 Composite 之前，有必要先简单了解下一些浏览器（本文只是针对 Chrome 来说）的渲染原理，方便对之后一些概念的理解。更多详细的内容可以参阅 <a href="http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome" target="_blank" rel="noopener">GPU Accelerated Compositing in Chrome</a></p><p><br></p><p>在浏览器中，页面内容是存储为由 Node 对象组成的树状结构，也就是 DOM 树。每一个 HTML element 元素都有一个 <strong>Node 对象</strong>与之对应，DOM 树的根节点永远都是 Document Node。这一点相信大家都很熟悉了，但其实，从 DOM 树到最后的渲染，需要进行一些转换映射。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1VFRDMXXXXXahXpXXXXXXXXXX-814-320.png_720x720.jpg" alt="img"></p><p><br></p><h4 id="1、从-Nodes-到-LayoutObjects"><a href="#1、从-Nodes-到-LayoutObjects" class="headerlink" title="1、从 Nodes 到 LayoutObjects"></a>1、从 Nodes 到 LayoutObjects</h4><p>DOM 树中得<strong>每个 Node 节点都有一个对应的</strong> <strong>LayoutObject</strong> 。LayoutObject 知道如何在屏幕上 paint Node 的内容。</p><p><br></p><h4 id="2、从-LayoutObjects-到-PaintLayers"><a href="#2、从-LayoutObjects-到-PaintLayers" class="headerlink" title="2、从 LayoutObjects 到 PaintLayers"></a>2、从 LayoutObjects 到 PaintLayers</h4><p>一般来说，拥有相同的坐标空间的 LayoutObjects，属于同一个渲染层（PaintLayer）。PaintLayer 最初是用来实现 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Understanding_z_index/The_stacking_context" target="_blank" rel="noopener">stacking contest（层叠上下文）</a>，以此来保证页面元素以正确的顺序合成（composite），这样才能正确的展示元素的重叠以及半透明元素等等。因此<font color="#A52A2A" size="4"><strong>满足形成层叠上下文条件的 LayoutObject 一定会为其创建新的渲染层</strong></font>，当然还有其他的一些特殊情况，为一些特殊的 LayoutObjects 创建一个新的渲染层，比如 <code>overflow != visible</code> 的元素。根据创建 PaintLayer 的原因不同，可以将其分为常见的 3 类：</p><ul><li><strong>NormalPaintLayer</strong><ul><li><strong>根元素</strong>（HTML）</li><li>有明确的<strong>定位属性</strong>（relative、fixed、sticky、absolute）</li><li><strong>透明</strong>的（opacity 小于 1）</li><li>有 CSS <strong>滤镜</strong>（fliter）</li><li>有 CSS mask 属性</li><li>有 CSS <strong>mix-blend-mode</strong> 属性（不为 normal）</li><li>有 CSS <strong>transform</strong> 属性（不为 none）</li><li>backface-visibility 属性为 hidden</li><li>有 CSS reflection 属性</li><li>有 CSS <strong>column-count</strong> 属性（不为 auto）或者 有 CSS <strong>column-width</strong> 属性（不为 auto）</li><li><strong>当前有对于 opacity、transform、fliter、backdrop-filter 应用动画</strong></li></ul></li></ul><p><br></p><ul><li><strong>OverflowClipPaintLayer</strong><ul><li>overflow 不为 visible</li></ul></li></ul><p><br></p><ul><li><strong>NoPaintLayer</strong><ul><li>不需要 paint 的 PaintLayer，比如一个没有视觉属性（背景、颜色、阴影等）的空 div。</li></ul></li></ul><p><br></p><font color="#A52A2A" size="4"><strong>满足以上条件的 LayoutObject 会拥有独立的渲染层，而其他的 LayoutObject 则和拥有独立渲染层的最近的祖先元素共用一个。</strong></font><p><br></p><h4 id="3、从-PaintLayers-到-GraphicsLayers"><a href="#3、从-PaintLayers-到-GraphicsLayers" class="headerlink" title="3、从 PaintLayers 到 GraphicsLayers"></a>3、从 PaintLayers 到 GraphicsLayers</h4><p>某些特殊的渲染层会被认为是合成层（Compositing Layers），<font color="#A52A2A" size="4"><strong>合成层拥有单独的 GraphicsLayer</strong></font>，而其他<strong>不是合成层的渲染层</strong>，则和拥有 GraphicsLayer 的<strong>最近的祖先层</strong>公用一个。</p><font color="#A52A2A" size="4"><br><br>注：根元素（html）是<strong>最外</strong>一层<strong>合成层（Compositing Layers）</strong>，包含了其<code>子合成层</code>、<code>子渲染层</code>（<code>NormalPaintLayer</code>、<code>OverflowClipPaintLayer</code>、<code>NoPaintLayer</code>）<br><br></font><p>每个 GraphicsLayer 都有一个 GraphicsContext，GraphicsContext 会<strong>负责输出该层的位图</strong>，位图是存储在共享内存中，作为纹理上传到 GPU 中，最后<strong>由 GPU 将多个位图进行合成，然后 draw 到屏幕上</strong>，此时，我们的页面也就展现到了屏幕上。</p><p>渲染层提升为合成层的原因有一下几种：</p><p>注：渲染层提升为合成层有一个<strong>先决条件</strong>，该渲染层必须是 SelfPaintingLayer（基本可认为是上文介绍的 <strong>NormalPaintLayer</strong>）。以下所讨论的渲染层提升为合成层的情况都是在该渲染层为 SelfPaintingLayer 前提下的。</p><ul><li><font color="#A52A2A" size="4"><strong>直接原因</strong>（direct reason）</font><ul><li><p><strong>硬件加速</strong>的 iframe 元素（比如 <strong>iframe 页面中有合成层</strong>）<a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/direct/iframe.html" target="_blank" rel="noopener">demo</a></p></li><li><p>video 元素</p></li><li><p>覆盖在 video 元素上的视频控制栏</p></li><li><p>3D 或者 <strong>硬件加速的 2D</strong> Canvas 元素</p><ul><li><a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/direct/canvas.html" target="_blank" rel="noopener">demo：普通 2D Canvas 不会提升为合成层</a></li><li><a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/direct/webgl.html" target="_blank" rel="noopener">demo：3D Canvas 提升为合成层</a></li></ul></li><li><p>硬件加速的插件，比如 flash 等等</p></li><li><p>在 DPI 较高的屏幕上，fix 定位的元素会自动地被提升到合成层中。但在 DPI 较低的设备上却并非如此，因为这个渲染层的提升会使得字体渲染方式由子像素变为灰阶（详细内容请参考：<a href="http://www.html5rocks.com/en/tutorials/internals/antialiasing-101/?redirect_from_locale=zh#toc-text-rendering" target="_blank" rel="noopener">Text Rendering</a>）</p></li><li><p>有 <strong>3D transform</strong></p></li><li><p>backface-visibility 为 hidden</p></li><li><p>对 opacity、transform、fliter、backdropfilter 应用了 animation 或者 transition（<strong>需要是 active 的 animation 或者 transition，当 animation 或者 transition 效果未开始或结束后，提升合成层也会失效</strong>）</p><ul><li><p><a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/direct/animation.html" target="_blank" rel="noopener">demo：animation</a></p></li><li><p><a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/direct/transition.html" target="_blank" rel="noopener">demo：transition</a></p><p><img src="/2018/06/16/css-渲染-Composite/TB1XMzqMXXXXXXsXFXXXXXXXXXX-959-370.jpg" alt="img"></p></li></ul></li><li><p><strong>will-change</strong> 设置为 opacity、transform、top、left、bottom、right（其中 top、left 等需要设置明确的定位属性，如 relative 等）<a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/direct/will-change.html" target="_blank" rel="noopener">demo</a></p></li></ul><p><img src="/2018/06/16/css-渲染-Composite/snipaste20180616_131458.png" alt=""></p><p><br></p></li><li><font color="#A52A2A" size="4"><strong>后代元素原因</strong></font><ul><li>有合成层后代同时本身有 transform、opactiy（小于 1）、mask、fliter、reflection 属性 <a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/descendant/combo.html" target="_blank" rel="noopener">demo</a></li><li>有合成层后代同时本身 overflow 不为 visible（如果本身是因为明确的定位因素产生的 SelfPaintingLayer，则需要 z-index 不为 auto） <a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/descendant/overflow.html" target="_blank" rel="noopener">demo</a></li><li>有合成层后代同时本身 fixed 定位 <a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/descendant/fixed.html" target="_blank" rel="noopener">demo</a></li><li>有 3D transfrom 的合成层后代同时本身有 preserves-3d 属性 <a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/descendant/preserves-3d.html" target="_blank" rel="noopener">demo</a></li><li>有 3D transfrom 的合成层后代同时本身有 perspective 属性 <a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/descendant/perspective.html" target="_blank" rel="noopener">demo</a></li></ul></li></ul><p><br></p><ul><li><font color="#A52A2A" size="4"><strong>overlap 重叠原因</strong></font><p>为什么会因为重叠原因而产生合成层呢？举个简单的栗子。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1sZbvMXXXXXXlXXXXXXXXXXXX-491-300.jpg" alt="img"></p><p>蓝色的矩形重叠在绿色矩形之上，同时它们的父元素是一个 GraphicsLayer。此时假设绿色矩形为一个 GraphicsLayer，如果 overlap 无法提升合成层的话，那么蓝色矩形不会提升为合成层，也就会和父元素公用一个 GraphicsLayer。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1qzzmMXXXXXX1XpXXXXXXXXXX-491-300.jpg" alt="img"></p><p>此时，渲染顺序就会发生错误，因此为保证渲染顺序，overlap 也成为了合成层产生的原因，也就是如下的正常情形。</p><p><img src="/2018/06/16/css-渲染-Composite/TB13cYmMXXXXXaXXpXXXXXXXXXX-491-300.jpg" alt="img"></p><p>当然 overlap 的原因也会细分为几类，接下来我们会详细看下。</p><ul><li><p>重叠或者说<strong>部分重叠</strong>在一个合成层之上。</p><p>那如何算是重叠呢，最常见和容易理解的就是元素的 <strong>border box（content + padding + border） 和合成层的有重叠</strong>，比如：<a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/overlap/normal.html" target="_blank" rel="noopener">demo</a>，当然 <strong>margin area 的重叠是无效的</strong>（<a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/overlap/margin.html" target="_blank" rel="noopener">demo</a>）。其他的还有一些不常见的情况，也算是同合成层重叠的条件，如下：</p><ul><li>filter 效果同合成层重叠 <a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/overlap/filter.html" target="_blank" rel="noopener">demo</a></li><li>transform 变换后同合成层重叠 <a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/overlap/transform.html" target="_blank" rel="noopener">demo</a></li><li>overflow scroll 情况下同合成层重叠。即如果一个 overflow scroll（不管 <code>overflow:auto</code> 还是 <code>overflow:scrill</code>，只要是能 scroll 即可） 的元素同一个合成层重叠，则其可视子元素也同该合成层重叠 <a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/overlap/overflow.html" target="_blank" rel="noopener">demo</a></li></ul></li><li><p><strong>假设重叠</strong>在一个合成层之上（assumedOverlap）。</p><p>这个原因听上去有点虚，什么叫假设重叠？其实也比较好理解，比如一个元素的 CSS 动画效果，动画运行期间，<strong>元素是有可能和其他元素有重叠的</strong>。针对于这种情况，于是就有了 assumedOverlap 的合成层产生原因，示例可见：<a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/overlap/animation.html" target="_blank" rel="noopener">demo</a>。在本 demo 中，动画元素视觉上并没有和其兄弟元素重叠，但因为 assumedOverlap 的原因，其兄弟元素依然提升为了合成层。</p><p>需要注意的是该原因下，有一个很特殊的情况：</p><p><strong>如果合成层有内联的 transform 属性，会导致<font color="#A52A2A" size="4">其兄弟渲染层 </font>assume overlap，从而提升为合成层</strong>。比如：<a href="http://taobaofed.github.io/demo/performance-composite-demo/layer-create/overlap/inline.html" target="_blank" rel="noopener">demo</a>。</p></li></ul></li></ul><p><br></p><h4 id="4、层压缩"><a href="#4、层压缩" class="headerlink" title="4、层压缩"></a>4、层压缩</h4><p>基本上常见的一些合成层的提升原因如上所说，你会发现，由于重叠的原因，可能随随便便就会产生出大量合成层来，而每个合成层都要消耗 CPU 和内存资源，岂不是严重影响页面性能。这一点浏览器也考虑到了，因此就有了层压缩（<strong>Layer Squashing</strong>）的处理。<strong>如果<font color="#A52A2A" size="4">多个渲染层</font>和<font color="#A52A2A" size="4">一个合成层</font>重叠时，这些渲染层会被压缩到一个 GraphicsLayer 中，以防止由于重叠原因导致可能出现的“层爆炸”。</strong>具体可以看如下 <a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/squash-hover.html" target="_blank" rel="noopener">demo</a>。一开始，蓝色方块由于<br><code>translateZ</code> 提升为了合成层，其他的方块元素因为重叠的原因，被压缩了一起，大小就是包含这 3 个方块的矩形大小。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1yslCMXXXXXahaXXXXXXXXXXX-755-406.png_720x720.jpg" alt="img"></p><p>当我们 hover 绿色方块时，会给其设置 <code>translateZ</code> 属性，导致绿色方块也被提升为合成层，则剩下的两个被压缩到了一起，大小就缩小为包含这 2 个方块的矩形大小。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1xxh1MXXXXXX_XXXXXXXXXXXX-755-406.png_720x720.jpg" alt="img"></p><p>当然，浏览器的自动的层压缩也不是万能的，有很多特定情况下，浏览器是无法进行层压缩的，如下所示，而这些情况也是我们应该尽量避免的。（注：以下情况都是基于重叠原因而言）</p><ul><li><p>无法进行会打破渲染顺序的压缩（squashingWouldBreakPaintOrder）</p><p>示例如下：<a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/squashingWouldBreakPaintOrder-mask.html" target="_blank" rel="noopener">demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#ancestor</span> &#123;</span></span><br><span class="line"><span class="undefined">    -webkit-mask-image: -webkit-linear-gradient(rgba(0,0,0,1), rgba(0,0,0,0));</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="css">  <span class="selector-id">#composited</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">    height: 100%;</span></span><br><span class="line"><span class="undefined">    transform: translateZ(0);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#container</span> &#123;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="undefined">    width: 400px;</span></span><br><span class="line"><span class="undefined">    height: 60px;</span></span><br><span class="line"><span class="undefined">    border: 1px solid black;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-id">#overlap-child</span> &#123;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    left: 0;</span></span><br><span class="line"><span class="undefined">    top: 0 ;</span></span><br><span class="line"><span class="undefined">    bottom: 0px;</span></span><br><span class="line"><span class="undefined">    width: 100%;</span></span><br><span class="line"><span class="undefined">    height: 60px;</span></span><br><span class="line"><span class="undefined">    background-color: orange;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"composited"</span>&gt;</span>Text behind the orange box.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ancestor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"overlap-child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在本例中，<code>#overlap-child</code> 同合成层重叠，如果进行压缩，会导致渲染顺序的改变，其父元素 <code>#ancestor</code> 的 mask 属性将失效，因此类似这种情况下，是无法进行层压缩的。目前常见的产生这种原因的情况有两种，一种是上述的祖先元素使用 mask 属性的情况，另一种是祖先元素使用 filter 属性的情况（<a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/squashingWouldBreakPaintOrder-filter.html" target="_blank" rel="noopener">demo</a>）。</p></li><li><p>video 元素的渲染层无法被压缩同时也无法将别的渲染层压缩到 video 所在的合成层上（squashingVideoIsDisallowed）<a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/video.html" target="_blank" rel="noopener">demo</a></p></li><li><p>iframe、plugin 的渲染层无法被压缩同时也无法将别的渲染层压缩到其所在的合成层上（squashingLayoutPartIsDisallowed）<a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/layoutpart.html" target="_blank" rel="noopener">demo</a></p></li><li><p>无法压缩有 reflection 属性的渲染层（squashingReflectionDisallowed）<a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/reflection.html" target="_blank" rel="noopener">demo</a></p></li><li><p>无法压缩有 blend mode 属性的渲染层（squashingBlendingDisallowed）<a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/blend-mode.html" target="_blank" rel="noopener">demo</a></p></li><li><p>当渲染层同合成层有不同的裁剪容器（clipping container）时，该渲染层无法压缩（squashingClippingContainerMismatch）。</p><p>示例如下：<a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/squashingClippingContainerMismatch.html" target="_blank" rel="noopener">demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.clipping-container</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="undefined">    height: 10px; </span></span><br><span class="line"><span class="undefined">    background-color: blue;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.composited</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    transform: translateZ(0); </span></span><br><span class="line"><span class="undefined">    height: 10px; </span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.target</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span>; </span></span><br><span class="line"><span class="undefined">    top: 0px; </span></span><br><span class="line"><span class="css">    <span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>; </span></span><br><span class="line"><span class="css">    <span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>; </span></span><br><span class="line"><span class="undefined">    background-color: green;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clipping-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"composited"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"target"</span>&gt;</span>不会被压缩到 composited div 上<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本例中 <code>.target</code> 同 合成层 <code>.composited</code> 重叠，但是由于 <code>.composited</code> 在一个 <code>overflow: hidden</code> 的容器中，导致 <code>.target</code> 和合成层有不同的裁剪容器，从而 <code>.target</code> 无法被压缩。</p></li><li><p>相对于合成层滚动的渲染层无法被压缩（scrollsWithRespectToSquashingLayer）</p><p>示例如下：<a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/scrollsWithRespectToSquashingLayer.html" target="_blank" rel="noopener">demo</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  body &#123;</span></span><br><span class="line"><span class="undefined">    height: 1500px;</span></span><br><span class="line"><span class="undefined">    overflow-x: hidden;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.composited</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    width: 50px;</span></span><br><span class="line"><span class="undefined">    height: 50px;</span></span><br><span class="line"><span class="undefined">    background-color: red;</span></span><br><span class="line"><span class="undefined">    position: absolute;</span></span><br><span class="line"><span class="undefined">    left: 50px;</span></span><br><span class="line"><span class="undefined">    top: 400px;</span></span><br><span class="line"><span class="undefined">    transform: translateZ(0);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.overlap</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 200px;</span></span><br><span class="line"><span class="undefined">    height: 200px;</span></span><br><span class="line"><span class="undefined">    background-color: green;</span></span><br><span class="line"><span class="undefined">    position: fixed;</span></span><br><span class="line"><span class="undefined">    left: 0px;</span></span><br><span class="line"><span class="undefined">    top: 0px;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"composited"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"overlap"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>本例中，红色的 <code>.composited</code> 提升为了合成层，绿色的 <code>.overlap</code> fix 在页面顶部，一开始只有 <code>.composited</code> 合成层。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1SHBOMXXXXXbnXFXXXXXXXXXX-690-484.jpg_640x640.jpg" alt="img"></p><p>当滑动页面，<code>.overlap</code> 重叠到 <code>.composited</code> 上时，<code>.overlap</code> 会因重叠原因提升为合成层，同时，因为相对于合成层滚动，因此无法被压缩。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1IrRGMXXXXXXxaXXXXXXXXXXX-690-484.jpg_640x640.jpg" alt="img"></p></li><li><p>当渲染层同合成层有不同的具有 opacity 的祖先层（一个设置了 opacity 且小于 1，一个没有设置 opacity，也算是不同）时，该渲染层无法压缩（squashingOpacityAncestorMismatch，同 squashingClippingContainerMismatch）<a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/squashingOpacityAncestorMismatch.html" target="_blank" rel="noopener">demo</a></p></li><li><p>当渲染层同合成层有不同的具有 transform 的祖先层时，该渲染层无法压缩（squashingTransformAncestorMismatch，同上） <a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/squashingTransformAncestorMismatch.html" target="_blank" rel="noopener">demo</a></p></li><li><p>当渲染层同合成层有不同的具有 filter 的祖先层时，该渲染层无法压缩（squashingFilterAncestorMismatch，同上）<a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/squashingFilterAncestorMismatch.html" target="_blank" rel="noopener">demo</a></p></li><li><p>当覆盖的合成层正在运行动画时，该渲染层无法压缩（squashingLayerIsAnimating），当动画未开始或者运行完毕以后，该渲染层才可以被压缩 <a href="http://taobaofed.github.io/demo/performance-composite-demo/squash/animating.html" target="_blank" rel="noopener">demo</a></p><p><img src="/2018/06/16/css-渲染-Composite/TB1mJjwMXXXXXajXpXXXXXXXXXX-960-391.jpg" alt="img"></p></li></ul><p><br></p><h2 id="三、如何查看合成层"><a href="#三、如何查看合成层" class="headerlink" title="三、如何查看合成层"></a>三、如何查看合成层</h2><p>使用 Chrome DevTools 工具来查看页面中合成层的情况。</p><p>比较简单的方法是打开 DevTools，勾选上 <code>Show layer borders</code></p><p><img src="https://img.alicdn.com/tps/TB1dZG.MXXXXXX2XVXXXXXXXXXX-276-164.png" alt="img"></p><p>其中，页面上的合成层会用黄色边框框出来。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1EQu4MXXXXXXiaXXXXXXXXXXX-709-717.png_600x600.jpg" alt="img"></p><p>当然，更加详细的信息可以通过 Timeline 来查看。</p><p>每一个单独的帧，看到每个帧的渲染细节：</p><p><img src="/2018/06/16/css-渲染-Composite/TB1.uznMXXXXXbcXFXXXXXXXXXX-325-195.jpg" alt="img"></p><p>点击之后，你就会在视图中看到一个新的选项卡：Layers。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1uCgsLpXXXXXNXFXXXXXXXXXX-333-260.jpg" alt="img"></p><p>点击这个 Layers 选项卡，你会看到一个新的视图。在这个视图中，你可以对这一帧中的所有合成层进行扫描、缩放等操作，同时还能看到每个渲染层被创建的原因。</p><p><img src="/2018/06/16/css-渲染-Composite/TB163nGMXXXXXatXXXXXXXXXXXX-1440-756.jpg_720x720.jpg" alt="img"></p><p>有了这个视图，你就能知道页面中到底有多少个合成层。如果你在对页面滚动或渐变效果的性能分析中发现 Composite 过程耗费了太多时间，那么你可以从这个视图里看到页面中有多少个渲染层，它们为何被创建，从而对合成层的数量进行优化。</p><p><br></p><h2 id="四、性能优化"><a href="#四、性能优化" class="headerlink" title="四、性能优化"></a>四、性能优化</h2><p>提升为合成层简单说来有以下几点好处：</p><font color="#A52A2A" size="4"><br><br>- <strong>合成层的位图，会交由 GPU 合成，比 CPU 处理要快</strong><br>- <strong>当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层</strong><br>- <strong>对于 transform 和 opacity 效果，不会触发 layout 和 paint</strong><br><br></font><p>利用合成层对于提升页面性能方面有很大的作用，因此我们也总结了一下几点优化建议。</p><p><br></p><h3 id="五、提升动画效果的元素"><a href="#五、提升动画效果的元素" class="headerlink" title="五、提升动画效果的元素"></a>五、提升动画效果的元素</h3><p>合成层的好处是不会影响到其他元素的绘制，因此，为了减少动画元素对其他元素的影响，从而减少 paint，我们需要把动画效果中的元素提升为合成层。</p><p>提升合成层的最好方式是使用 CSS 的 will-change 属性。从上一节合成层产生原因中，可以知道 will-change 设置为 opacity、transform、top、left、bottom、right 可以将元素提升为合成层。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#target</span> &#123;</span><br><span class="line">  <span class="attribute">will-change</span>: transform;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其兼容如下所示：</p><p><img src="/2018/06/16/css-渲染-Composite/TB1_6P9LpXXXXblXXXXXXXXXXXX-1252-284.png_720x720.jpg" alt="img"></p><p>对于那些目前还不支持 will-change 属性的浏览器，目前常用的是使用一个 3D transform 属性来强制提升为合成层：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#target</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但需要注意的是，不要创建太多的渲染层。因为每创建一个新的渲染层，就意味着新的内存分配和更复杂的层的管理。之后我们会详细讨论。</p><p>如果你已经把一个元素放到一个新的合成层里，那么可以使用 Timeline 来确认这么做是否真的改进了渲染性能。别盲目提升合成层，一定要分析其实际性能表现。</p><p><br></p><h3 id="六、使用-transform-或者-opacity-来实现动画效果"><a href="#六、使用-transform-或者-opacity-来实现动画效果" class="headerlink" title="六、使用 transform 或者 opacity 来实现动画效果"></a>六、使用 transform 或者 opacity 来实现动画效果</h3><p>文章最开始，我们讲到了页面呈现出来所经历的渲染流水线，其实从性能方面考虑，最理想的渲染流水线是没有布局和绘制环节的，只需要做合成层的合并即可：</p><p><img src="/2018/06/16/css-渲染-Composite/TB14YwvLpXXXXXGXFXXXXXXXXXX-1093-167.jpg_720x720.jpg" alt="img"></p><p>为了实现上述效果，就需要只使用那些仅触发 Composite 的属性。<strong>目前，只有两个属性是满足这个条件的：transforms 和 opacity</strong>。更详细的信息可以查看 <a href="http://csstriggers.com/" target="_blank" rel="noopener">CSS Triggers</a>。</p><p>注意：元素提升为合成层后，transform 和 opacity 才不会触发 paint，如果不是合成层，则其依然会触发 paint。具体见如下两个 demo。</p><ul><li><p><a href="http://taobaofed.github.io/demo/performance-composite-demo/paint/promote-element/no-promote-transform.html" target="_blank" rel="noopener">demo 1：transform</a></p><p><img src="/2018/06/16/css-渲染-Composite/TB1XsAVLpXXXXbzXpXXXXXXXXXX-712-411.png_640x640.jpg" alt="no-promote-transform"></p></li><li><p><a href="http://taobaofed.github.io/demo/performance-composite-demo/paint/promote-element/no-promote-opacity.html" target="_blank" rel="noopener">demo 2：opacity</a></p><p><img src="/2018/06/16/css-渲染-Composite/TB1j9M7LpXXXXaiXXXXXXXXXXXX-713-424.png_640x640.jpg" alt="no-promote-opacity"></p></li></ul><p>可以看到未提升 target element 为合成层，transform 和 opacity 依然会触发 paint。</p><p><br></p><h3 id="七、减少绘制区域"><a href="#七、减少绘制区域" class="headerlink" title="七、减少绘制区域"></a>七、减少绘制区域</h3><p>对于不需要重新绘制的区域应尽量避免绘制，以减少绘制区域，比如一个 fix 在页面顶部的固定不变的导航 header，在页面内容某个区域 repaint 时，整个屏幕包括 fix 的 header 也会被重绘，见 <a href="http://taobaofed.github.io/demo/performance-composite-demo/paint/reduce/no-reduce.html" target="_blank" rel="noopener">demo</a>，结果如下：</p><p><img src="/2018/06/16/css-渲染-Composite/TB1SK_9LpXXXXcaaXXXXXXXXXXX-699-304.png" alt="no-reduce"></p><p>而对于固定不变的区域，我们期望其并不会被重绘，因此可以通过之前的方法，将其提升为独立的合成层。</p><p>减少绘制区域，需要仔细分析页面，区分绘制区域，减少重绘区域甚至避免重绘。</p><p><br></p><h3 id="八、合理管理合成层"><a href="#八、合理管理合成层" class="headerlink" title="八、合理管理合成层"></a>八、合理管理合成层</h3><p>看完上面的文章，你会发现提升合成层会达到更好的性能。这看上去非常诱人，但是问题是，创建一个新的合成层并不是免费的，它得消耗额外的内存和管理资源。实际上，在内存资源有限的设备上，合成层带来的性能改善，可能远远赶不上过多合成层开销给页面性能带来的负面影响。同时，由于每个渲染层的纹理都需要上传到 GPU 处理，因此我们还需要考虑 CPU 和 GPU 之间的带宽问题、以及有多大内存供 GPU 处理这些纹理的问题。</p><p>对于合成层占用内存的问题，我们简单做了几个 demo 进行了验证。</p><p><a href="http://taobaofed.github.io/demo/performance-composite-demo/memory/multi-layers-expect.html" target="_blank" rel="noopener">demo 1</a> 和 <a href="http://taobaofed.github.io/demo/performance-composite-demo/memory/multi-layers.html" target="_blank" rel="noopener">demo 2</a> 中，会创建 2000 个同样的 div 元素，不同的是 <a href="http://taobaofed.github.io/demo/performance-composite-demo/memory/multi-layers.html" target="_blank" rel="noopener">demo 2</a> 中的元素通过 will-change 都提升为了合成层，而两个 demo 页面的内存消耗却有很明显的差别。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1EMYKMXXXXXcUXXXXXXXXXXXX-972-480.jpg" alt="img"></p><p><br></p><h4 id="九、防止层爆炸"><a href="#九、防止层爆炸" class="headerlink" title="九、防止层爆炸"></a>九、防止层爆炸</h4><p>通过之前的介绍，我们知道同合成层重叠也会使元素提升为合成层，虽然有浏览器的层压缩机制，但是也有很多无法进行压缩的情况。也就是说除了我们显式的声明的合成层，还可能由于重叠原因不经意间产生一些不在预期的合成层，极端一点可能会产生大量的额外合成层，出现层爆炸的现象。我们简单写了一个极端点但其实在我们的页面中比较常见的 <a href="http://taobaofed.github.io/demo/performance-composite-demo/memory/layer-explode.html" target="_blank" rel="noopener">demo</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  @-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> slide &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">from</span> &#123; <span class="attribute">transform</span>: none; &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">to</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(100px); &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.animating</span> &#123;</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="undefined">    width: 300px;</span></span><br><span class="line"><span class="undefined">    height: 30px;</span></span><br><span class="line"><span class="undefined">    background-color: orange;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">      -webkit-animation: slide 5s alternate linear infinite;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  ul &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    padding: 5px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    width: 600px;</span></span><br><span class="line"><span class="undefined">    height: 30px;</span></span><br><span class="line"><span class="undefined">    margin-bottom: 5px;</span></span><br><span class="line"><span class="undefined">    background-color: blue;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#fff</span>;</span></span><br><span class="line"><span class="undefined">    position: relative;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 会导致无法压缩：squashingClippingContainerMismatch */</span></span></span><br><span class="line"><span class="undefined">    overflow: hidden;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="undefined">      position: absolute;</span></span><br><span class="line"><span class="undefined">      top: 2px;</span></span><br><span class="line"><span class="undefined">      left: 2px;</span></span><br><span class="line"><span class="undefined">      font-size: 16px;</span></span><br><span class="line"><span class="undefined">      line-height: 16px;</span></span><br><span class="line"><span class="undefined">      padding: 2px;</span></span><br><span class="line"><span class="undefined">      margin: 0;</span></span><br><span class="line"><span class="undefined">      background-color: green;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 动画合成层 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"animating"</span>&gt;</span>composited animating<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- assume overlap --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- assume overlap --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>asume overlap, 因为 squashingClippingContainerMismatch 无法压缩<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="http://taobaofed.github.io/demo/performance-composite-demo/memory/layer-explode.html" target="_blank" rel="noopener">demo</a> 中，<code>.animating</code> 的合成层在运行动画，会导致 <code>.inner</code> 元素因为上文介绍过的 assumedOverlap 的原因，而被提升为合成层，同时，<code>.inner</code> 的父元素 <code>.box</code> 设置了 <code>overflow: hidden</code>，导致 <code>.inner</code> 的合成层因为 squashingClippingContainerMismatch 的原因，无法压缩，就出现了层爆炸的问题。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1E7PEMXXXXXbAXpXXXXXXXXXX-1390-778.jpg_720x720.jpg" alt="img"></p><p>这种情况平时在我们的业务中还是很常见的，比如 slider + list 的结构，一旦满足了无法进行层压缩的情况，就很容易出现层爆炸的问题。</p><p>解决层爆炸的问题，最佳方案是打破 overlap 的条件，也就是说让其他元素不要和合成层元素重叠。对于上述的示例，我们可以将 <code>.animation</code> 的 z-index 提高。修改后 <a href="http://taobaofed.github.io/demo/performance-composite-demo/memory/layer-explode-zIndex.html" target="_blank" rel="noopener">demo</a></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.animating</span> &#123;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">/* 让其他元素不和合成层重叠 */</span></span><br><span class="line">  <span class="selector-tag">position</span>: <span class="selector-tag">relative</span>;</span><br><span class="line">  <span class="selector-tag">z-index</span>: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，就只有 <code>.animating</code> 提升为合成层，如下：</p><p><img src="/2018/06/16/css-渲染-Composite/TB1LxrnMXXXXXcIXVXXXXXXXXXX-1366-777.jpg_720x720.jpg" alt="img"></p><p>同时，内存占用比起之前也降低了很多。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1FoDwMXXXXXc2XFXXXXXXXXXX-947-485.jpg" alt="img"></p><p>如果受限于视觉需要等因素，其他元素必须要覆盖在合成层之上，那应该尽量避免无法层压缩情况的出现。针对上述示例中，无法层压缩的情况（squashingClippingContainerMismatch），我们可以将 <code>.box</code> 的 <code>overflow: hidden</code> 去掉，这样就可以利用浏览器的层压缩了。修改后 <a href="http://taobaofed.github.io/demo/performance-composite-demo/memory/layer-explode-squash.html" target="_blank" rel="noopener">demo</a></p><p>此时，由于第一个 <code>.box</code> 因为 squashingLayerIsAnimating 的原因无法压缩，其他的都被压缩到了一起。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1OE6uMXXXXXc8XFXXXXXXXXXX-1368-774.jpg_720x720.jpg" alt="img"></p><p>同时，内存占用比起之前也降低了很多。</p><p><img src="/2018/06/16/css-渲染-Composite/TB1eYvqMXXXXXbJXVXXXXXXXXXX-936-480.jpg" alt="img"></p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 渲染 </tag>
            
            <tag> composite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-zoom和scale的区别</title>
      <link href="/2018/06/15/css-zoom%E5%92%8Cscale%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2018/06/15/css-zoom%E5%92%8Cscale%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<h1 id="一、zoom"><a href="#一、zoom" class="headerlink" title="一、zoom"></a>一、zoom</h1><h4 id="1、属性值"><a href="#1、属性值" class="headerlink" title="1、属性值"></a>1、属性值</h4><ul><li><p><code>auto</code>根据<code>viewport</code>来既定当前标签的缩放。</p></li><li><p><code>&lt;number&gt;</code>非负数。1表示没有缩放，大于1表示放大的倍数，小于1亦然。</p></li><li><p><code>&lt;percentage&gt;</code>非负百分比。以100%为基础进行缩放。</p></li></ul><p><br></p><h2 id="2、兼容性"><a href="#2、兼容性" class="headerlink" title="2、兼容性"></a>2、兼容性</h2><p>除了<code>Firefox</code>和<code>Opera Mini</code></p><p><br></p><h4 id="3、规范"><a href="#3、规范" class="headerlink" title="3、规范"></a>3、规范</h4><p>草案中</p><p><br></p><a id="more"></a> <h1 id="二、区别"><a href="#二、区别" class="headerlink" title="二、区别"></a>二、区别</h1><ul><li><code>zoom</code>更全面，但是<strong>不能负数</strong>，只能<strong>等比例控制</strong></li><li><code>scale</code><strong>只能数值</strong>，但是<strong>能负数</strong>，可以<strong>只控制1个维度</strong> </li></ul><p><br></p><ul><li><code>zoom</code>的缩放是<strong>相对于左上角的</strong></li><li><code>scale</code>默认是<strong>居中缩放</strong>；</li></ul><p><br></p><ul><li><code>zoom</code>的缩放改变了元素<strong>占据的空间大小</strong>，页面布局重新计算，有性能问题；</li><li><code>scale</code>的缩放占据的原始尺寸不变，页面布局不会发生变化；</li></ul>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> zoom </tag>
            
            <tag> scale </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-clip-path</title>
      <link href="/2018/06/15/css-clip-path/"/>
      <url>/2018/06/15/css-clip-path/</url>
      <content type="html"><![CDATA[<h1 id="一、clip-path"><a href="#一、clip-path" class="headerlink" title="一、clip-path"></a>一、clip-path</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clip-me</span> &#123;</span><br><span class="line">    <span class="comment">/* 剪裁路径来自内联SVG &lt;clipPath&gt;元素 */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">url</span>(#c1); </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 路径来自外部SVG */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">url</span>(path.svg#c1);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*带圆角的矩形*/</span></span><br><span class="line">    <span class="comment">/*前四个参数代表上、右、下、左到边框的距离*/</span></span><br><span class="line">    <span class="comment">/*后四个参数代表上、右、下、左的圆角半径大小，跟border-radius类似*/</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">inset</span>(10% 20px 30px 5% round 14px 50% 10% 50%);</span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">inset</span>(10% 20px 30px 5% round 14px 50% 10% 50%/10px 50% 2% 50%);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 多边形 */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">polygon</span>(5% 5%, 100% 0%, 100% 75%, 75% 75%, 75% 100%, 50% 75%, 0% 75%);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 圆 */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">circle</span>(30px at 35px 35px);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* 椭圆 */</span></span><br><span class="line">    <span class="attribute">clip-path</span>: <span class="built_in">ellipse</span>(65px 30px at 125px 40px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> clip-path </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-谁家的百分比</title>
      <link href="/2018/06/14/css-%E8%B0%81%E5%AE%B6%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94/"/>
      <url>/2018/06/14/css-%E8%B0%81%E5%AE%B6%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94/</url>
      <content type="html"><![CDATA[<h4 id="相对于父元素宽度的："><a href="#相对于父元素宽度的：" class="headerlink" title="相对于父元素宽度的："></a>相对于父元素宽度的：</h4><ul><li><h4 id="max-min-width"><a href="#max-min-width" class="headerlink" title="[max/min-]width"></a><code>[max/min-]width</code></h4></li><li><h4 id="left"><a href="#left" class="headerlink" title="left"></a><code>left</code></h4></li><li><h4 id="right"><a href="#right" class="headerlink" title="right"></a><code>right</code></h4></li><li><h4 id="text-indent"><a href="#text-indent" class="headerlink" title="text-indent"></a><code>text-indent</code></h4></li><li><h4 id="padding"><a href="#padding" class="headerlink" title="padding"></a><code>padding</code></h4></li><li><h4 id="margin"><a href="#margin" class="headerlink" title="margin"></a><code>margin</code></h4></li></ul><p><strong>注：已验证</strong></p><p><br></p><h4 id="相对于父元素高度的："><a href="#相对于父元素高度的：" class="headerlink" title="相对于父元素高度的："></a>相对于父元素高度的：</h4><ul><li><h4 id="max-min-height"><a href="#max-min-height" class="headerlink" title="[max/min-]height"></a><code>[max/min-]height</code></h4></li><li><h4 id="top"><a href="#top" class="headerlink" title="top"></a><code>top</code></h4></li><li><h4 id="bottom"><a href="#bottom" class="headerlink" title="bottom"></a><code>bottom</code></h4></li></ul><p><strong>注：已验证</strong></p><p><br></p><h4 id="相对于主轴长度的："><a href="#相对于主轴长度的：" class="headerlink" title="相对于主轴长度的："></a>相对于主轴长度的：</h4><ul><li><h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a><code>flex-basis</code></h4></li></ul><p><strong>注：已验证</strong></p><p><br></p><a id="more"></a> <h4 id="相对于继承字号的："><a href="#相对于继承字号的：" class="headerlink" title="相对于继承字号的："></a>相对于继承字号的：</h4><ul><li><h4 id="font-size"><a href="#font-size" class="headerlink" title="font-size"></a><code>font-size</code></h4></li></ul><p><strong>注：已验证</strong></p><p><br></p><h4 id="相对于自身字号的："><a href="#相对于自身字号的：" class="headerlink" title="相对于自身字号的："></a>相对于自身字号的：</h4><ul><li><h4 id="line-height"><a href="#line-height" class="headerlink" title="line-height"></a><code>line-height</code></h4></li></ul><p><strong>注：已验证</strong></p><p><br></p><h4 id="相对于自身宽高的："><a href="#相对于自身宽高的：" class="headerlink" title="相对于自身宽高的："></a>相对于自身宽高的：</h4><ul><li><h4 id="border-radius"><a href="#border-radius" class="headerlink" title="border-radius"></a><code>border-radius</code></h4></li><li><h4 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a><code>background-size</code></h4></li><li><h4 id="border-image-width"><a href="#border-image-width" class="headerlink" title="border-image-width"></a><code>border-image-width</code></h4></li><li><h4 id="transform-translate"><a href="#transform-translate" class="headerlink" title="transform: translate()"></a><code>transform: translate()</code></h4></li><li><h4 id="transform-origin"><a href="#transform-origin" class="headerlink" title="transform-origin"></a><code>transform-origin</code></h4></li><li><h4 id="zoom"><a href="#zoom" class="headerlink" title="zoom"></a><code>zoom</code></h4></li><li><h4 id="clip-path"><a href="#clip-path" class="headerlink" title="clip-path"></a><code>clip-path</code></h4></li></ul><p><strong>注：已验证</strong></p><p><br></p><h4 id="相对于自身行高的："><a href="#相对于自身行高的：" class="headerlink" title="相对于自身行高的："></a>相对于自身行高的：</h4><ul><li><h4 id="vertical-align"><a href="#vertical-align" class="headerlink" title="vertical-align"></a><code>vertical-align</code></h4></li></ul><p><strong>注：已验证</strong></p><p><br></p><h4 id="特殊算法的："><a href="#特殊算法的：" class="headerlink" title="特殊算法的："></a>特殊算法的：</h4><ul><li><h4 id="background-position-（包含块宽高减去背景图宽高后的部分）验"><a href="#background-position-（包含块宽高减去背景图宽高后的部分）验" class="headerlink" title="background-position （包含块宽高减去背景图宽高后的部分）验"></a><code>background-position</code> （包含块宽高减去背景图宽高后的部分）验</h4></li><li><h4 id="border-image-slice-（相对于图片尺寸）"><a href="#border-image-slice-（相对于图片尺寸）" class="headerlink" title="border-image-slice （相对于图片尺寸）"></a><code>border-image-slice</code> （相对于图片尺寸）</h4></li><li><h4 id="filter-系列函数等"><a href="#filter-系列函数等" class="headerlink" title="filter 系列函数等"></a><code>filter</code> 系列函数等</h4></li></ul>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 百分比 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-position</title>
      <link href="/2018/06/12/css-position/"/>
      <url>/2018/06/12/css-position/</url>
      <content type="html"><![CDATA[<h1 id="一、定位类型"><a href="#一、定位类型" class="headerlink" title="一、定位类型"></a>一、定位类型</h1><ul><li><strong>相对定位</strong>元素（relatively positioned element）是<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/computed_value" target="_blank" rel="noopener">计算后</a>位置属性为 <code>relative</code>的元素。</li><li><strong>绝对定位</strong>元素（absolutely positioned element）是<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/computed_value" target="_blank" rel="noopener">计算后</a>位置属性为 <code>absolute</code> 或 <code>fixed</code> 的元素。</li><li><strong>粘性定位</strong>元素（stickily positioned element）是<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/computed_value" target="_blank" rel="noopener">计算后</a>位置属性为 <code>sticky</code> 的元素。</li></ul><p><br></p><p>大多数情况下，<code>height</code>和<code>width</code>被设定为auto的绝对定位元素，按其内容大小调整尺寸。但是，被<font color="#A52A2A" size="4"><strong>绝对定位</strong></font>的元素可以通过：</p><ul><li><font color="#A52A2A" size="4"><strong>指定<code>top</code>和<code>bottom</code>，保留<code>height</code>未指定（即<code>auto</code>），来填充可用的垂直空间</strong></font>。</li><li><p><font color="#A52A2A" size="4"><strong>指定<code>left</code>和 <code>right</code>，并将<code>width</code>指定为<code>auto</code>，来填充可用的水平空间</strong></font>。 </p></li><li><p>如果<code>top</code>和<code>bottom</code>都被指定（技术上，而不是<code>auto</code>），<code>top</code> 胜出。</p></li><li>如果指定了<code>left</code> 和<code>right</code>两侧，则在<code>direction</code>为ltr（英语，水平日语等）时<code>left</code>赢，并且在<code>direction</code>为rtl时<code>right</code>赢（阿拉伯文，希伯来文等）。</li></ul><p><br></p><a id="more"></a> <h1 id="二、取值"><a href="#二、取值" class="headerlink" title="二、取值"></a>二、取值</h1><ul><li><p><code>static</code></p><p>该关键字指定元素使用正常的布局行为，即元素在文档常规流中当前的布局位置。此时 <strong><code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> 和 <code>z-index</code>属性无效</strong>。</p></li></ul><ul><li><p><code>relative</code></p><p>该关键字下，元素先放置在未添加定位时的位置，再<strong>在不改变页面布局的前提下调整元素位置</strong>（因此会在此元素未添加定位时所在位置留下空白）。position:relative 对 table-*-group, table-row, table-column, table-cell, table-caption 元素无效。</p></li></ul><ul><li><p><code>absolute</code></p><p><strong>不为元素预留空间</strong>，通过指定元素相对于最近的<strong>非 static 定位祖先元素</strong>的偏移，来确定元素位置。绝对定位的元素可以设置外边距（margins），且<strong>不会与其他边距合并</strong>。</p></li></ul><ul><li><p>fixed</p><p><strong>不为元素预留空间</strong>，而是通过指定元素相对于<strong>屏幕视口（viewport）</strong>的位置来指定元素位置。元素的位置在屏幕滚动时不会改变。打印时，元素会出现在的每页的固定位置。<code>fixed</code>属性会创建新的层叠上下文。<font color="#A52A2A" size="4"><strong>当元素祖先的 <code>transform</code>  属性非 <code>none</code> 时，容器由视口改为该祖先。</strong></font></p></li></ul><ul><li><p><code>sticky</code> </p><p><strong>根据文档的正常流程进行定位</strong>，然后根据<code>top</code>、<code>right</code>、<code>bottom</code>、 <code>left</code> ，相对于其<strong>最近的滚动祖先</strong>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/All_About_The_Containing_Block" target="_blank" rel="noopener">containing block</a> （<strong>最近的块级祖先</strong>）偏移。偏移量不会影响任何其他元素的位置。</p><p>该值始终创建一个新的堆叠上下文(stacking context)。请注意，粘性元素“粘”到最近的具有“<strong>滚动机制</strong>”的祖先（<code>overflow</code> 是 <code>hidden</code>, <code>scroll</code>, <code>auto</code>, 或 <code>overlay</code> ），即使该祖先不是最接近的实际滚动祖先。这有效地抑制了任何“粘性”行为 。</p><ul><li>当<strong>最近的滚动祖先</strong>和<strong>最近的块级祖先</strong>不是同一个元素时，<strong>元素大小</strong>根据<strong>最近的块级祖先</strong>计算，<strong>元素位置</strong>根据<strong>最近的滚动祖先</strong>计算。</li><li>如果<strong>最近的块级祖先</strong>的高度<strong>小于或者等于</strong>元素的高度，<strong>仍然有粘性效果</strong>，但观察不出来。因为元素本身和<strong>最近的块级祖先</strong><font color="#A52A2A" size="4"><strong>同时进出</strong></font><strong>最近的滚动祖先</strong>。</li></ul><p><br></p></li></ul><h2 id="三、确定包含块"><a href="#三、确定包含块" class="headerlink" title="三、确定包含块"></a>三、确定包含块</h2><p>一个元素的<strong>大小</strong>和<strong>位置</strong>经常受其包含块的影响 （<code>width</code>、<code>height</code>、<code>top</code>等属性的百分比值是根据包含块大小计算的），确定其包含块的过程完全依赖于这个元素的 <code>position</code>属性： </p><ol><li>如果 position 属性为 <strong><code>static</code>、  <code>relative</code>、<code>sticky</code></strong> ，其包含块就是由它的<strong>最近的祖先块元素**</strong>（比如说inline-block, block 或 list-item元素）或<strong>格式化上下文</strong>(比如说 a table container, flex container, grid container, or the block container itself)的内容区的边缘组成的。</li></ol><ol start="2"><li>如果 position 属性为 <code>absolute</code> ，包含块就是由它的最近的 position 的值不是 <code>static</code>（<code>fixed</code>, <code>absolute</code>, <code>relative</code> 或 <code>sticky</code>）的祖先元素的内边距区的边缘组成。</li></ol><ol start="3"><li>如果 position 属性是 <code>fixed</code>，包含块就是由 <a href="https://developer.mozilla.org/en-US/docs/Glossary/viewport" target="_blank" rel="noopener">viewport</a> (in the case of continuous media) 组成的。</li></ol><ol start="4"><li><p>如果 position 属性是<code>absolute</code>或 <code>fixed</code>，包含块也可能是由满足以下条件的最近父级元素的内边距区的边缘组成的：</p><ol><li>A <code>transform</code> or <code>perspective</code> value other than <code>none</code></li><li>A <code>will-change</code> value of <code>transform</code> or <code>perspective</code></li><li>A <code>filter</code> value other than <code>none</code> or a <code>will-change</code> value of <code>filter</code> (only works on Firefox).</li></ol></li></ol>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> position </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-flow</title>
      <link href="/2018/06/12/css-flow/"/>
      <url>/2018/06/12/css-flow/</url>
      <content type="html"><![CDATA[<h2 id="in-flow和out-of-flow"><a href="#in-flow和out-of-flow" class="headerlink" title="in-flow和out-of-flow"></a>in-flow和out-of-flow</h2><h3 id="规范规定"><a href="#规范规定" class="headerlink" title="规范规定"></a><a href="http://www.w3.org/TR/CSS2/visuren.html#positioning-scheme" target="_blank" rel="noopener">规范规定</a></h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">An element is called out of flow if it is floated, absolutely positioned, or is the root element. An element is called in-flow if it is not out-of-flow.</span><br></pre></td></tr></table></figure><p>如果一个元素是<strong>浮动</strong>的(float:left/right)，<strong>绝对定位</strong>的(position:absolute/fixed)或者是<strong>根元素</strong>(html)，那么它被称之为<strong>流外的元素</strong>(out-of-flow)。如果一个元素不是流外的元素，那么它被称之为<strong>流内的元素</strong>(in-flow)。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The flow of an element A is the set consisting of A and all in-flow elements whose nearest out-of-flow ancestor is A.</span><br></pre></td></tr></table></figure><p>元素 A 的流是一个集合，包含 A 元素本身，以及元素 A 的流内的子元素且这些子元素最近的流外祖先是 A 元素。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"A"</span> <span class="attr">style</span>=<span class="string">"position: absolute;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"B"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"C"</span> <span class="attr">style</span>=<span class="string">"position:absolute"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"D"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"E"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"F"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>以上示例中，A 元素的流包含分析如下：</p><ol><li>A 和 C 是流外的元素，所以 C 被排除</li><li>D 元素由于最近的流外祖先是 C，所以他也不是 A 的流</li><li>所以最终 A 元素流内的元素只剩下：ABEF</li></ol>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> flow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>根据规范重写Promise</title>
      <link href="/2018/06/01/JS-%E6%A0%B9%E6%8D%AE%E8%A7%84%E8%8C%83%E9%87%8D%E5%86%99Promise/"/>
      <url>/2018/06/01/JS-%E6%A0%B9%E6%8D%AE%E8%A7%84%E8%8C%83%E9%87%8D%E5%86%99Promise/</url>
      <content type="html"><![CDATA[<h1 id="零、原文链接"><a href="#零、原文链接" class="headerlink" title="零、原文链接"></a>零、<a href="https://mengera88.github.io/2017/05/18/Promise%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">原文链接</a></h1><p><br></p><h1 id="一、使用场景"><a href="#一、使用场景" class="headerlink" title="一、使用场景"></a>一、使用场景</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getUserId().then(getUserJobById).then(<span class="function"><span class="keyword">function</span>(<span class="params">job</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对job的处理</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserJobById</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        http.get(baseUrl + id, <span class="function"><span class="keyword">function</span>(<span class="params">job</span>) </span>&#123;</span><br><span class="line">            resolve(job);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、具体实现"><a href="#二、具体实现" class="headerlink" title="二、具体实现"></a>二、具体实现</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//一个promise对象有状态、值、回调callbacksList</span></span><br><span class="line">    <span class="comment">//then()可以别调用多次，所以是callbacksList</span></span><br><span class="line">    <span class="keyword">var</span> state = <span class="string">'pending'</span>,</span><br><span class="line">        value = <span class="literal">null</span>,</span><br><span class="line">        callbacks = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//then()函数必须返回一个promised对象</span></span><br><span class="line">    <span class="comment">//then()函数功能类似于订阅者模式中的listen()</span></span><br><span class="line">    <span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span>(<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">            handle(&#123;</span><br><span class="line">                onFulfilled: onFulfilled || <span class="literal">null</span>,</span><br><span class="line">                onRejected: onRejected || <span class="literal">null</span>,</span><br><span class="line">                resolve: resolve,</span><br><span class="line">                reject: reject</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (state === <span class="string">'pending'</span>) &#123;</span><br><span class="line">            callbacks.push(callback);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> cb = state === <span class="string">'fulfilled'</span> ? callback.onFulfilled : callback.onRejected,</span><br><span class="line">            ret;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (cb === <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果 onFulfilled 不是函数且 promise1 成功执行， promise2 必须成功执行并返回相同的值</span></span><br><span class="line">            <span class="comment">//如果 onRejected 不是函数且 promise1 拒绝执行， promise2 必须拒绝执行并返回相同的据因</span></span><br><span class="line">            cb = state === <span class="string">'fulfilled'</span> ? callback.resolve : callback.reject;</span><br><span class="line">            cb(value);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果 onFulfilled 或者 onRejected 抛出一个异常 e ，则 promise2 必须拒绝执行，并返回拒因 e</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//cb()函数说明，只要父promise不抛出异常，子promise都成功执行</span></span><br><span class="line">            <span class="comment">//ret也可能是一个promise对象</span></span><br><span class="line">            ret = cb(value);</span><br><span class="line">            callback.resolve(ret);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            callback.reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//resolve()和reject()函数功能类似于订阅者模式中的trigger()</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//newValue可能是一个promise对象</span></span><br><span class="line">        <span class="keyword">if</span> (newValue &amp;&amp; (<span class="keyword">typeof</span> newValue === <span class="string">'object'</span> || <span class="keyword">typeof</span> newValue === <span class="string">'function'</span>)) &#123;</span><br><span class="line">            <span class="keyword">var</span> then = newValue.then;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123;</span><br><span class="line">                <span class="comment">//由newValue（promise）对象调用当前promise对象的resolve或reject</span></span><br><span class="line">                then.call(newValue, resolve, reject);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        state = <span class="string">'fulfilled'</span>;</span><br><span class="line">        value = newValue;</span><br><span class="line">        execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">        state = <span class="string">'rejected'</span>;</span><br><span class="line">        value = reason;</span><br><span class="line">        execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">execute</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            callbacks.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">                handle(callback);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fn(resolve, reject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：异步处理上，没有达到要求。具体参见<a href="/2017/11/09/JS-事件循环-promise和setTimeOut/">事件循环</a></p><p><br></p><a id="more"></a> <h1 id="三、封装的代码"><a href="#三、封装的代码" class="headerlink" title="三、封装的代码"></a>三、封装的代码</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/tool/axios.js</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">import</span> iView <span class="keyword">from</span> <span class="string">'iview'</span>;</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (config.isFormData) &#123;</span><br><span class="line">    config.data = qs.stringify(config.data);</span><br><span class="line">    !config.headers &amp;&amp; (config.headers = &#123;&#125;);</span><br><span class="line">    config.headers[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> axios(config).then(</span><br><span class="line">    res =&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.data.status &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">        config.showSuccess &amp;&amp; iView.Notice.success(&#123;</span><br><span class="line">          duration: <span class="number">2</span>,</span><br><span class="line">          title: <span class="string">'通知'</span>,</span><br><span class="line">          desc: res.data.msg</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(res);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (res.data.status === <span class="number">0</span>) &#123;</span><br><span class="line">        !config.hiddenError &amp;&amp; iView.Notice.error(&#123;</span><br><span class="line">          duration: <span class="number">2</span>,</span><br><span class="line">          title: <span class="string">'提示'</span>,</span><br><span class="line">          desc: res.data.msg</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 如果直接返回res，则下一个新的promise，一定会直接执行onFulfilled</span></span><br><span class="line">        <span class="comment">// 返回一个Promise.resolve(res)或Promise.reject(res)，则新的promise的状态将由返回的状态决定</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (res.data.status &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        location.href = <span class="string">`#/login?returnUrl=<span class="subst">$&#123;location.href&#125;</span>`</span>;</span><br><span class="line">        localStorage.removeItem(<span class="string">'user'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/tool/Admin.js</span></span><br><span class="line"><span class="keyword">import</span> Axios <span class="keyword">from</span> <span class="string">'@/tool/axios.js'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;dateFormat&#125; <span class="keyword">from</span> <span class="string">'@/tool/transform.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Admin</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(admin) &#123;</span><br><span class="line">    admin = admin || &#123;&#125;;</span><br><span class="line">    <span class="keyword">this</span>.id = admin.id || <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">this</span>.username = admin.username || <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">this</span>.password = admin.password || <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  login() &#123;</span><br><span class="line">    <span class="keyword">const</span> that = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> Axios(&#123;</span><br><span class="line">      url: <span class="string">`/api/user/login`</span>,</span><br><span class="line">      method: <span class="string">'put'</span>,</span><br><span class="line">      isFormData: <span class="literal">true</span>,</span><br><span class="line">      data: &#123;</span><br><span class="line">        username: that.username,</span><br><span class="line">        password: that.password</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).then(</span><br><span class="line">      res =&gt; <span class="built_in">Promise</span>.resolve(res),</span><br><span class="line">      err =&gt; <span class="built_in">Promise</span>.reject(err)</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// login.vue</span></span><br><span class="line"><span class="keyword">import</span> Admin <span class="keyword">from</span> <span class="string">'@/tool/Admin.js'</span></span><br><span class="line">that.admin.login().then(</span><br><span class="line">    res =&gt; &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    err =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 整体调用等同于</span></span><br><span class="line">axios(config).then().then().then();</span><br><span class="line"><span class="comment">// 每一个.then()都返回一个新的promise</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> promise </tag>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Promise/A+规范</title>
      <link href="/2018/05/31/JS-Promise-A-%E8%A7%84%E8%8C%83/"/>
      <url>/2018/05/31/JS-Promise-A-%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h1 id="零、英文原文：Promise-A"><a href="#零、英文原文：Promise-A" class="headerlink" title="零、英文原文：Promise/A+"></a>零、英文原文：<a href="https://promisesaplus.com/" target="_blank" rel="noopener">Promise/A+</a></h1><p><br></p><h1 id="一、术语"><a href="#一、术语" class="headerlink" title="一、术语"></a>一、术语</h1><ul><li><strong>Promise</strong>：是一个拥有 <code>then</code> 方法的<strong>对象或函数</strong>，其行为符合本规范；</li><li><strong>thenable</strong>：是一个定义了 <code>then</code> 方法的对象或函数，文中译作“拥有 then 方法”；</li><li><strong>值（value）</strong>：指<code>任何 JavaScript 的合法值</code>（包括 undefined , thenable 和 promise）；</li><li><strong>异常（exception）</strong>：是使用 <code>throw</code> 语句抛出的一个值。</li><li><strong>据因（reason）</strong>：表示一个 <code>promise</code> 的拒绝原因。</li></ul><p><br></p><h1 id="二、要求"><a href="#二、要求" class="headerlink" title="二、要求"></a>二、要求</h1><h2 id="1、Promise-的状态"><a href="#1、Promise-的状态" class="headerlink" title="1、Promise 的状态"></a>1、Promise 的状态</h2><p>一个 Promise 的当前状态必须为以下三种状态中的一种：<strong>等待态（Pending）、执行态（Fulfilled）和拒绝态（Rejected）</strong>。</p><h2 id="2、等待态（Pending）"><a href="#2、等待态（Pending）" class="headerlink" title="2、等待态（Pending）"></a>2、等待态（Pending）</h2><p>处于等待态时，promise 需满足以下条件：</p><ul><li>可以迁移至执行态或拒绝态</li></ul><h2 id="3、执行态（Fulfilled）"><a href="#3、执行态（Fulfilled）" class="headerlink" title="3、执行态（Fulfilled）"></a>3、执行态（Fulfilled）</h2><p>处于执行态时，promise 需满足以下条件：</p><ul><li>不能迁移至其他任何状态</li><li>必须拥有一个<strong>不可变的终值</strong></li></ul><h2 id="4、拒绝态（Rejected）"><a href="#4、拒绝态（Rejected）" class="headerlink" title="4、拒绝态（Rejected）"></a>4、拒绝态（Rejected）</h2><p>处于拒绝态时，promise 需满足以下条件：</p><ul><li>不能迁移至其他任何状态</li><li>必须拥有一个<strong>不可变的据因</strong></li></ul><p><strong>这里的不可变指的是恒等（即可用 === 判断相等），而不是意味着更深层次的不可变（译者注：盖指当 value 或 reason 不是基本值时，只要求其引用地址相等，但属性值可被更改）。</strong></p><p><br></p><a id="more"></a> <h1 id="三、Then方法"><a href="#三、Then方法" class="headerlink" title="三、Then方法"></a>三、Then方法</h1><p>一个 promise 必须提供一个 then 方法以访问其当前值、终值和据因。promise 的 then 方法接受两个参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure><h2 id="1、参数可选"><a href="#1、参数可选" class="headerlink" title="1、参数可选"></a>1、参数可选</h2><p>onFulfilled 和 onRejected 都是可选参数。</p><ul><li>如果 onFulfilled 不是函数，其必须被忽略</li><li>如果 onRejected 不是函数，其必须被忽略</li></ul><h2 id="2、onFulfilled-特性"><a href="#2、onFulfilled-特性" class="headerlink" title="2、onFulfilled 特性"></a>2、onFulfilled 特性</h2><p>如果 onFulfilled 是函数：</p><ul><li>当 promise <strong>执行结束后其必须被调用</strong>，其第一个参数为 promise 的终值</li><li>在 promise 执行结束前其不可被调用</li><li>其调用次数不可超过一次</li></ul><h2 id="3、onRejected-特性"><a href="#3、onRejected-特性" class="headerlink" title="3、onRejected 特性"></a>3、onRejected 特性</h2><p>如果 onRejected 是函数：</p><ul><li>当 promise <strong>被拒绝执行后其必须被调用</strong>，其第一个参数为 promise 的据因</li><li>在 promise 被拒绝执行前其不可被调用</li><li>其调用次数不可超过一次 </li></ul><h2 id="4、调用时机"><a href="#4、调用时机" class="headerlink" title="4、调用时机"></a>4、调用时机</h2><p>onFulfilled 和 onRejected 只有在<a href="http://es5.github.io/#x10.3" target="_blank" rel="noopener">执行环境</a>堆栈仅包含平台代码时才可被调用 注1 </p><h2 id="5、调用要求"><a href="#5、调用要求" class="headerlink" title="5、调用要求"></a>5、调用要求</h2><p> onFulfilled 和 onRejected 必须<font color="#A52A2A" size="4"><strong>被作为函数调用（即没有 this 值）</strong></font>注2 </p><h2 id="6、多次调用"><a href="#6、多次调用" class="headerlink" title="6、多次调用"></a>6、多次调用</h2><p><strong>then 方法可以<font color="#A52A2A" size="4">被同一个 promise 调用多次</font></strong></p><ul><li>当 promise 成功执行时，所有 onFulfilled 需按照其注册顺序依次回调</li><li>当 promise 被拒绝执行时，所有的 onRejected 需按照其注册顺序依次回调 </li></ul><h2 id="7、返回"><a href="#7、返回" class="headerlink" title="7、返回"></a>7、返回</h2><p><strong>then 方法可以<font color="#A52A2A" size="4">被同一个 promise 调用多次**</font></strong>then 方法必须返回一个 promise 对象** 注3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">promise2 = promise1.then(onFulfilled, onRejected);</span><br></pre></td></tr></table></figure><ul><li><p>如果 onFulfilled 或者 onRejected 返回一个值 x ，则运行下面的 Promise 解决过程：<a href="promise2,      x">[Resolve]</a> </p></li><li><p>如果 onFulfilled 或者 onRejected 抛出一个异常 e ，则 promise2 必须拒绝执行，并返回拒因 e </p></li><li><p>如果 onFulfilled 不是函数且 promise1 成功执行， promise2 必须成功执行并返回相同的值 </p></li><li><p>如果 onRejected 不是函数且 promise1 拒绝执行， promise2 必须拒绝执行并返回相同的据因</p></li></ul><p><br></p><h1 id="四、Promise-解决过程"><a href="#四、Promise-解决过程" class="headerlink" title="四、Promise 解决过程"></a>四、Promise 解决过程</h1><p>Promise 解决过程是一个抽象的操作，其需输入一个 promise 和一个值，我们表示为 <a href="promise, x">[Resolve]</a>，如果 x 有 then 方法且看上去像一个 Promise ，解决程序即尝试使 promise 接受 x 的状态；否则其用 x 的值来执行 promise 。</p><p>这种 thenable 的特性使得 Promise 的实现更具有通用性：只要其暴露出一个遵循 Promise/A+ 协议的 then 方法即可；这同时也使遵循 Promise/A+ 规范的实现可以与那些不太规范但可用的实现能良好共存。</p><p>运行 <a href="promise, x">[Resolve]</a> 需遵循以下步骤：</p><h2 id="1、x-与-promise-相等"><a href="#1、x-与-promise-相等" class="headerlink" title="1、x 与 promise 相等"></a>1、x 与 promise 相等</h2><p>如果 promise 和 x 指向同一对象，以 TypeError 为据因拒绝执行 promise</p><h2 id="2、x-为-Promise"><a href="#2、x-为-Promise" class="headerlink" title="2、x 为 Promise"></a>2、x 为 Promise</h2><p>如果 x 为 Promise ，则使 promise 接受 x 的状态 注4：</p><ul><li>如果 x 处于等待态， promise 需保持为等待态直至 x 被执行或拒绝</li><li>如果 x 处于执行态，用相同的值成功执行 promise</li><li>如果 x 处于拒绝态，用相同的据因拒绝 promise </li></ul><h2 id="3、x-为对象或函数"><a href="#3、x-为对象或函数" class="headerlink" title="3、x 为对象或函数"></a>3、x 为对象或函数</h2><p>如果 x 为对象或者函数：</p><ul><li>把 x.then 赋值给 then 注5</li><li>如果取 x.then 的值时抛出错误 e ，则以 e 为据因拒绝 promise</li><li>如果 then 是函数，将 x 作为函数的作用域 this 调用之。传递两个回调函数作为参数，第一个参数叫做 resolvePromise ，第二个参数叫做 rejectPromise:</li><li>如果 resolvePromise 以值 y 为参数被调用，则运行 <a href="promise,      y">[Resolve]</a></li><li>如果 rejectPromise 以据因 r 为参数被调用，则以据因 r 拒绝 promise</li><li>如果 resolvePromise 和 rejectPromise 均被调用，或者被同一参数调用了多次，则优先采用首次调用并忽略剩下的调用</li><li>如果调用 then 方法抛出了异常 e：</li><li>如果 resolvePromise 或 rejectPromise 已经被调用，则忽略之</li><li>否则以 e 为据因拒绝 promise</li><li>如果 then 不是函数，以 x 为参数执行 promise</li><li>如果 x 不为对象或者函数，以 x 为参数执行 promise </li></ul><p>如果一个 promise 被一个循环的 thenable 链中的对象解决，而 <a href="promise, thenable">[Resolve]</a> 的递归性质又使得其被再次调用，根据上述的算法将会陷入无限递归之中。算法虽不强制要求，但也鼓励施者检测这样的递归是否存在，若检测到存在则以一个可识别的 TypeError 为据因来拒绝 promise 注6。</p><p><br></p><h1 id="五、注释"><a href="#五、注释" class="headerlink" title="五、注释"></a>五、注释</h1><ul><li>注1 这里的平台代码指的是引擎、环境以及 promise      的实施代码。实践中要确保 onFulfilled 和 onRejected 方法异步执行，且应该在 then 方法被调用的那一轮事件循环之后的新执行栈中执行。这个事件队列可以采用“宏任务（macro-task）”机制或者“微任务（micro-task）”机制来实现。由于      promise 的实施代码本身就是平台代码（译者注：即都是 JavaScript），故代码自身在处理在处理程序时可能已经包含一个任务调度队列。</li></ul><ul><li><ul><li>译者注：这里提及了 macrotask 和 microtask 两个概念，这表示异步任务的两种分类。在挂起任务时，JS 引擎会将所有任务按照类别分到这两个队列中，首先在 macrotask 的队列（这个队列也被叫做 task queue）中取出第一个任务，执行完毕后取出 microtask 队列中的所有任务顺序执行；之后再取 macrotask 任务，周而复始，直至两个队列的任务都取完。</li></ul></li></ul><ul><li><ul><li>两个类别的具体分类如下：</li></ul></li></ul><ul><li><ul><li><ul><li>macro-task: script（整体代码）, setTimeout, setInterval, setImmediate, I/O, UI rendering</li></ul></li></ul></li></ul><ul><li><ul><li><ul><li>micro-task: process.nextTick, Promises（这里指浏览器实现的原生 Promise）, Object.observe, MutationObserver。详见 <a href="http://stackoverflow.com/questions/25915634/difference-between-microtask-and-macrotask-within-an-event-loop-context" target="_blank" rel="noopener">stackoverflow      解答</a> 或 <a href="http://wengeezhang.com/?p=11" target="_blank" rel="noopener">这篇博客</a></li></ul></li></ul></li></ul><ul><li>注2 也就是说在严格模式（strict）中，函数 this 的值为 undefined ；在非严格模式中其为全局对象。</li></ul><ul><li>注3 代码实现在满足所有要求的情况下可以允许 promise2 === promise1 。每个实现都要文档说明其是否允许以及在何种条件下允许  romise2 ===      promise1 。</li></ul><ul><li>注4 总体来说，如果 x 符合当前实现，我们才认为它是真正的 promise 。这一规则允许那些特例实现接受符合已知要求的      Promises 状态。</li></ul><ul><li>注5 这步我们先是存储了一个指向 x.then 的引用，然后测试并调用该引用，以避免多次访问 x.then 属性。这种预防措施确保了该属性的一致性，因为其值可能在检索调用时被改变。</li></ul><ul><li>注6 实现不应该对 thenable 链的深度设限，并假定超出本限制的递归就是无限循环。只有真正的循环递归才应能导致 TypeError 异常；如果一条无限长的链上 thenable 均不相同，那么递归下去永远是正确的行为。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> promise </tag>
            
            <tag> 规范 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>column实现瀑布流布局</title>
      <link href="/2018/05/30/CSS-column%E5%AE%9E%E7%8E%B0%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/"/>
      <url>/2018/05/30/CSS-column%E5%AE%9E%E7%8E%B0%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h1 id="一、属性"><a href="#一、属性" class="headerlink" title="一、属性"></a>一、属性</h1><ul><li><strong>column-count</strong>:      最理想的分栏数目</li><li><strong>column-gap</strong>:      栏目之间的水平间隙</li><li><strong>column-rule</strong>:      分割线，形式规则什么的等同于border</li><li><font color="#A52A2A" size="4"><strong>break-inside</strong>:      <strong>内容盒子如何中断</strong></font></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*瀑布流层*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.waterfall</span> &#123;</span><br><span class="line">    <span class="attribute">column-count</span>: <span class="number">4</span>;</span><br><span class="line">    <span class="attribute">column-gap</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*一个内容层*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1em</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">break-inside</span>: avoid;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"waterfall"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://imgsa.jpg"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>1 convallis timestamp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> column，瀑布流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>flex瀑布流布局</title>
      <link href="/2018/05/30/CSS-flex%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/"/>
      <url>/2018/05/30/CSS-flex%E7%80%91%E5%B8%83%E6%B5%81%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"masonry"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item__content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item__content item__content--small"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.masonry</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-flow</span>: column wrap;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: auto;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*缺点：需要设置一个固定的height*/</span></span><br><span class="line">    @<span class="keyword">media</span> screen and (min-width: 400px) &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">1600px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">media</span> screen and (min-width: 600px) &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">1300px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">media</span> screen and (min-width: 800px) &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">1100px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="keyword">media</span> screen and (min-width: 1100px) &#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">800px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> flex </tag>
            
            <tag> 瀑布流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>自定义scrollbar</title>
      <link href="/2018/05/29/CSS-%E8%87%AA%E5%AE%9A%E4%B9%89webkit%E6%BB%91%E5%8A%A8%E6%9D%A1/"/>
      <url>/2018/05/29/CSS-%E8%87%AA%E5%AE%9A%E4%B9%89webkit%E6%BB%91%E5%8A%A8%E6%9D%A1/</url>
      <content type="html"><![CDATA[<h4 id="一、滚动条相关伪元素"><a href="#一、滚动条相关伪元素" class="headerlink" title="一、滚动条相关伪元素"></a>一、滚动条相关伪元素</h4><ul><li><strong>::-webkit-scrollbar</strong> —      整个滚动条.</li><li><strong>::-webkit-scrollbar-button</strong> —      滚动条上的按钮 (上下箭头).</li><li><strong>::-webkit-scrollbar-thumb</strong> —      滚动条上的滚动滑块.</li><li><strong>::-webkit-scrollbar-track</strong> —      滚动条轨道.</li><li><strong>::-webkit-scrollbar-track-piece</strong> —      滚动条没有滑块的轨道部分.</li><li><strong>::-webkit-scrollbar-corner</strong> —      当同时有垂直滚动条和水平滚动条时交汇的部分.</li><li><strong>::-webkit-resizer</strong> —      某些元素的corner部分的部分样式(例:textarea的可拖动按钮).</li></ul><p><br></p><a id="more"></a><p><img src="/2018/05/29/CSS-自定义webkit滑动条/scrollbar.png" alt="自定义webkit滑动条"></p><p><br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*定义滚动条高宽及背景高宽，分别对应横、竖滚动条的尺寸*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">16px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义滚动条轨道内阴影+圆角*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.3);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#F5F5F5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*定义滑块内阴影+圆角*/</span></span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">6px</span> <span class="built_in">rgba</span>(0, 0, 0, .3);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#555</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*类与伪元素搭配*/</span></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0,0,0,.07);</span><br><span class="line">    <span class="attribute">overflow-y</span>: auto;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">transition</span>: transform .<span class="number">25s</span> ease-out;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span><span class="selector-pseudo">::-webkit-scrollbar</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">4px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span><span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: transparent;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">4px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsla</span>(0,0%,53%,.4)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span><span class="selector-pseudo">:hover</span><span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">hsla</span>(0,0%,53%,.1)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="二、滚动条相关伪类"><a href="#二、滚动条相关伪类" class="headerlink" title="二、滚动条相关伪类"></a>二、滚动条相关伪类</h4><p>定义滚动条就是利用<strong>伪元素</strong>与<strong>伪类</strong>相互作用</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">:horizontal //适用于任何水平方向上的滚动条</span><br><span class="line">:vertical //适用于任何垂直方向的滚动条</span><br><span class="line">:decrement //适用于按钮和轨道碎片。表示递减的按钮或轨道碎片</span><br><span class="line">:increment //适用于按钮和轨道碎片。表示递增的按钮或轨道碎片</span><br><span class="line">:start //适用于按钮和轨道碎片。表示对象（按钮轨道碎片）是否放在滑块的前面</span><br><span class="line">:end //适用于按钮和轨道碎片。表示对象（按钮轨道碎片）是否放在滑块的后面</span><br><span class="line">:double-button //适用于按钮和轨道碎片。判断轨道结束的位置是否是一对按钮。</span><br><span class="line">:single-button //适用于按钮和轨道碎片。判断轨道结束的位置是否是一个按钮。</span><br><span class="line">:no-button //表示轨道结束的位置没有按钮。</span><br><span class="line">:corner-present //表示滚动条的角落是否存在。</span><br><span class="line">:window-inactive //适用于所有滚动条，表示包含滚动条的区域，焦点不在该窗口的时候。</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-track-piece</span><span class="selector-pseudo">:start</span> &#123;</span><br><span class="line">    <span class="comment">/*滚动条上半边或左半边*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-thumb</span><span class="selector-pseudo">:window-inactive</span> &#123;</span><br><span class="line">    <span class="comment">/*当焦点不在当前区域滑块的状态*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::-webkit-scrollbar-button</span><span class="selector-pseudo">:horizontal</span><span class="selector-pseudo">:decrement</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="comment">/*当鼠标在水平滚动条下面的按钮上的状态*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="三、IE滚动条"><a href="#三、IE滚动条" class="headerlink" title="三、IE滚动条"></a>三、IE滚动条</h4><p><img src="/2018/05/29/CSS-自定义webkit滑动条/1.png" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">scrollbar-base-color</span>: <span class="number">#C0C0C0</span>;</span><br><span class="line">    <span class="attribute">scrollbar-base-color</span>: <span class="number">#C0C0C0</span>;</span><br><span class="line">    scrollbar-3dlight-color: #C0C0C0;</span><br><span class="line">    <span class="selector-tag">scrollbar-highlight-color</span>: <span class="selector-id">#C0C0C0</span>;</span><br><span class="line">    <span class="selector-tag">scrollbar-track-color</span>: <span class="selector-id">#EBEBEB</span>;</span><br><span class="line">    <span class="selector-tag">scrollbar-arrow-color</span>: <span class="selector-tag">black</span>;</span><br><span class="line">    <span class="selector-tag">scrollbar-shadow-color</span>: <span class="selector-id">#C0C0C0</span>;</span><br><span class="line">    <span class="selector-tag">scrollbar-dark-shadow-color</span>: <span class="selector-id">#C0C0C0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：IE只能修改滚动条的颜色</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> scrillbar </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>line-height继承问题</title>
      <link href="/2018/05/27/CSS-line-height%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/"/>
      <url>/2018/05/27/CSS-line-height%E7%BB%A7%E6%89%BF%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h4 id="一、line-height值"><a href="#一、line-height值" class="headerlink" title="一、line-height值"></a>一、line-height值</h4><table><thead><tr><th>normal</th><th>默认。设置合理的行间距。</th></tr></thead><tbody><tr><td>number</td><td>设置数字，此数字会与当前的字体尺寸相乘来设置行间距。</td></tr><tr><td>length</td><td>设置固定的行间距。</td></tr><tr><td>%</td><td>基于当前字体尺寸的百分比行间距。</td></tr><tr><td>inherit</td><td>规定应该从父元素继承 <code>line-height</code> 属性的值。</td></tr></tbody></table><p>注：<code>normal</code>我们常常认为它是（或者应该是）<code>1</code>或者<code>1.2</code>，甚至也可以说，<a href="https://www.w3.org/TR/CSS2/visudet.html#propdef-line-height" target="_blank" rel="noopener">CSS规范</a>都不清楚是哪一个。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">normal: Tells user agents to set the used value to a &quot;reasonable&quot; value based on the font of the element. The value has the same meaning as &lt;number&gt;. We recommend a used value for &apos;normal&apos; between 1.0 to 1.2. The computed value is &apos;normal&apos;.</span><br></pre></td></tr></table></figure><p><br></p><h3 id="二、继承问题"><a href="#二、继承问题" class="headerlink" title="二、继承问题"></a>二、继承问题</h3><ul><li>如果父级的<code>line-height</code>属性值<strong>有单位或百分比</strong>，那么<strong>子级继承的值则是换算后的一个具体的px级别的值</strong>； </li><li>而如果父级的<code>line-height</code>属性值<strong>没有单位</strong>，则<strong>子级会直接继承这个“数值”</strong>，而非计算后的具体值，此时子级的<code>line-height</code>会根据本身的<code>font-size</code>值重新计算得到新的<code>line-height</code>值。</li></ul><p><br></p><h3 id="三、font-size-与line-height"><a href="#三、font-size-与line-height" class="headerlink" title="三、font-size 与line-height"></a>三、font-size 与line-height</h3><p>每个元素使用相同的<code>font-size</code>，但使用不同的<code>font-family</code>，但渲染出来的<code>line-height</code>是不同的。</p><p>CSS 权威指南<code>基本视觉格式化</code>一章中讲到：对于行内非替换元素或者匿名文本来说， <code>font-size</code> 指定了它们的 <code>content area</code>的高度，由于<code>inline box</code> 是由 <code>content area</code> 加上<code>上下</code>的 <code>half-leading</code>构成的，那么如果元素的<code>leading</code>为 0，在这种情况下，<code>font-size</code> 指定了<code>inline box</code> 的高度。</p><p><br></p><h3 id="四、leading"><a href="#四、leading" class="headerlink" title="四、leading"></a>四、<a href="http://www.ituring.com.cn/article/18076" target="_blank" rel="noopener">leading</a></h3><p>1、英文字体有<strong>基线</strong>（<code>baseline</code>）和<strong>中线</strong>（<code>meanline</code>），这两条线之间就是所谓的<code>x-height</code>，即<code>小写字母x</code>的高度。基线之上的部分是<strong>上伸区域</strong>（<code>ascent</code>），基线之下的部分是<strong>下伸区域</strong>（<code>descent</code>）。</p><p>2、两种说法</p><p><img src="/2018/05/27/CSS-line-height继承问题/01RTdJhLw8R4.png" alt=""></p><ul><li><strong>现代排版软件</strong> ：两行文本的基线之间的距离是<strong>现代排版软件</strong>中所说的行距（leading） </li></ul><p><br></p><ul><li><strong>CSS</strong> ： <code>leading = line-height - font-size</code> </li></ul><p><img src="/2018/05/27/CSS-line-height继承问题/01RTdOdi3s7A.png" alt=""></p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> line-height </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>整页滚动</title>
      <link href="/2018/05/27/JS-%E6%95%B4%E9%A1%B5%E6%BB%9A%E5%8A%A8/"/>
      <url>/2018/05/27/JS-%E6%95%B4%E9%A1%B5%E6%BB%9A%E5%8A%A8/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> delay = <span class="number">800</span>;</span><br><span class="line"><span class="keyword">let</span> pageHeight = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">let</span> preNow = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">let</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'demo'</span>);</span><br><span class="line"><span class="keyword">let</span> scrollTop = el.scrollTop;</span><br><span class="line">el.addEventListener(<span class="string">'scroll'</span>, myFunction);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//节流计时器</span></span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">if</span> (now - preNow &gt; delay) &#123;</span><br><span class="line">        preNow = now;</span><br><span class="line">        <span class="keyword">if</span> (el.scrollTop &gt; scrollTop) &#123;</span><br><span class="line">            el.scrollTop += pageHeight;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (el.scrollTop &lt; scrollTop) &#123;</span><br><span class="line">                el.scrollTop -= pageHeight;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scrollTop = el.scrollTop;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        el.scrollTop = scrollTop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 滚动 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-background-clip与background-origin</title>
      <link href="/2018/05/25/CSS-background-clip%E4%B8%8Ebackground-origin/"/>
      <url>/2018/05/25/CSS-background-clip%E4%B8%8Ebackground-origin/</url>
      <content type="html"><![CDATA[<h1 id="一、CSS3新属性"><a href="#一、CSS3新属性" class="headerlink" title="一、CSS3新属性"></a>一、CSS3新属性</h1><p>在CSS2中，背景图片定义的位置是相对于其包含元素的填充(padding)的外部界限的，所有的溢出都会扩展到边框之下。CSS3引入了两个新的属性，可以对其进行更精细的控制。</p><ul><li><p>第一个属性是：background-clip </p></li><li><p>第二个属性是：background-origin</p></li></ul><p>对于这两个新属性，其对应的属性值是相同的：<strong>border-box, padding-box, content-box</strong>。它们的最根本的区别就是：<font color="#A52A2A" size="4"><strong>background-clip 是对背景图片的裁剪，background-origin是对背景图片设置起始点&lt;</strong>/font&gt;。 <br></font></p><p><strong>对于background-clip, 其关键字是指将背景图片以border的尺寸、以padding的尺寸，以content的尺寸进行切割，其得到的结果是不完整的背景，也就是其中的一部分(原理与截图差不多)。而且有一点要注意，background-clip的切割是对这个容器背景的切割(包括图片与背景颜色)。</strong><br> </p><p><strong>对于background-origin，其关键字是指将背景图片放置到border范围内，padding范围内、content范围内，其得到的结果是完整的背景(原理与图片的缩放相似)。与background-clip不同的是，它只是单纯设置背景图片的边界，并不会对背景颜色造成影响。</strong><br></p><a id="more"></a> <h4 id="下面就拿其中一个属性对比一下："><a href="#下面就拿其中一个属性对比一下：" class="headerlink" title="下面就拿其中一个属性对比一下："></a>下面就拿其中一个属性对比一下：</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Compare: background-clip:content-box</span></span><br><span class="line"><span class="comment">           background-origin:content-box*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">border</span>: solid <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: black;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(img.jpg);</span><br><span class="line"></span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clip</span> &#123;</span><br><span class="line">    <span class="attribute">background-clip</span>: content-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.origin</span> &#123;</span><br><span class="line">    <span class="attribute">background-origin</span>: content-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始状态：</strong> </p><p><img src="/2018/05/25/CSS-background-clip与background-origin/20160923112242962.png" alt="初始状态"></p><p><strong>background-clip : content-box</strong></p><p><img src="/2018/05/25/CSS-background-clip与background-origin/20160923112324666.png" alt="background-clip"></p><p><strong>background-origin : content-box</strong></p><p><img src="/2018/05/25/CSS-background-clip与background-origin/20160923112404307.png" alt="background-origin"></p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> background-clip </tag>
            
            <tag> background-origin </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-background-position</title>
      <link href="/2018/05/25/CSS-background-position/"/>
      <url>/2018/05/25/CSS-background-position/</url>
      <content type="html"><![CDATA[<h1 id="一、先上图"><a href="#一、先上图" class="headerlink" title="一、先上图"></a>一、先上图</h1><p><img src="/2018/05/25/CSS-background-position/background-position.png" alt="background-position"></p><p>图片上的标注信息已经告诉大家很详细的信息了。示例中容器具备下述特性： </p><ul><li>div容器尺寸410px x 210px，边框宽度10px</li><li>容器背景图尺寸100px x 100px</li><li>第一张背景图background-position:10px 10px；第二张背景图background-position: center</li><li>其中黑白格子尺寸是10px x 10px</li></ul><p><br></p><a id="more"></a> <h1 id="二、特别注意"><a href="#二、特别注意" class="headerlink" title="二、特别注意"></a>二、特别注意</h1><p>background-position取值除了长度值（<length>）和关键词之外，还可以取值为百分比值。</length></p><p>当背景图片尺寸（background-size）不做任何的重置（也就是100% 100%）时，<strong>水平百分比的值等于<font color="#A52A2A" size="4">容器宽度百分比值减去背景图片宽度百分比值</font>。垂直百分比的值等于容器高度百分比值减去背景图片高度百分比值。</strong>比如前面的示例，如果取值background-position: 75% 50%;，背景图片的起始位置： </p><ul><li><strong>水平位置（x轴）：(410 - 100) * 75% = 232.5px</strong></li><li><strong>垂直位置（y轴）：(210 - 100) * 50% = 55px</strong></li></ul>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> background-position </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>offsetWidth和clientWidth</title>
      <link href="/2018/05/24/JS-offsetWidth%E5%92%8CclientWidth/"/>
      <url>/2018/05/24/JS-offsetWidth%E5%92%8CclientWidth/</url>
      <content type="html"><![CDATA[<h1 id="一、border-box模式"><a href="#一、border-box模式" class="headerlink" title="一、border-box模式"></a>一、border-box模式</h1><h4 id="offsetWidth-width"><a href="#offsetWidth-width" class="headerlink" title="offsetWidth = width"></a>offsetWidth = width</h4><h4 id="clientWidth-width-border-scrollBar"><a href="#clientWidth-width-border-scrollBar" class="headerlink" title="clientWidth = width - border - scrollBar"></a>clientWidth = width - border - scrollBar</h4><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><ul><li>Width:盒子css属性定义的宽度</li><li>Border:盒子边框的大小</li><li>scrollBar:盒子滚动条的宽度，默认17px</li></ul>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> offsetWidth </tag>
            
            <tag> clientWidth </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-滚动条跳动问题</title>
      <link href="/2018/05/24/CSS-%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%B7%B3%E5%8A%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2018/05/24/CSS-%E6%BB%9A%E5%8A%A8%E6%9D%A1%E8%B7%B3%E5%8A%A8%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="一、问题描述"><a href="#一、问题描述" class="headerlink" title="一、问题描述"></a>一、问题描述</h1><p> 信息流页面是从上往下push渲染的。开始只有头部一些信息加载，此时页面高度有限，没有滚动条；然后，更多内容显示，滚动条出现，<font color="#A52A2A" size="4"><strong>占据可用宽度</strong></font>，margin: 0 auto<strong>主体元素</strong>自然会做<strong>偏移</strong>——<font color="#A52A2A" size="4"><strong>跳动产生</strong></font>。<br></p><h1 id="二、利用calc和vw"><a href="#二、利用calc和vw" class="headerlink" title="二、利用calc和vw"></a>二、利用calc和vw</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap-outer</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="built_in">calc</span>(100vw - 100%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*或者：*/</span></span><br><span class="line"><span class="selector-class">.wrap-outer</span> &#123;</span><br><span class="line">    <span class="attribute">padding-left</span>: <span class="built_in">calc</span>(100vw - 100%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>100vw相对于浏览器的window.innerWidth，是浏览器的内部宽度，注意，滚动条宽度也计算在内！</p></li><li><p>100%是可用宽度，是不含滚动条的宽度。<br></p></li></ul><h1 id="三、只利用vw"><a href="#三、只利用vw" class="headerlink" title="三、只利用vw"></a>三、只利用vw</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap-outer</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">overflow-x</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 滚动条 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-vw和100%</title>
      <link href="/2018/05/24/CSS-vw%E5%92%8C100/"/>
      <url>/2018/05/24/CSS-vw%E5%92%8C100/</url>
      <content type="html"><![CDATA[<ul><li><p>100vw相对于浏览器的window.innerWidth，<font color="#A52A2A" size="4">是浏览器的<strong>内部宽度</strong>，注意，滚动条宽度也计算在内！</font></p></li><li><p>100%是<font color="#A52A2A" size="4"><strong>可用宽度</strong>，<strong>是不含滚动条的宽度</strong>。</font></p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> vw </tag>
            
            <tag> 100% </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-ECMAScript和JavaScript</title>
      <link href="/2018/05/22/JS-ECMAScript%E5%92%8CJavaScript/"/>
      <url>/2018/05/22/JS-ECMAScript%E5%92%8CJavaScript/</url>
      <content type="html"><![CDATA[<p>由 <strong>ECMA-262 定义的 ECMAScript 与 Web 浏览器没有依赖关系。实际上，这门语言本身<font color="#A52A2A" size="4">并不包含输 入和输出定义</font>。</strong>ECMA-262 定义的只是这门语言的基础，而在此基础之上可以构建更完善的脚本语言。</p><p>ECMAScript规定了这 门语言的下列组成部分：</p><ul><li>语法</li><li>类型 </li><li>语句 </li><li>关键字 </li><li>保留字 </li><li>操作符 </li><li>对象 </li></ul><p><strong>ECMAScript 就是对实现该标准规定的各个方面内容的语言的<font color="#A52A2A" size="4">描述</font></strong>。JavaScript 实现了 ECMAScript， Adobe ActionScript 同样也实现了 ECMAScript。</p><p>我们常见的 Web 浏览器只是 ECMAScript 实现可能的宿主环境之一。宿主环境不仅提供基本的 ECMAScript 实现，同时也会提供该语言的扩展，以便语言与环境之间对接交互。而这些扩展——如 DOM，则利用 ECMAScript 的核心类型和语法提供更多更具体的功能，以便实现针对环境的操作。其他 宿主环境包括 Node（一种服务端 JavaScript 平台）和 Adobe Flash。</p><p>一个完整的 JavaScript 实现应该由下列三 个不同的部分组成</p><ul><li>核心（ECMAScript） </li><li>文档对象模型（DOM） </li><li>浏览器对象模型（BOM）</li></ul>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> ECMAScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML-iframe</title>
      <link href="/2018/05/21/HTML-iframe/"/>
      <url>/2018/05/21/HTML-iframe/</url>
      <content type="html"><![CDATA[<h1 id="一、通过window获取iframe"><a href="#一、通过window获取iframe" class="headerlink" title="一、通过window获取iframe"></a>一、通过window获取iframe</h1><p>window.frames是个伪数组，可以通过window.frames[index]或window.frames[name]来获取iframe </p><p><br></p><h1 id="二、通过iframe获取window、document"><a href="#二、通过iframe获取window、document" class="headerlink" title="二、通过iframe获取window、document"></a>二、通过iframe获取window、document</h1><p>如果想获取iframe里的window或者document，可以使用 </p><ul><li>iframe.contentWindow</li><li>iframe.contentDocument </li></ul><font color="#A52A2A" size="4"><strong>注：跨域iframe没有操作权限</strong></font><p><br></p><h1 id="三、window获取顶级窗口、父窗口"><a href="#三、window获取顶级窗口、父窗口" class="headerlink" title="三、window获取顶级窗口、父窗口"></a>三、window获取顶级窗口、父窗口</h1><ul><li>获取顶级窗口：window.top </li><li>获取父级窗口：window.parent </li></ul>]]></content>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> iframe </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTML-节点</title>
      <link href="/2018/05/21/HTML-%E8%8A%82%E7%82%B9/"/>
      <url>/2018/05/21/HTML-%E8%8A%82%E7%82%B9/</url>
      <content type="html"><![CDATA[<h1 id="一、节点类型"><a href="#一、节点类型" class="headerlink" title="一、节点类型"></a>一、节点类型</h1><p>节点分为不同的类型：<strong>元素节点、属性节点和文本节点等</strong>。文档里几乎每一样东西都是一个节点，甚至连<font color="#A52A2A" size="4">空格和换行符都会解释为节点</font>。属<strong>性节点和文本节点总是被包含在元素节点的内部。</strong></p><p><img src="/2018/05/21/HTML-节点/domTree.png" alt="domTree"></p><p><strong>style属性只能返回拿些内嵌在HTML内容里面的样式信息。</strong></p>]]></content>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> dom </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>防卫性编程</title>
      <link href="/2018/05/18/%E9%98%B2%E5%8D%AB%E6%80%A7%E7%BC%96%E7%A8%8B/"/>
      <url>/2018/05/18/%E9%98%B2%E5%8D%AB%E6%80%A7%E7%BC%96%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="一、边界清晰，御敌于国门之外"><a href="#一、边界清晰，御敌于国门之外" class="headerlink" title="一、边界清晰，御敌于国门之外"></a>一、边界清晰，御敌于国门之外</h1><p>在模块的边界处，<strong>无论别人调用你还是你调用别人，一定要明确约定调用规范</strong>，一旦违反规范，立即启用错误处理流程（注意不是防卫流程），不要让错误在自己的模块内部流窜。</p><p><br> </p><h1 id="二、不给错误做二传手"><a href="#二、不给错误做二传手" class="headerlink" title="二、不给错误做二传手"></a>二、不给错误做二传手</h1><p>如果发现错误，让错误到此为止，非必要不接力传递错误码。</p><p><br> </p><h1 id="三、当断则断，早死早超生"><a href="#三、当断则断，早死早超生" class="headerlink" title="三、当断则断，早死早超生"></a>三、当断则断，早死早超生</h1><p>所有程序的正确运行都是依赖于一定的前提条件的，如果你发现外部模块不工作了，遵从系统的错误处理策略，<strong>该报异常就报异常，该立即退出就退出</strong>，重要的是搜集好现场的证据。一味的容错处理既不能解决问题还会掩盖问题，导致错误扩散，变形，拖延定位问题的时机。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 错误处理 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-作用域链与闭包</title>
      <link href="/2018/05/17/JS-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/"/>
      <url>/2018/05/17/JS-%E4%BD%9C%E7%94%A8%E5%9F%9F%E9%93%BE/</url>
      <content type="html"><![CDATA[<h1 id="一、执行环境-Execution-Context"><a href="#一、执行环境-Execution-Context" class="headerlink" title="一、执行环境(Execution Context)"></a>一、执行环境(Execution Context)</h1><p>每一个执行环境都关联了一个<strong>变量对象(variable Object）或者活动对象（activation object）</strong>。环境中定义的所有变量和函数都保存在这个对象中。<strong>每个函数运行时都会产生一个执行环境。活动对象是一种特殊的变量对象。</strong></p><p><br></p><p><strong>全局执行环境关联的是<font color="#A52A2A" size="4">变量对象</font>，函数执行环境关联的是<font color="#A52A2A" size="4">活动对象</font>。</strong>可以将执行环境看作是一个对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">EC = &#123;</span><br><span class="line">    VO: &#123; <span class="comment">/*执行环境关联的变量对象（variable object）*/</span> &#125;</span><br><span class="line">    <span class="keyword">this</span>: &#123;&#125;,</span><br><span class="line">    Scope: &#123; <span class="comment">/*作用域链*/</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、执行环境栈"><a href="#二、执行环境栈" class="headerlink" title="二、执行环境栈"></a>二、执行环境栈</h1><p>当一个函数被调用时，函数执行环境就被压入一个环境栈中。而在函数执行之后，栈将该函数执行环境弹出，把控制权交给之前的执行环境。  举个例子： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> scope = <span class="string">"global"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> scope;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> scope;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn1();</span><br><span class="line"></span><br><span class="line">fn2();</span><br></pre></td></tr></table></figure><p>上面代码执行情况演示：  </p><p><img src="/2018/05/17/JS-作用域链/20170429211440774.png" alt="执行环境栈"></p><p><br></p><h1 id="三、作用域链"><a href="#三、作用域链" class="headerlink" title="三、作用域链"></a>三、作用域链</h1><p>当某个函数第一次被调用时，就会<strong>创建一个执行环境(execution context)以及相应的作用域链，并把作用域链赋值给一个特殊的内部属性([scope])</strong>。然后<strong>使用this，arguments和其他命名参数的值来初始化函数的活动对象(activation object)</strong>。当前执行环境的变量对象始终在作用域链的第0位。<br></p><p>以上面的代码为例，当第一次调用fn1()时的作用域链如下图所示：</p><p><strong>（因为fn2()还没有被调用，所以没有fn2的执行环境）</strong> </p><p><img src="/2018/05/17/JS-作用域链/20170430104545087.png" alt="作用域链1"></p><p>可以看到fn1活动对象里并没有scope变量，于是沿着作用域链(scope chain)向后寻找，结果在全局变量对象里找到了scope，所以就返回全局变量对象里的scope值。 </p><a id="more"></a> <p><font color="#A52A2A" size="4"><strong>标识符解析是沿着作用域链一级一级地搜索标识符地过程</strong></font>。<strong>搜索过程始终从作用域链地前端开始，然后逐级向后回溯，直到找到标识符为止（如果找不到标识符，通常会导致错误发生）—-《JavaScript高级程序设计》</strong> </p><p>再来看一段代码： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> scope = <span class="string">"outer"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> scope;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> inner;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fn = outer();</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><p>outer()内部返回了一个inner函数，当调用outer时，<font color="#A52A2A" size="4"><strong>inner函数的作用域链就已经被初始化了（复制父函数的作用域链，再在前端插入自己的活动对象）</strong></font>，具体如下图：  </p><p><img src="/2018/05/17/JS-作用域链/20170430112410039.png" alt="作用域链2"></p><p> 一般来说，当某个环境中的所有代码执行完毕后，该环境被销毁（弹出环境栈），保存在其中的所有变量和函数也随之销毁。但是像上面那种有内部函数的又有所不同，<strong>当outer()函数执行结束，<font color="#A52A2A" size="4">执行环境被销毁</font>，但是其<font color="#A52A2A" size="4">关联的活动对象并没有随之销毁</font>，而是一直存在于内存中</strong>，因为该活动对象被其内部函数的作用域链所引用。  </p><p><br></p><p>具体如下图： </p><ol><li>outer执行结束，内部函数开始被调用 。</li><li>outer执行环境等待被回收，outer的作用域链对全局变量对象和outer的活动对象引用都断了 。</li></ol><p><img src="/2018/05/17/JS-作用域链/20170430115351877.png" alt="作用域链3"></p><p>像上面这种内部函数的作用域链仍然保持着对父函数活动对象的引用，就是<strong>闭包(closure)</strong> 。</p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 作用域 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-代码异常监控</title>
      <link href="/2018/05/16/JS-%E4%BB%A3%E7%A0%81%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7/"/>
      <url>/2018/05/16/JS-%E4%BB%A3%E7%A0%81%E5%BC%82%E5%B8%B8%E7%9B%91%E6%8E%A7/</url>
      <content type="html"><![CDATA[<h1 id="一、window-onerror"><a href="#一、window-onerror" class="headerlink" title="一、window.onerror"></a>一、window.onerror</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">message, source, lineno, colno, error</span>) </span>&#123; ... &#125;</span><br></pre></td></tr></table></figure><p>函数参数：</p><ul><li>message：错误信息（字符串）。可用于HTML onerror=””处理程序中的event。</li><li>source：发生错误的脚本URL（字符串）</li><li>lineno：发生错误的行号（数字）</li><li>colno：发生错误的列号（数字）</li><li>error：<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error" target="_blank" rel="noopener">Error对象</a>（对象）</li></ul><p><strong>若该函数返回true，则阻止执行默认事件处理函数。</strong> </p><p><br></p><h1 id="二、window-addEventListener-‘error’"><a href="#二、window-addEventListener-‘error’" class="headerlink" title="二、window.addEventListener(‘error’)"></a>二、window.addEventListener(‘error’)</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123; ... &#125;)</span><br></pre></td></tr></table></figure><p>**<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/ErrorEvent" target="_blank" rel="noopener">ErrorEvent</a> 类型的event包含有关事件和错误的所有信息。<br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">msg, url, lineNo, columnNo, error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> message = [</span><br><span class="line">        <span class="string">'Message: '</span> + msg,</span><br><span class="line">        <span class="string">'URL: '</span> + url,</span><br><span class="line">        <span class="string">'Line: '</span> + lineNo,</span><br><span class="line">        <span class="string">'Column: '</span> + columnNo,</span><br><span class="line">        <span class="string">'Error object: '</span> + <span class="built_in">JSON</span>.stringify(error)</span><br><span class="line">    ].join(<span class="string">' - '</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(message);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="/2018/05/16/JS-代码异常监控/前端代码异常监控曲线示例图2.png" alt="前端代码异常监控曲线示例图"></p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 异常监控 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-blend-mode</title>
      <link href="/2018/05/15/CSS-blend-mode/"/>
      <url>/2018/05/15/CSS-blend-mode/</url>
      <content type="html"><![CDATA[<h1 id="一、mix-blend-mode"><a href="#一、mix-blend-mode" class="headerlink" title="一、mix-blend-mode"></a>一、mix-blend-mode</h1><p>描述了元素的<strong>内容</strong>应该如何与<font color="#A52A2A" size="4"><strong>元素的直接父元素</strong></font>和<font color="#A52A2A" size="4"><strong>元素的背景</strong></font>混合。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mix-blend-mode: normal;          //正常</span><br><span class="line">mix-blend-mode: multiply;        //正片叠底</span><br><span class="line">mix-blend-mode: screen;          //滤色</span><br><span class="line">mix-blend-mode: overlay;         //叠加</span><br><span class="line">mix-blend-mode: darken;          //变暗</span><br><span class="line">mix-blend-mode: lighten;         //变亮</span><br><span class="line">mix-blend-mode: color-dodge;     //颜色减淡</span><br><span class="line">mix-blend-mode: color-burn;      //颜色加深</span><br><span class="line">mix-blend-mode: hard-light;      //强光</span><br><span class="line">mix-blend-mode: soft-light;      //柔光</span><br><span class="line">mix-blend-mode: difference;      //差值</span><br><span class="line">mix-blend-mode: exclusion;       //排除</span><br><span class="line">mix-blend-mode: hue;             //色相</span><br><span class="line">mix-blend-mode: saturation;      //饱和度</span><br><span class="line">mix-blend-mode: color;           //颜色</span><br><span class="line">mix-blend-mode: luminosity;      //亮度</span><br><span class="line">mix-blend-mode: initial;         //初始</span><br><span class="line">mix-blend-mode: inherit;         //继承</span><br><span class="line">mix-blend-mode: unset;           //复原</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h1 id="二、background-blend-mode"><a href="#二、background-blend-mode" class="headerlink" title="二、background-blend-mode"></a>二、background-blend-mode</h1><p>定义该元素的<font color="#A52A2A" size="4"><strong>背景图片</strong></font>，以及<font color="#A52A2A" size="4"><strong>背景色</strong></font>如何混合，属性值和mix-blend-mode一样。</p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> background-blend-mode </tag>
            
            <tag> mix-blend-mode </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-linear-gradient</title>
      <link href="/2018/05/15/CSS-linear-gradient/"/>
      <url>/2018/05/15/CSS-linear-gradient/</url>
      <content type="html"><![CDATA[<h1 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span>: <span class="selector-tag">linear-gradient</span>(<span class="selector-attr">[&lt;angle&gt;|&lt;side-or-corner&gt;,]</span>?&lt;<span class="selector-tag">color-stop</span>&gt;<span class="selector-attr">[,&lt;color-stop&gt;]</span>+);</span><br></pre></td></tr></table></figure><ul><li><p>[]在正则中表示一个字符类，这里，你可以理解为一个小单元。 </p></li><li><p>|表示候选。也就是“或者”的意思，要么前面的，要么就后面的。 </p></li><li><p>?为量词，表示0个或1个。 </p></li><li><p>+也是量词，表示1个或者更多个。因此，终止颜色是不可缺少的。 </p></li><li><p>&lt;&gt;中的是关键字，主要是让开发人员知道这里应该放些什么内容。</p></li></ul><p><br></p><a id="more"></a> <h1 id="二、angle"><a href="#二、angle" class="headerlink" title="二、angle"></a>二、angle</h1><p><img src="/2018/05/15/CSS-linear-gradient/gradient-1.png" alt="gradient-1"></p><p><strong>C点渐变容器中心点，A是过C点垂直线与<font color="#A52A2A" size="4">过C点渐变线</font>的夹角，这个角称为渐变角度。</strong> </p><p><img src="/2018/05/15/CSS-linear-gradient/7B0CC41A-86DC-4E1B-8A69-A410E6764B91.jpg" alt=""></p><p><br></p><h1 id="三、side-or-corner"><a href="#三、side-or-corner" class="headerlink" title="三、side-or-corner"></a>三、side-or-corner</h1><p>side-or-corner中文意思就是“边或角”，可选值有： [left | right] || [top | bottom]，有如下的写法或组合：</p><p>left, right, top, bottom, left top, left bottom, right top, right bottom. 分别表示，从左往右，从右往左，从上往下，从下往上，从左上往右下，从……</p><p><br></p><h1 id="四、color-stop"><a href="#四、color-stop" class="headerlink" title="四、color-stop"></a>四、color-stop</h1><p><strong>渐变关键颜色结点，语法为：<color> [ <percentage> | <length> ]</length></percentage></color></strong></p><p><br></p><h1 id="五、角度坐标与位置关系"><a href="#五、角度坐标与位置关系" class="headerlink" title="五、角度坐标与位置关系"></a>五、角度坐标与位置关系</h1><p>对于<font color="#A52A2A" size="4">斜向线性渐变</font>，点到点的渐变不是直接把点的横坐标放上去就可以的。因为当<font color="#A52A2A" size="4">渐变倾斜的时候，渐变的起止点的坐标也发生变化了</font>。下图是官方规范的一张示意图，演示的是45deg渐变的起止点以及方向。 </p><p><img src="/2018/05/15/CSS-linear-gradient/gradient-diagram.png" alt="gradient-diagram"></p><p>记住一个关键点，<strong>渐变的起点和终点（默认）在过中心的<font color="#A52A2A" size="4">渐变线的垂直线</font>上</strong>，于是，我们就可以确定起点与终点的位置了。按照这个理解，我们就可以画出400*300 div上135deg起始点在哪里，然后再确定(100,100)和(200,200)的位置就轻松多了。如下示意图： </p><p><img src="/2018/05/15/CSS-linear-gradient/100-300-what-mean.png" alt=""></p><p>一图顶前言，反正上面这张图我是看懂了。于是，我们的坐标起止点值其实就变成了，黑色括弧的长度以及紫色括弧的长度值分别多少！虽然很多人不喜欢数学，但是几何应该都还不错，我们来一起算一下……</p><p>结果为，起点：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span> * <span class="built_in">Math</span>.sqrt(<span class="number">2</span>) = <span class="number">141.4213562373095</span>;</span><br></pre></td></tr></table></figure><p>终点为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">200</span> * <span class="built_in">Math</span>.sqrt(<span class="number">2</span>) = <span class="number">282.842712474619</span>;</span><br></pre></td></tr></table></figure><p>CSS用上：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(135deg, red 141.42px, yellow 282.84px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> linear-gradient </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>drop-shadow与box-shadow</title>
      <link href="/2018/05/15/CSS-drop-shadow%E4%B8%8Ebox-shadow/"/>
      <url>/2018/05/15/CSS-drop-shadow%E4%B8%8Ebox-shadow/</url>
      <content type="html"><![CDATA[<h1 id="一、区别"><a href="#一、区别" class="headerlink" title="一、区别"></a>一、区别</h1><ul><li>drop-shadow没有内阴影效果</li><li>drop-shadow不能阴影叠加</li><li><strong>drop-shadow穿透代码构建的元素的透明部分</strong></li><li><strong>drop-shadow 也可以穿透PNG图片的透明部分</strong></li></ul><p><img src="/2018/05/15/CSS-drop-shadow与box-shadow/13123.png" alt="drop-shadow与box-shadow"></p><font color="#A52A2A" size="4"><strong>可以利用这个特性实现css 改变图片颜色</strong></font><p><br></p><a id="more"></a> <h1 id="二、利用box-shadow实现遮罩层"><a href="#二、利用box-shadow实现遮罩层" class="headerlink" title="二、利用box-shadow实现遮罩层"></a>二、利用box-shadow实现遮罩层</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.spectiveBlur</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">220px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">160px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#E91E63</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">200%</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">transition</span>: transform .<span class="number">2s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.spectiveBlur</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1920px</span> <span class="built_in">rgba</span>(0, 0, 0, .7);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%, -50%) <span class="built_in">scale</span>(1.2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> drop-shadow </tag>
            
            <tag> box-shadow </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-dataTransfer拖拽</title>
      <link href="/2018/05/09/JS-dataTransfer%E6%8B%96%E6%8B%BD/"/>
      <url>/2018/05/09/JS-dataTransfer%E6%8B%96%E6%8B%BD/</url>
      <content type="html"><![CDATA[<h1 id="一、对象方法"><a href="#一、对象方法" class="headerlink" title="一、对象方法"></a>一、对象方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> dsHandler = <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    evt.dataTransfer.setData(<span class="string">"text/plain"</span>, <span class="string">"&lt;item&gt;"</span> + evt.target.innerHTML);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>setData(format,data):</strong><ul><li>​        将指定格式的数据赋值给dataTransfer对象</li><li>参数format定义数据的格式也就是数据的类型，data为待赋值的数据</li></ul></li></ul><p><br></p><ul><li><strong>getData(format):</strong><ul><li>从dataTransfer对象中获取指定格式的数据，format代表数据格式，data为数据。</li></ul></li></ul><p><br></p><ul><li><strong>clearData([format]):</strong><ul><li>从dataTransfer对象中删除指定格式的数据，参数可选。</li><li>若不给出，则为删除对象中所有的数据</li></ul></li></ul>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> dataTransfer </tag>
            
            <tag> 拖拽 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-几个好用的属性</title>
      <link href="/2018/05/08/CSS-%E5%87%A0%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B1%9E%E6%80%A7/"/>
      <url>/2018/05/08/CSS-%E5%87%A0%E4%B8%AA%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<h1 id="1-attr"><a href="#1-attr" class="headerlink" title="1.attr"></a>1.attr</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p data-unit="元"&gt;剩余话费40&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[data-unit]</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="built_in">attr</span>(data-unit);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3b98e0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a> <h1 id="2-currentColor是color属性的值"><a href="#2-currentColor是color属性的值" class="headerlink" title="2. currentColor是color属性的值"></a>2. currentColor是color属性的值</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#3b98e0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid currentColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-user-select-禁止选择文本"><a href="#3-user-select-禁止选择文本" class="headerlink" title="3.user-select 禁止选择文本"></a>3.user-select 禁止选择文本</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box-1</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-user-select</span>: none;</span><br><span class="line">    <span class="attribute">-moz-user-select</span>: none;</span><br><span class="line">    <span class="attribute">user-select</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-selection-可设置文字被选择时的样式"><a href="#4-selection-可设置文字被选择时的样式" class="headerlink" title="4.selection 可设置文字被选择时的样式"></a>4.selection 可设置文字被选择时的样式</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#FE6E66</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#FFF</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>只能向 ::selection 选择器应用少量 CSS 属性：color、background、cursor 以及 outline</strong>。</p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-object-fit</title>
      <link href="/2018/05/08/CSS-object-fit/"/>
      <url>/2018/05/08/CSS-object-fit/</url>
      <content type="html"><![CDATA[<h1 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object-fit : css property specifies how the contents of a replaced element should be fitted to the box established by its used height and width.</span><br><span class="line"></span><br><span class="line">object-position : css property determines the alignment of the replaced element inside its box.</span><br></pre></td></tr></table></figure><p><strong><font color="#A52A2A" size="4">这里的object实际上指的是replaced element</font></strong> 。</p><p><br></p><h1 id="二、替换元素"><a href="#二、替换元素" class="headerlink" title="二、替换元素"></a>二、替换元素</h1><ul><li><p>其内容不受CSS视觉<font color="#A52A2A" size="4"><strong>格式化模型</strong></font>控制的元素。</p><ul><li>比如image, 嵌入的文档(iframe之类)或者applet。</li><li>比如，img元素的内容通常会被其src属性指定的图像替换掉。</li><li>替换元素通常有其固有的尺寸：一个固有的宽度，一个固有的高度和一个固有的比率。比如一幅位图有固有用绝对单位指定的宽度和高度，从而也有固有的宽高比率。另一方面，其他文档也可能没有固有的尺寸，比如一个空白的html文档。</li></ul></li></ul><ul><li><strong>CSS渲染模型不考虑<font color="#A52A2A" size="4">替换元素内容</font>的渲染</strong>。这些替换元素的展现独立于CSS。<strong>object, video, textarea, input也是替换元素，audio和canvas在某些特定情形下为替换元素。</strong></li></ul><ul><li><strong>使用CSS的content属性插入的对象是匿名替换元素。</strong></li></ul><p><br></p><a id="more"></a> <h1 id="三、object-fit"><a href="#三、object-fit" class="headerlink" title="三、object-fit"></a>三、object-fit</h1><p>object-fit具体有5个值：</p><ul><li><strong>fill</strong>: <strong>默认值</strong>，替换内容拉伸填满整个content box，不保证保持原有的比例</li><li><strong>contain</strong>: 保持原有尺寸比例，保证替换内容尺寸一定可以在容器里面放得下</li><li><strong>cover</strong>:保持原有尺寸比例，保证替换内容尺寸一定大于容器尺寸，宽度和高度至少有一个和容器一致</li><li><strong>none</strong>: 保持原有尺寸比例，同时保持替换内容原始尺寸大小</li><li><strong>scale-down</strong>: 好像依次设置了none或contain，最终呈现的是尺寸比较小的那个</li></ul><p><br></p><h1 id="四、深入理解"><a href="#四、深入理解" class="headerlink" title="四、深入理解"></a>四、深入理解</h1><p><strong>一个图片，如果没有src，它依然是个替换元素，它在浏览器中的解析依然是正确的。</strong> </p><p>src指向的图片属于替换内容，注意，<font color="#A52A2A" size="4"><strong>替换内容</strong></font>和<font color="#A52A2A" size="4"><strong>替换元素</strong></font>是壳子与内容的关系，两者是独立的。</p><p>在CSS2.1时代，壳子的实际尺寸（如果没有CSS或HTML设置），则是跟随内容的实际尺寸，因此，网页加载的时候，我们会看到图片占据的高度从0到图片实际高度跳动的过程；</p><p><strong>如果壳子，也就是img有尺寸限制，则替换内容fill拉伸适应于 img替换元素的设定尺寸</strong>。总而言之，壳子与内容的尺寸永远是一样的。于是，我们就会误认为图片就是那个图片，唯一的存在，导致我们理解object-fit的特性表现出现了障碍。 </p><p>在CSS3时代，object-fit的世界里，<font color="#A52A2A" size="4"><strong>object-fit控制的永远是替换内容的尺寸表现</strong></font>，注意，是替换内容的尺寸表现，不是img替换元素。</p><p><br></p><h1 id="五、object-position"><a href="#五、object-position" class="headerlink" title="五、object-position"></a>五、object-position</h1><p>object-position要比object-fit单纯的多，就是控制替换内容位置的。默认值是50% 50%。 </p><p>与background-position类似，object-position的值类型为<position>类型值。</position></p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> object-fit </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-调用摄像头</title>
      <link href="/2018/05/08/JS-%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4/"/>
      <url>/2018/05/08/JS-%E8%B0%83%E7%94%A8%E6%91%84%E5%83%8F%E5%A4%B4/</url>
      <content type="html"><![CDATA[<h1 id="一、用法"><a href="#一、用法" class="headerlink" title="一、用法"></a>一、用法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">navigator.mediaDevices.getUserMedia(constraints)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">stream</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* 使用这个stream stream */</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="comment">/* 处理error */</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p><strong>MediaDevices.getUserMedia()</strong>会提示用户给予使用媒体输入的许可。它返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">Promise</a> 对象，成功后会resolve回调一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaStream" target="_blank" rel="noopener">MediaStream</a> 对象。若用户拒绝了使用权限，或者需要的媒体源不可用，promise会reject回调一个  PermissionDeniedError 或者 NotFoundError 。 </p><h1 id="二、参数Constraints"><a href="#二、参数Constraints" class="headerlink" title="二、参数Constraints"></a>二、参数Constraints</h1><ol><li><p>以下同时请求不带任何参数的音频和视频： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    audio: <span class="literal">true</span>,</span><br><span class="line">    video: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>当由于隐私保护的原因，无法访问用户的摄像头和麦克风信息时，应用可以使用额外的constraints参数请求它所需要或者想要的摄像头和麦克风能力。下面演示了应用想要使用1280x720的摄像头分辨率： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    audio: <span class="literal">true</span>,</span><br><span class="line">    video:</span><br><span class="line">    &#123;</span><br><span class="line">        width: <span class="number">1280</span>,</span><br><span class="line">        height: <span class="number">720</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器会试着满足这个请求参数，但是如果无法准确满足此请求中参数要求或者用户选择覆盖了请求中的参数时，有可能返回其它的分辨率。 </p><a id="more"></a> </li><li><p>强制要求获取特定的尺寸时，可以使用关键字min, max, 或者 exact(就是 min == max). 以下参数表示要求获取最低为1280x720的分辨率。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    audio: <span class="literal">true</span>,</span><br><span class="line">    video:</span><br><span class="line">    &#123;</span><br><span class="line">        width:</span><br><span class="line">        &#123;</span><br><span class="line">            min: <span class="number">1280</span></span><br><span class="line">        &#125;,</span><br><span class="line">        height:</span><br><span class="line">        &#123;</span><br><span class="line">            min: <span class="number">720</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果摄像头不支持请求的或者更高的分辨率，返回的Promise会处于rejected状态，NotFoundError作为rejected回调的参数，而且用户将不会得到要求授权的提示。 </p></li></ol><ol start="4"><li><p>当请求包含一个ideal（应用最理想的）值时，这个值有着更高的权重，意味着浏览器会先尝试找到最接近指定的理想值的设定或者摄像头（如果设备拥有不止一个摄像头）。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    audio: <span class="literal">true</span>,</span><br><span class="line">    video:</span><br><span class="line">    &#123;</span><br><span class="line">        width:</span><br><span class="line">        &#123;</span><br><span class="line">            min: <span class="number">1024</span>,</span><br><span class="line">            ideal: <span class="number">1280</span>,</span><br><span class="line">            max: <span class="number">1920</span></span><br><span class="line">        &#125;,</span><br><span class="line">        height:</span><br><span class="line">        &#123;</span><br><span class="line">            min: <span class="number">776</span>,</span><br><span class="line">            ideal: <span class="number">720</span>,</span><br><span class="line">            max: <span class="number">1080</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="5"><li><p>并不是所有的constraints 都是数字。例如, 在移动设备上面，如下的例子表示优先使用前置摄像头： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    audio: <span class="literal">true</span>,</span><br><span class="line">    video:</span><br><span class="line">    &#123;</span><br><span class="line">        facingMode: <span class="string">"user"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>强制使用后置摄像头，请用： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    audio: <span class="literal">true</span>,</span><br><span class="line">    video:</span><br><span class="line">    &#123;</span><br><span class="line">        facingMode:</span><br><span class="line">        &#123;</span><br><span class="line">            exact: <span class="string">"environment"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    body &#123;</span></span><br><span class="line"><span class="undefined">        display: flex;</span></span><br><span class="line"><span class="undefined">        justify-content: center;</span></span><br><span class="line"><span class="undefined">        flex-wrap: wrap;</span></span><br><span class="line"><span class="undefined">        align-items: center;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    video &#123;</span></span><br><span class="line"><span class="undefined">        width: 100vw;</span></span><br><span class="line"><span class="undefined">        height: 60vw;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    button &#123;</span></span><br><span class="line"><span class="undefined">        display: inline-block;</span></span><br><span class="line"><span class="undefined">        width: 200px;</span></span><br><span class="line"><span class="undefined">        line-height: 2;</span></span><br><span class="line"><span class="undefined">        font-size: 20px;</span></span><br><span class="line"><span class="undefined">        margin: 15px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"setFront()"</span>&gt;</span>front<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"setRear()"</span>&gt;</span>rear<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"pause()"</span>&gt;</span>stop<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> constraints = &#123; <span class="attr">audio</span>: <span class="literal">true</span>, <span class="attr">video</span>: <span class="literal">true</span> &#125;;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> recorder = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> video = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">pause</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        recorder.stop();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setFront</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        constraints = &#123; <span class="attr">audio</span>: <span class="literal">true</span>, <span class="attr">video</span>: &#123; <span class="attr">facingMode</span>: <span class="string">"user"</span> &#125; &#125;;</span></span><br><span class="line"><span class="undefined">        author();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">setRear</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        constraints = &#123; <span class="attr">audio</span>: <span class="literal">true</span>, <span class="attr">video</span>: &#123; <span class="attr">facingMode</span>: &#123; <span class="attr">exact</span>: <span class="string">"environment"</span> &#125; &#125; &#125;;</span></span><br><span class="line"><span class="undefined">        author();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">author</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        constraints.video.frameRate = &#123; ideal: 10, max: 15 &#125;;</span></span><br><span class="line"><span class="undefined">        navigator.mediaDevices.getUserMedia(constraints)</span></span><br><span class="line"><span class="javascript">            .then(<span class="function"><span class="keyword">function</span>(<span class="params">mediaStream</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'mediaStream'</span>)</span></span><br><span class="line"><span class="javascript">                video = <span class="built_in">document</span>.querySelector(<span class="string">'video'</span>);</span></span><br><span class="line"><span class="undefined">                video.src = URL.createObjectURL(mediaStream);</span></span><br><span class="line"><span class="javascript">                video.onloadedmetadata = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    recorder = <span class="keyword">new</span> MediaRecorder(mediaStream);</span></span><br><span class="line"><span class="javascript">                    recorder.ondataavailable = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                        video.pause();</span></span><br><span class="line"><span class="undefined">                        video.src = URL.createObjectURL(event.data);</span></span><br><span class="line"><span class="javascript">                        video.onloadedmetadata = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                            video.play();</span></span><br><span class="line"><span class="undefined">                        &#125;;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                    video.play();</span></span><br><span class="line"><span class="undefined">                    recorder.start();</span></span><br><span class="line"><span class="undefined">                &#125;;</span></span><br><span class="line"><span class="undefined">            &#125;)</span></span><br><span class="line"><span class="javascript">            .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(err.name + <span class="string">": "</span> + err.message);</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">    author();</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 摄像 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-标签语句</title>
      <link href="/2018/05/07/JS-%E6%A0%87%E7%AD%BE%E8%AF%AD%E5%8F%A5/"/>
      <url>/2018/05/07/JS-%E6%A0%87%E7%AD%BE%E8%AF%AD%E5%8F%A5/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//label: statement;</span></span><br><span class="line"></span><br><span class="line">outPoint:</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; all.length; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">0</span>; k &lt; all[j].length; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (all[j][k].id == itemsId[i]) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(all[j][k]);</span><br><span class="line">                    <span class="keyword">break</span> outPoint; <span class="comment">//直接跳出最外层循环</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><strong>JavaScript中任何地方都可以定义语句标签</strong> </li><li><strong>break</strong>和<strong>continue</strong>是JavaScript中唯一可以使用语句标签的语句 </li><li><strong>控制权无法越过函数的边界</strong></li></ul>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 标签 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>linux-ln链接</title>
      <link href="/2018/04/30/linux-ln%E9%93%BE%E6%8E%A5/"/>
      <url>/2018/04/30/linux-ln%E9%93%BE%E6%8E%A5/</url>
      <content type="html"><![CDATA[<h4 id="一、使用方式"><a href="#一、使用方式" class="headerlink" title="一、使用方式"></a>一、使用方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln [option] source_file dist_file</span><br></pre></td></tr></table></figure><ul><li><code>-f</code>建立时，将同档案名删除</li><li><code>-i</code> 删除前进行询问</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">建立abc的软连接</span></span><br><span class="line">ln -s abc cde</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">建立abc的硬连接</span></span><br><span class="line">ln abc cde</span><br></pre></td></tr></table></figure><a id="more"></a><p><br></p><h4 id="二、软链接与硬链接的区别"><a href="#二、软链接与硬链接的区别" class="headerlink" title="二、软链接与硬链接的区别"></a>二、软链接与硬链接的区别</h4><p>硬链接可认为是一个文件拥有两个文件名，而软链接则是系统新建一个链接文件，此文件指向其所要指的文件 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/lntest/source/ /root/lntest/dist/</span><br></pre></td></tr></table></figure><p>（1）软连接可以跨文件系统 ，硬连接不可以 。实践的方法就是用共享文件把windows下的 aa.txt文本文档连接到linux下/root目录下。ln -s  aa.txt  /root连接成功 。ln  aa.txt  /root失败 。 </p><p>（2）关于 I节点的问题 。硬连接不管有多少个，都指向的是同一个I节点，会把 结点连接数增加，只要结点的连接数不是 0，文件就一直存在，不管你删除的是源文件还是 连接的文件 。只要有一个存在 ，文件就存在（其实也不分什么源文件连接文件的 ，因为他们指向都是同一个 I节点）。 当你修改源文件或者连接文件任何一个的时候 ，其他的文件都会做同步的修改。</p><p>（3）软链接不直接使用i节点号作为文件指针,而是使用文件路径名作为指针。所以删除连接文件对源文件无影响，但是删除源文件，连接文件就会找不到要指向的文件 。软链接有自己的inode,并在磁盘上有一小片空间存放路径名. </p><p><br></p><h4 id="三、删除链接"><a href="#三、删除链接" class="headerlink" title="三、删除链接"></a>三、删除链接</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 正确</span><br><span class="line">rm -rf hb_link</span><br><span class="line"></span><br><span class="line"># 错误</span><br><span class="line">rm -rf hb_link/ #删除目录下的文件和子目录内文件</span><br></pre></td></tr></table></figure><p><br></p><p>​                             </p>]]></content>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ln </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-replace</title>
      <link href="/2018/04/29/JS-replace/"/>
      <url>/2018/04/29/JS-replace/</url>
      <content type="html"><![CDATA[<h1 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringObject.replace(regexp/substr,replacement);</span><br></pre></td></tr></table></figure><p><strong>在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 replacement 来替换这些子串。</strong>如果 regexp 具有<font color="#A52A2A" size="4"><strong>全局标志 g</strong></font>，那么 replace() 方法将替换<font color="#A52A2A" size="4">所有</font>匹配的子串。否则，它只替换第一个匹配子串。</p><p><br></p><p><font color="#A52A2A" size="4"><strong>replacement 可以是字符串，也可以是函数</strong></font>。如果它是字符串，那么每个匹配都将由字符串替换。</p><p><br></p><p>replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换。</p><table><thead><tr><th>字符</th><th>替换文本</th></tr></thead><tbody><tr><td>$1、$2、…、$99</td><td>与 regexp 中的第 1 到第 99 个子表达式相匹配的文本。</td></tr><tr><td>$&amp;</td><td>与 regexp   相匹配的子串。</td></tr><tr><td>$`</td><td>位于匹配子串<strong>左侧</strong>的文本。</td></tr><tr><td>$’</td><td>位于匹配子串<strong>右侧</strong>的文本。</td></tr><tr><td>$$</td><td>直接量符号。</td></tr></tbody></table><p><br></p><a id="more"></a> <h1 id="二、replacement作为函数"><a href="#二、replacement作为函数" class="headerlink" title="二、replacement作为函数"></a>二、replacement作为函数</h1><p>replace() 方法的参数 replacement 可以是函数而不是字符串。在这种情况下，<strong>每个匹配都调用该函数，它返回的字符串将作为替换文本使用</strong>。该函数的第一个参数是匹配模式的字符串。接下来的参数是与模式中的子表达式匹配的字符串，可以有 0 个或多个这样的参数。接下来的参数是一个整数，声明了匹配在 stringObject 中出现的位置。最后一个参数是 stringObject 本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">"Doe, John"</span>;</span><br><span class="line">name.replace(<span class="regexp">/(\w+)\s*, \s*(\w+)/</span>, <span class="string">"$2 $1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _dete = <span class="string">'20180408000000'</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatStr</span>(<span class="params">str, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>,</span><br><span class="line">        _type = type || <span class="string">"xxxx-xx-xx xx:xx:xx"</span>;</span><br><span class="line">    <span class="keyword">return</span> _type.replace(<span class="regexp">/x/g</span>, () =&gt; str[i++]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">formatStr(_dete);</span><br><span class="line">result: <span class="string">"2018-04-08 00:00:00"</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> replace </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-开放封闭原则</title>
      <link href="/2018/04/29/JS-%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99/"/>
      <url>/2018/04/29/JS-%E5%BC%80%E6%94%BE%E5%B0%81%E9%97%AD%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<h1 id="一、两个主要特性"><a href="#一、两个主要特性" class="headerlink" title="一、两个主要特性"></a>一、两个主要特性</h1><ul><li>它们 “面向<strong>扩展开放</strong>（Open For Extension）”。<ul><li>模块的行为是能够被扩展的。当应用程序的需求变化时，我们可以使模块表现出全新的或与以往不同的行为，以满足新的需求。</li></ul></li></ul><ul><li>它们 “面向<strong>修改封闭</strong>（Closed For Modification）”。<ul><li>模块的源代码是不能被侵犯的，任何人都不允许修改已有源代码。</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检测字符串</span></span><br><span class="line"><span class="comment">//checkType('165226226326','mobile')</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> checkType = <span class="function"><span class="keyword">function</span>(<span class="params">str, type</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'email'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'mobile'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'tel'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'number'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[0-9]$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'english'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]+$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'text'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^\w+$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'chinese'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[\u4E00-\u9FA5]+$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'lower'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-z]+$/</span>.test(str);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'upper'</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[A-Z]+$/</span>.test(str);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 API 看着没什么毛病，能检测常用的一些数据。但是有以下两个问题。</p><ol><li>但是如果想到添加其他规则的呢？就得在函数里面增加 case 。添加一个规则就修改一次！这样违反了开放-封闭原则（对扩展开放，对修改关闭）。而且这样也会导致整个 API 变得臃肿，难维护。</li></ol><ol start="2"><li>还有一个问题就是，比如A页面需要添加一个金额的校验，B页面需要一个日期的校验，但是金额的校验只在A页面需要，日期的校验只在B页面需要。如果一直添加 case 。就是导致A页面把只在B页面需要的校验规则也添加进去，造成不必要的开销。B页面也同理。</li></ol><a id="more"></a> <p>建议的方式是给这个 API 增加一个扩展的接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> checkType = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> rules = &#123;</span><br><span class="line">        email(str) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/</span>.test(str);</span><br><span class="line">        &#125;,</span><br><span class="line">        mobile(str) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^1[3|4|5|7|8][0-9]&#123;9&#125;$/</span>.test(str);</span><br><span class="line">        &#125;,</span><br><span class="line">        tel(str) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/</span>.test(str);</span><br><span class="line">        &#125;,</span><br><span class="line">        number(str) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[0-9]$/</span>.test(str);</span><br><span class="line">        &#125;,</span><br><span class="line">        english(str) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z]+$/</span>.test(str);</span><br><span class="line">        &#125;,</span><br><span class="line">        text(str) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^\w+$/</span>.test(str);</span><br><span class="line">        &#125;,</span><br><span class="line">        chinese(str) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[\u4E00-\u9FA5]+$/</span>.test(str);</span><br><span class="line">        &#125;,</span><br><span class="line">        lower(str) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-z]+$/</span>.test(str);</span><br><span class="line">        &#125;,</span><br><span class="line">        upper(str) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="regexp">/^[A-Z]+$/</span>.test(str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//暴露接口</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">//校验</span></span><br><span class="line">        check(str, type) &#123;</span><br><span class="line">            <span class="keyword">return</span> rules[type] ? rules[type](str) : <span class="literal">false</span>;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">//添加规则</span></span><br><span class="line">        addRule(type, fn) &#123;</span><br><span class="line">            rules[type] = fn;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用方式</span></span><br><span class="line"><span class="comment">//使用mobile校验规则</span></span><br><span class="line"><span class="built_in">console</span>.log(checkType.check(<span class="string">'188170239'</span>, <span class="string">'mobile'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加金额校验规则</span></span><br><span class="line">checkType.addRule(<span class="string">'money'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="regexp">/^[0-9]+(.[0-9]&#123;2&#125;)?$/</span>.test(str)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用金额校验规则</span></span><br><span class="line"><span class="built_in">console</span>.log(checkType.check(<span class="string">'18.36'</span>, <span class="string">'money'</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 原则 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-加载模块</title>
      <link href="/2018/04/29/JS-%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97/"/>
      <url>/2018/04/29/JS-%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防止多文件集成成一个文件后 前面的文件忘记写；的情况</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">factory</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> registeredInModuleLoader;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">'function'</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">          define(factory);</span><br><span class="line">          registeredInModuleLoader = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> exports === <span class="string">'object'</span>) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'b'</span>)</span><br><span class="line">          <span class="built_in">module</span>.exports = factory();</span><br><span class="line">          registeredInModuleLoader = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (!registeredInModuleLoader) &#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'c'</span>)</span><br><span class="line">          <span class="keyword">var</span> OldCookies = <span class="built_in">window</span>.Cookies;</span><br><span class="line">          <span class="keyword">var</span> api = <span class="built_in">window</span>.Cookies = factory();</span><br><span class="line">          api.noConflict = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="built_in">window</span>.Cookies = OldCookies;</span><br><span class="line">              <span class="keyword">return</span> api;</span><br><span class="line">          &#125;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> &#123; <span class="attr">a</span>: <span class="number">1</span> &#125; &#125;));</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> module </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-函数单一职责原则</title>
      <link href="/2018/04/29/JS-%E5%87%BD%E6%95%B0%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
      <url>/2018/04/29/JS-%E5%87%BD%E6%95%B0%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<p>​            函数违反单一原则最大一个后果就是会导致逻辑混乱。如果一个函数承担了太多的职责。</p><p>不妨试下：<font color="#A52A2A" size="4"><strong>函数单一原则 – 一个函数只做一件事</strong></font> 。</p><p><br></p><h5 id="埋头就是干："><a href="#埋头就是干：" class="headerlink" title="埋头就是干："></a>埋头就是干：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//图片预加载函数</span></span><br><span class="line"><span class="keyword">let</span> delayload = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="built_in">document</span>.querySelector(<span class="string">"#img"</span>);</span><br><span class="line">    img.src = <span class="string">"loading.gif"</span>;</span><br><span class="line">    <span class="keyword">let</span> newImg = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">    newImg.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        img.src = newImg.src;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">        newImg.src = src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">delayload(<span class="string">"jimmy.jpg"</span>);</span><br></pre></td></tr></table></figure><p><br></p><h5 id="遵循一个函数只做一件事后："><a href="#遵循一个函数只做一件事后：" class="headerlink" title="遵循一个函数只做一件事后："></a>遵循一个函数只做一件事后：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将背景图设置，和图片加载的src修改分开</span></span><br><span class="line"><span class="keyword">let</span> delayload = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="built_in">document</span>.querySelector(<span class="string">"#img"</span>);</span><br><span class="line">     img.src = <span class="string">"loading.gif"</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">            img.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> proxy = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> img = <span class="built_in">document</span>.createElement(<span class="string">'img'</span>);</span><br><span class="line">    img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        delayload.setSrc(img.src);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        setSrc: <span class="function"><span class="keyword">function</span>(<span class="params">src</span>) </span>&#123;</span><br><span class="line">            img.src = src;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">proxy.setSrc(<span class="string">"jimmy.jpg"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 单一职责 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Sass入门语法</title>
      <link href="/2018/04/25/Sass%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2018/04/25/Sass%E5%85%A5%E9%97%A8%E8%AF%AD%E6%B3%95/</url>
      <content type="html"><![CDATA[<h1 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h1><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$fontStack</span> : Helvetica,sans-serif;</span><br><span class="line"><span class="variable">$primaryColor</span>: <span class="number">#333</span>;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="variable">$fontStack</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">$primaryColor</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译结果*/</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、嵌套"><a href="#二、嵌套" class="headerlink" title="二、嵌套"></a>二、嵌套</h1><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">    <span class="selector-tag">ul</span> &#123;</span><br><span class="line">        <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">list-style</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">li</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: inline-block;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">a</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">        <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">        <span class="attribute">text-decoration</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译结果*/</span></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h1 id="三、mixin"><a href="#三、mixin" class="headerlink" title="三、mixin"></a>三、mixin</h1><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> box-sizing (<span class="variable">$sizing</span>) &#123;</span><br><span class="line">    -webkit-<span class="attribute">box-sizing</span>: <span class="variable">$sizing</span>;</span><br><span class="line">    -moz-<span class="attribute">box-sizing</span>: <span class="variable">$sizing</span>;</span><br><span class="line">    <span class="attribute">box-sizing</span>: <span class="variable">$sizing</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box-border</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    @<span class="keyword">include</span> box-sizing(border-box);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译结果*/</span></span><br><span class="line"><span class="selector-class">.box-border</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    -moz-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">    <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在引用混合样式的时候，可以先将一段代码导入到混合指令中，然后再输出混合样式，额外导入的部分将出现在 @content 标志的地方： </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">mixin</span> apply-to-ie6-only &#123;</span><br><span class="line">    * <span class="selector-tag">html</span> &#123;</span><br><span class="line">        @<span class="keyword">content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">include</span> apply-to-ie6-only &#123;</span><br><span class="line">    <span class="selector-id">#logo</span> &#123;</span><br><span class="line">        <span class="attribute">background-image</span>: url(/logo.gif);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为便于书写，@mixin 可以用 = 表示，而 @include 可以用 + 表示</strong>，所以上面的例子可以写成： </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">=apply-to-ie6-only</span><br><span class="line">* <span class="selector-tag">html</span></span><br><span class="line">@<span class="keyword">content</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+apply-to-ie6-only</span><br><span class="line">#logo</span><br><span class="line">background-image: url(/logo.gif)</span><br></pre></td></tr></table></figure><p>注意： 当 @content 在指令中出现过多次或者出现在循环中时，额外的代码将被导入到每一个地方。 </p><p><br></p><h1 id="四、扩展-继承"><a href="#四、扩展-继承" class="headerlink" title="四、扩展/继承"></a>四、扩展/继承</h1><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.message</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    @<span class="keyword">extend</span> .message;</span><br><span class="line">    <span class="attribute">border-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    @<span class="keyword">extend</span> .message;</span><br><span class="line">    <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">    @<span class="keyword">extend</span> .message;</span><br><span class="line">    <span class="attribute">border-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译结果*/</span></span><br><span class="line"><span class="selector-class">.message</span>, <span class="selector-class">.success</span>, <span class="selector-class">.error</span>, <span class="selector-class">.warning</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#cccccc</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.warning</span> &#123;</span><br><span class="line">    <span class="attribute">border-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="五、运算"><a href="#五、运算" class="headerlink" title="五、运算"></a>五、运算</h1><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[role="main"]</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">600px</span> / <span class="number">960px</span> * <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span><span class="selector-attr">[role="complimentary"]</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span> / <span class="number">960px</span> * <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译结果*/</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span><span class="selector-attr">[role="main"]</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">62.5%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span><span class="selector-attr">[role="complimentary"]</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">31.25%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> sass </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>庞氏骗局</title>
      <link href="/2018/04/22/%E5%BA%9E%E6%B0%8F%E9%AA%97%E5%B1%80/"/>
      <url>/2018/04/22/%E5%BA%9E%E6%B0%8F%E9%AA%97%E5%B1%80/</url>
      <content type="html"><![CDATA[<p>金融有一个很重要的原则，应该是金融守恒，金融是一个守恒零和游戏。资金在流动的过程中，价值不会无缘无故产生，也不会无缘无故消失。真正产生价值的应该是制造业。只有实业，在生产经营的过程中才产生财富。因此，金融和实业之间的关系应该是，金融帮助实业提高效率，实业帮助金融创造价值。</p><p><br></p><p>将新投资人的钱向老投资者支付利息和短期回报以造成骗局赚钱的假象从而吸引更多投资者进入骗局</p><p><br></p><p>庞氏骗局，一般人说就是“拆东墙补西墙”。利用新投资人的钱来向老投资者支付利息和短期回报，以制造赚钱的假象进而骗取更多的投资。而这种拆东补西的做法，本身不一定是错的。因为这就是金融。</p><p><br></p><p>拿了钱却做不到这个承诺回报的收益，那就是骗局了。</p><p><br></p><p>是否骗局，最大的导向点在于最上线。最上线如果一直稳如泰山，那就不是骗局</p><p><br></p><p>庞氏骗局在中国又称“拆东墙补西墙”，“空手套白狼”。简言之就是利用新投资人的钱来向老投资者支付利息和短期回报，以制造赚钱的假象进而骗取更多的投资。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> 庞氏骗局 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Vue-作用域插槽</title>
      <link href="/2018/04/17/Vue-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/"/>
      <url>/2018/04/17/Vue-%E4%BD%9C%E7%94%A8%E5%9F%9F%E6%8F%92%E6%A7%BD/</url>
      <content type="html"><![CDATA[<p>作用域插槽是一种特殊类型的插槽，用作一个 (能被传递数据的) 可重用模板，来代替已经渲染好的元素。</p><p>在子组件中，只需将数据传递到插槽，就像你将 prop 传递数据给子组件一样，传递到父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">text</span>=<span class="string">"hello from child"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在父级中，具有特殊特性 slot-scope 的 <template> 元素必须存在，表示它是作用域插槽的模板。slot-scope 的值将被用作一个临时变量名，此变量接收从子组件传递过来的 prop 对象： </template></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"props"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello from parent<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; props.text &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我们渲染上述模板，得到的输出会是： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello from parent<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello from child<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 插槽 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-检测字体</title>
      <link href="/2018/04/15/JS-%E6%A3%80%E6%B5%8B%E5%AD%97%E4%BD%93/"/>
      <url>/2018/04/15/JS-%E6%A3%80%E6%B5%8B%E5%AD%97%E4%BD%93/</url>
      <content type="html"><![CDATA[<h1 id="一、实现原理"><a href="#一、实现原理" class="headerlink" title="一、实现原理"></a>一、实现原理</h1><p>根据用户设置的字体将某一个字符绘制在canvas上（<strong>fillText</strong>()），并提取像素信息（<strong>getImageData</strong>()），然后<strong>和默认字体进行比对</strong>，<font color="#A52A2A" size="4"><strong>如果像素不一致，说明字体生效，说明字体不生效</strong></font>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isSupportFontFamily = <span class="function"><span class="keyword">function</span>(<span class="params">fontFamily</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> fontFamily !== <span class="string">'string'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> defaultFontFamily = <span class="string">'Arial'</span>;</span><br><span class="line">    <span class="keyword">if</span> (fontFamily.toLowerCase() === defaultFontFamily.toLowerCase()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> defaultLetter = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">let</span> defaultFontSize = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用该字体绘制的canvas</span></span><br><span class="line">    <span class="keyword">let</span> width = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">let</span> height = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">let</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line">    <span class="keyword">let</span> context = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">    canvas.width = width;</span><br><span class="line">    canvas.height = height;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 全局一致的绘制设定</span></span><br><span class="line">    context.textAlign = <span class="string">'center'</span>;</span><br><span class="line">    context.fillStyle = <span class="string">'black'</span>;</span><br><span class="line">    context.textBaseline = <span class="string">'middle'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> getFontData = <span class="function"><span class="keyword">function</span>(<span class="params">fontFamily</span>) </span>&#123;</span><br><span class="line">        context.clearRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        context.font = defaultFontSize + <span class="string">'px '</span> + fontFamily + <span class="string">', '</span> + defaultFontFamily;</span><br><span class="line">        context.fillText(defaultLetter, width / <span class="number">2</span>, height / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">let</span> data = context.getImageData(<span class="number">0</span>, <span class="number">0</span>, width, height).data;</span><br><span class="line">        <span class="keyword">return</span> [].slice.call(data).filter(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> value !== <span class="number">0</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> getFontData(defaultFontFamily).join(<span class="string">''</span>) !== getFontData(fontFamily).join(<span class="string">''</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 字体 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-帆布指纹识别</title>
      <link href="/2018/04/14/JS-%E5%B8%86%E5%B8%83%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/"/>
      <url>/2018/04/14/JS-%E5%B8%86%E5%B8%83%E6%8C%87%E7%BA%B9%E8%AF%86%E5%88%AB/</url>
      <content type="html"><![CDATA[<h1 id="一、利用canvas标签"><a href="#一、利用canvas标签" class="headerlink" title="一、利用canvas标签"></a>一、利用canvas标签</h1><p>一般情况下，网站或者广告联盟都会非常想要一种技术方式可以<strong>在网络上<font color="#A52A2A" size="4">精确定位</font>到每一个个体</strong>，这样可以通过收集这些个体的数据，通过分析后更加精准的去推送广告（精准化营销）或其他有针对性的一些活动。<br></p><p>Cookie技术是非常受欢迎的一种。当用户访问一个网站时，网站可以在用户当前的浏览器Cookie中永久植入一个含有唯一标示符（UUID）的信息，并通过这个信息将用户所有行为关联起来。<br></p><p>帆布指纹识别使用到了HTML5<canvas>标签的一个特点：<font color="#A52A2A" size="4"><strong>在绘制canvas图片时，同样的canvas绘制代码，不同机器和浏览器绘制的图片特征是相同并且独一无二的</strong></font>，这样以来，提取最简单的md5值便可以唯一标识和跟踪这个用户。</canvas></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="keyword">var</span> txt = <span class="string">'http://security.tencent.com/'</span>;</span><br><span class="line">ctx.textBaseline = <span class="string">"top"</span>;</span><br><span class="line">ctx.font = <span class="string">"14px 'Arial'"</span>;</span><br><span class="line">ctx.textBaseline = <span class="string">"tencent"</span>;</span><br><span class="line">ctx.fillStyle = <span class="string">"#f60"</span>;</span><br><span class="line">ctx.fillRect(<span class="number">125</span>,<span class="number">1</span>,<span class="number">62</span>,<span class="number">20</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">"#069"</span>;</span><br><span class="line">ctx.fillText(txt, <span class="number">2</span>, <span class="number">15</span>);</span><br><span class="line">ctx.fillStyle = <span class="string">"rgba(102, 204, 0, 0.7)"</span>;</span><br><span class="line">ctx.fillText(txt, <span class="number">4</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">var</span> b64 = canvas.toDataURL().replace(<span class="string">"data:image/png;base64,"</span>,<span class="string">""</span>);</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h1 id="二、配合navigator和screen等属性"><a href="#二、配合navigator和screen等属性" class="headerlink" title="二、配合navigator和screen等属性"></a>二、配合navigator和screen等属性</h1><ul><li><code>navigator.userAgent</code></li><li><code>navigator.mimeTypes</code></li><li><code>navigator.plugins</code></li><li><code>navigator.language</code></li><li><code>screen.height</code></li><li><code>screen.width</code></li><li><code>screen.colorDepth</code></li><li><code>window.devicePixelRatio</code></li><li>检测已安装的字体种类</li></ul><p>注:使用hash获取字符标识，封装得比较好的框架 <font color="#A52A2A" size="4"><strong>fingerprintjs</strong></font></p><p><br></p><h1 id="三、应用"><a href="#三、应用" class="headerlink" title="三、应用"></a>三、应用</h1><p>除了可以<strong>追踪用户习惯</strong>，还可以用来<strong>防止用户信息受XSS攻击影响</strong>。一般用户的登录状态使用cookie记录，如果被黑客使用XSS攻击或者其他途径获取，可以使用<strong>UUID和cookie来做双重验证</strong>。</p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 指纹识别 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql-事务</title>
      <link href="/2018/04/14/mysql-%E4%BA%8B%E5%8A%A1/"/>
      <url>/2018/04/14/mysql-%E4%BA%8B%E5%8A%A1/</url>
      <content type="html"><![CDATA[<h1 id="事务控制语句"><a href="#事务控制语句" class="headerlink" title="事务控制语句"></a>事务控制语句</h1><ul><li><strong>BEGIN</strong>或<strong>START TRANSACTION</strong>；显式地开启一个事务；</li></ul><ul><li><strong>COMMIT</strong>或<strong>COMMIT WORK</strong>，COMMIT提交事务，并使已对数据库进行的所有修改称为永久性的；</li></ul><ul><li><strong>ROLLBACK</strong>或<strong>ROLLBACK WORK</strong>，结束用户的事务，并撤销正在进行的所有未提交的修改；</li></ul><ul><li><strong>SAVEPOINT identifier</strong>；SAVEPOINT允许在事务中创建一个保存点，一个事务中可以有多个SAVEPOINT；</li></ul><ul><li><strong>RELEASE SAVEPOINT identifier</strong>；删除一个事务的保存点，当没有指定的保存点时，执行该语句会抛出一个异常；</li></ul><ul><li><strong>ROLLBACK TO identifier</strong>；把事务回滚到标记点；</li></ul><ul><li><strong>SET TRANSACTION</strong>；用来设置事务的隔离级别。InnoDB存储引擎提供事务的隔离级别有READ UNCOMMITTED、READ COMMITTED、REPEATABLE READ和SERIALIZABLE。</li></ul><p><br></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">begin;  # 开始事务</span><br><span class="line">insert into runoob_transaction_test value(5);</span><br><span class="line">insert into runoob_transaction_test value(6);</span><br><span class="line">commit; # 提交事务</span><br><span class="line"></span><br><span class="line">begin;    # 开始事务</span><br><span class="line">insert into runoob_transaction_test values(7);</span><br><span class="line">rollback;   # 回滚</span><br><span class="line">select * from runoob_transaction_test;   # 因为回滚所以数据没有插入</span><br><span class="line">+------+</span><br><span class="line">| id   |</span><br><span class="line">+------+</span><br><span class="line">| 5    |</span><br><span class="line">| 6    |</span><br><span class="line">+------+</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql-regexp</title>
      <link href="/2018/04/14/mysql-regexp/"/>
      <url>/2018/04/14/mysql-regexp/</url>
      <content type="html"><![CDATA[<h1 id="REGEXP-操作符"><a href="#REGEXP-操作符" class="headerlink" title="REGEXP 操作符"></a>REGEXP 操作符</h1><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>^</code></td><td>匹配输入字符串的开始位置。如果设置了 RegExp 对象的 <strong>Multiline</strong> 属性，<code>^</code> 也匹配<code>&#39;\n&#39;</code>或<code>&#39;\r&#39;</code> 之后的位置。</td></tr><tr><td><code>$</code></td><td>匹配输入字符串的结束位置。如果设置了RegExp 对象的 <strong>Multiline</strong> 属性，<code>$</code>也匹配 <code>&#39;\n&#39;</code>或<code>&#39;\r&#39;</code>之前的位置。</td></tr><tr><td>.</td><td>匹配除<code>&quot;\n&quot;</code>之外的任何单个字符。要匹配包括 <code>&#39;\n&#39;</code>在内的任何字符，请使用象 <code>&#39;[.\n]&#39;</code>的模式。</td></tr><tr><td><code>[...]</code></td><td>字符集合。匹配所包含的任意一个字符。例如， <code>&#39;[abc]&#39;</code>可以匹配 <code>&quot;plain&quot;</code>中的<code>&#39;a&#39;</code>。</td></tr><tr><td><code>[^...]</code></td><td>负值字符集合。匹配未包含的任意字符。</td></tr><tr><td><code>*</code></td><td>匹配前面的子表达式零次或多次。例如，<code>zo*</code> 能匹配<code>&quot;z&quot;</code>以及 <code>&quot;zoo&quot;</code>。* 等价于<code>{0,}</code>。</td></tr><tr><td><code>+</code></td><td>匹配前面的子表达式一次或多次。例如，<code>&#39;zo+&#39;</code>能匹配 <code>&quot;zo&quot;</code>以及<code>&quot;zoo&quot;</code>，但不能匹配 <code>&quot;z&quot;</code>。+ 等价于<code>{1,}</code>。</td></tr><tr><td><code>{n}</code></td><td>n 是一个非负整数。匹配确定的 n 次。例如，<code>&#39;o{2}&#39;</code> 不能匹配 <code>&quot;Bob&quot;</code>中的 <code>&#39;o&#39;</code>，但是能匹配 <code>&quot;food&quot;</code> 中的两个 o。</td></tr><tr><td><code>{n,m}</code></td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 查找name字段中以元音字符开头或以&apos;ok&apos;字符串结尾的所有数据</span><br><span class="line">SELECT name FROM person_tbl WHERE name REGEXP &apos;^[aeiou]|ok$&apos;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
            <tag> mysql </tag>
            
            <tag> regexp </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql-limit-offset</title>
      <link href="/2018/04/14/mysql-limit-offset/"/>
      <url>/2018/04/14/mysql-limit-offset/</url>
      <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select _column,_column from _table [where Clause] [limit N][offset M]</span><br></pre></td></tr></table></figure><ul><li><code>limit N</code> : 返回 N 条记录</li><li><code>offset M</code> : 跳过 M 条记录, 默认 M=0</li><li><code>limit N offset M</code> :从第 M条记录开始, 返回N 条记录</li><li><code>limit M,N</code> : 相当于 <strong><code>limit N offset M</code></strong> , 从第 M 条记录开始, 返回 N 条记录</li></ul>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> limit </tag>
            
            <tag> offset </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql-where比较运算</title>
      <link href="/2018/04/14/mysql-where%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97/"/>
      <url>/2018/04/14/mysql-where%E6%AF%94%E8%BE%83%E8%BF%90%E7%AE%97/</url>
      <content type="html"><![CDATA[<h1 id="一、运算符"><a href="#一、运算符" class="headerlink" title="一、运算符"></a>一、运算符</h1><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>=</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于。<strong>注释：</strong>在 SQL 的一些版本中，该操作符可被写成 !=</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;=</td><td>大于等于</td></tr><tr><td>&lt;=</td><td>小于等于</td></tr><tr><td><strong>And</strong></td><td>同时满足两个条件的值</td></tr><tr><td><strong>Or</strong></td><td>满足其中一个条件的值</td></tr><tr><td><strong>Not</strong></td><td>满足不包含该条件的值</td></tr><tr><td><strong>is null</strong></td><td><strong>空值判断</strong></td></tr><tr><td><strong>between and</strong></td><td>在某个范围内</td></tr><tr><td><strong>LIKE</strong></td><td>模糊查询（  <code>%</code> 表示多个字值，<code>_</code><strong>下划线</strong>表示一个字符； ）</td></tr><tr><td><strong>IN</strong></td><td>指定针对某个列的多个可能值</td></tr></tbody></table><p><br></p><a id="more"></a><h1 id="二、通配符"><a href="#二、通配符" class="headerlink" title="二、通配符"></a>二、通配符</h1><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>%</td><td>替代 0 个或多个字符</td></tr><tr><td>_</td><td>替代一个字符</td></tr><tr><td>[<em>charlist</em>]</td><td>字符列中的任何单一字符</td></tr><tr><td>[^<em>charlist</em>] 或 [!<em>charlist</em>]</td><td>不在字符列</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- LIKE&apos;%inger&apos; 将搜索以字母 inger 结尾的所有字符串</span><br><span class="line">-- LIKE&apos;_heryl&apos; 将搜索以字母 heryl 结尾的所有六个字母的名称</span><br><span class="line">-- LIKE&apos;[CK]ars[eo]n&apos; 将搜索下列字符串：Carsen、Karsen、Carson 和 Karson</span><br><span class="line">-- LIKE&apos;[M-Z]inger&apos; 将搜索以字符串 inger 结尾、以从 M 到 Z 的任何单个字母开头的所有名称</span><br><span class="line">-- LIKE&apos;M[^c]%&apos; 将搜索以字母 M 开头，并且第二个字母不是 c 的所有名称</span><br></pre></td></tr></table></figure><p><br></p><h1 id="三、例子"><a href="#三、例子" class="headerlink" title="三、例子"></a>三、例子</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">-- 搜索 empno 等于 7900 的数据</span><br><span class="line">Select * from emp where empno=7900;</span><br><span class="line"></span><br><span class="line">-- SMITH 用单引号引起来，表示是字符串，字符串要区分大小写</span><br><span class="line">-- 使用 BINARY 关键字来设定WHERE子句的字符串比较是区分大小写的</span><br><span class="line">Select * from emp where ename=&apos;SMITH&apos;;</span><br><span class="line">SELECT * from emp WHERE BINARY ename=&apos;SMITH&apos;;</span><br><span class="line"></span><br><span class="line">Select * from emp where sal &gt; 2000 and sal &lt; 3000;</span><br><span class="line">Select * from emp where sal &gt; 2000 or comm &gt; 500;</span><br><span class="line">select * from emp where not sal &gt; 1500;</span><br><span class="line"></span><br><span class="line">-- 查询 emp 表中 comm 列中的空值</span><br><span class="line">Select * from emp where comm is null;</span><br><span class="line"></span><br><span class="line">-- 大于等于 1500 且小于等于 3000</span><br><span class="line">Select * from emp where sal between 1500 and 3000;</span><br><span class="line"></span><br><span class="line">-- 查询 EMP 表 SAL 列中等于 5000，3000，1500 的值</span><br><span class="line">Select * from emp where sal in (5000,3000,1500);</span><br><span class="line"></span><br><span class="line">-- Like模糊查询</span><br><span class="line">Select * from emp where ename like &apos;_M%&apos;;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="四、不带比较运算符"><a href="#四、不带比较运算符" class="headerlink" title="四、不带比较运算符"></a>四、不带比较运算符</h1><p>WHERE子句并不一定带比较运算符，当不带运算符时，会执行一个隐式转换。<strong>当0时转化为 false，当其他值是转化为true。</strong> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- 返回一个空集，因为每一行记录WHERE都返回false</span><br><span class="line">SELECT studentNO FROM student WHERE 0;</span><br><span class="line"></span><br><span class="line">-- 返回student表所有行记录的studentNO列。因为每一行记录WHERE都返回true。</span><br><span class="line">SELECT  studentNO  FROM student WHERE 1;</span><br><span class="line">SELECT studentNO FROM student WHERE &apos;abc&apos;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> where </tag>
            
            <tag> 运算符 </tag>
            
            <tag> 通配符 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mysql-If-Not-Exists</title>
      <link href="/2018/04/14/mysql-If-Not-Exists/"/>
      <url>/2018/04/14/mysql-If-Not-Exists/</url>
      <content type="html"><![CDATA[<h1 id="一、创建数据库"><a href="#一、创建数据库" class="headerlink" title="一、创建数据库"></a>一、创建数据库</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE IF NOT EXISTS RUNOOB DEFAULT CHARSET utf8 COLLATE utf8_general_ci;</span><br></pre></td></tr></table></figure><p><strong>数据库的校验规则</strong></p><ul><li><code>utf8_bin</code>：将字符串中的每一个字符用二进制数据存储，大小写<strong>敏感</strong></li><li><code>utf8_genera_ci</code>：大小写<strong>不敏感</strong>（<code>ci:case insensitive</code>）</li><li><code>utf8_general_cs</code>：大小写<strong>敏感</strong>（<code>cs:case sensitive</code>）</li></ul><p><br></p><h1 id="二、创建数据表"><a href="#二、创建数据表" class="headerlink" title="二、创建数据表"></a>二、创建数据表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE IF NOT EXISTS `runoob_tbl`(</span><br><span class="line">    `runoob_id` INT UNSIGNED AUTO_INCREMENT,</span><br><span class="line">    `runoob_title` VARCHAR(100) NOT NULL,</span><br><span class="line">    `runoob_author` VARCHAR(40) NOT NULL,</span><br><span class="line">    `submission_date` DATE,</span><br><span class="line">    PRIMARY KEY ( `runoob_id` )</span><br><span class="line">)ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><ul><li><code>ENGINE=InnoDB</code>：使用<code>innodb</code>引擎</li></ul><p><br></p><h1 id="三、判断数据库存在-则删除"><a href="#三、判断数据库存在-则删除" class="headerlink" title="三、判断数据库存在, 则删除"></a>三、判断数据库存在, 则删除</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database if exists db_name;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="四、判断数据表存在-则删除"><a href="#四、判断数据表存在-则删除" class="headerlink" title="四、判断数据表存在, 则删除"></a>四、判断数据表存在, 则删除</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table if exists table_name;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> If-Not-Exists </tag>
            
            <tag> If-Exists </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>koa2-cookie</title>
      <link href="/2018/04/12/koa2-cookie/"/>
      <url>/2018/04/12/koa2-cookie/</url>
      <content type="html"><![CDATA[<p>koa 提供了从上下文直接读取、写入 cookie 的方法 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.cookies.get(name, [options])<span class="comment">// 读取上下文请求中的 cookie</span></span><br><span class="line">ctx.cookies.set(name, value, [options]) <span class="comment">//在上下文中写入 cookie</span></span><br></pre></td></tr></table></figure><p>options 的配置如下：</p><ul><li><strong>signed</strong>：cookie      是否加密（如果加密的话必须用 <strong>app.keys</strong> 指定加密短语）</li><li><strong>maxAg</strong>e：cookie 有效时长</li><li><strong>expires</strong>：cookie 何时过期</li><li><strong>path</strong>：cookie 的路径，默认为 ‘/’</li><li><strong>domain</strong>：cookie 的域名</li><li><strong>secure</strong>：cookie 是否只有 https      请求下才发送</li><li><p><strong>httpOnly</strong>：是否只有服务器可以去到      cookie，默认为 true</p></li><li><p><strong>overwrite</strong>：是否允许重写</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定加密短语</span></span><br><span class="line">app.keys = [<span class="string">'secret1'</span>, <span class="string">'secret2'</span>];</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(ctx.url === <span class="string">'/index'</span>)&#123;</span><br><span class="line">    ctx.cookies.set(</span><br><span class="line">      <span class="string">'cid'</span>,</span><br><span class="line">      <span class="string">'hello worls'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        signed:<span class="literal">true</span>,</span><br><span class="line">        domain: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        path: <span class="string">'/index'</span>,</span><br><span class="line">        maxAge: <span class="number">10</span> * <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">        expores: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">'2017-09-09'</span>),</span><br><span class="line">        httpOnly: <span class="literal">false</span>,</span><br><span class="line">        overwrite: <span class="literal">false</span>,</span><br><span class="line">        secure: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">    ctx.body = <span class="string">'cookies is ok'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    ctx.body = <span class="string">'hello world'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'[demo] cookie is starting at port 3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> koa2 </tag>
            
            <tag> cookie </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>koa2-获取请求数据</title>
      <link href="/2018/04/12/koa2-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/"/>
      <url>/2018/04/12/koa2-%E8%8E%B7%E5%8F%96%E8%AF%B7%E6%B1%82%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h1 id="零、对象"><a href="#零、对象" class="headerlink" title="零、对象"></a>零、对象</h1><p><strong><font color="#A52A2A" size="4">ctx.request</font></strong>是context经过封装的请求对象，<font color="#A52A2A" size="4"><strong>ctx.req</strong></font>是context提供的node.js原生HTTP请求对象。</p><p><br></p><p>同理<font color="#A52A2A" size="4"><strong>ctx.response</strong></font>是context经过封装的响应对象，<font color="#A52A2A" size="4"><strong>ctx.res</strong></font>是context提供的node.js原生HTTP请求对象。 </p><p><br></p><h1 id="一、GET请求"><a href="#一、GET请求" class="headerlink" title="一、GET请求"></a>一、GET请求</h1><p>在koa中，获取GET请求数据源头是koa中request对象中的query方法或querystring方法。<strong>query返回是格式化好的参数对象，querystring返回的是请求字符串</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> url = ctx.url</span><br><span class="line">  <span class="comment">// 从上下文的request对象中获取</span></span><br><span class="line">  <span class="keyword">let</span> request = ctx.request</span><br><span class="line">  <span class="keyword">let</span> req_query = request.query</span><br><span class="line">  <span class="keyword">let</span> req_querystring = request.querystring</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 从上下文中直接获取</span></span><br><span class="line">  <span class="keyword">let</span> ctx_query = ctx.query</span><br><span class="line">  <span class="keyword">let</span> ctx_querystring = ctx.querystring</span><br><span class="line">  </span><br><span class="line">  ctx.body = &#123;</span><br><span class="line">    url,</span><br><span class="line">    req_query,</span><br><span class="line">    req_querystring,</span><br><span class="line">    ctx_query,</span><br><span class="line">    ctx_querystring</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'[demo] request get is starting at port 3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="/2018/04/12/koa2-获取请求数据/request-get.png" alt=""></p><p><br></p><a id="more"></a> <h1 id="二、post请求"><a href="#二、post请求" class="headerlink" title="二、post请求"></a>二、post请求</h1><p><strong>对于POST请求的处理，koa2没有封装获取参数的方法</strong>，需要通过解析上下文context中的原生node.js请求对象req，将POST表单数据解析成<strong>query string</strong>（例如：a=1&amp;b=2&amp;c=3），再将query string 解析成<strong>JSON格式</strong>（例如：{“a”:”1”, “b”:”2”, “c”:”3”}） </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span> ( ctx.url === <span class="string">'/'</span> &amp;&amp; ctx.method === <span class="string">'GET'</span> ) &#123;</span><br><span class="line">    <span class="comment">// 当GET请求时候返回表单页面</span></span><br><span class="line">    <span class="keyword">let</span> html = <span class="string">`</span></span><br><span class="line"><span class="string">      &lt;h1&gt;koa2 request post demo&lt;/h1&gt;</span></span><br><span class="line"><span class="string">      &lt;form method="POST" action="/"&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;userName&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="userName" /&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;nickName&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="nickName" /&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;p&gt;email&lt;/p&gt;</span></span><br><span class="line"><span class="string">        &lt;input name="email" /&gt;&lt;br/&gt;</span></span><br><span class="line"><span class="string">        &lt;button type="submit"&gt;submit&lt;/button&gt;</span></span><br><span class="line"><span class="string">      &lt;/form&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    ctx.body = html</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( ctx.url === <span class="string">'/'</span> &amp;&amp; ctx.method === <span class="string">'POST'</span> ) &#123;</span><br><span class="line">    <span class="comment">// 当POST请求的时候，解析POST表单里的数据，并显示出来</span></span><br><span class="line">    <span class="keyword">let</span> postData = <span class="keyword">await</span> parsePostData( ctx )</span><br><span class="line">    ctx.body = postData</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 其他请求显示404</span></span><br><span class="line">    ctx.body = <span class="string">'&lt;h1&gt;404！！！ o(╯□╰)o&lt;/h1&gt;'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析上下文里node原生请求的POST参数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parsePostData</span>(<span class="params"> ctx </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> postdata = <span class="string">""</span>;</span><br><span class="line">      ctx.req.addListener(<span class="string">'data'</span>, (data) =&gt; &#123;</span><br><span class="line">        postdata += data</span><br><span class="line">      &#125;)</span><br><span class="line">      </span><br><span class="line">      ctx.req.addListener(<span class="string">"end"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> parseData = parseQueryStr( postdata )</span><br><span class="line">        resolve( parseData )</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">catch</span> ( err ) &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将POST请求参数字符串解析成JSON</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseQueryStr</span>(<span class="params"> queryStr </span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> queryData = &#123;&#125;</span><br><span class="line">  <span class="keyword">let</span> queryStrList = queryStr.split(<span class="string">'&amp;'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log( queryStrList )</span><br><span class="line">  <span class="keyword">for</span> (  <span class="keyword">let</span> [ index, queryStr ] <span class="keyword">of</span> queryStrList.entries()  ) &#123;</span><br><span class="line">    <span class="keyword">let</span> itemList = queryStr.split(<span class="string">'='</span>)</span><br><span class="line">    queryData[ itemList[<span class="number">0</span>] ] = <span class="built_in">decodeURIComponent</span>(itemList[<span class="number">1</span>])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> queryData</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>, () =&gt; &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'[demo] request post is starting at port 3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> koa2 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>koa2-中间组件middleware</title>
      <link href="/2018/04/12/koa2-%E4%B8%AD%E9%97%B4%E7%BB%84%E4%BB%B6middleware/"/>
      <url>/2018/04/12/koa2-%E4%B8%AD%E9%97%B4%E7%BB%84%E4%BB%B6middleware/</url>
      <content type="html"><![CDATA[<h1 id="一、中间组件"><a href="#一、中间组件" class="headerlink" title="一、中间组件"></a>一、中间组件</h1><p>Koa2通过<strong>app.use()</strong>把很多<font color="#A52A2A" size="4"><strong>async函数</strong></font>组成一个<font color="#A52A2A" size="4"><strong>处理链</strong></font>，每个async函数都可以做一些自己的事情，然后用await next()来调用下一个async函数。<strong>我们把每个async函数称为middleware</strong>。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在koa2中，我们导入的是一个class，因此用大写的Koa表示:</span></span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个Koa对象表示web app本身:</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;ctx.request.method&#125;</span> <span class="subst">$&#123;ctx.request.url&#125;</span>`</span>); <span class="comment">// 打印URL</span></span><br><span class="line">    <span class="keyword">await</span> next(); <span class="comment">// 调用下一个middleware</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> start = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime(); <span class="comment">// 当前时间</span></span><br><span class="line">    <span class="keyword">await</span> next(); <span class="comment">// 调用下一个middleware</span></span><br><span class="line">    <span class="keyword">const</span> ms = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - start; <span class="comment">// 耗费时间</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Time: <span class="subst">$&#123;ms&#125;</span>ms`</span>); <span class="comment">// 打印耗费时间</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> next();</span><br><span class="line">    ctx.response.type = <span class="string">'text/html'</span>;</span><br><span class="line">    ctx.response.body = <span class="string">'&lt;h1&gt;Hello, koa2!&lt;/h1&gt;'</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在端口3000监听:</span></span><br><span class="line">app.listen(<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="/2018/04/12/koa2-中间组件middleware/3663059-03622ea2a9ffce2a.jpg" alt=""></p><p><br></p><h1 id="二、数据传递"><a href="#二、数据传递" class="headerlink" title="二、数据传递"></a>二、数据传递</h1><p>koa约定了一个<strong>中间件</strong>的存储空间<strong>ctx.state</strong>，通过这个state可以<strong>共享</strong>一些的数据。</p>]]></content>
      
      
        <tags>
            
            <tag> koa2 </tag>
            
            <tag> middleware </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>koa2-mysql连接池</title>
      <link href="/2018/04/12/koa2-mysql%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
      <url>/2018/04/12/koa2-mysql%E8%BF%9E%E6%8E%A5%E6%B1%A0/</url>
      <content type="html"><![CDATA[<h1 id="一、创建数据库会话"><a href="#一、创建数据库会话" class="headerlink" title="一、创建数据库会话"></a>一、创建数据库会话</h1><p><a href="https://github.com/mysqljs/mysql#install" target="_blank" rel="noopener">mysql.js</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"><span class="keyword">const</span> connection = mysql.createConnection(&#123;</span><br><span class="line">  host     : <span class="string">'127.0.0.1'</span>,   <span class="comment">// 数据库地址</span></span><br><span class="line">  user     : <span class="string">'root'</span>,    <span class="comment">// 数据库用户</span></span><br><span class="line">  password : <span class="string">'123456'</span>   <span class="comment">// 数据库密码</span></span><br><span class="line">  database : <span class="string">'my_database'</span>  <span class="comment">// 选中数据库</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">connection.connect();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行sql脚本对数据库进行读写 </span></span><br><span class="line">connection.query(<span class="string">'SELECT * FROM my_table'</span>,  (error, results, fields) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) <span class="keyword">throw</span> error</span><br><span class="line">    <span class="comment">// connected! </span></span><br><span class="line">    <span class="comment">// 结束会话</span></span><br><span class="line">    connection.release() </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、创建数据连接池"><a href="#二、创建数据连接池" class="headerlink" title="二、创建数据连接池"></a>二、创建数据连接池</h1><p>一般情况下操作数据库是很复杂的读写过程，不只是一个会话，如果直接用会话操作，就需要每次会话都要配置连接参数。所以这时候就需要连接池管理会话。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mysql = <span class="built_in">require</span>(<span class="string">'mysql'</span>)</span><br><span class="line"><span class="comment">// 创建数据池</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pool  = mysql.createPool(&#123;</span><br><span class="line">  host     : <span class="string">'127.0.0.1'</span>,   <span class="comment">// 数据库地址</span></span><br><span class="line">  user     : <span class="string">'root'</span>,    <span class="comment">// 数据库用户</span></span><br><span class="line">  password : <span class="string">'123456'</span>   <span class="comment">// 数据库密码</span></span><br><span class="line">  database : <span class="string">'my_database'</span>  <span class="comment">// 选中数据库</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在数据池中进行会话操作</span></span><br><span class="line">pool.getConnection(<span class="function"><span class="keyword">function</span>(<span class="params">err, connection</span>) </span>&#123;</span><br><span class="line">    connection.query(<span class="string">'SELECT * FROM my_table'</span>,  (error, results, fields) =&gt; &#123;</span><br><span class="line">        <span class="comment">// 结束会话</span></span><br><span class="line">        connection.release();</span><br><span class="line">        <span class="comment">// 如果有错误就抛出</span></span><br><span class="line">        <span class="keyword">if</span> (error) <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> koa2 </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>koa2-session</title>
      <link href="/2018/04/12/koa2-session/"/>
      <url>/2018/04/12/koa2-session/</url>
      <content type="html"><![CDATA[<h1 id="一、session应用"><a href="#一、session应用" class="headerlink" title="一、session应用"></a>一、session应用</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>)</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session-minimal'</span>)</span><br><span class="line"><span class="comment">// koa-mysql-session为koa-session-minimal中间件提供MySQL数据库的session数据读写操作</span></span><br><span class="line"><span class="comment">// koa-session-minimal默认使用内存保存session对象</span></span><br><span class="line"><span class="keyword">const</span> MysqlSession = <span class="built_in">require</span>(<span class="string">'koa-mysql-session'</span>)</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置存储session信息的mysql</span></span><br><span class="line"><span class="keyword">let</span> store = <span class="keyword">new</span> MysqlSession(&#123;</span><br><span class="line">  user: <span class="string">'root'</span>,</span><br><span class="line">  password: <span class="string">'abc123'</span>,</span><br><span class="line">  database: <span class="string">'koa_demo'</span>,</span><br><span class="line">  host: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存放sessionId的cookie配置</span></span><br><span class="line"><span class="keyword">let</span> cookie = &#123;</span><br><span class="line">  maxAge: <span class="string">''</span>, <span class="comment">// cookie有效时长</span></span><br><span class="line">  expires: <span class="string">''</span>,  <span class="comment">// cookie失效时间</span></span><br><span class="line">  path: <span class="string">''</span>, <span class="comment">// 写cookie所在的路径</span></span><br><span class="line">  domain: <span class="string">''</span>, <span class="comment">// 写cookie所在的域名</span></span><br><span class="line">  httpOnly: <span class="string">''</span>, <span class="comment">// 是否只用于http请求中获取</span></span><br><span class="line">  overwrite: <span class="string">''</span>,  <span class="comment">// 是否允许重写</span></span><br><span class="line">  secure: <span class="string">''</span>,</span><br><span class="line">  sameSite: <span class="string">''</span>,</span><br><span class="line">  signed: <span class="string">''</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用session中间件</span></span><br><span class="line">app.use(session(&#123;</span><br><span class="line">  key: <span class="string">'SESSION_ID'</span>,</span><br><span class="line">  store: store,</span><br><span class="line">  cookie: cookie</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">app.use( <span class="keyword">async</span> ( ctx ) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 设置session</span></span><br><span class="line">    <span class="keyword">if</span> ( ctx.url === <span class="string">'/set'</span> ) &#123;</span><br><span class="line">    ctx.session = &#123;</span><br><span class="line">      user_id: <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).substr(<span class="number">2</span>),</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    ctx.body = ctx.session</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ( ctx.url === <span class="string">'/'</span> ) &#123;</span><br><span class="line">      <span class="comment">// 读取session对象</span></span><br><span class="line">      ctx.session.count = ctx.session.count + <span class="number">1</span></span><br><span class="line">      ctx.body = ctx.session</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3000</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'[demo] session is starting at port 3000'</span>)</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h1 id="二、koa-session-minimal源码"><a href="#二、koa-session-minimal源码" class="headerlink" title="二、koa-session-minimal源码"></a>二、koa-session-minimal源码</h1><h4 id="1、目录结构"><a href="#1、目录结构" class="headerlink" title="1、目录结构"></a>1、目录结构</h4><ul><li><a href="https://github.com/longztian/koa-session-minimal/blob/master/src/session.js" target="_blank" rel="noopener">session.js</a> </li><li><a href="https://github.com/longztian/koa-session-minimal/blob/master/src/memory_store.js" target="_blank" rel="noopener">memory_store.js</a> </li><li><a href="https://github.com/longztian/koa-session-minimal/blob/master/src/store.js" target="_blank" rel="noopener">store.js</a> </li></ul><p><br></p><h4 id="2、session-js"><a href="#2、session-js" class="headerlink" title="2、session.js"></a>2、session.js</h4><p><strong>session.js做两件事</strong></p><ol><li><strong>请求进来时，根据cookies中的sid来初始化ctx.session对象</strong></li><li><strong>请求返回时，根据ctx.session的变化，更新ctx.session对象</strong></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> uid = <span class="built_in">require</span>(<span class="string">'uid-safe'</span>)</span><br><span class="line"><span class="keyword">const</span> deepEqual = <span class="built_in">require</span>(<span class="string">'deep-equal'</span>)</span><br><span class="line"><span class="keyword">const</span> Store = <span class="built_in">require</span>(<span class="string">'./store'</span>)</span><br><span class="line"><span class="keyword">const</span> MemoryStore = <span class="built_in">require</span>(<span class="string">'./memory_store'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ONE_DAY = <span class="number">24</span> * <span class="number">3600</span> * <span class="number">1000</span> <span class="comment">// one day in milliseconds</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cookieOpt = <span class="function">(<span class="params">cookie, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> obj = cookie <span class="keyword">instanceof</span> <span class="built_in">Function</span> ? cookie(ctx) : cookie</span><br><span class="line">  <span class="keyword">const</span> options = <span class="built_in">Object</span>.assign(&#123;</span><br><span class="line">    maxAge: <span class="number">0</span>, <span class="comment">// default to use session cookie</span></span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    httpOnly: <span class="literal">true</span>,</span><br><span class="line">  &#125;, obj || &#123;&#125;, &#123;</span><br><span class="line">    overwrite: <span class="literal">true</span>, <span class="comment">// overwrite previous session cookie changes</span></span><br><span class="line">    signed: <span class="literal">false</span>, <span class="comment">// disable signed option</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">if</span> (!(options.maxAge &gt;= <span class="number">0</span>)) options.maxAge = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> options</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deleteSession = <span class="function">(<span class="params">ctx, key, cookie, store, sid</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> tmpCookie = <span class="built_in">Object</span>.assign(&#123;&#125;, cookie)</span><br><span class="line">  <span class="keyword">delete</span> tmpCookie.maxAge</span><br><span class="line">  ctx.cookies.set(key, <span class="literal">null</span>, tmpCookie)</span><br><span class="line">  store.destroy(<span class="string">`<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;sid&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> saveSession = <span class="function">(<span class="params">ctx, key, cookie, store, sid</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ttl = cookie.maxAge &gt; <span class="number">0</span> ? cookie.maxAge : ONE_DAY</span><br><span class="line">  ctx.cookies.set(key, sid, cookie)</span><br><span class="line">  store.set(<span class="string">`<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;sid&#125;</span>`</span>, ctx.session, ttl)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cleanSession = <span class="function">(<span class="params">ctx</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!ctx.session || <span class="keyword">typeof</span> ctx.session !== <span class="string">'object'</span>) ctx.session = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function">(<span class="params">options</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> opt = options || &#123;&#125;</span><br><span class="line">  <span class="keyword">const</span> key = opt.key || <span class="string">'koa:sess'</span></span><br><span class="line">  <span class="keyword">const</span> store = <span class="keyword">new</span> Store(opt.store || <span class="keyword">new</span> MemoryStore())</span><br><span class="line">  <span class="keyword">const</span> getCookie = <span class="function"><span class="params">ctx</span> =&gt;</span> cookieOpt(opt.cookie, ctx)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="comment">// initialize session id and data</span></span><br><span class="line">    <span class="comment">// 根据cookies中的sid初始化ctx.session对象</span></span><br><span class="line">    <span class="keyword">const</span> oldSid = ctx.cookies.get(key)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> sid = oldSid</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> regenerateId = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      sid = uid.sync(<span class="number">24</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!sid) &#123;</span><br><span class="line">      regenerateId()</span><br><span class="line">      ctx.session = &#123;&#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ctx.session = <span class="keyword">await</span> store.get(<span class="string">`<span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;sid&#125;</span>`</span>)</span><br><span class="line">      cleanSession(ctx)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> oldData = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(ctx.session))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// expose session handler to ctx</span></span><br><span class="line">    ctx.sessionHandler = &#123;</span><br><span class="line">      regenerateId,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 保存更新后的ctx.session对象</span></span><br><span class="line">    cleanSession(ctx)</span><br><span class="line">    <span class="keyword">const</span> hasData = <span class="built_in">Object</span>.keys(ctx.session).length &gt; <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (sid === oldSid) &#123; <span class="comment">// session id not changed</span></span><br><span class="line">      <span class="keyword">if</span> (deepEqual(ctx.session, oldData)) <span class="keyword">return</span> <span class="comment">// session data not changed</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> cookie = getCookie(ctx)</span><br><span class="line">      <span class="keyword">const</span> action = hasData ? saveSession : deleteSession</span><br><span class="line">      action(ctx, key, cookie, store, sid) <span class="comment">// update or delete the existing session</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// session id changed</span></span><br><span class="line">      <span class="keyword">const</span> cookie = getCookie(ctx)</span><br><span class="line">      <span class="keyword">if</span> (oldSid) deleteSession(ctx, key, cookie, store, oldSid) <span class="comment">// delete old session</span></span><br><span class="line">      <span class="keyword">if</span> (hasData) saveSession(ctx, key, cookie, store, sid) <span class="comment">// save new session</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、memory-store-js"><a href="#3、memory-store-js" class="headerlink" title="3、memory_store.js"></a>3、memory_store.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">MemoryStore</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.sessions = &#123;&#125; <span class="comment">// data</span></span><br><span class="line">    <span class="keyword">this</span>.timeouts = &#123;&#125; <span class="comment">// expiration handler</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get(sid) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.sessions[sid]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set(sid, val, ttl) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sid <span class="keyword">in</span> <span class="keyword">this</span>.timeouts) clearTimeout(<span class="keyword">this</span>.timeouts[sid])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.sessions[sid] = val</span><br><span class="line">    <span class="keyword">this</span>.timeouts[sid] = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.sessions[sid]</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.timeouts[sid]</span><br><span class="line">    &#125;, ttl)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  destroy(sid) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sid <span class="keyword">in</span> <span class="keyword">this</span>.timeouts) &#123;</span><br><span class="line">      clearTimeout(<span class="keyword">this</span>.timeouts[sid])</span><br><span class="line"></span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.sessions[sid]</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">this</span>.timeouts[sid]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、store-js"><a href="#4、store-js" class="headerlink" title="4、store.js"></a>4、store.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> co = <span class="built_in">require</span>(<span class="string">'co'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(store) &#123;</span><br><span class="line">    <span class="keyword">this</span>.store = store</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get(sid) &#123;</span><br><span class="line">    <span class="keyword">return</span> co(<span class="keyword">this</span>.store.get(sid))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set(sid, val, ttl) &#123;</span><br><span class="line">    <span class="keyword">return</span> co(<span class="keyword">this</span>.store.set(sid, val, ttl))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  destroy(sid) &#123;</span><br><span class="line">    <span class="keyword">return</span> co(<span class="keyword">this</span>.store.destroy(sid))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> koa2 </tag>
            
            <tag> session </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-连续赋值</title>
      <link href="/2018/04/11/JS-%E8%BF%9E%E7%BB%AD%E8%B5%8B%E5%80%BC/"/>
      <url>/2018/04/11/JS-%E8%BF%9E%E7%BB%AD%E8%B5%8B%E5%80%BC/</url>
      <content type="html"><![CDATA[<h1 id="一、先看问题"><a href="#一、先看问题" class="headerlink" title="一、先看问题"></a>一、先看问题</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;; </span><br><span class="line"><span class="keyword">var</span> b = a;  </span><br><span class="line">a.x = a = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;; </span><br><span class="line"><span class="built_in">console</span>.log(a.x);<span class="comment">// --&gt; undefined </span></span><br><span class="line"><span class="built_in">console</span>.log(b.x);<span class="comment">// --&gt; [object Object]</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、逐步分析"><a href="#二、逐步分析" class="headerlink" title="二、逐步分析"></a>二、逐步分析</h1><p>下面来分析下这段简单代码的工作步骤，从而进一步理解js引用类型“赋值”的工作方式。首先是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;<span class="attr">n</span>:<span class="number">1</span>&#125;; </span><br><span class="line"><span class="keyword">var</span> b = a;</span><br></pre></td></tr></table></figure><p>在这里a指向了一个对象{n:1}（我们姑且称它为对象A），b指向了a所指向的对象，也就是说，在这时候a和b都是指向对象A的。这一步很好理解，接着继续看下一行非常重要的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.x = a = &#123;<span class="attr">n</span>:<span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure><p>我们知道<strong>js的赋值运算顺序永远都是从右往左的</strong>，不过<font color="#A52A2A" size="4"><strong>由于“.”是优先级最高的运算符</strong></font>，所以这行代码先解析了<font color="#A52A2A" size="4"><strong>a.x</strong></font>。这时候发生了这个事情——a指向的对象{n:1}新增了属性x（虽然这个x是undefined的）：</p><p><img src="/2018/04/11/JS-连续赋值/311824499357207.png" alt=""></p><p>从图上可以看到，由于b跟a一样是指向对象A的，要表示A的x属性除了用a.x，自然也可以使用b.x来表示了。 </p><p>接着，依循“从右往左”的赋值运算顺序先执行 a={n:2} ，这时候，a指向的对象发生了改变，变成了新对象{n:2}（我们称为对象B）： </p><p><img src="/2018/04/11/JS-连续赋值/311825409517656.png" alt=""></p><p>接着继续执行 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a.x = a;</span><br></pre></td></tr></table></figure><p>很多人会认为这里是“对象B也新增了一个属性x，并指向对象B自己”。但实际上并非如此，由于（ .  运算符最先计算）一开始js已经先计算了a.x，便已经<strong>解析</strong>了这个a.x是对象A的x，所以在同一条公式的情况下再回来给a.x赋值，也<font color="#A52A2A" size="4"><strong>不会重新解析</strong></font>这个a.x为对象B的x。所以 a.x=a 应理解为对象A的属性x指向了对象B:</p><p><img src="/2018/04/11/JS-连续赋值/311826199988927.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 赋值 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>webpack-路径问题</title>
      <link href="/2018/04/10/webpack-%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/"/>
      <url>/2018/04/10/webpack-%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="一、context"><a href="#一、context" class="headerlink" title="一、context"></a>一、context</h1><font color="#A52A2A" size="4">context 是 webpack 编译时的<strong>基础目录</strong>，<strong>webpack会根据此目录去查找入口起点（entry）。</strong></font><p>若不配置，默认值为当前目录，webpack设置 context 默认值<a href="https://github.com/webpack/webpack/blob/master/lib/WebpackOptionsDefaulter.js#L16" target="_blank" rel="noopener">代码</a>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.set(<span class="string">"context"</span>, process.cwd());</span><br></pre></td></tr></table></figure><p><strong>process.cwd()即webpack运行所在的目录（等同package.json所在目录）。</strong></p><p>context 应该配置为绝对路径，假如入口起点为src/main.js，则可以配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    context: path.resolve(<span class="string">'./src'</span>),</span><br><span class="line">    entry: <span class="string">'./main.js'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时 entry 不能再配置为’./src/main.js’，因为 webpack 会相对于 context 配置的 src 目录区查找入口起点（main.js），而 main.js 就在此目录下，所以应当将 entry 配置为当前目录（./）。 </p><p><br></p><p>context 有什么实际作用？官方文档的解释是使得你的配置独立于工程目录 「This makes your configuration independent from CWD (current working directory)」。怎么理解？举个例子，在分离开发生产配置文件时候，一般把 webpack.config 放到 build 文件夹下，此时 entry 却不用考虑相对于 build 目录来配置，仍然要相对于 context 来配置，这也就是所谓的<strong>独立于工程目录</strong>。 </p><p><br></p><p>需要注意的是，output 的配置项和 context 没有关系，但是有些插件的配置项和 context 有关，后面会说明。</p><p><br></p><h1 id="二、output"><a href="#二、output" class="headerlink" title="二、output"></a>二、output</h1><h4 id="1、output-path"><a href="#1、output-path" class="headerlink" title="1、output.path"></a>1、output.path</h4><p><strong>打包文件输出的目录</strong>，建议配置为绝对路径（相对路径不会报错），<strong>默认值和 context 的默认值一样，都是process.cwd()。</strong>除了常规的配置方式，还可以在 path 中用使用 [hash] 模板，比如配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(<span class="string">'./dist/[hash:8]/'</span>),</span><br><span class="line">    filename: <span class="string">'[name].js'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>这里的 hash 值是编译过程的 hash，如果被打包进来的内容改变了，那么 hash 值也会发生改变。这个可以用于版本回滚。为方便做持续集成等，你也可以配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(<span class="string">`./dist/<span class="subst">$&#123;<span class="built_in">Date</span>.now()&#125;</span>/`</span>),</span><br><span class="line">    filename: <span class="string">'[name].js'</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h4 id="2、ouput-publicPath"><a href="#2、ouput-publicPath" class="headerlink" title="2、ouput.publicPath"></a>2、ouput.publicPath</h4><font color="#A52A2A" size="4"><strong>静态资源最终访问路径 = output.publicPath + 资源loader或插件等配置路径</strong> </font><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">output.publicPath = <span class="string">'/static/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 图片 url-loader 配置</span></span><br><span class="line">&#123;</span><br><span class="line">    name: <span class="string">'img/[name].[ext]'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 那么图片最终的访问路径为</span></span><br><span class="line"><span class="comment">// output.publicPath + 'img/[name].[ext]' = '/static/img/[name].[ext]'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// JS output.filename 配置</span></span><br><span class="line">&#123;</span><br><span class="line">    filename: <span class="string">'js/[name].js'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 那么JS最终访问路径为 </span></span><br><span class="line"><span class="comment">// output.publicPath + 'js/[name].js' = '/static/js/[name].js'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// CSS </span></span><br><span class="line"><span class="keyword">new</span> ExtractTextPlugin(<span class="string">"css/style.css"</span>)</span><br><span class="line"><span class="comment">// 那么最终CSS的访问路径为</span></span><br><span class="line"><span class="comment">// output.publicPath + 'css/style.css' = '/static/css/style.css'</span></span><br></pre></td></tr></table></figure><p><strong>publicPath 默认值为空字符串</strong>，接下来看其他各种常见的 publicPath 配置的实际意义。 </p><p><br></p><h1 id="三、webpack-dev-server"><a href="#三、webpack-dev-server" class="headerlink" title="三、webpack-dev-server"></a>三、webpack-dev-server</h1><h4 id="1、publicPath"><a href="#1、publicPath" class="headerlink" title="1、publicPath"></a>1、publicPath</h4><p>我们知道 <strong>webpack-dev-server 打包的内容是放在内存中，通过express匹配请求路径</strong>，然后读取对应的资源输出。<strong>这些资源对外的根目录就是publicPath</strong>，可以理解为和 outpu.path 的功能一样，将所有资源放在此目录下，在浏览器可以直接访问此目录下的资源。 </p><p><br></p><p>但是这个路径仅仅只是为了提供浏览器访问打包资源的功能，<font color="#A52A2A" size="4"><strong>webpack中的loader和插件仍然是取ouput.publicPath</strong></font>，比如CSS里面的图片最终的路径仍是”/static/img/xxxx.png”，这也是为什么官方推荐 publicPath 和 webpack 配置的保持一致（除了http地址），配置一致才能正常访问其他静态资源。</p><p><br></p><p>上面的解释可能还是比较生硬，还是举几个例子来说明。本例将两处 publicPath 配置成不一样的，这样更容易对比理解。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line">output: &#123;</span><br><span class="line">    path: path.resolve(<span class="string">`./dist/`</span>),</span><br><span class="line">    filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">    publicPath: <span class="string">'/static/'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// api 调用 webpack-dev-server</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">var</span> webpackDevServer = <span class="built_in">require</span>(<span class="string">'webpack-dev-server'</span>);</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">"./webpack.config"</span>);</span><br><span class="line"><span class="keyword">var</span> compiler = webpack(config);</span><br><span class="line"><span class="keyword">var</span> server = <span class="keyword">new</span> webpackDevServer(compiler, &#123;</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    publicPath: <span class="string">'/web/'</span></span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8282</span>, <span class="string">"0.0.0.0"</span>)</span><br></pre></td></tr></table></figure><p>如何查看 webpack-dev-server 所有启动后的资源访问路径呢？有个简单的方法，就是访问/webpack-dev-server，本例访问截图如下： </p><p><img src="/2018/04/10/webpack-路径问题/未命名图片.png" alt=""></p><p>上面的资源可以点击查看，你会发现，资源的路径都是/web/<strong>*</strong>，所以在index.html中引入JS的路径应为/web/js/main.js，同时也能看到，style.css中的图片路径仍然为/static/img/<em>**</em>.png，而不是/web/。 </p><p><br></p><h1 id="四、html-webpack-plugin"><a href="#四、html-webpack-plugin" class="headerlink" title="四、html-webpack-plugin"></a>四、html-webpack-plugin</h1><p>这个插件的几处配置受路径配置影响，因此需要专门说明下。 </p><h4 id="1、template"><a href="#1、template" class="headerlink" title="1、template"></a>1、template</h4><p><strong>template的路径是相对于 output.context</strong>，源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.options.template = <span class="keyword">this</span>.getFullTemplatePath(<span class="keyword">this</span>.options.template, compiler.context);</span><br></pre></td></tr></table></figure><p>因此 template 对应的文件需要放在 ouput.context 配置的目录下才能被识别。</p><p><br></p><h4 id="2、Filename"><a href="#2、Filename" class="headerlink" title="2、Filename"></a>2、Filename</h4><p><strong>filename的路径是相对于 output.path</strong>，源码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.options.filename = path.relative(compiler.options.output.path, filename);</span><br></pre></td></tr></table></figure><p><strong>在 webpack-dev-server 中，则相对于 webpack-dev-server 配置的 publicPath</strong>。</p><h4 id="3、衍生问题"><a href="#3、衍生问题" class="headerlink" title="3、衍生问题"></a>3、衍生问题</h4><p><strong>若 webpack-dev-server 中的 publicPath 和 ouput.publicPath 不一致</strong>，在这种配置下使用html-webpack-plugin是有如下问题：</p><ul><li><p>自动引用的路径仍然以 ouput.publicPath      为准，和      webpack-dev-server 提供的资源访问路径不一致，从而不能正常访问； </p></li><li><p>浏览 index.html 需要加上 webpack-dev-server 配置的 publicPath 才能访问（<a href="http://localhost:8282/web/）。" target="_blank" rel="noopener">http://localhost:8282/web/）。</a></p></li></ul><p>这两个问题也反推出了最方便的配置为：</p><ul><li><strong>ouput.publicPath 和 webpack-dev-server 的publicPath 均配置为’/‘</strong>，vue-cli 就是这种配置</li><li>template 放在根目录，html-webpack-plugin      不用修改参数的路径，filename 采用默认值。</li></ul><p><br></p><h1 id="五、记录曾经用过的配置"><a href="#五、记录曾经用过的配置" class="headerlink" title="五、记录曾经用过的配置"></a>五、记录曾经用过的配置</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//webpack.base.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">// 入口文件的默认路径为context，而不是当前文件路径</span></span><br><span class="line">    <span class="comment">// main: './src/main',</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用path.join，从当前文件路径算起，感觉更符合逻辑些</span></span><br><span class="line">    main: path.join(__dirname, <span class="string">'../src/main'</span>),</span><br><span class="line">    vendors: path.join(__dirname, <span class="string">'../src/vendors'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 定义了文件build后放置的位置</span></span><br><span class="line">    path: path.join(__dirname, <span class="string">'../dist/static'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules:[&#123;</span><br><span class="line">        test: <span class="regexp">/\.(gif|jpg|png|woff|svg|eot|ttf)\??.*$/</span>,</span><br><span class="line">        loader: <span class="string">'url-loader?limit=1024'</span>,</span><br><span class="line">        query: &#123;</span><br><span class="line">          limit: <span class="number">10000</span>,</span><br><span class="line">          <span class="comment">// 定义了文件的名字，以及相对于output.path路径的位置</span></span><br><span class="line"> <span class="comment">// build后，引用文件自带img前缀     </span></span><br><span class="line"> <span class="comment">// 放置在dist/static/img/目录下</span></span><br><span class="line">          name: <span class="string">'img/[name].[hash:7].[ext]'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;  </span><br><span class="line">        test: <span class="regexp">/\.jpeg$/</span>,</span><br><span class="line">        use: <span class="string">'url-loader?limit=1024&amp;name=[path][name].[ext]&amp;outputPath=img/&amp;publicPath=output/'</span>,</span><br><span class="line">      &#125; </span><br><span class="line">]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack.prod.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = merge(webpackBaseConfig, &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line"> <span class="comment">// 定义了index.html中引用js、css、img等资源的引用路径，可以为相对路径或者绝对路径</span></span><br><span class="line">     publicPath: <span class="string">'/static'</span>,</span><br><span class="line"> <span class="comment">// 定义了文件的名字，以及相对于path路径的位置</span></span><br><span class="line"> <span class="comment">// build后，引用文件自带js前缀     </span></span><br><span class="line"> <span class="comment">// 放置在dist/static/js/目录下</span></span><br><span class="line">     filename: <span class="string">'js/[name].[hash].js'</span>,</span><br><span class="line">     chunkFilename: <span class="string">'js/[name].[hash].chunk.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">      filename: <span class="string">'css/[name].[hash].css'</span>,</span><br><span class="line">      allChunks: <span class="literal">true</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">'vendors'</span>,</span><br><span class="line">      filename: <span class="string">'js/vendors.[hash].js'</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      <span class="string">'process.env'</span>: &#123;</span><br><span class="line">        NODE_ENV: <span class="string">'"production"'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  <span class="comment">// 定义了build后的index.html文件的位置</span></span><br><span class="line">      filename: path.join(__dirname, <span class="string">'../dist/index_prod.html'</span>),</span><br><span class="line">      template: path.join(__dirname, <span class="string">'../src/template/index.ejs'</span>),</span><br><span class="line">      inject: <span class="literal">false</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> webpack </tag>
            
            <tag> 路径 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx-rewrite</title>
      <link href="/2018/04/10/nginx-rewrite/"/>
      <url>/2018/04/10/nginx-rewrite/</url>
      <content type="html"><![CDATA[<h4 id="一、ngx-http-rewrite-module"><a href="#一、ngx-http-rewrite-module" class="headerlink" title="一、ngx_http_rewrite_module"></a>一、ngx_http_rewrite_module</h4><p><code>rewrite</code>模块即<code>ngx_http_rewrite_module</code>模块，主要功能是改写请求URI，是Nginx默认安装的模块。</p><p><code>rewrite</code>模块会根据<code>PCRE正则</code>匹配重写URI，或者直接返回资源（<code>200|404</code>），或者发起内部跳转再匹配<code>location</code>，或者直接做<code>30x</code>重定向返回客户端。</p><p> <code>ngx_http_rewrite_module</code>模块的指令有<code>break</code>, <code>if</code>, <code>return</code>, <code>rewrite</code>, <code>set</code>。</p><a id="more"></a> <p><br></p><h4 id="二、rewrite语法"><a href="#二、rewrite语法" class="headerlink" title="二、rewrite语法"></a>二、rewrite语法</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rewrite</span>    &lt;regex&gt;    &lt;replacement&gt;     [flag]       </span><br><span class="line"><span class="comment"># 关键字     正则       替代内容         flag标记</span></span><br><span class="line"><span class="comment"># 可以在server, location, if</span></span><br></pre></td></tr></table></figure><ul><li>flag标记说明：<ul><li><strong>last</strong>  #本条规则匹配完成后，<strong>继续向下匹配新的location URI规则</strong><ul><li>跳转的总次数不能超过10次  </li></ul></li><li><strong>break</strong>  #本条规则匹配完成即终止，<strong>不再匹配后面的任何规则</strong>。<ul><li>停止处理当前的<code>ngx_http_rewrite_module</code>指令集</li><li>如果<code>break</code>在<code>location</code>内，则在该<code>location</code>内继续进一步处理该请求</li><li>请求内容存在，返回200；请求内容不存在，则返回404</li></ul></li><li><strong>redirect</strong>  #返回<strong>302临时重定向</strong>，浏览器地址会<strong>显示跳转后的URL地址</strong></li><li><strong>permanent</strong>  #返回<strong>301永久重定向</strong>，浏览器地址栏会<strong>显示跳转后的URL地址</strong></li></ul></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> http://www.czlun.com/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line"><span class="comment"># regex部分是 ^/(.*) ，这是一个正则表达式，匹配完整的域名和后面的路径地址</span></span><br><span class="line"><span class="comment"># replacement部分是http://www.czlun.com/$1，$1是取自regex部分()里的内容。匹配成功后跳转到的URL。</span></span><br><span class="line"><span class="comment"># flag部分 permanent表示永久301重定向标记，即跳转到新的 http://www.czlun.com/$1 地址上</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">rewrite</span> /test/.* /index.html <span class="literal">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /test/ &#123; <span class="attribute">return</span> <span class="number">508</span>;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /break/ &#123;  </span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/break/(.*)</span> /test/<span class="variable">$1</span> <span class="literal">break</span>;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">402</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /last/ &#123;  </span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/last/(.*)</span> /test/<span class="variable">$1</span> <span class="literal">last</span>;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请求1： http://test.com/break/index.php   返回：404 </span></span><br><span class="line"><span class="comment"># 请求2： http://test.com/last/index.php    返回：508 </span></span><br><span class="line"><span class="comment"># 请求3： http://test.com/test/index.php    返回：200 (返回index.html) </span></span><br><span class="line"><span class="comment"># 当请求break时，如匹配内容存在的话，可以直接请求成功，返回200；而如果请求内容不存在，则返回404</span></span><br><span class="line"><span class="comment"># 当请求为last的时候，会对重写的新uri重新发起请求，只是重新查找location匹配，如请求2返回508</span></span><br></pre></td></tr></table></figure><p>注：</p><ul><li><p><code>rewrite</code>只能对域名后边的<strong>除去传递的参数外</strong>的字符串起作用</p></li><li><p>如果<code>replacement</code>以<code>http://</code>, <code>https://</code>, or <code>$scheme</code>开头，处理将会终止，请求结果会以重定向的形式返回给客户端</p></li><li><p>如果<code>replacement</code>字符串里有新的<code>request</code>参数，那么之前的参数会附加到其后面，如果要避免这种情况，那就在<code>replacement</code>字符串后面加上<code>？</code></p></li><li><p>如果正则表达式（<em>regex</em>）里包含<code>}</code> or <code>;</code>字符，需要用<strong>单引号或者双引号</strong>把正则表达式引起来</p></li></ul><p><br></p><h4 id="三、return语法"><a href="#三、return语法" class="headerlink" title="三、return语法"></a>三、return语法</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">return</span> code [text] | code URL | URL;</span><br><span class="line"><span class="comment"># 可以在server, location, if</span></span><br></pre></td></tr></table></figure><p>停止任何的进一步处理，并且将指定状态码返回给客户端</p><p>return的参数有四种形式：</p><ul><li><code>return code</code> 此时，响应内容就是nginx所默认的，比如503 Service Temporarily Unavailable</li><li><code>return code text</code> 因为要带响应内容，因此code不能是具有跳转功能的30x</li><li><code>return code URL</code> 此时URI可以为URI做内部跳转，也可以是具有<code>http://</code>或者<code>https://</code>等协议的绝对URL，直接返回客户端，而code是30x</li><li><code>return URL</code> 此时code默认为302，而URL必须是带<code>http://</code>等协议的绝对URL</li></ul><p><br></p><h4 id="四、PCRE正则表达式"><a href="#四、PCRE正则表达式" class="headerlink" title="四、PCRE正则表达式"></a>四、<code>PCRE正则</code>表达式</h4><table><thead><tr><th style="text-align:center">字符</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center">\</td><td style="text-align:left">转义字符。如“\n”匹配一个换行符</td></tr><tr><td style="text-align:center">^</td><td style="text-align:left">匹配输入字符串的<strong>起始位置</strong></td></tr><tr><td style="text-align:center">$</td><td style="text-align:left">匹配输入字符串的<strong>结束位置</strong></td></tr><tr><td style="text-align:center">*</td><td style="text-align:left">匹配前面的字符<strong>零次或多次</strong>。如“ol*”能匹配“o”及“ol”、“oll”</td></tr><tr><td style="text-align:center">+</td><td style="text-align:left">匹配前面的字符<strong>一次或多次</strong>。如“ol+”能匹配“ol”及“oll”、“oll”，但不能匹配“o”</td></tr><tr><td style="text-align:center">?</td><td style="text-align:left">匹配前面的字符<strong>零次或一次</strong>，例如“do(es)?”能匹配“do”或者“does”，”?”等效于”{0,1}”</td></tr><tr><td style="text-align:center">.</td><td style="text-align:left">匹配除“\n”之外的任何单个字符。<br>若要匹配包括“\n”在内的任意字符，请使用诸如“[.\n]”之类的模式。</td></tr><tr><td style="text-align:center">(pattern)</td><td style="text-align:left"><strong>匹配括号内pattern</strong>并可以<strong>在后面获取对应的匹配。<br></strong>常用$0…$9属性获取小括号中的匹配内容，要匹配圆括号字符需要(Content)</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> abc.com www.abc.com;</span><br><span class="line">    <span class="attribute">if</span> ( <span class="variable">$host</span> != <span class="string">'www.abc.com'</span>  ) &#123;</span><br><span class="line">        <span class="attribute">rewrite</span><span class="regexp"> ^/(.*)</span> http://www.abc.com/<span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> /data/www/www;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">error_log</span>  logs/error_www.abc.com.log  <span class="literal">error</span>;</span><br><span class="line">    <span class="attribute">access_log</span>  logs/access_www.abc.com.log  main;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="五、逻辑判断"><a href="#五、逻辑判断" class="headerlink" title="五、逻辑判断"></a>五、逻辑判断</h4><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>=，!=</td><td>比较的一个变量和字符串。</td></tr><tr><td>~，~*</td><td>与正则表达式匹配的变量，如果这个正则表达式中包含 <strong>}，;</strong> 则整个表达式需要用<strong>“或’</strong>包围。</td></tr><tr><td>-f，!-f</td><td>检查一个<strong>文件是否存</strong>在。</td></tr><tr><td>-d，!-d</td><td>检查一个<strong>目录是否存在</strong>。</td></tr><tr><td>-e，!-e</td><td>检查一个文件、目录、符号链接是否存在。</td></tr><tr><td>-x，!-x</td><td>检查一个文件<strong>是否可执行</strong>。</td></tr></tbody></table><p><br></p><h4 id="六、常用变量"><a href="#六、常用变量" class="headerlink" title="六、常用变量"></a>六、常用变量</h4><table><thead><tr><th style="text-align:left">变量</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left"><strong>$args</strong></td><td>这个变量等于请求行中的参数，同$query_string</td></tr><tr><td style="text-align:left">$content_length</td><td>请求头中的Content-length字段。</td></tr><tr><td style="text-align:left"><strong>$content_type</strong></td><td>请求头中的Content-Type字段。</td></tr><tr><td style="text-align:left">$document_root</td><td>当前请求在root指令中指定的值。</td></tr><tr><td style="text-align:left"><strong>$host</strong></td><td>请求主机头字段，否则为服务器名称。</td></tr><tr><td style="text-align:left">$http_user_agent</td><td>客户端agent信息</td></tr><tr><td style="text-align:left"><strong>$http_cookie</strong></td><td>客户端cookie信息</td></tr><tr><td style="text-align:left">$limit_rate</td><td>这个变量可以限制连接速率。</td></tr><tr><td style="text-align:left"><strong>$request_method</strong></td><td>客户端请求的动作，通常为GET或POST。</td></tr><tr><td style="text-align:left"><strong>$remote_addr</strong></td><td>客户端的IP地址。</td></tr><tr><td style="text-align:left"><strong>$remote_port</strong></td><td>客户端的端口。</td></tr><tr><td style="text-align:left">$remote_user</td><td>已经经过Auth   Basic Module验证的用户名。</td></tr><tr><td style="text-align:left">$request_filename</td><td>当前请求的文件路径，由root或alias指令与URI请求生成。</td></tr><tr><td style="text-align:left"><strong>$scheme</strong></td><td>HTTP方法（如http，https）。</td></tr><tr><td style="text-align:left">$server_protocol</td><td>请求使用的协议，通常是HTTP/1.0或HTTP/1.1。</td></tr><tr><td style="text-align:left">$server_addr</td><td>服务器地址，在完成一次系统调用后可以确定这个值。</td></tr><tr><td style="text-align:left"><strong>$server_name</strong></td><td>服务器名称。</td></tr><tr><td style="text-align:left"><strong>$server_port</strong></td><td>请求到达服务器的端口号。</td></tr><tr><td style="text-align:left"><strong>$request_uri</strong></td><td><strong>包含请求参数的原始URI</strong>，不包含主机名，如”/foo/bar.php?arg=baz”。</td></tr><tr><td style="text-align:left"><strong>$uri</strong></td><td><strong>不带请求参数的当前URI</strong>，$uri不包含主机名，如”/foo/bar.html”。</td></tr><tr><td style="text-align:left">$document_uri</td><td>与$uri相同。</td></tr></tbody></table><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 限制浏览器访问</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~ Firefox)</span> &#123;   </span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /firefox/<span class="variable">$1</span> <span class="literal">break</span>;   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~ MSIE)</span> &#123;   </span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /msie/<span class="variable">$1</span> <span class="literal">break</span>;   </span><br><span class="line">&#125;      </span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~ Chrome)</span> &#123;   </span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> /chrome/<span class="variable">$1</span> <span class="literal">break</span>;   </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 限制IP访问  </span></span><br><span class="line"><span class="attribute">if</span>  (<span class="variable">$remote_addr</span> = <span class="number">192.168.197.142</span>) &#123;  </span><br><span class="line">    <span class="attribute">return</span> <span class="number">403</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># set指令是设置变量用的,可以用来达到多条件判断时作标志用</span></span><br><span class="line"><span class="comment"># 判断IE并重写,且不用break;我们用set变量来达到目的</span></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$http_user_agent</span> <span class="regexp">~* msie)</span> &#123;  </span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$isie</span> <span class="number">1</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$fastcgi_script_name</span> = ie.html) &#123;  </span><br><span class="line">    <span class="attribute">set</span> <span class="variable">$isie</span> <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="attribute">if</span> (<span class="variable">$isie</span> <span class="number">1</span>) &#123;  </span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^.*$</span> ie.html;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> rewrite </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx-CORS跨域</title>
      <link href="/2018/04/10/nginx-CORS%E8%B7%A8%E5%9F%9F/"/>
      <url>/2018/04/10/nginx-CORS%E8%B7%A8%E5%9F%9F/</url>
      <content type="html"><![CDATA[<h1 id="一、CORS"><a href="#一、CORS" class="headerlink" title="一、CORS"></a>一、CORS</h1><p><strong>CORS</strong>全称<code>Cross-Origin Resource Sharing</code>，是HTML5规范定义的如何跨域访问资源。 </p><p><strong>Origin</strong>（<strong>本域</strong>）表示浏览器当前页面的域。当JavaScript向<strong>外域</strong>发起请求后，浏览器收到响应后，首先检查<code>Access-Control-Allow-Origin</code>是否包含<strong>本域</strong>，如果是，则此次跨域请求成功，如果不是，则请求失败，JavaScript将无法获取到响应的任何数据。 </p><p><img src="/2018/04/10/nginx-CORS跨域/l.png" alt=""></p><p>上面这种跨域请求，称之为“<strong>简单请求</strong>”。若请求满足所有下述条件，则该请求可视为“简单请求”： </p><h5 id="1-使用下列方法之一"><a href="#1-使用下列方法之一" class="headerlink" title="1.使用下列方法之一"></a>1.使用下列方法之一</h5><ul><li><code>GET</code></li><li><code>HEAD</code></li><li><code>POST</code></li></ul><h5 id="2-Fetch-规范定义了对-CORS-安全的首部字段集合，不得人为设置该集合之外的其他首部字段。该集合为"><a href="#2-Fetch-规范定义了对-CORS-安全的首部字段集合，不得人为设置该集合之外的其他首部字段。该集合为" class="headerlink" title="2.Fetch 规范定义了对 CORS 安全的首部字段集合，不得人为设置该集合之外的其他首部字段。该集合为"></a>2.Fetch 规范定义了对 CORS 安全的首部字段集合，不得人为设置该集合之外的其他首部字段。该集合为</h5><ul><li><code>Accept</code></li><li><code>Accept-Language</code></li><li><code>Content-Language</code></li><li><code>Content-Type</code></li><li><code>DPR</code></li><li><code>Downlink</code></li><li><code>Save-Data</code></li><li><code>Viewport-Width</code></li><li><code>Width</code></li></ul><h5 id="3-Content-Type的值仅限于下列三者之一"><a href="#3-Content-Type的值仅限于下列三者之一" class="headerlink" title="3.Content-Type的值仅限于下列三者之一"></a>3.<code>Content-Type</code>的值仅限于下列三者之一</h5><ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul><h5 id="4-请求中的任意XMLHttpRequestUpload对象均没有注册任何事件监听器"><a href="#4-请求中的任意XMLHttpRequestUpload对象均没有注册任何事件监听器" class="headerlink" title="4.请求中的任意XMLHttpRequestUpload对象均没有注册任何事件监听器"></a>4.请求中的任意<code>XMLHttpRequestUpload</code>对象均没有注册任何事件监听器</h5><ul><li><code>XMLHttpRequestUpload</code>对象可以使用 <code>XMLHttpRequest.upload</code>属性访问</li></ul><h5 id="5-请求中没有使用-ReadableStream-对象"><a href="#5-请求中没有使用-ReadableStream-对象" class="headerlink" title="5.请求中没有使用 ReadableStream 对象"></a>5.请求中没有使用 <code>ReadableStream</code> 对象</h5><p><br></p><a id="more"></a><h2 id="二、非简单请求"><a href="#二、非简单请求" class="headerlink" title="二、非简单请求"></a>二、非简单请求</h2><p>对于<strong>PUT</strong>、<strong>DELETE</strong>以及其他类型（如<code>application/json</code>的POST请求），在发送AJAX请求之前，浏览器会先发送一个<code>OPTIONS</code>请求（称为<code>preflighted</code>请求）到这个URL上，询问目标服务器是否接受： </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">OPTIONS</span> /path/to/resource HTTP/<span class="number">1</span>.<span class="number">1</span></span><br><span class="line">Host: bar.com</span><br><span class="line">Origin: http://my.com</span><br><span class="line">Access-Control-Request-Method: POST</span><br></pre></td></tr></table></figure><p>服务器必须<strong>响应并明确指出允许的Method</strong>： </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Access-Control-Allow-Origin: http://my.com</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, PUT, OPTIONS</span><br><span class="line">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure><p>浏览器确认服务器响应的<code>Access-Control-Allow-Methods</code>头确实包含将要发送的AJAX请求的Method，才会继续发送AJAX，否则，抛出一个错误。 </p><p><br></p><h1 id="三、Access-Control-参数"><a href="#三、Access-Control-参数" class="headerlink" title="三、Access-Control- 参数"></a>三、Access-Control- 参数</h1><h5 id="（1）Access-Control-Allow-Origin"><a href="#（1）Access-Control-Allow-Origin" class="headerlink" title="（1）Access-Control-Allow-Origin"></a>（1）Access-Control-Allow-Origin</h5><p>该字段是必须的。它的值要么是请求时<code>Origin</code>字段的值，要么是一个<code>*</code>，表示接受任意域名的请求。</p><p><br></p><h5 id="（2）Access-Control-Allow-Credentials"><a href="#（2）Access-Control-Allow-Credentials" class="headerlink" title="（2）Access-Control-Allow-Credentials"></a>（2）Access-Control-Allow-Credentials</h5><p>该字段可选。它的值是一个布尔值，表示是否允许发送Cookie。<strong>默认情况下，Cookie不包括在CORS请求之中</strong>。设为<code>true</code>，即表示服务器明确许可，Cookie可以包含在请求中，一起发给服务器。这个值也只能设为<code>true</code>，如果服务器不要浏览器发送Cookie，删除该字段即可。</p><p><br></p><h5 id="（2-1）withCredentials-属性"><a href="#（2-1）withCredentials-属性" class="headerlink" title="（2.1）withCredentials 属性"></a>（2.1）withCredentials 属性</h5><p>如果要把Cookie发到服务器，一方面要<strong>服务器同意</strong>，指定<code>Access-Control-Allow-Credentials</code>字段；另一方面，开发者必须在<code>AJAX</code>请求中打开<code>withCredentials</code>属性。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.withCredentials = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>否则，即使服务器同意发送Cookie，浏览器也不会发送。或者，服务器要求设置Cookie，浏览器也不会处理。 </p><p>但是，如果省略<code>withCredentials</code>设置，有的浏览器还是会一起发送Cookie。这时，可以显式关闭<code>withCredentials</code>。 </p><p>注：如果要发送Cookie，<code>Access-Control-Allow-Origin</code>就不能设为星号，必须指定明确的、与请求网页一致的域名。同时，Cookie依然遵循同源政策，只有用服务器域名设置的Cookie才会上传，其他域名的Cookie并不会上传，且（跨源）原网页代码中的<code>document.cookie</code>也无法读取服务器域名下的Cookie。 </p><p><br></p><h5 id="（3）Access-Control-Expose-Headers"><a href="#（3）Access-Control-Expose-Headers" class="headerlink" title="（3）Access-Control-Expose-Headers"></a>（3）Access-Control-Expose-Headers</h5><p>该字段可选。CORS请求时，<code>XMLHttpRequest</code>对象的<code>getResponseHeader()</code>方法只能拿到6个基本字段：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code>。如果想拿到其他字段，就必须在<code>Access-Control-Expose-Headers</code>里面指定。</p><p><br></p><h1 id="四、什么情况下存在跨域问题"><a href="#四、什么情况下存在跨域问题" class="headerlink" title="四、什么情况下存在跨域问题"></a>四、什么情况下存在跨域问题</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1、由 XMLHttpRequest 或 Fetch 发起的跨域 HTTP 请求</span><br><span class="line"></span><br><span class="line">2、Web 字体 ，CSS 中通过 @font-face 使用跨域字体资源</span><br><span class="line"></span><br><span class="line">3、WebGL 贴图</span><br><span class="line"></span><br><span class="line">4、使用 drawImage 将 Images/video 画面绘制到 canvas</span><br><span class="line"></span><br><span class="line">5、样式表，使用 CSSOM</span><br></pre></td></tr></table></figure><p><br></p><h1 id="五、nginx配置例子"><a href="#五、nginx配置例子" class="headerlink" title="五、nginx配置例子"></a>五、nginx配置例子</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">     <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'OPTIONS'</span>) &#123;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Custom headers and headers various browsers *should* be OK with but aren't</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'User-Agent,Cache-Control,Content-Type'</span>;</span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment"># Tell client that this pre-flight info is valid for 20 days</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Max-Age'</span> <span class="number">1728000</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Content-Type'</span> <span class="string">'text/plain; charset=utf-8'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Content-Length'</span> <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">204</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'POST'</span>) &#123;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'User-Agent,Cache-Control,Content-Type'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'Content-Length,Content-Range'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="attribute">if</span> (<span class="variable">$request_method</span> = <span class="string">'GET'</span>) &#123;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Origin'</span> <span class="string">'*'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Methods'</span> <span class="string">'GET, POST, OPTIONS'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Allow-Headers'</span> <span class="string">'User-Agent,Cache-Control,Content-Type'</span>;</span><br><span class="line">        <span class="attribute">add_header</span> <span class="string">'Access-Control-Expose-Headers'</span> <span class="string">'Content-Length,Content-Range'</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> CORS </tag>
            
            <tag> 跨域 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html-不使用table布局</title>
      <link href="/2018/04/09/html-%E4%B8%8D%E4%BD%BF%E7%94%A8table%E5%B8%83%E5%B1%80/"/>
      <url>/2018/04/09/html-%E4%B8%8D%E4%BD%BF%E7%94%A8table%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<ul><li>Table要比其它html标记占更多的字节 </li></ul><ul><li>Tablle会阻挡浏览器渲染引擎的渲染顺序<ul><li><strong>table是中的内容是自适应的，它要计算嵌套最深的节点以满足自适应，所以会出现空白后才显示内容。</strong> </li></ul></li></ul><ul><li>在某些浏览器中Table里的文字的拷贝会出现问题。 </li></ul><ul><li>Table会影响其内部的某些布局属性的生效(比如<td>里的元素的height:100%) </td></li></ul><ul><li>table对对于页面布局来说，从语义上看是不正确的。</li></ul>]]></content>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> table </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-响应式表单</title>
      <link href="/2018/03/29/css-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%A1%A8%E5%8D%95/"/>
      <url>/2018/03/29/css-%E5%93%8D%E5%BA%94%E5%BC%8F%E8%A1%A8%E5%8D%95/</url>
      <content type="html"><![CDATA[<p>css3的@media检测到屏幕尺寸，将表格元素设置为block块状，并且隐藏表头，将td设置下边框看起来跟一行行的一样。最后我们使用css3的:before { content: “姓名”; }生成每行对应的标签定义，这样就能知道每行数据的意义。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> only screen and (max-width: <span class="number">760px</span>),</span><br><span class="line">(min-device-width: <span class="number">768px</span>) and (max-device-width: <span class="number">1024px</span>) &#123;</span><br><span class="line">    <span class="comment">/* Force table to not be like tables anymore */</span></span><br><span class="line">    <span class="selector-tag">table</span>,</span><br><span class="line">    <span class="selector-tag">thead</span>,</span><br><span class="line">    <span class="selector-tag">tbody</span>,</span><br><span class="line">    <span class="selector-tag">th</span>,</span><br><span class="line">    <span class="selector-tag">td</span>,</span><br><span class="line">    <span class="selector-tag">tr</span> &#123;</span><br><span class="line">        <span class="attribute">display</span>: block;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">thead</span> <span class="selector-tag">tr</span> &#123;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: -<span class="number">9999px</span>;</span><br><span class="line">        <span class="attribute">left</span>: -<span class="number">9999px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">tr</span> &#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">td</span> &#123;</span><br><span class="line">        <span class="comment">/* Behave  like a "row" */</span></span><br><span class="line">        <span class="attribute">border</span>: none;</span><br><span class="line">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="attribute">padding-left</span>: <span class="number">50%</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">td</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="comment">/* Now like a table header */</span></span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="comment">/* Top/left values mimic padding */</span></span><br><span class="line">        <span class="attribute">top</span>: <span class="number">6px</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">6px</span>;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">45%</span>;</span><br><span class="line">        <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Label the data*/</span></span><br><span class="line">    <span class="selector-tag">td</span><span class="selector-pseudo">:nth-of-type(1)</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">"姓名"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">td</span><span class="selector-pseudo">:nth-of-type(2)</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">"性别"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">td</span><span class="selector-pseudo">:nth-of-type(3)</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">"出生年月"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-自定义事件</title>
      <link href="/2018/03/26/JS-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/"/>
      <url>/2018/03/26/JS-%E8%87%AA%E5%AE%9A%E4%B9%89%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过document.createEvent 方法创建</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(type)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过initEvent或其他的初始化方法</span></span><br><span class="line">event.initEvent(type, bubbles, cancelable);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向一个指定目标派发一个事件</span></span><br><span class="line">target.dispatchEvent(event)</span><br></pre></td></tr></table></figure><ul><li><code>event</code> 就是被创建的 <a href="https://developer.mozilla.org/zh-CN/docs/DOM/event" target="_blank" rel="noopener">Event</a> 对象</li><li><code>type</code> 是一个字符串，表示要创建的事件类型</li><li>事件类型可能包括<code>UIEvents、MouseEvents、MutationEvents、HTMLEvents</code></li><li>请查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/createEvent#Notes" target="_blank" rel="noopener">Notes</a> 章节获取详细信息 </li></ul><a id="more"></a><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义build事件</span></span><br><span class="line"><span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'Event'</span>);</span><br><span class="line">event.initEvent(<span class="string">'build'</span>, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">elem.dispatchEvent(event);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手动触发StorageEvent事件</span></span><br><span class="line"><span class="keyword">var</span> storagEvent = <span class="built_in">document</span>.createEvent(<span class="string">"StorageEvent"</span>);</span><br><span class="line">storagEvent.initStorageEvent(<span class="string">'storage'</span>, <span class="literal">false</span>, <span class="literal">false</span>, key, oldval, newval, url, storage);</span><br><span class="line"><span class="built_in">window</span>.dispatchEvent(se);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-原型链</title>
      <link href="/2018/03/25/JS-%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
      <url>/2018/03/25/JS-%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      <content type="html"><![CDATA[<h1 id="一-无中生有"><a href="#一-无中生有" class="headerlink" title="一. 无中生有"></a>一. 无中生有</h1><p>起初，什么都没有。</p><p>造物主说：没有东西本身也是一种东西啊，于是就有了null：</p><p><img src="/2018/03/25/JS-原型链/v2-11ae989e2db3a380ffe225e382652671_hd.jpg" alt=""></p><p>现在我们要造点儿东西出来。但是没有原料怎么办？</p><p>有一个声音说：不是有null嘛？</p><p>另一个声音说：可是null代表无啊。</p><p>造物主说：那就无中生有吧！</p><p>于是：</p><p><img src="/2018/03/25/JS-原型链/v2-4305232695aafb0ffb3df63caec39dd1_hd.jpg" alt=""></p><p>JavaScript中的1号对象产生了，不妨把它叫做<strong>No. 1</strong>。</p><p>这个No. 1对象可不得了，<font color="#A52A2A" size="4"><strong>No. 1是真正的万物始祖。它拥有的性质，是所有的对象都有的</strong></font>。</p><p><strong>proto</strong>是什么呢？是“生”的意思，或者叫做<font color="#A52A2A" size="4"><strong>继承</strong></font>。</p><p><br></p><h1 id="二-制造对象的机器"><a href="#二-制造对象的机器" class="headerlink" title="二. 制造对象的机器"></a>二. 制造对象的机器</h1><p>既然已经有了一个对象，剩下就好办了，因为一生二，二生三，三生万物嘛。</p><p>不过造物主很懒，他不想一个一个地亲手制造对象。于是他做了一台能够制造对象的机器：</p><p><img src="/2018/03/25/JS-原型链/v2-2458a871bafadca8b0551e2252d69fec_hd.jpg" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.__proto__ === <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>他给这台机器起了一个名字：<strong>Object</strong>。</p><p>这台机器并不能凭空造出对象，它需要一个模板对象，按照这个模板对象来制造对象。很自然的，它把目前仅有的No. 1对象作为模板。图中的<font color="#A52A2A" size="4"><strong>prototype就代表机器的模板对象</strong></font>。</p><p>机器如何启动呢？通过new命令。你对着机器喊一声：“new！”，对象就造出来了。</p><p>机器的产生，实现了对象的批量化自动化生产，解放了造物主的双手。于是造物主忙别的去了。</p><p>如果机器只是按照模板的样子，机械地复制出一模一样的对象，那就太笨了。</p><p>人类的后代在继承了父辈的性状的基础上，可以产生父辈没有的性状。同样地，机器在制造对象时，除了继承模板对象的属性外，还可以添加新的属性。这使得JavaScript世界越来越多样化。</p><p>比如说，有一天Object机器制造一个对象，它有一个特殊的属性，叫做flag，属性值是10。用图形表示是这样的：</p><p><img src="/2018/03/25/JS-原型链/v2-6d345dec589e84311315a3decaa21d8b_hd.jpg" alt=""></p><p>写成代码就是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(&#123; <span class="attr">flag</span>: <span class="number">10</span> &#125;);</span><br></pre></td></tr></table></figure><p>轰轰烈烈的造物运动开始了……</p><p><br></p><a id="more"></a> <h1 id="三-更多制造对象的机器"><a href="#三-更多制造对象的机器" class="headerlink" title="三. 更多制造对象的机器"></a>三. 更多制造对象的机器</h1><p>一天天过去了，造物主来视察工作。看到Object制造出了好多好多对象，他非常高兴。</p><p>同时他还发现：根据“物以类聚”的原则，这些对象可以分成很多类。聪明的造物主想，我何不多造几台机器，让每一台机器专门负责制造某一类对象呢？于是，他动手造出了几台机器并给它们起了名字。它们分别是：</p><ul><li>String：用来制造表示一段文本的对象。</li><li>Number：用来制造表示一个数字的对象。</li><li>Boolean：用来制造表示是与非的对象。</li><li>Array：用来制造有序队列对象。</li><li>Date：用来制造表示一个日期的对象。</li><li>Error：用来制造表示一个错误的对象。</li><li>……</li></ul><p>多台机器齐开动，各司其责，造物运动进入了一个新的阶段……</p><p>造物主又开始思考了：虽然机器是用来制造对象的，但是机器本身实际上也是一种特殊对象啊。现在有了这么多机器，我得好好总结一下它们的共同特征，把它们也纳入对象体系。</p><p>于是，造物主基于No. 1对象，造出了一个No. 2对象，用它来表示所有机器的共同特征。换句话说，<font color="#A52A2A" size="4"><strong>把No. 2对象作为所有机器的原型对象</strong></font>。</p><p><img src="/2018/03/25/JS-原型链/v2-b6cbde61439e841e4c6353d3546fc482_hd.jpg" alt=""></p><p>（注：<strong>proto</strong>写起来太麻烦了，后面我们用[p]来代替） </p><p>当然了，和Object一样，<strong>这些机器也需要各自有一个模板对象，也就是它们的prototype属性指向的那个对象。显然它们的模板对象应该是继承自No. 1对象的</strong>，即 </p><p><img src="/2018/03/25/JS-原型链/v2-34ab309d1e2e415071afd1c19f216275_hd.jpg" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.__proto__.__proto__.__proto__ === <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.__proto__ === <span class="built_in">Object</span>.__proto__;</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Number</span>.prototype.__proto__.__proto__ === <span class="literal">null</span>;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这张图显示了JavaScript世界中那些最基本的<strong>机器本身的原型链</strong>，以及它们的<strong>模板对象的原型链</strong>。不过看起来太复杂了，所以后面我们就不再把它们完整地画出来了。 </p><p><br></p><h1 id="四-制造机器的机器"><a href="#四-制造机器的机器" class="headerlink" title="四. 制造机器的机器"></a>四. 制造机器的机器</h1><p>造物主高兴地想：这下可好了，我造出了Object机器，实现了对象制造的自动化。然后又造出了String、Number等机器，实现了特定类别的对象制造的自动化。但是，为啥总感觉似乎还缺点什么呢？</p><p>对啦，还缺少一台制造机器的机器啊！</p><p>很快，万能的造物主就把它造了出来，并把它命名为Function。有了Function机器后，就可以实现自动化地制造机器了。</p><p>让我们来观察一下Function：</p><ul><li>首先，Function是一台机器，所以它的<strong>原型对象也是No. 2对象</strong>。</li><li>其次，Function又是一台制造机器的机器，所以它<strong>的模板对象也是No. 2对象</strong>。</li></ul><p>所以我们得到了Function的一个非常特别的性质：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.__proto__ === <span class="built_in">Function</span>.prototype;</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>哇，太奇妙了！</p><p>不要奇怪，这个性质不过是”<strong>Function是一台制造机器的机器</strong>“这个事实的必然结果。</p><p>于是JavaScript的世界的变成了下面的样子：</p><p><img src="/2018/03/25/JS-原型链/v2-1b90d4ec60713acce99df0c498fff794_hd.jpg" alt=""></p><p>从这张图中，我们发现：所有的函数(包括Function)的原型都是No. 2对象，而同时Function.prototype也是No. 2对象。这说明了：</p><p><strong>从逻辑上，我们可以认为所有机器(包括Function自己)都是由Function制造出来的。</strong></p><p>同时，如果再仔细瞧瞧，你会发现：</p><p><strong>Object作为一个机器可以看做是有由Function制造出来的，而Function作为一个对象可以看做是由Object制造出来的。</strong></p><p>这就是JavaScript世界的“鸡生蛋，蛋生鸡”问题。那么到底是谁生了谁呢？Whatever！</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-权重</title>
      <link href="/2018/03/23/css-%E6%9D%83%E9%87%8D/"/>
      <url>/2018/03/23/css-%E6%9D%83%E9%87%8D/</url>
      <content type="html"><![CDATA[<h1 id="权重等级"><a href="#权重等级" class="headerlink" title="权重等级"></a>权重等级</h1><p>根据选择器种类的不同可以分为四类，也决定了四种不同等级的权重值。</p><h5 id="0、-important（10-000）"><a href="#0、-important（10-000）" class="headerlink" title="0、!important（10,000）"></a>0、!important（10,000）</h5><h5 id="1、行内样式style（1-000）"><a href="#1、行内样式style（1-000）" class="headerlink" title="1、行内样式style（1,000）"></a>1、行内样式style（1,000）</h5><h5 id="2、ID选择器（100）"><a href="#2、ID选择器（100）" class="headerlink" title="2、ID选择器（100）"></a>2、ID选择器（100）</h5><h5 id="3、类、属性选择器、伪类选择器（10）"><a href="#3、类、属性选择器、伪类选择器（10）" class="headerlink" title="3、类、属性选择器、伪类选择器（10）"></a>3、类、属性选择器、伪类选择器（10）</h5><p>伪类选择器</p><ul><li>:hover</li><li>:focus</li></ul><h5 id="4、元素、伪元素（1）"><a href="#4、元素、伪元素（1）" class="headerlink" title="4、元素、伪元素（1）"></a>4、元素、伪元素（1）</h5><p>伪元素选择器:</p><ul><li>::after </li><li>::before </li><li>::first-letter </li><li>::first-line </li><li>::selecton</li></ul><a id="more"></a> <p>伪元素跟伪类都是选择器的补充，但是，<strong>伪类表示的是一种“状态”</strong>。比如hover，active等等，而<strong>伪元素表示文档的某个确定部分的表现</strong>，比如::first-line 伪元素只作用于你前面元素选择器确定的一个元素的第一行。 </p><p>注意，伪元素选择器选择出来的“部分”不在dom里，也不能对其绑定事件。如果你对伪元素前面的选择器定义的元素绑定了事件，伪元素同样会生效。 永远记得伪元素生成的是“表现”。</p><p><img src="/2018/03/23/css-权重/priority_rules_1.jpg" alt=""></p><p>注意：</p><ul><li><p><strong>通配选择符</strong>（universal selector）(*), <strong>关系选择符</strong>（combinators） (+, &gt;, ~, ‘ ‘)  和 <strong>否定伪类</strong>（negation pseudo-class）(:not()) 对优先级没有影响。（但是，在 :not() 内部声明的选择器是会影响优先级）。 </p></li><li><p><code>@media</code>媒体查询相当于逻辑<code>if</code>的作用，但不影响优先级。<strong>媒体查询主要利用属性覆盖产生效果，因此媒体查询样式的位置特别重要。</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">500px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">background-color</span>:red;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>:lightgreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*如果媒体查询放在普通样式之前，样式无法进行覆盖，没有起到相应的效果*/</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 权重 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-transform-skew</title>
      <link href="/2018/03/23/css-transform-skew/"/>
      <url>/2018/03/23/css-transform-skew/</url>
      <content type="html"><![CDATA[<h1 id="一、skew"><a href="#一、skew" class="headerlink" title="一、skew"></a>一、skew</h1><p><strong>skew所用的坐标系，纵向是X轴，横向是Y轴</strong>，与常见的坐标系是反着的。比如：</p><ul><li>skewX(30deg)      表示X轴朝<strong>逆时针方向<font color="#A52A2A" size="4">旋转</font></strong>30deg，坐标系上的物体也会随着X轴旋转。</li><li>skewY(10deg)      表示Y轴朝<strong>顺时针方向<font color="#A52A2A" size="4">旋转</font></strong>10deg，坐标系上的物体也会随着Y轴旋转。</li></ul><p><br></p><a id="more"></a> <h4 id="skewX-30deg"><a href="#skewX-30deg" class="headerlink" title="skewX(30deg)"></a>skewX(30deg)</h4><p><img src="/2018/03/23/css-transform-skew/8da73888f08c712cd2b86af3e02b5d0b_hd.jpg" alt=""></p><h4 id="skewY-10deg"><a href="#skewY-10deg" class="headerlink" title="skewY(10deg)"></a>skewY(10deg)</h4><p><img src="/2018/03/23/css-transform-skew/36147026b20f167d83306bc7c251c6eb_hd.jpg" alt=""></p><h4 id="加在一起的效果是"><a href="#加在一起的效果是" class="headerlink" title="加在一起的效果是"></a>加在一起的效果是</h4><p><img src="/2018/03/23/css-transform-skew/0bfc4a49f06867291c61e0e0e7c801f5_hd.jpg" alt=""></p><p><br></p><h1 id="二、对比"><a href="#二、对比" class="headerlink" title="二、对比"></a>二、对比</h1><ul><li><strong>skewX(30deg)</strong>：X轴逆时针方向<font color="#A52A2A" size="4">旋转</font>30deg（X轴旋转）</li><li><strong>rotateX(<em>30deg</em>)</strong> ：坐标系上的<strong>点绕着X轴旋转</strong>30deg（点旋转）</li><li><strong>translateX(<em>30px</em>)</strong> ：X轴沿着<strong>轴方向</strong>平移30px（X轴平移）</li><li><strong>scaleX(<em>2</em>)</strong> ：X轴放大2倍（X轴缩放）</li></ul><p><strong>注：transform-origin（坐标系原点）不同，视觉效果往往大不一样</strong></p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> transform </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-渲染过程</title>
      <link href="/2018/03/22/css-%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/"/>
      <url>/2018/03/22/css-%E6%B8%B2%E6%9F%93%E8%BF%87%E7%A8%8B/</url>
      <content type="html"><![CDATA[<h1 id="一、浏览器渲染原理"><a href="#一、浏览器渲染原理" class="headerlink" title="一、浏览器渲染原理"></a>一、浏览器渲染原理</h1><p>关于浏览器工作原理之前有一篇非常出名的文章《<a href="http://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/" target="_blank" rel="noopener">浏览器的工作原理：新式网络浏览器幕后揭秘</a>》。文章详细阐述了浏览器工作原理，下面用两张图来分别描述Firefox和Chrome浏览器对Web页面的渲染过程。</p><p><br></p><h1 id="二、Chrome渲染过程"><a href="#二、Chrome渲染过程" class="headerlink" title="二、Chrome渲染过程"></a>二、Chrome渲染过程</h1><p><img src="/2018/03/22/css-渲染过程/css-animation-1.png" alt=""></p><p>有关于Chrome浏览器渲染的详细内容，可以参考《<a href="https://github.com/abcrun/abcrun.github.com/issues/17" target="_blank" rel="noopener">图解浏览器渲染过程 - 基于Webkit/Blink内核Chrome浏览器</a>》一文。 </p><p><br></p><h1 id="三、Firefox渲染过程"><a href="#三、Firefox渲染过程" class="headerlink" title="三、Firefox渲染过程"></a>三、Firefox渲染过程</h1><p><img src="/2018/03/22/css-渲染过程/css-animation-2.jpeg" alt=""></p><p>特别声明：接下来的内容都是针对于Chrome浏览器进行讨论。 </p><p><br></p><a id="more"></a> <h1 id="四、Chrome渲染部分的实际含义"><a href="#四、Chrome渲染部分的实际含义" class="headerlink" title="四、Chrome渲染部分的实际含义"></a>四、Chrome渲染部分的实际含义</h1><p>从上面的流程图中不难看出，Chrome渲染主要包括<code>Parse Html</code>、<code>Recalculate Style</code>、<code>Layout</code>、<code>Rasterizer</code>、<code>Paint</code>、<code>Image Decode</code>、<code>Image Resize</code>和<code>Composite Layers</code>等。简单了解一下其含义，以便后续内容的更好理解。 </p><h4 id="1、Parse-Html"><a href="#1、Parse-Html" class="headerlink" title="1、Parse Html"></a>1、Parse Html</h4><p>发送一个http请求，获取请求的内容，然后解析HTML的过程。</p><p>有一个经典的前端面试题：<a href="https://github.com/skyline75489/what-happens-when-zh_CN" target="_blank" rel="noopener">当你在浏览器中输入google.com并且按下回车之后发生了什么？</a> 这个面试题或许能帮助大家更好的理解Parse Html，甚至是浏览器渲染的其他几个部分。</p><p><br></p><h4 id="2、Recalculate-Style"><a href="#2、Recalculate-Style" class="headerlink" title="2、Recalculate Style"></a>2、Recalculate Style</h4><p>重新计算样式，它计算的是Style，和Layout做的事情完全不同。<strong>Layout计算的是一个元素绝对的位置和尺寸</strong>，或者说是“Compute Layout”。</p><p>Recalculate被触发的时候做的事情就是<strong>处理JavaScript给元素设置的样式而已</strong>。Recalculate Style会计算Render树（渲染树）,然后从根节点开始进行页面渲染，将<strong>CSS附加到DOM</strong>上的过程。</p><p>任何企图改变元素样式的操作都会触发Recalculate。同Layout一样，它也是在<strong>JavaScript执行完成后才触发的</strong>。</p><p><br></p><h4 id="3、Layout"><a href="#3、Layout" class="headerlink" title="3、Layout"></a>3、Layout</h4><p>计算页面上的布局，即元素在文档中的位置及大小。正如前面所述，Layout计算的是布局位置信息。<strong>任何有可能改变元素位置或大小的样式都会触发这个Layout事件</strong>。</p><p>触发Layout的属性非常的多，如果想了解什么属性会触发Layout事件，可以在<a href="https://csstriggers.com/" target="_blank" rel="noopener">CSS Triggers</a>网站查阅。下图截了一部分：</p><p><img src="/2018/03/22/css-渲染过程/css-animation-3.png" alt=""></p><p><br></p><h4 id="4、Rasterizer"><a href="#4、Rasterizer" class="headerlink" title="4、Rasterizer"></a>4、Rasterizer</h4><p>光栅化，一般的安卓手机都会进行光栅化，光栅主要是针对图形的一个栅格化过程。低端手机在这部分耗时还是蛮多的。</p><p> <br></p><h4 id="5、Paint"><a href="#5、Paint" class="headerlink" title="5、Paint"></a>5、Paint</h4><p><strong>页面上显示东西有任何变动都会触发Paint</strong>。包括拖动滚动条，鼠标选择中文字等这些完全不改变样式，只改变显示结果的动作都会触发Paint。</p><p>Paint的工作就是把文档中用户可见的那一部分展现给用户。Paint是把Layout和Recalculate的计算的结果直接在浏览器视窗上绘制出来，它并不实现具体的元素计算。</p><p> <br> </p><h4 id="6、Image-Decode"><a href="#6、Image-Decode" class="headerlink" title="6、Image Decode"></a>6、Image Decode</h4><p>图片解码，将图片解析到浏览器上显示的过程。</p><p> <br> </p><h4 id="7、Image-Resize"><a href="#7、Image-Resize" class="headerlink" title="7、Image Resize"></a>7、Image Resize</h4><p>图片的大小设置，图片加载解析后，若发现图片大小并不是实际的大小（CSS改变了宽度），则需要Resize。Resize越大，耗时越久，所以尽量以图片的原始大小输出。</p><p><br></p><h4 id="8、Composite-Layers"><a href="#8、Composite-Layers" class="headerlink" title="8、Composite Layers"></a>8、Composite Layers</h4><p>最后<strong>合并图层</strong>，输出页面到屏幕。浏览器在渲染过程中会将一些含有特殊样式的DOM结构绘制于其他图层，有点类似于PhotoShop的图层概念。一张图片在PotoShop是由多个图层组合而成，而浏览器最终显示的页面实际也是有多个图层构成的。</p><p>下面这些因素都会导致<strong>新图层的创建</strong>：</p><ul><li>进行3D或者透视变换的CSS属性</li><li>使用硬件加速视频解码的<video>元素</video></li><li>具有3D（WebGL）上下文或者硬件加速的2D上下文的<canvas>元素</canvas></li><li>组合型插件（即Flash）</li><li>具有有CSS透明度动画或者使用动画式Webkit变换的元素</li><li>具有硬件加速的CSS滤镜的元素</li></ul><p>有关于Composite方面的深入剖析，可以阅读《<a href="http://taobaofed.org/blog/2016/04/25/performance-composite/" target="_blank" rel="noopener">无线性能优化：Composite</a>》一文。</p><p><br></p><h1 id="五、像素渲染流水线"><a href="#五、像素渲染流水线" class="headerlink" title="五、像素渲染流水线"></a>五、像素渲染流水线</h1><p>通过前面的介绍，在屏幕上最终呈现的页面，是类似于图层一样合并输出到屏幕上的。其实所写的Web页面最终以像素的形式在浏览器屏幕上呈现。这样一来，我们需要理解所写的页面代码是如何被转换成屏幕上显示的像素。这个转换过程可以归纳为这样的一个流水线，主要包含五个关键步骤： </p><p><img src="/2018/03/22/css-渲染过程/css-animation-4.jpg" alt=""></p><ul><li><p>JavaScript：一般来说，我们会使用JavaScript来实现一些视觉变化的效果。比如CSS Animation、Transition和Web Animation API。 </p></li><li><p>Style：计算样式。这个过程是根据CSS选择器，对每个DOM元素匹配对应的CSS样式。这一步结束之后，就确定了每个DOM元素上应该应用什么CSS样式规则。 (<strong>Recalculate Style</strong>)</p></li><li><p>Layout：布局。上一步确定了每个DOM元素的样式规则，这一步就是具体计算每个DOM元素<strong>最终在屏幕上显示的大小和位置</strong>。Web页面中元素的布局是相对的，因此一个元素的布局发生变化，会联动地引发其他元素的布局发生变化。比如，<body>元素的width变化会影响其后代元素的宽度。因此，对于浏览器而言，布局过程是经常发生的。 (<strong>Compute Layout</strong>)</body></p></li><li><p>Paint：绘制。本质上就是填充像素的过程。包括绘制文字、颜色、图像、边框和阴影等，也就是一个DOM元素所有的可视效果。一般来说，这个绘制过程是在多个层上完成的。 </p></li><li><p>Composite：<strong>渲染层合并</strong>。前面也说过，对于页面中DOM元素的绘制是在多个层上进行的。在每个层上完成绘制过程之后，浏览器会将所有层按照合理的顺序合并成一个图层，然后在屏幕上呈现。对于有位置重叠的元素的页面，这个过程尤其重要，因为一量图层的合并顺序出错，将会导致元素显示异常。</p></li></ul><p>上述过程的每一步都有可能会发生，因此一定要弄清楚自己的代码将会运行在哪一步。</p><p>虽然在理论上，页面的每一帧都是结过上述的流水线处理之后渲染出来的，但并不意味着页面每一帧的渲染都需要经过上述五个步骤的处理。实际上，对视觉变化效果的一个帧的渲染，有三种常用的流水线。</p><p><br></p><h4 id="1、JavaScript-CSS-gt-计算样式-gt-布局-gt-绘制-gt-渲染层合并"><a href="#1、JavaScript-CSS-gt-计算样式-gt-布局-gt-绘制-gt-渲染层合并" class="headerlink" title="1、JavaScript/CSS =&gt;计算样式=&gt;布局=&gt;绘制=&gt;渲染层合并"></a>1、JavaScript/CSS =&gt;计算样式=&gt;布局=&gt;绘制=&gt;渲染层合并</h4><p><img src="/2018/03/22/css-渲染过程/css-animation-4.jpg" alt=""></p><p>如果你修改一个DOM元素的“Layout”属性，也就是改变了元素的样式（比如width、height或者position等），那么浏览器会检查哪些元素需要重新布局，然后对页面激发一个reflow（重排）过程完成重新布局。被reflow（重排）的元素，接下来也会激发绘制过程，最后激发渲染层合并过程，生成最后的画面。</p><p>reflow又叫重排,是指浏览器计算页面的全部或部分布局所做的处理。reflow必定会引发重绘，这对于Web的性能影响是极大的。</p><p><br></p><h4 id="2、JavaScript-CSS-gt-计算样式-gt-绘制-gt-渲染层合并"><a href="#2、JavaScript-CSS-gt-计算样式-gt-绘制-gt-渲染层合并" class="headerlink" title="2、JavaScript/CSS =&gt; 计算样式 =&gt;绘制 =&gt;渲染层合并"></a>2、JavaScript/CSS =&gt; 计算样式 =&gt;绘制 =&gt;渲染层合并</h4><p><img src="/2018/03/22/css-渲染过程/css-animation-5.jpg" alt=""></p><p>如果你修改一个DOM元素的“Paint Only”属性，比如背景图片、文字颜色或阴影等，这些属性不会影响页面的布局，因此浏览器会在完成样式计算之后，跳过布局过程，只会绘制和渲染层合并过程。 </p><p><br></p><h4 id="3、JavaScript-CSS-gt-计算样式-gt-渲染层合并"><a href="#3、JavaScript-CSS-gt-计算样式-gt-渲染层合并" class="headerlink" title="3、JavaScript/CSS =&gt; 计算样式 =&gt;渲染层合并"></a>3、JavaScript/CSS =&gt; 计算样式 =&gt;渲染层合并</h4><p><img src="/2018/03/22/css-渲染过程/css-animation-6.jpg" alt="像素渲染流水线"></p><p>如果你修改一个非样式且非绘制的CSS属性，那么浏览器会在完成样式计算之后，跳过布局和绘制的过程，直接做渲染层合并。这种方式在性能上是最理想的，对于动画和滚动这种负荷很重的渲染，我们要争取使用第三种渲染过程。</p><p>通过前面这么多的内容介绍，我们可以得知，影响Web性能主要过程包括Layout、Paint和Composite。那么对于CSS Animation而言，我们的所有操作都是通过CSS的样式控制动画，言外之意，只要是会触发Layout、Paint和Composite的CSS属性都会直接影响动画的性能。在CSS中所有影响Layout、Paint和Composite的属性都可以通过<a href="https://csstriggers.com/" target="_blank" rel="noopener">CSS Triggers</a>**网站查阅。那么如何避免达到前面所述的，整个动画尽量避开重排和重绘，只做渲染层合并呢？暂且先不讨论，把这部分放到最后面来讨论。接下来接着先看看其他相关的知识点。</p><p><br></p><h1 id="六、渲染性能"><a href="#六、渲染性能" class="headerlink" title="六、渲染性能"></a>六、渲染性能</h1><p>在理解渲染性能之前，我们有必要先了解前面提到的两个概念重排（也就是回流）和重绘。因为这两者与前面介绍的像素渲染流水线中的Layout和Paint都有关系，而且Layout和Paint对性能的渲染又有莫大的关系。 </p><h4 id="1、Reflow（重排）"><a href="#1、Reflow（重排）" class="headerlink" title="1、Reflow（重排）"></a>1、Reflow（重排）</h4><p><strong>Reflow（重排）指的是计算页面布局（Layout）</strong>。某个节点Reflow时会重新计算节点的尺寸和位置，而且还有可能触其后代节点Reflow。在这之后再次触发一次Repaint（重绘）</p><p>当Render Tree中的一部分（或全部）因为元素的尺寸、布局、隐藏等改变而需要重新构建。这就称为回流，每个页面至少需要一次回流，就是页面第一次加载的时候。</p><p>在Web页面中，很多状况下会导致回流：</p><ul><li>调整窗口大小</li><li>改变字体</li><li>增加或者移除样式表</li><li>内容变化</li><li>激活CSS伪类</li><li>操作CSS属性</li><li>JavaScript操作DOM</li><li>计算offsetWidth和offsetHeight</li><li>设置style属性的值</li><li>CSS3 Animation或Transition</li></ul><p><br></p><h4 id="2、Repaint（重绘）"><a href="#2、Repaint（重绘）" class="headerlink" title="2、Repaint（重绘）"></a>2、Repaint（重绘）</h4><p><strong>Repaint（重绘）或者Redraw遍历所有节点，检测节点的可见性、颜色、轮廓等可见的样式属性，然后根据检测的结果更新页面的响应部分</strong>。 </p><p>当Render Tree中的一些元素需要更新属性，而这些属性只是影响元素的外观、风格、而不会影响布局的。就是重绘。 将重排和重绘的介绍结合起来，不难发现：重绘（Repaint）不一定会引起回流（Reflow重排），但回流必将引起重绘（Repaint）。 </p><p>既然如此，那么什么情况之下会触发浏览器的Repaint和Reflow呢？</p><ul><li>页面首次加载</li><li>DOM元素添加、修改(内容)和删除(Reflow + Repaint)</li><li>仅修改DOM元素的颜色(只有Repaint，因为不需要调整布局)</li><li>应用新的样式或修改任何影响元素外观的属性</li><li>Resize浏览器窗口和<strong>滚动页面</strong></li><li><strong>读取元素的某些属性</strong>(offsetLeft、offsetTop、offsetHeight、offsetWidth、getComputedStyle()等)</li></ul><p>可以说Reflow和Repaint都很容易触发，而它们的触发对性能的影响都非常大，但非常不幸的是，我们无法完全避免，只能尽量不去触发浏览器的Reflow和Repaint。 </p><p>从前面的内容可以了解到，Reflow和Repaint对性能影响很大，那么具体哪些点会影响到渲染性能呢？</p><p><br></p><h4 id="3、影响Layout的属性"><a href="#3、影响Layout的属性" class="headerlink" title="3、影响Layout的属性"></a>3、影响Layout的属性</h4><p>当你改变页面上某个元素的时候，浏览器需要做一次重新布局的操作，这次操作会包括计算受操作影响所有元素的几何数，比如每个元素的位置和尺寸。如果你修改了html这个元素的width属性，那么整个页面都会被重绘。</p><p>由于元素相覆盖，相互影响，稍有不慎的操作就有可能导致一次自上而下的布局计算。所以我们在进行元素操作的时候要一再小心尽量避免修改这些重新布局的属性。</p><p>具体有关于会影响Layout的CSS属性可以在<a href="https://csstriggers.com/" target="_blank" rel="noopener">CSS Triggers</a>网站中查阅。</p><p><br></p><h4 id="4、影响Repaint的属性"><a href="#4、影响Repaint的属性" class="headerlink" title="4、影响Repaint的属性"></a>4、影响Repaint的属性</h4><p>有些属性的修改不会触发重排，但会触Repaint（重绘）,现代浏览器中主要的绘制工作主要用光栅化软件来完成。所以重新会制的元素是否会很大程度影响你的性能，是由这个元素和绘制层级的关系来决定的，如果这个元素盖住的元素都被重新绘制，那么代价自然就相当地大。</p><p>具体有关于会影响Layout的CSS属性可以在<a href="https://csstriggers.com/" target="_blank" rel="noopener">CSS Triggers</a>网站中查阅。</p><p>如果你在动画里面使用了上述某些属性，导致重绘，这个元素所属的图层会被重新上传到GPU。在移动设备上这是一个很昂贵耗资源的操作，因为移动设备的CPU明显不如你的电脑，这也意味着绘制的工作会需要更长的时间；而上传线CPU和GPU的带宽并非没有限制，所以重绘的纹理上传就自然需要更长的时间。</p><p><a href="https://csstriggers.com/" target="_blank" rel="noopener">CSS Triggers</a>网站中可以得知哪些属性会触发重排、哪些属性会触发重绘以及哪些属性会触合成。但并不是CSS中所有的属性都可以用于CSS Animation和Transition中的。在W3C官方规范中明确定了哪些CSS属性可以用于<a href="https://www.w3.org/TR/css3-transitions/#animatable-css" target="_blank" rel="noopener">Animation</a>和<a href="https://www.w3.org/TR/css3-transitions/#transition-property-property" target="_blank" rel="noopener">Transition</a>中。<a href="http://rodneyrehm.de/" target="_blank" rel="noopener">@Rodney Rehm</a>还对这些<a href="http://thewebevolved.com/support/animation/properties/" target="_blank" rel="noopener">属性做过一个兼容测试</a>。如果你想深入的了解这方面的知识，建议您阅读下面两篇文章：</p><ul><li><a href="http://oli.jp/2010/css-animatable-properties/" target="_blank" rel="noopener">CSS animatable properties</a></li><li><a href="https://www.smashingmagazine.com/2013/04/css3-transitions-thank-god-specification/" target="_blank" rel="noopener">Thank God We Have A      Specification!</a></li></ul><p>如此一来，我们知道可用于CSS Animation或者Transition的CSS属性之后，再配合<a href="https://csstriggers.com/" target="_blank" rel="noopener">CSS Triggers</a>网站，可以轻易掌握哪些CSS属性会触发重排、重绘和合成等。虽然无法避免，但我们可以尽量控制。 </p><p><br></p><h1 id="七、性能优化"><a href="#七、性能优化" class="headerlink" title="七、性能优化"></a>七、性能优化</h1><p>如果我们知道浏览器是如何渲染一个页面的，并且去优化渲染过程中的关键步骤，不是是就能事半功倍呢？</p><p>有关于这部分的介绍，建议大家阅读《<a href="http://www.wdshare.org/article/5770ed9753c50d1a18f64a97" target="_blank" rel="noopener">渲染性能</a>》。</p><p><img src="/2018/03/22/css-渲染过程/css-animation-6.jpg" alt=""></p><p>在像素渲染流水线中，得知，如果我们能幸运的避免Layout和Paint，那么性能是最好的，言外之意，动画性能也将变得最佳。那么在CSS中可能通过不同的方式来创建新图层。其实这也就是大家常说的，通过CSS的属性来触发GPU加速。浏览器会为此元素单独创建一个“层”。当有单独的层之后，此元素的Repaint操作将只需要更新自己，不用影响到别人。你可以将其理解为局部更新。所以开启了硬件加速的动画会变得流畅很多。</p><p>为什么开启硬件加速动画就会变得流畅，那是因为<strong>开启硬件加速动画的元素</strong>都有一个<strong>独立的Render进程</strong>。Render进程中包含了主线程和合成线程，主线程负责：</p><ul><li>JavaScript的执行</li><li>CSS样式计算</li><li>计算Layout</li><li>将页面元素绘制成位图(Paint)</li><li>发送位图给合成线程</li></ul><p>合成线程则主要负责： </p><ul><li>将位图发送给GPU</li><li>计算页面的可见部分和即将可见部分(滚动)</li><li>通知GPU绘制位图到屏幕上(Draw)</li></ul><p>我们可以得到一个大概的浏览器线程模型： </p><p><img src="/2018/03/22/css-渲染过程/css-animation-7.png" alt=""></p><p>我们可以将页面绘制的过程分为三个部分：Layout、Paint和合成。Layout负责计算DOM元素的布局关系，Paint负责将DOM元素绘制成位图，合成则负责将位图发送给GPU绘制到屏幕上（如果有transform、opacity等属性则通知GPU做处理）。</p><p>GPU加速其实是一直存在的，而如同translate3D这种hack只是为了让这个元素生成独立的 GraphicsLayer ， 占用一部分内存，但同时也会在动画或者Repaint的时候不会影响到其他任何元素，对高刷新频率的东西，就应该分离出单独的一个 GraphicsLayer。</p><p>GPU对于动画图形的渲染处理比CPU要快。</p><p>RenderLayer 树，满足以下任意一点的就会生成独立一个 RenderLayer</p><ul><li>页面的根节点的RenderObject</li><li>有明确的CSS定位属性（relative，absolute或者transform）</li><li>是透明的</li><li>有CSS overflow、CSS alpha遮罩（alpha mash）或者CSS reflection</li><li>有CSS 滤镜（fliter）</li><li>3D环境或者2D加速环境的canvas元素对应的RenderObject</li><li>video元素对应的RenderObject</li></ul><p><br></p><p>每个RenderLayer 有多个 GraphicsLayer 存在 </p><ul><li>有3D或者perspective transform的CSS属性的层</li><li>使用加速视频解码的video元素的层</li><li>3D或者加速2D环境下的canvas元素的层</li><li>插件，比如flash（Layer is used for a      composited plugin）</li><li>对opacity和transform应用了CSS动画的层</li><li>使用了加速CSS滤镜（filters）的层</li><li>有合成层后代的层</li><li>同合成层重叠，且在该合成层上面（z-index）渲染的层</li></ul><p><br></p><p>每个GraphicsLayer 生成一个 GraphicsContext, 就是一个位图，传送给GPU，由GPU合成放出。</p><p>那么就是说，GraphicsLayer过少则每次repaint大整体的工作量巨大，而过多则repaint小碎块的次数过多。这种次数过多就称为 层数爆炸 ，为了防止这个爆炸 Blink 引擎做了一个特殊处理。</p><p>有关于这部分内容的详细介绍，可以阅读《<a href="http://taobaofed.org/blog/2016/04/25/performance-composite/" target="_blank" rel="noopener">无线性能优化：Composite</a>》一文。</p><p><br></p><p>扯了这么多，我们可以稍微总结一下下：</p><p>不是所有属性动画消耗的性能都一样，其中消耗最低的是transform和opacity两个属性（当然还有会触发Composite的其他CSS属性），其次是Paint相关属性。所以在制作动画时，建议使用transform的translate替代margin或position中的top、right、bottom和left，同时使用transform中的scaleX或者scaleY来替代width和height。</p><p><br></p><p>为了确保页面的流程，必须保证60fps内不发生两次渲染树更新，比如下图，16ms内只发生如下几个操作则是正常及正确的：</p><p><img src="/2018/03/22/css-渲染过程/css-animation-8.png" alt=""></p><p>页面滚动时，需要避免不必要的渲染及长时间渲染。其中不必要的渲染包括： </p><ul><li><p>position:fixed;。fixed定位在滚动时会不停的进行渲染，特别是页面顶部有一个fixed，页面底部有个类似返回顶部的fixed，则在滚动时会对整个页面进行渲染，效率非常低。可以通过transform: translateZ(0)或者transform: translate3d(0,0,0)来解决 </p></li><li><p>overflow:scroll。前面说了，而在滚动也会触发Repaint和Reflow。在调试过程中注意到一个有趣的现象，有时打开了页面并不会导致crash，但快速滑动的时候却会。由于crash是页面本身内存占比过高，只要优化了页面的内存占用，滑动自然也不会是很大的问题。无论你在什么时候滑动页面，页面滚动都是一个不断重新组合重新绘制的过程。所以减少渲染区域在滚动里就显得非常重要。 </p></li><li><p>CSS伪类触发。有些CSS伪类在页面滚动时会不小心触发到。比如:hover效果有box-shadow、border-radius等比较耗时的CSS属性时，建议页面滚动时，先取消:hover效果，滚动停止后再加上:hover效果。这个可以通过在外层添加类名进行控制。但添加类名、删除类名也会改变元素时，浏览器就会要重新做一次计算和布局。所以千万要小心这种无意触发重新布局的操作，有的时候可能不是动画，但去付出的代价要比做一个动画更加昂贵。也就是说classname变化了，就一定会出现一次rendering计算，如果一定需要这么做，那可以使用 classlist 的方法。 </p></li><li><p>touch事件的监听</p></li></ul><p><br></p><p>长时间渲染包括： </p><ul><li><p>复杂的CSS </p></li><li><p>Image Decodes：特别是图片的Image Decodes及Image Resize这两个过程在移动端是非常耗时的 </p></li><li><p>Large Empty Layers: 大的空图层</p></li></ul>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 渲染 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-transform-matrix</title>
      <link href="/2018/03/22/css-transform-matrix/"/>
      <url>/2018/03/22/css-transform-matrix/</url>
      <content type="html"><![CDATA[<h1 id="一、矩阵"><a href="#一、矩阵" class="headerlink" title="一、矩阵"></a>一、矩阵</h1><p>先看一段 css 代码： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 2D */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(1, 0, 0, 1, 0, 0);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 3D */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);</span><br></pre></td></tr></table></figure><p>上面两行 css 代码其实什么变换都不会做，因为那是<strong>变换的默认状态</strong>，即没有变换。</p><p><br></p><p>大多数人在使用 transform 变换时很少直接使用 matrix 矩阵，更多的时候，我们会使用类似如下语法： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(100<span class="selector-tag">px</span>) <span class="selector-tag">rotateZ</span>(30<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure><p>但其实，这只是一个语法糖，其<strong>底层依然使用的是 matrix</strong>。如果想要理解矩阵为何可以应用到 2D/3D 变换，需要从几何的角度去理解矩阵。不过，这需要我们先了解一些必要的基本概念，这些概念至关重要，首先就是向量。</p><p><br></p><a id="more"></a> <h1 id="二、向量"><a href="#二、向量" class="headerlink" title="二、向量"></a>二、向量</h1><p>用一句话描述向量是什么：<code>向量是空间中的箭头</code> 。这个箭头由两个因素决定：<code>方向</code> 和 <code>长度</code>，我们先把目光局限在二维空间下，如图：</p><p><img src="/2018/03/22/css-transform-matrix/ventor.jpg" alt=""></p><p>上图中，在一个坐标系中画了四个不同长度和方向的箭头，每个箭头从原点发出，他们代表了二维空间中的四个向量，在线性代数中，向量通常以原点作为起点。</p><p><br></p><p>下面我们再进一步，我们重新用一句话来描述向量： <code>向量是有序的数字列表</code>。</p><p>假设大家对坐标系的概念都有所了解，我们还是把目光局限在二维空间，在坐标系中任意选取单位长度，这样我们就能够使用一个一个的刻度来标刻这个坐标系，选取特定的方向为x/y轴的正方向，那么不难看出，每一个向量，都可以用唯一的一个坐标来表示，同样的，坐标系中的每一个坐标都对应着一个唯一的箭头(向量)，如下图： </p><p><img src="/2018/03/22/css-transform-matrix/1.jpg" alt=""></p><p>在坐标系中，由于坐标通常用来标示一个点，如 <code>P(2, 8)</code> 表示点 P 的坐标为 (2, 8)，为了区分点和向量，在表示向量时，我们通常把坐标竖着写，然后用一对儿中括号来描述，如上图中的： </p><p><img src="/2018/03/22/css-transform-matrix/2.jpg" alt=""></p><p>在三维空间也是一样的道理，如下图，我就不做重复的解释，唯一不同的是，每一个向量由 x/y/z 三个数字组成的坐标来表示： </p><p><img src="/2018/03/22/css-transform-matrix/3.jpg" alt=""></p><p>对于向量，你只需要知道它是<code>空间中的箭头</code>或者<code>有序的数字列表</code>这就足够了，怎么样？不难理解吧，我们继续往下看，在坐标系中存在一种特殊的向量，我们称之为 <code>基向量</code>。 </p><p><br></p><p><code>基向量</code>，也叫<code>单位向量</code>，是单位长度为1的向量，如下图中：<code>i帽</code> 和<code>j帽</code> 就是这个二维坐标系的基向量：</p><p><img src="/2018/03/22/css-transform-matrix/4.jpg" alt=""></p><p>对于向量，我们就先介绍到这里，这已经足够了。除了向量，还有一个概念需要大家了解，即<code>线性变换</code>。</p><p><br></p><h1 id="三、线性变换"><a href="#三、线性变换" class="headerlink" title="三、线性变换"></a>三、线性变换</h1><p>我们知道，二维空间的一整个平面，可以看做是由无数个向量组成(或者无数个点组成，因为每一个点唯一标识一个向量，所以这里说平面由无数个向量组成)，假如这无数个向量同时做相同的变换，那其实就可以看做是平面的变换，如下图： </p><p><strong>变换前</strong>： </p><p><img src="/2018/03/22/css-transform-matrix/5.jpg" alt=""></p><p><strong>变换后</strong>： </p><p><img src="/2018/03/22/css-transform-matrix/6.jpg" alt=""></p><p>不过，并非所有变换都叫做线性变换，线性变换必须要满足下面两个条件： </p><font color="#A52A2A" size="4"><br><br>- <strong>直线在变换后仍然为直线，不能有所弯曲</strong><br>- <strong>原点不能移动</strong><br><br></font><p>如下变换，就不是一个线性变换，因为直线变成了曲线： </p><p><img src="/2018/03/22/css-transform-matrix/7.jpg" alt=""></p><p><br></p><h1 id="四、如何用数值描述线性变换？"><a href="#四、如何用数值描述线性变换？" class="headerlink" title="四、如何用数值描述线性变换？"></a>四、如何用数值描述线性变换？</h1><p>在上一小节中我们知道，<strong>空间的变换也可以说是向量的变换</strong>，而向量在空间中，可以用一组有序的数字列表来表示(即向量的坐标)，所以<font color="#A52A2A" size="4"><strong>向量变换后，必然会引起<code>有序数字列表的变换</code></strong></font>，那么我们是否可以用数字去描述变换呢？ </p><p><br></p><p>之前在向量一节中，我们了解过<code>基向量</code>，单位长度为1，其实<font color="#A52A2A" size="4"><strong>空间中的任意一个向量我们都可以看做是：基向量变换后的和向量</strong></font>，如下图：</p><p><img src="/2018/03/22/css-transform-matrix/8.jpg" alt=""></p><p>向量 v 的坐标是 </p><p><img src="/2018/03/22/css-transform-matrix/9.jpg" alt=""></p><p>如果我们把 3 和 -2 看做两个标量，也就是纯数字，那么<code>向量 v</code>可以看做是基向量被标量缩放后相加得到的和向量： <code>v = 3i + (-2j)</code>。</p><p><br></p><p>了解了这些，我们现在就通过一个例子，来认识一个至关重要的事实，假如我们有向量<code>v = -1i + 2j</code>，如下图：</p><p><img src="/2018/03/22/css-transform-matrix/10.jpg" alt=""></p><p>此时，<code>基向量 i</code>的坐标是<code>(1, 0)</code>，<code>基向量 j</code> 的坐标是 <code>(0, 1)</code>，假设经过了某些变换之后，<code>基向量 i</code> 的坐标变为<code>(1， -2)</code>，<code>基向量 j</code> 的坐标变为 <code>(3， 0)</code>，如下图： </p><p><img src="/2018/03/22/css-transform-matrix/11.jpg" alt=""></p><p>那么变换后的向量 v 依然满足 <code>v = -1i + 2j</code>，如下： </p><p><img src="/2018/03/22/css-transform-matrix/12.jpg" alt=""></p><p>以上例子所描述的事实，实际上是线性变换的性质的推论，该性质可以从几何角度表述为：<strong>线性变换后的网格平行且等距</strong>。</p><p>既然<font color="#A52A2A" size="4"><strong>线性变换前后都满足该线性关系：<code>v = -1i + 2j</code></strong></font></p><p>那么很容易根据变换后 i帽 和 j帽 的坐标推算出变换后 v 的坐标： </p><p><img src="/2018/03/22/css-transform-matrix/13.jpg" alt=""></p><p>也就是<code>(5, 2)</code>，即： </p><p><img src="/2018/03/22/css-transform-matrix/14.jpg" alt=""></p><p><br></p><p>那么我们是否可以认为，<strong>给定任意一个向量</strong>，其坐标<code>(x, y)</code>，我们可以通过<strong>变换后的基向量的坐标</strong>推断出该向量变换后的坐标呢？答案是肯定的，假如基向量变换后的坐标 <code>i帽</code> 和<code>j帽</code> 如下图： </p><p><img src="/2018/03/22/css-transform-matrix/15.jpg" alt=""></p><p>那么<strong>任意向量 (x, y) 在经过变换后的坐标计算如下</strong>： </p><p><img src="/2018/03/22/css-transform-matrix/16.jpg" alt=""></p><p><br></p><p>这告诉我们另外一个事实，二维空间的线性变换仅由四个数字完全确定，这四个数字就是<code>基向量 i 变换后 i帽 的坐标</code>，以及<code>基向量 j 变换后 j帽 的坐标</code>，如下图： </p><p><img src="/2018/03/22/css-transform-matrix/17.jpg" alt=""></p><p>是不是很酷？只需要四个数字，我们就确定了二维空间的一个变换。通常，我们把这四个数字放到一个 2 x 2 的格子中，我们称之为 2 x 2 矩阵： </p><p><img src="/2018/03/22/css-transform-matrix/18.jpg" alt=""></p><p>现在，当你再看到 2 x 2 矩阵的时候，你的第一几何直观反映应该是：它描述了一个二维空间的变换。 </p><p>我们把情况一般化，如下图： </p><p><img src="/2018/03/22/css-transform-matrix/19.jpg" alt=""></p><p>我们有一个 2 x 2 的矩阵 <code>[a, c][b, d]</code>，其中 [a, c] 是基向量 i 变换后的坐标，[b, d] 是基向量 j 变换后的坐标，那么根据这个变换，以及线性变换的性质，我们可以推断出任意向量 [x, y] 变换后的坐标： </p><p><img src="/2018/03/22/css-transform-matrix/20.jpg" alt=""></p><p>实际上，这就是数学家之所以这样定义 矩阵的向量乘法 的原因。</p><p><br></p><p>到了这里，让我们整理一下思路，首先，对于一个 2 x 2 的矩阵，你的直观几何感受应该是，第一列的两个数是对基向量 i 的变换，第二列的两个数是对基向量 j 的变换，这四个数字组成的 2 x 2 的矩阵，描述了一个对空间的线性变换，我们可以根据这个变换推断出任意一点(或者任意向量)变换后的坐标。 </p><p>其实我么你还可以换一个角度考虑，我们就单纯的把 2 x 2 矩阵叫做变换，那么向量与矩阵的乘积，就要可以看做是该向量应用了这个变换。其实，这就是矩阵向量乘法的几何意义。</p><p><br></p><h1 id="五、回到-CSS-的-transform"><a href="#五、回到-CSS-的-transform" class="headerlink" title="五、回到 CSS 的 transform"></a>五、回到 CSS 的 transform</h1><p>说了一大堆，是时候回到 CSS 的 transform，我们来看一下2D变换下 transform 属性的 matrix 写法： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, <span class="selector-tag">c</span>, <span class="selector-tag">d</span>, <span class="selector-tag">e</span>, <span class="selector-tag">f</span>);</span><br></pre></td></tr></table></figure><p>在文章开始，我们知道各个参数默认值如下： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(1, 0, 0, 1, 0, 0);</span><br></pre></td></tr></table></figure><p>有的同学可能会问：说好的 2 x 2 矩阵也就是四个数字就能确定一个二维空间变换，你这里明明有6个数啊，其实，transform 2D变换是一个 3 * 3 的矩阵，为什么是这样？因为：<strong>位移(translate)</strong>，前面我们说过，线性变换要满足其中一个特点：原点不能移动，但是位移却使原点发生了移动，所以 2 x 2 矩阵满足不了需求，只能再加一列，也就是 3 x 3 的矩阵。 </p><p>把 matrix 中的 <code>a b c d e f</code> 放到一个 3 x 3 的矩阵中应该是这样的： </p><p><img src="/2018/03/22/css-transform-matrix/21.jpg" alt=""></p><p>其实，在没有位移(translate)的情况下，<code>[a, b][c, d]</code>四个数字组成的 2 x 2 矩阵是完全可以描述2D变换的，现在我们只看由 <code>[a, b][c, d]</code>组成的 2 x 2 矩阵： </p><p><img src="/2018/03/22/css-transform-matrix/22.jpg" alt=""></p><p>我们把 a b c d 四个数字使用默认值替换一下，即：<code>a = 1，b = 0，c = 0，d = 1</code>，如下： </p><p><img src="/2018/03/22/css-transform-matrix/23.jpg" alt=""></p><p>通过之前的介绍，我们在看到这个矩阵的时候，应该知道，第一列的坐标<code>(1, 0)</code> 应该是基向量 i 变换后的坐标，但是基向量 i 在变换前的坐标就是<code>(1, 0)</code>，也就是说没有任何变换，同理，基向量 j 也没有任何变换，所以说，这就是 a b c d 默认值设定为下面代码所示的值的原因： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, <span class="selector-tag">c</span>, <span class="selector-tag">d</span>, <span class="selector-tag">e</span>, <span class="selector-tag">f</span>);</span><br><span class="line">// a b c d 默认值为 1 0 0 1</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(1, 0, 0, 1, <span class="selector-tag">e</span>, <span class="selector-tag">f</span>);</span><br></pre></td></tr></table></figure><p>那么大家想想一下，我们把 a 的值从 1 变为 2 会发生什么？如果把 a 的值从 1 变为 2 那么矩阵如下： </p><p><img src="/2018/03/22/css-transform-matrix/24.jpg" alt=""></p><p>也就是说，基向量 i 的坐标从<code>(1, 0)</code>变成了<code>(2, 0)</code>，这是在干什么？是不是基向量 i 被放大为了原来的二倍？举一个通俗的例子：原本单位长度1代表20px，被放大后单位长度1则代表40px。同样的，当我们把 a 的值从 1 变为 0.5 则意味着把基向量 i 缩小为原来的一半。事实上：在 transform: matrix() 中，修改 a 的值，就是在改变 x 轴方向的缩放比例： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(2, 0, 0, 1, 0, 0);</span><br><span class="line"><span class="comment">/* 等价于 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleX</span>(2);</span><br></pre></td></tr></table></figure><p><br></p><p>相信大家已经知道了，修改 d 的值，就是改变 y 轴的缩放比例： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(1, 0, 0, 4, 0, 0);</span><br><span class="line"><span class="comment">/* 等价于 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">scaleY</span>(4);</span><br></pre></td></tr></table></figure><p>那么旋转要如何修改 matrix 中的值呢？其实，想要知道如何修改 a b c d 的值，只需要知道，<strong>旋转后基向量 i 和 j 的坐标</strong>就可以了，将旋转后的坐标对号填入就可以得到变换矩阵，下面，我们就来看看如何确定旋转后基向量 i 和 j 的坐标。</p><p><br></p><p>我们知道，在 web 开发中的坐标系和数学中的坐标系在正方向的选取上不太一致，在大家所熟悉的坐标系中，正方向的选取如下：</p><p><img src="/2018/03/22/css-transform-matrix/25.jpg" alt=""></p><p>而在 web 开发中，坐标系的正方向选取是这样的： </p><p><img src="/2018/03/22/css-transform-matrix/26.jpg" alt=""></p><p>假设我们将其<strong>顺时针旋转 45 度</strong>，如下图： </p><p><img src="/2018/03/22/css-transform-matrix/27.jpg" alt=""></p><p>假设，上图中我们旋转的是单位向量，那么旋转后单位向量 i 的坐标应该是<code>(cosθ, sinθ)</code>，单位向量 j 的坐标应该是 <code>(-sinθ, cosθ)</code>，所以如果用矩阵表示的话，应该是这样的： </p><p><img src="/2018/03/22/css-transform-matrix/28.jpg" alt=""></p><p>如果写到 matrix 里，自然就是下面这个样子： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(<span class="selector-tag">cos</span>θ, <span class="selector-tag">sin</span>θ, <span class="selector-tag">-sin</span>θ, <span class="selector-tag">cos</span>θ, 0, 0)</span><br></pre></td></tr></table></figure><p>所以，如果我们要顺时针旋转 45 度，下面两种写法是等价的： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Math.cos(Math.PI / 180 * 45) = 0.707106</span></span><br><span class="line"><span class="comment"> * Math.sin(Math.PI / 180 * 45) = 0.707106</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(0<span class="selector-class">.707106</span>, 0<span class="selector-class">.707106</span>, <span class="selector-tag">-0</span><span class="selector-class">.707106</span>, 0<span class="selector-class">.707106</span>, 0, 0)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 等价于 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotate</span>(45<span class="selector-tag">deg</span>);</span><br></pre></td></tr></table></figure><p>通过上面缩放和旋转的例子，我们已经知道了，2 x 2 的矩阵确实能够描述二维空间的变换，这也就是矩阵能够操作空间的原因。在 transform 中，除了缩放(scale)、旋转(rotate) 还有倾斜(skew)，对于倾斜，类似于我们寻找旋转后基向量的坐标一样，你只需要根据倾斜所定义的变换规则，找到基向量变换后的坐标就可以了，实际上倾斜对应如下规则： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(1, <span class="selector-tag">tan</span>(θ<span class="selector-tag">y</span>), <span class="selector-tag">tan</span>(θ<span class="selector-tag">x</span>), 1, 0, 0);</span><br></pre></td></tr></table></figure><p>大家自己拿只笔在纸上画一画应该就能搞清楚倾斜在做什么样子的变换。 </p><p>无论 缩放(scale)、旋转(rotate) 还是倾斜(skew)，他们都不会是原点发生改变，所以使用 a b c d 四个数字组成的矩阵完全可以描述，但是不要忘了，我们还有一个 位移(translate)，这时，就不得不提到 e f 了，我想我不说大家也都知道了，e f 分别代表了 x y 方向的位移，事实也如大家所想： </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(1, 0, 0, 1, 100, 200)</span><br><span class="line"><span class="comment">/* 等价于 */</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(100<span class="selector-tag">px</span>) <span class="selector-tag">translateY</span>(200<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p>至此，transform 使用 3 x 3 矩阵： </p><p><img src="/2018/03/22/css-transform-matrix/29.jpg" alt=""></p><p>来描述二维空间变换的方式，以及是如何做到的我们就算讲完了。 </p><p><br></p><p>除了2D变换，还有3D变换，在 transform 中，使用 4 x 4 的矩阵描述3D变换，但实际上，三维空间的线性变换只需要一个 3 x 3 的矩阵就可以描述了，那么为什么搞了一个 4 x 4矩阵呢？实际上这和我们在将二维空间的变换使用 3 x 3 矩阵的道理是一样的，那就是位移。</p><p>我们来看一下3D变换的 matrix 默认值：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(<span class="selector-tag">a</span>, <span class="selector-tag">b</span>, <span class="selector-tag">c</span>, <span class="selector-tag">d</span>, <span class="selector-tag">e</span>, <span class="selector-tag">f</span>, <span class="selector-tag">g</span>, <span class="selector-tag">h</span>, <span class="selector-tag">i</span>, <span class="selector-tag">j</span>, <span class="selector-tag">k</span>, <span class="selector-tag">l</span>, <span class="selector-tag">m</span>, <span class="selector-tag">n</span>, <span class="selector-tag">o</span>, <span class="selector-tag">p</span>);</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">matrix</span>(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1);</span><br></pre></td></tr></table></figure><p>这十六个数字就是 4 x 4 矩阵的 16 个数值： </p><p><img src="/2018/03/22/css-transform-matrix/30.jpg" alt=""></p><p>如果换成对应数字，是这样的： </p><p><img src="/2018/03/22/css-transform-matrix/31.jpg" alt=""></p><p>类似于我们讲解 2D 变换一样，其中由 </p><p><img src="/2018/03/22/css-transform-matrix/32.jpg" alt=""></p><p>组成的 3 x 3 矩阵用来描述空间的 3D 线性变换，如：<code>rotateX rotateY scaleZ</code> 等等，注意：<code>rotateZ</code> 是 2D 变换哦。</p><p>而 <code>m n o</code> 则分别用来描述位移：<code>translateX translateY translateZ</code>。</p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> matrix </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-transform与坐标系统</title>
      <link href="/2018/03/21/css-transform%E4%B8%8E%E5%9D%90%E6%A0%87%E7%B3%BB%E7%BB%9F/"/>
      <url>/2018/03/21/css-transform%E4%B8%8E%E5%9D%90%E6%A0%87%E7%B3%BB%E7%BB%9F/</url>
      <content type="html"><![CDATA[<h1 id="一、-坐标系统"><a href="#一、-坐标系统" class="headerlink" title="一、 坐标系统"></a>一、 坐标系统</h1><p>我们很熟悉的网页是平面的，一个DOM元素会有一个初始坐标系（initial coordinate system）： </p><p><img src="/2018/03/21/css-transform与坐标系统/bVrVnk.png" alt=""></p><p><strong>每一个DOM元素都有一个这样的初始坐标系。其中，原点位于元素的左上角，z轴指向观察者。</strong>初始坐标系的z轴并不算是三维空间，而是像z-index那样作为参照，决定网页元素的绘制顺序，绘制顺序靠后的元素将覆盖绘制顺序靠前的。 </p><p><br></p><p>在使用transform的时候，情况则有所不同。transform所参照的并不是初始坐标系，而是一个新的坐标系： </p><p><img src="/2018/03/21/css-transform与坐标系统/bVrVnl.png" alt=""></p><p>transform所用的这个坐标系，相比初始坐标系，x、y、z轴的指向都不变，只是原点位置移动到了元素的正中心。<strong>如果想要改变这个坐标系的原点位置，使用transform-origin</strong>。<strong>transform-origin的默认值是50% 50%</strong>，因此，默认情况下，transform坐标系的原点位于元素中心。 </p><p><br></p><a id="more"></a> <h1 id="二、变换函数顺序"><a href="#二、变换函数顺序" class="headerlink" title="二、变换函数顺序"></a>二、变换函数顺序</h1><p>我们都可能像</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">rotateY</span>(45<span class="selector-tag">deg</span>)  <span class="selector-tag">translateX</span>(100<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p>这样使用多个变换函数。这种时候，需要意识到变换函数的顺序。这是因为，<strong>每一个变换函数不仅改变了元素，同时也会改变和元素关联的transform坐标系</strong>，当变换函数依次执行时，<font color="#A52A2A" size="4"><strong>后一个变换函数总是基于前一个变换后的新transform坐标系</strong></font>。 </p><p><br></p><h1 id="三、transform-origin"><a href="#三、transform-origin" class="headerlink" title="三、transform-origin"></a>三、transform-origin</h1><p>transform-origin属性是所有矩阵计算的一个重要依据点 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.anim_image</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transition</span>: all <span class="number">1s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">-moz-transition</span>: all <span class="number">1s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">-o-transition</span>: all <span class="number">1s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">1s</span> ease-in-out;</span><br><span class="line">    <span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.anim_image_top</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(0, 0);</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">Alpha</span>(opacity=0);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.anim_box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anim_image_top</span> , </span><br><span class="line"><span class="selector-class">.anim_box_hover</span> <span class="selector-class">.anim_image_top</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">filter</span>: <span class="built_in">Alpha</span>(opacity=100);</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(1, 1);</span><br><span class="line">    <span class="attribute">-webkit-transform-origin</span>: top right;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.anim_box</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.anim_image_bottom</span>, </span><br><span class="line"><span class="selector-class">.anim_box_hover</span> <span class="selector-class">.anim_image_bottom</span> &#123;</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">scale</span>(0, 0);</span><br><span class="line">    <span class="attribute">-webkit-transform-origin</span>: bottom left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"testBox"</span> <span class="attr">class</span>=<span class="string">"demo anim_box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"anim_image anim_image_top"</span> <span class="attr">src</span>=<span class="string">"/ps6.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"anim_image anim_image_bottom"</span> <span class="attr">src</span>=<span class="string">"/ps4.jpg"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Demo ：<a href="http://www.zhangxinxu.com/study/201011/css3-transition-animate-demo-11.html" target="_blank" rel="noopener">http://www.zhangxinxu.com/study/201011/css3-transition-animate-demo-11.html</a> </p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> transform </tag>
            
            <tag> 坐标系 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-视差滚动效果</title>
      <link href="/2018/03/19/css-%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/"/>
      <url>/2018/03/19/css-%E8%A7%86%E5%B7%AE%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span> &#123;</span><br><span class="line">    <span class="attribute">perspective</span>: <span class="number">2px</span>; </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">600px</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">calc</span>(100vh - 300px); </span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">1280px</span>;</span><br><span class="line">    <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iphone</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute; <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate3D</span>(-50%, -120px, -4px) <span class="built_in">scale</span>(3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.smile</span>, <span class="selector-class">.flower</span>, <span class="selector-class">.music</span>, <span class="selector-class">.pdf</span> &#123; </span><br><span class="line">    <span class="comment">/* 略... */</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"mobile_1_iphone.jpg"</span> <span class="attr">class</span>=<span class="string">"iphone"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"smile"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"flower"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"music"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"pdf"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3D视角示意图"><a href="#3D视角示意图" class="headerlink" title="3D视角示意图"></a>3D视角示意图</h1><p><img src="/2018/03/19/css-视差滚动效果/css3d-edited.png" alt=""></p><p>当我们在屏幕前面<strong>2个单位(perspective: 2px; )</strong>的地方，看屏幕后面<strong>4个单位(transform: translate3D(-50%, -120px, -4px) scale(3);)</strong>的元素，肉眼所见的画面大小只有<strong>实际的1/3</strong>，即所谓的近大远小。此时<strong>scale(3)</strong>让内容放大到原来3倍，正好在平面上看上去好像是原来大小。</p><p><br></p><p>虽然肉眼所见体积似乎是1:1，但是，滚动时候的位移变化还是1:3。网页中的3D就是模拟真实世界的3D效果，因此，也会有这种视差体验。</p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 视差 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js-简单工厂模式</title>
      <link href="/2018/03/18/js-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/18/js-%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="一、工厂模式"><a href="#一、工厂模式" class="headerlink" title="一、工厂模式"></a>一、工厂模式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createBlog</span>(<span class="params">name, url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.url = url;</span><br><span class="line">    obj.sayUrl= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> blog1 = createBlog(<span class="string">'wuyuchang'</span>, <span class="string">'http://www.jb51.net/'</span>);</span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、构造函数模式"><a href="#二、构造函数模式" class="headerlink" title="二、构造函数模式"></a>二、构造函数模式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Blog</span>(<span class="params">name, url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.url = url;</span><br><span class="line">    <span class="keyword">this</span>.alertUrl = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="keyword">this</span>.url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> blog = <span class="keyword">new</span> Blog(<span class="string">'wuyuchang'</span>, <span class="string">'http://www.jb51.net/'</span>);</span><br></pre></td></tr></table></figure><p><br></p><h1 id="三、原型模式"><a href="#三、原型模式" class="headerlink" title="三、原型模式"></a>三、原型模式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Blog</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Blog.prototype.name = <span class="string">'wuyuchang'</span>;</span><br><span class="line"></span><br><span class="line">Blog.prototype.url = <span class="string">'http://tools.jb51.net/'</span>;</span><br><span class="line"></span><br><span class="line">Blog.prototype.friend = [<span class="string">'fr1'</span>, <span class="string">'fr2'</span>, <span class="string">'fr3'</span>, <span class="string">'fr4'</span>];</span><br><span class="line"></span><br><span class="line">Blog.prototype.alertInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name + <span class="keyword">this</span>.url + <span class="keyword">this</span>.friend);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h1 id="四、混合模式（原型模式-构造函数模式）"><a href="#四、混合模式（原型模式-构造函数模式）" class="headerlink" title="四、混合模式（原型模式 + 构造函数模式）"></a>四、混合模式（原型模式 + 构造函数模式）</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Blog</span>(<span class="params">name, url, friend</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.url = url;</span><br><span class="line">    <span class="keyword">this</span>.friend = friend;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Blog.prototype.alertInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.name + <span class="keyword">this</span>.url + <span class="keyword">this</span>.friend);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="五、动态原型模式"><a href="#五、动态原型模式" class="headerlink" title="五、动态原型模式"></a>五、动态原型模式</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Blog</span>(<span class="params">name, url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.url = url;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.alertInfo !== <span class="string">'function'</span>) &#123;</span><br><span class="line"></span><br><span class="line">        Blog.prototype.alertInfo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(thia.name + <span class="keyword">this</span>.url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> blog = <span class="keyword">new</span> Blog(<span class="string">'wuyuchang'</span>, <span class="string">'http://tools.jb51.net'</span>);</span><br></pre></td></tr></table></figure><p>​            </p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js-单例模式</title>
      <link href="/2018/03/18/js-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/18/js-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="单体模式提供了一种将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一变量进行访问。单体模式的优点是："><a href="#单体模式提供了一种将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一变量进行访问。单体模式的优点是：" class="headerlink" title="单体模式提供了一种将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一变量进行访问。单体模式的优点是："></a>单体模式提供了一种将代码组织为一个逻辑单元的手段，这个逻辑单元中的代码可以通过单一变量进行访问。单体模式的优点是：</h4><ul><li><p>可以用来划分命名空间，减少全局变量的数量 </p></li><li><p>使用单体模式可以使代码组织的更为一致，使代码容易阅读和维护 </p></li><li><p>可以被实例化，且实例化一次</p></li></ul><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单体模式</span></span><br><span class="line"><span class="keyword">var</span> CreateDiv = <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.html = html;</span><br><span class="line">    <span class="keyword">this</span>.init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CreateDiv.prototype.init = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">    div.innerHTML = <span class="keyword">this</span>.html;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理实现单体模式</span></span><br><span class="line"><span class="keyword">var</span> ProxyMode = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">html</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> CreateDiv(<span class="string">"我来测试下"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> ProxyMode(<span class="string">"aaa"</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> ProxyMode(<span class="string">"bbb"</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>格式化上下文-BFC-IFC</title>
      <link href="/2018/03/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87-BFC-IFC/"/>
      <url>/2018/03/17/%E6%A0%BC%E5%BC%8F%E5%8C%96%E4%B8%8A%E4%B8%8B%E6%96%87-BFC-IFC/</url>
      <content type="html"><![CDATA[<p>想要理解<strong>BFC</strong>与<strong>IFC</strong>，首先要理解另外两个概念：<strong>Box</strong> 和 <strong>FC</strong>（即 formatting context） </p><p><br></p><h1 id="一、Box"><a href="#一、Box" class="headerlink" title="一、Box"></a>一、Box</h1><p>一个页面是由很多个 Box 组成的，元素的类型和 display 属性决定了这个 Box 的类型。不同类型的 Box，会参与不同的 Formatting Context。 </p><ul><li><code>Block level</code>的box会参与形成<strong>BFC</strong>，比如display值为<code>block</code>，<code>list-item</code>，<code>table</code>的元素。</li><li><code>Inline level</code>的box会参与形成<strong>IFC</strong>，比如display值为<code>inline</code>，<code>inline-table</code>，<code>inline-block</code>的元素。</li></ul><p><br></p><h1 id="二、FC（Formatting-Context）"><a href="#二、FC（Formatting-Context）" class="headerlink" title="二、FC（Formatting Context）"></a>二、FC（Formatting Context）</h1><p>它是W3C CSS2.1规范中的一个概念，定义的是页面中的一块渲染区域，并且有一套渲染规则，它决定了其子元素将如何定位，以及和其他元素的关系和相互作用。 常见的Formatting Context 有：</p><ul><li>Block Formatting Context（BFC | 块级格式化上下文）</li><li>Inline Formatting Context（IFC |行内格式化上下文）</li></ul><p><br></p><h1 id="三、IFC布局规则"><a href="#三、IFC布局规则" class="headerlink" title="三、IFC布局规则"></a>三、IFC布局规则</h1><ul><li>在<strong>行内格式化上下文</strong>中，框(boxes)一个接一个地<strong>水平排列</strong>，<strong>起点是<code>包含块</code>的顶部</strong></li><li>水平方向上的 <code>margin</code>，<code>border</code> 和 <code>padding</code>在框之间得到<strong>保留</strong></li><li>框在垂直方向上可以以<strong>不同的方式对齐</strong>：它们的顶部或底部对齐，或根据其中文字的基线对齐</li><li><font color="#A52A2A" size="4">包含那些框的<strong>长方形区域</strong>，会形成一行，叫做<code>行框</code> </font></li></ul><p><br></p><h1 id="四、BFC布局规则"><a href="#四、BFC布局规则" class="headerlink" title="四、BFC布局规则"></a>四、BFC布局规则</h1><ul><li><strong>内部的Box</strong>会一个接一个地<strong>垂直放置</strong></li><li>每个元素的左外边缘（margin-left)， 与包含块的左边（contain box left）相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。除非这个元素自己形成了一个新的BFC。</li><li><strong>BFC的区域不会与float box<code>重叠</code></strong>。</li><li>BFC就是页面上的一个隔离的<strong>独立容器</strong>，容器里面的子元素<strong>不会影响到外面的元素</strong>。反之也如此。</li><li><strong>计算BFC的高度时，浮动子元素也参与计算</strong></li></ul><p><br></p><h1 id="五、形成一个BFC"><a href="#五、形成一个BFC" class="headerlink" title="五、形成一个BFC"></a>五、形成一个BFC</h1><p>下列方式会创建<strong>块格式化上下文</strong>：</p><ul><li><strong>根元素</strong>或<strong>包含根元素的元素</strong></li><li><strong>浮动元素</strong>（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float" target="_blank" rel="noopener"><code>float</code></a> 不是 <code>none</code>）</li><li><strong>绝对定位元素</strong>（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position" target="_blank" rel="noopener"><code>position</code></a> 为 <code>absolute</code> 或 <code>fixed</code>）</li><li><strong>行内块元素</strong>（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a> 为 <code>inline-block</code>）</li><li><strong>表格单元格</strong>（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a>为 <code>table-cell</code>，HTML表格单元格默认为该值）</li><li><strong>表格标题</strong>（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a> 为 <code>table-caption</code>，HTML表格标题默认为该值）</li><li>匿名表格单元格元素（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a>为 <code>table、`</code>table-row<code>、</code>table-row-group、<code>table-header-group、</code>table-footer-group<code>（分别是HTML table、row、tbody、thead、tfoot的默认属性）或</code>inline-table`）</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/overflow" target="_blank" rel="noopener"><code>overflow</code></a> 值不为 <code>visible</code> 的块元素</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a> 值为 <code>flow-root</code> 的元素</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/contain" target="_blank" rel="noopener"><code>contain</code></a> 值为 <code>layout</code>、<code>content</code>或 <code>strict</code> 的元素</li><li><strong>弹性元素</strong>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a>为 <code>flex</code> 或 <code>inline-flex</code>元素的<strong>直接子元</strong>素）</li><li><strong>网格元素</strong>（<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/display" target="_blank" rel="noopener"><code>display</code></a>为 <code>grid</code> 或 <code>inline-grid</code> 元素的<strong>直接子元素</strong>）</li><li><strong>多列容器</strong>（元素的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-count" target="_blank" rel="noopener"><code>column-count</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/column-width" target="_blank" rel="noopener"><code>column-width</code></a> 不为 <code>auto，包括 `</code>column-count<code>为</code>1`）</li><li><code>column-span</code> 为 <code>all</code> 的元素始终会创建一个新的BFC，即使该元素没有包裹在一个多列容器中（<a href="https://github.com/w3c/csswg-drafts/commit/a8634b96900279916bd6c505fda88dda71d8ec51" target="_blank" rel="noopener">标准变更</a>，<a href="https://bugs.chromium.org/p/chromium/issues/detail?id=709362" target="_blank" rel="noopener">Chrome bug</a>）</li></ul><p><br></p><a id="more"></a> <h1 id="六、外边距合并"><a href="#六、外边距合并" class="headerlink" title="六、外边距合并"></a>六、外边距合并</h1><p><strong>块级元素</strong>的<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-top" target="_blank" rel="noopener">上外边距</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-bottom" target="_blank" rel="noopener">下外边距</a>有时会合并（或折叠）为一个外边距，其大小取其中的最大者，这种行为称为<strong>外边距折叠</strong>（margin collapsing） </p><p>注：<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float" target="_blank" rel="noopener">浮动元素</a>和<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/position#absolute" target="_blank" rel="noopener">绝对定位元素</a>的外边距不会折叠（触发了 <a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">块格式化上下文 Block Formatting Context， BFC</a>） </p><p><br></p><p>下面列出了会发生外边距折叠的三种基本情况：</p><ul><li><p>相邻元素之间</p><p>毗邻的两个元素之间的外边距会折叠（除非后一个元素需要<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear" target="_blank" rel="noopener">清除之前的浮动</a>）。</p></li></ul><ul><li><p><strong>父元素</strong>与其<strong>第一个</strong>或<strong>最后一个</strong>子元素之间</p><p>如果在父元素与其第一个子元素之间不存在<strong>边框、内边距、行内内容</strong>，也没有创建<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">块格式化上下文</a>、或者<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/clear" target="_blank" rel="noopener">清除浮动</a>将两者的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-top" target="_blank" rel="noopener"><code>margin-top</code></a> 分开；</p><p>或者在父元素与其最后一个子元素之间不存在<strong>边框、内边距、行内内容</strong>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height" target="_blank" rel="noopener"><code>height</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-height" target="_blank" rel="noopener"><code>min-height</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/max-height" target="_blank" rel="noopener"><code>max-height</code></a>将两者的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-bottom" target="_blank" rel="noopener"><code>margin-bottom</code></a> 分开，那么这两对外边距之间会产生折叠。此时子元素的外边距会“溢出”到父元素的外面。</p></li></ul><ul><li><p>空的块级元素</p><p>如果一个块级元素中不包含任何内容，并且在其 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-top" target="_blank" rel="noopener"><code>margin-top</code></a> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/margin-bottom" target="_blank" rel="noopener"><code>margin-bottom</code></a> 之间没有<strong>边框、内边距、行内内容</strong>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/height" target="_blank" rel="noopener"><code>height</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/min-height" target="_blank" rel="noopener"><code>min-height</code></a> 将两者分开，则该元素的上下外边距会折叠。</p></li></ul><p><br></p><h1 id="七、BFC用处"><a href="#七、BFC用处" class="headerlink" title="七、BFC用处"></a>七、BFC用处</h1><h4 id="1-清除浮动"><a href="#1-清除浮动" class="headerlink" title="1. 清除浮动"></a>1. 清除浮动</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span>1<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span>2<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">2px</span> solid yellow;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，由于子元素都是浮动的，受浮动影响，边框为黄色的父元素的高度塌陷了。 </p><p><img src="/2018/03/17/格式化上下文-BFC-IFC/1.png" alt=""></p><p>解决方案：为 <code>.wrap</code> 加上 <code>overflow: hidden</code>;使其形成<code>BFC</code>，根据BFC规则第六条，计算高度时就会计算float的元素的高度，达到清除浮动影响的效果。 </p><p><img src="/2018/03/17/格式化上下文-BFC-IFC/2.png" alt=""></p><h4 id="2-防止垂直margin合并"><a href="#2-防止垂直margin合并" class="headerlink" title="2. 防止垂直margin合并"></a>2. 防止垂直margin合并</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">section</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bottom</span> &#123;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2018/03/17/格式化上下文-BFC-IFC/3.png" alt=""></p><p>可以看到，明明.top和.bottom中间加起来有200px的margin值，但是我们只能看到100px。这是因为他们的外边距相遇发生了合并。</p><p>怎样解决：为其中一个元素的外面包裹一层元素。并为这个外层元素设置 overflow: hidden;，使其形成BFC。因为BFC内部是一个独立的容器，所以不会与外部相互影响，可以防止margin合并。</p><p><img src="/2018/03/17/格式化上下文-BFC-IFC/4.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"top"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"bottom"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-布局：自适应两栏布局"><a href="#2-布局：自适应两栏布局" class="headerlink" title="2. 布局：自适应两栏布局"></a>2. 布局：自适应两栏布局</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span><span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span>我是好多好多文字会换行的那种蛤蛤蛤蛤蛤蛤蛤蛤蛤蛤蛤蛤蛤<span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">aside</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: yellow;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到右侧元素的一部分跑到了左侧元素下方</p><p><img src="/2018/03/17/格式化上下文-BFC-IFC/5.png" alt=""></p><p>注：</p><ul><li><p>float元素的特点：<strong>背景重叠</strong>，<strong>文字环绕</strong></p></li><li><p>float元素和main发生了重叠，如果float元素背景色为透明，可以看到main的背景色。</p></li></ul><p><br></p><p>解决方案：为main设置 overflow: hidden; 触发main元素的BFC，根据规则第4、5条，BFC的区域是独立的，不会与页面其他元素相互影响，且不会与float元素<code>重叠</code>，因此就可以形成两列自适应布局 </p><p><img src="/2018/03/17/格式化上下文-BFC-IFC/6.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> BFC </tag>
            
            <tag> IFC </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js-观察者模式</title>
      <link href="/2018/03/17/js-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2018/03/17/js-%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>观察者模式，定义对象间的一种<font color="#A52A2A" size="4"><strong>一对多的依赖关系</strong></font>，<strong>当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知</strong>。事实上，只要你曾经在DOM节点上绑定过事件函数，那么你就曾经使用过观察者模式了 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="number">2</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>但是这只是对观察者模式最简单的使用，在很多场景下我们经常会实现一些自定义事件来满足我们的需求。 </p><p><br></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">举个例子：</span><br><span class="line">你去一家公司应聘，谈了一顿下来，hr跟你说:"好了，你回去等通知吧！"。</span><br><span class="line">这个时候，把自己的手机号留给hr，然后等他给你打电话。</span><br><span class="line">那么这个时候，hr就相当于一个发布者，而你就是一个订阅者啦！</span><br></pre></td></tr></table></figure><p><br></p><p>那么一个简单的观察者模式应该怎么实现呢？ </p><ol><li>要指定一个发布者；</li><li>给发布者添加一个缓存列表，用于存放回调函数以便通知订阅者；</li><li>最后发布消息的时候，发布者会遍历这个缓存列表，依次触发订阅者回调函数；</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = &#123;&#125;; <span class="comment">//发布者（hr）</span></span><br><span class="line">event.clietList = []; <span class="comment">//发布者的缓存列表（应聘者列表）</span></span><br><span class="line"></span><br><span class="line">event.listen = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123; <span class="comment">//增加订阅者函数</span></span><br><span class="line">    <span class="keyword">this</span>.clietList.push(fn);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">event.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//发布消息函数</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.clietList.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> fn = <span class="keyword">this</span>.clietList[i];</span><br><span class="line">        fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">event.listen(<span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123; <span class="comment">//某人订阅了这个消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正式上班时间：'</span> + time);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">event.trigger(<span class="string">'2016/10'</span>, yes); <span class="comment">//发布消息</span></span><br><span class="line"><span class="comment">//输出 正式上班时间:2016/10</span></span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <p>到这里，我们已经实现了一个最简单的观察者模式了！ </p><p>但是上面的函数其实存在一个问题，那就是发布者没办法选择自己要发布的消息类型！比如这家公司同时在招php，web前端，如果使用上面的函数就没办法区分职位了！只能一次性把全部订阅者都发送一遍消息。</p><p>对上面的代码进行改写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = &#123;&#125;; <span class="comment">//发布者（hr）</span></span><br><span class="line">event.clietList = []; <span class="comment">//发布者的缓存列表（应聘者列表）</span></span><br><span class="line"></span><br><span class="line">event.listen = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123; <span class="comment">//增加订阅者函数</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">this</span>.clietList[key]) &#123;</span><br><span class="line">        <span class="keyword">this</span>.clietList[key] = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.clietList[key].push(fn);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">event.trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//发布消息函数</span></span><br><span class="line">    <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">    fns = <span class="keyword">this</span>.clietList[key];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fns.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> fn = fns[i];</span><br><span class="line">        fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">event.listen(<span class="string">'web前端'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123; <span class="comment">//小强订阅了这个消息。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'姓名：小强'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正式上班时间：'</span> + time);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">event.listen(<span class="string">'php'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123; <span class="comment">//大大强订阅了这个消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'姓名：大大强'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正式上班时间：'</span> + time);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发布者发布消息</span></span><br><span class="line">event.trigger(<span class="string">'web前端'</span>, <span class="string">'2016/10'</span>); <span class="comment">//姓名：小强   正式上班时间：2016/10  </span></span><br><span class="line">event.trigger(<span class="string">'php'</span>, <span class="string">'2016/15'</span>); <span class="comment">//姓名：大大强   正式上班时间：2016/15</span></span><br></pre></td></tr></table></figure><p>通过添加了一个key，我们实现了对职位的判断。有了订阅事件，我们怎么能少了取消订阅事件呢？ </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">event.remove = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fns = <span class="keyword">this</span>.clietList[key];</span><br><span class="line">    <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!fn) &#123; <span class="comment">//如果没有传入fn回调函数，直接取消key对应消息的所有订阅</span></span><br><span class="line">        <span class="keyword">this</span>.clietList[key] = [];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fns.length; i++) &#123; <span class="comment">//遍历回调函数列表</span></span><br><span class="line">            <span class="keyword">var</span> _fn = fns[i];</span><br><span class="line">            <span class="keyword">if</span> (_fn === fn) &#123;</span><br><span class="line">                fns.splice(i, <span class="number">1</span>); <span class="comment">//删除订阅者的回调函数</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这时候必须指定回调函数，否则无法在remove函数中进行对比删除。</span></span><br><span class="line">event.listen(<span class="string">'web前端'</span>, fn1 = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123; <span class="comment">//小强订阅了这个消息。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'姓名：小强'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正式上班时间：'</span> + time);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">event.listen(<span class="string">'web前端'</span>, fn2 = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>) </span>&#123; <span class="comment">//大大强订阅了这个消息</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'姓名：大大强'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'正式上班时间：'</span> + time);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">event.remove(<span class="string">'web前端'</span>, fn1);</span><br><span class="line"><span class="comment">//发布者发布消息</span></span><br><span class="line"></span><br><span class="line">event.trigger(<span class="string">'web前端'</span>, <span class="string">'2016/10'</span>);</span><br><span class="line"><span class="comment">//输出 姓名：大大强   正式上班时间：2016/10</span></span><br></pre></td></tr></table></figure><p>对上面代码进行改进，创建一个全局对象来实现观察者模式，使用闭包实现私有变量，仅暴露必须的API给使用者： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> event = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> clietList = []; <span class="comment">//发布者的缓存列表（应聘者列表）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> listen = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123; <span class="comment">//增加订阅者函数</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.clietList[key]) &#123;</span><br><span class="line">            <span class="keyword">this</span>.clietList[key] = [];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.clietList[key].push(fn);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> trigger = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//发布消息函数</span></span><br><span class="line">        <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>),</span><br><span class="line">            fns = <span class="keyword">this</span>.clietList[key];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fns.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> fn = fns[i];</span><br><span class="line">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> remove = <span class="function"><span class="keyword">function</span>(<span class="params">key, fn</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> fns = <span class="keyword">this</span>.clietList[key];</span><br><span class="line">        <span class="keyword">if</span> (!fns) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!fn) &#123; <span class="comment">//如果没有传入fn回调函数，直接取消key对应消息的所有订阅</span></span><br><span class="line">            <span class="keyword">this</span>.clietList[key] = [];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; fns.length; i++) &#123; <span class="comment">//遍历回调函数列表</span></span><br><span class="line">                <span class="keyword">var</span> _fn = fns[i];</span><br><span class="line">                <span class="keyword">if</span> (_fn === fn) &#123;</span><br><span class="line">                    fns.splice(i, <span class="number">1</span>); <span class="comment">//删除订阅者的回调函数</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        listen: listen,</span><br><span class="line">        trigger: trigger,</span><br><span class="line">        remove: remove</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 观察者模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-Promise-all-race</title>
      <link href="/2018/03/13/JS-Promise-all-race/"/>
      <url>/2018/03/13/JS-Promise-all-race/</url>
      <content type="html"><![CDATA[<h1 id="一、Promise-all"><a href="#一、Promise-all" class="headerlink" title="一、Promise.all()"></a>一、Promise.all()</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>p的状态由p1、p2、p3决定，分成两种情况 :</p><ul><li><p><strong>只有p1、p2、p3的状态都变成fulfilled，p的状态才会变成fulfilled</strong>，此时p1、p2、p3的<strong>返回值组成一个数组</strong>，传递给p的回调函数。 </p></li><li><p><strong>只要p1、p2、p3之中有一个被rejected，p的状态就变成rejected</strong>，此时第一个被reject的实例的返回值，会传递给p的回调函数。</p></li></ul><p><br></p><h1 id="三、Promise-race"><a href="#三、Promise-race" class="headerlink" title="三、Promise.race()"></a>三、Promise.race()</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3]);</span><br></pre></td></tr></table></figure><p>只要p1、p2、p3之中有一个实例<strong>率先改变状态，p的状态就跟着改变</strong>。那个率先改变的 Promise 实例的返回值，就传递给p的回调函数 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([</span><br><span class="line">    fetch(<span class="string">'/resource-that-may-take-a-while'</span>),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'request timeout'</span>)), <span class="number">5000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line">p.then(<span class="built_in">console</span>.log).catch(<span class="built_in">console</span>.error);</span><br></pre></td></tr></table></figure><p>如果 5 秒之内fetch方法无法返回结果，变量p的状态就会变为rejected，从而触发catch方法指定的回调函数。 </p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> promise </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-几点原则</title>
      <link href="/2018/03/10/css-%E5%87%A0%E7%82%B9%E5%8E%9F%E5%88%99/"/>
      <url>/2018/03/10/css-%E5%87%A0%E7%82%B9%E5%8E%9F%E5%88%99/</url>
      <content type="html"><![CDATA[<h1 id="1-不要写不需要的样式定义"><a href="#1-不要写不需要的样式定义" class="headerlink" title="1.不要写不需要的样式定义"></a>1.不要写不需要的样式定义</h1><ul><li>减少CSS文件的长度，以便浏览。</li><li>明确你的CSS类需要做什么，而不是定义一堆已经产生的垃圾。</li></ul><p><br></p><h1 id="2-将CSS看作可重用组件"><a href="#2-将CSS看作可重用组件" class="headerlink" title="2.将CSS看作可重用组件"></a>2.将CSS看作可重用组件</h1><p>定义可重用的CSS和组件以供自己使用，则可以减少很多复杂性，重用类的作用：</p><ul><li>确保你的设计风格在不同的页面之间保持一致</li><li>提高编写CSS效率</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hide</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text-center</span> &#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.padding-0</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.padding-xxs</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.padding-xs</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.padding-sm</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.padding-md</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">30px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.padding-lg</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.padding-xl</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.padding-xxl</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h1 id="3-除非绝对需要，否则避免嵌套"><a href="#3-除非绝对需要，否则避免嵌套" class="headerlink" title="3.除非绝对需要，否则避免嵌套"></a>3.除非绝对需要，否则避免嵌套</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">        <span class="selector-tag">color</span>: <span class="selector-tag">black</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.link--red</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="4-利用BEM防止嵌套"><a href="#4-利用BEM防止嵌套" class="headerlink" title="4.利用BEM防止嵌套"></a>4.利用BEM防止嵌套</h1><p>防止过度嵌套的一个策略是名为<a href="https://link.zhihu.com/?target=https%3A//csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/" target="_blank" rel="noopener">BEM（Block Element Modifier）</a>的命名策略 </p><p>BEM的意思就是块（block）、元素（element）、修饰符（modifier），是由Yandex团队提出的一种CSS Class 命名方法。 </p><p>类似于：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.block</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.block__element</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.block--modifier</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.block__element--modifie</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**或者*/</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.type-block</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.type-block__elementr</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.type-block_modifier</span>&#123;&#125;</span><br><span class="line"><span class="selector-class">.type-block__element_modifier</span>&#123;&#125;</span><br></pre></td></tr></table></figure><ul><li>block：封装一个<strong>独立的实体</strong>，它本身是有意义的。尽管块可以嵌套并相互交互，但在语义上它们保持平等; 没有优先级或层次结构 。</li><li>块的一部分，<strong>没有独立的含义</strong>。任何元素都在语义上与其块相关联。 </li><li>在块或元素上的标志。使用它们来改变<strong>外观，行为或状态</strong>。 </li></ul><p><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">”profile”</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”person.jpg”</span> <span class="attr">class</span>=<span class="string">”profile__photo”/</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.profile</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: white;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.profile__photo</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="5-只使用-inportant-作为最后的手段"><a href="#5-只使用-inportant-作为最后的手段" class="headerlink" title="5.只使用 inportant 作为最后的手段"></a>5.只使用 inportant 作为最后的手段</h1>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 原则 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>video与audio对象</title>
      <link href="/2018/03/09/video%E4%B8%8Eaudio%E5%AF%B9%E8%B1%A1/"/>
      <url>/2018/03/09/video%E4%B8%8Eaudio%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<h1 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h1><table><thead><tr><th><a href="http://www.runoob.com/jsref/prop-video-autoplay.html" target="_blank" rel="noopener">autoplay</a></th><th>设置或返回是否在就绪（加载完成）后随即播放视频</th></tr></thead><tbody><tr><td><a href="http://www.runoob.com/jsref/prop-video-buffered.html" target="_blank" rel="noopener">buffered</a></td><td>返回表示视频已缓冲部分的 TimeRanges 对象</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-controls.html" target="_blank" rel="noopener">controls</a></td><td>设置或返回视频是否应该显示控件（比如播放/暂停等）</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-currentsrc.html" target="_blank" rel="noopener">currentSrc</a></td><td>返回当前视频的 URL</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-src.html" target="_blank" rel="noopener">src</a></td><td>设置或返回视频的 src 属性的值</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-currenttime.html" target="_blank" rel="noopener">currentTime</a></td><td>设置或返回视频中的当前播放位置（以秒计）</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-duration.html" target="_blank" rel="noopener">duration</a></td><td>返回视频的长度（以秒计）</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-defaultplaybackrate.html" target="_blank" rel="noopener">defaultPlaybackRate</a></td><td>设置或返回视频的默认播放速度</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-playbackrate.html" target="_blank" rel="noopener">playbackRate</a></td><td>设置或返回视频播放的速度</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-ended.html" target="_blank" rel="noopener">ended</a></td><td>返回视频的播放是否已结束</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-height.html" target="_blank" rel="noopener">height</a></td><td>设置或返回视频的 height 属性的值</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-width.html" target="_blank" rel="noopener">width</a></td><td>设置或返回视频的 width 属性的值</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-loop.html" target="_blank" rel="noopener">loop</a></td><td>设置或返回视频是否应在结束时再次播放</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-mediagroup.html" target="_blank" rel="noopener">mediaGroup</a></td><td>设置或返回视频所属媒介组合的名称</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-muted.html" target="_blank" rel="noopener">muted</a></td><td>设置或返回是否关闭声音</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-volume.html" target="_blank" rel="noopener">volume</a></td><td>设置或返回视频的音量</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-networkstate.html" target="_blank" rel="noopener">networkState</a></td><td>返回视频的当前网络状态</td></tr><tr><td><a href="http://www.runoob.com/jsref/prop-video-readystate.html" target="_blank" rel="noopener">readyState</a></td><td>返回视频当前的就绪状态</td></tr><tr><td><a href="http://www.runoob.com/jsref/met-video-load.html" target="_blank" rel="noopener">load()</a></td><td>重新加载视频元素</td></tr><tr><td><a href="http://www.runoob.com/jsref/met-video-play.html" target="_blank" rel="noopener">play()</a></td><td>开始播放视频</td></tr><tr><td><a href="http://www.runoob.com/jsref/met-video-pause.html" target="_blank" rel="noopener">pause()</a></td><td>暂停当前播放的视频</td></tr></tbody></table>]]></content>
      
      
        <tags>
            
            <tag> video </tag>
            
            <tag> audio </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html-meta</title>
      <link href="/2018/03/07/html-meta/"/>
      <url>/2018/03/07/html-meta/</url>
      <content type="html"><![CDATA[<h1 id="一、name属性"><a href="#一、name属性" class="headerlink" title="一、name属性"></a>一、name属性</h1><p><code>name</code><strong>属性</strong>主要用于描述网页，与之对应的<strong>属性值</strong>为<code>content</code></p><p>content中的内容是对name填入类型的具体描述，便于搜索引擎查找以及分类信息</p><p>meta标签中name属性语法格式是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"参数"</span> <span class="attr">content</span>=<span class="string">"具体的描述"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="A-keywords-关键字"><a href="#A-keywords-关键字" class="headerlink" title="A. keywords(关键字)"></a>A. keywords(关键字)</h4><p>说明：用于告诉搜索引擎，你网页的关键字</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"keywords"</span> <span class="attr">content</span>=<span class="string">"Lxxyx,博客，文科生，前端"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="B-description-网站内容的描述"><a href="#B-description-网站内容的描述" class="headerlink" title="B. description(网站内容的描述)"></a>B. description(网站内容的描述)</h4><p>说明：用于告诉搜索引擎，你网站的主要内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"description"</span> <span class="attr">content</span>=<span class="string">"文科生，热爱前端与编程。目前大二，这是我的前端博客"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="C-viewport-移动端的窗口"><a href="#C-viewport-移动端的窗口" class="headerlink" title="C. viewport(移动端的窗口)"></a>C. viewport(移动端的窗口)</h4><p>说明：这个属性常用于设计移动端网页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h4 id="D-robots-定义搜索引擎爬虫的索引方式"><a href="#D-robots-定义搜索引擎爬虫的索引方式" class="headerlink" title="D. robots(定义搜索引擎爬虫的索引方式)"></a>D. robots(定义搜索引擎爬虫的索引方式)</h4><p>说明：robots用来告诉爬虫哪些页面需要索引，哪些页面不需要索引。</p><p>content的参数有<code>all</code>,<code>none</code>,<code>index</code>,<code>noindex</code>,<code>follow</code>,<code>nofollow</code>。默认是<code>all</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"none"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体参数如下：</p><ol><li>none : 搜索引擎将忽略此网页，等价于noindex，nofollow。</li><li>noindex      : 搜索引擎不索引此网页。</li><li>nofollow:      搜索引擎不继续通过此网页的链接索引搜索其它的网页。</li><li>all :      搜索引擎将索引此网页与继续通过此网页的链接索引，等价于index，follow。</li><li>index      : 搜索引擎索引此网页。</li><li>follow      : 搜索引擎继续通过此网页的链接索引搜索其它的网页。</li></ol><p><br></p><h4 id="E-author-作者"><a href="#E-author-作者" class="headerlink" title="E. author(作者)"></a>E. author(作者)</h4><p>说明：用于标注网页作者</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"author"</span> <span class="attr">content</span>=<span class="string">"Lxxyx,841380530@qq.com"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="F-generator-网页制作软件"><a href="#F-generator-网页制作软件" class="headerlink" title="F. generator(网页制作软件)"></a>F. generator(网页制作软件)</h4><p>说明：用于标明网页是什么软件做的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"generator"</span> <span class="attr">content</span>=<span class="string">"Sublime Text3"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="G-copyright-版权"><a href="#G-copyright-版权" class="headerlink" title="G. copyright(版权)"></a>G. copyright(版权)</h4><p>说明：用于标注版权信息</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"copyright"</span> <span class="attr">content</span>=<span class="string">"Lxxyx"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="H-revisit-after-搜索引擎爬虫重访时间"><a href="#H-revisit-after-搜索引擎爬虫重访时间" class="headerlink" title="H. revisit-after(搜索引擎爬虫重访时间)"></a>H. revisit-after(搜索引擎爬虫重访时间)</h4><p>说明：如果页面不是经常更新，为了减轻搜索引擎爬虫对服务器带来的压力，可以设置一个爬虫的重访时间。</p><p>如果重访时间过短，爬虫将按它们定义的默认时间来访问。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"revisit-after"</span> <span class="attr">content</span>=<span class="string">"7 days"</span> &gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="I-renderer-双核浏览器渲染方式"><a href="#I-renderer-双核浏览器渲染方式" class="headerlink" title="I. renderer(双核浏览器渲染方式)"></a>I. renderer(双核浏览器渲染方式)</h4><p>说明：renderer是为双核浏览器准备的，用于指定双核浏览器默认以何种方式渲染页面。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"webkit"</span>&gt;</span> //默认webkit内核</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"ie-comp"</span>&gt;</span> //默认IE兼容模式</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"renderer"</span> <span class="attr">content</span>=<span class="string">"ie-stand"</span>&gt;</span> //默认IE标准模式</span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、-http-equiv属性"><a href="#二、-http-equiv属性" class="headerlink" title="二、 http-equiv属性"></a>二、 http-equiv属性</h1><p>http-equiv传回一些有用的信息，以帮助浏览器正确和精确地显示网页内容 </p><p>meta标签中http-equiv属性语法格式是：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"参数"</span> <span class="attr">content</span>=<span class="string">"具体的描述"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="A-content-Type-设定网页字符集"><a href="#A-content-Type-设定网页字符集" class="headerlink" title="A. content-Type(设定网页字符集)"></a>A. content-Type(设定网页字符集)</h4><p>说明：用于设定网页字符集，便于浏览器解析与渲染页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8"</span>&gt;</span>  //旧的HTML，不推荐</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span> //HTML5设定网页字符集的方式，推荐使用UTF-8</span><br></pre></td></tr></table></figure><p><br></p><h4 id="B-X-UA-Compatible-浏览器采取何种版本渲染当前页面"><a href="#B-X-UA-Compatible-浏览器采取何种版本渲染当前页面" class="headerlink" title="B. X-UA-Compatible(浏览器采取何种版本渲染当前页面)"></a>B. X-UA-Compatible(浏览器采取何种版本渲染当前页面)</h4><p>说明：用于告知浏览器以何种版本来渲染页面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//如果安装了GCF插件，则使用GCF来渲染页面，否则使用最高版本的IE内核进行渲染</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>注：</p><ul><li><code>http-equiv=”X-UA-Compatible”</code>是<code>IE8</code>的专用标记，是用来指定<code>IE8</code>浏览器模<strong>拟某个特定版本IE浏览器的渲染方式</strong>，以此来解决IE浏览器的兼容问题。 </li><li><code>X-UA-Compatible</code> 中的<code>IE=edge</code>指令，可以让IE或者调用IE内核的浏览器，使用<strong>标准模式</strong>渲染网页，注意这里和“Edge浏览器”无关，只是恰巧重名罢了。</li><li><code>Google Chrome Frame</code>(谷歌内嵌浏览器框架GCF)：使用的是Google Chrome浏览器内核来渲染，而且支持IE6、7、8等多个版本的IE浏览器 </li></ul><table><thead><tr><th>X-UA-Compatible值</th><th>说明</th></tr></thead><tbody><tr><td>IE=5</td><td>让浏览器使用Quirks mode来显示，实际上是使用Internet Explorer 7 的 Quirks 模式来显示内容，这个模式和IE5非常相似。</td></tr><tr><td>IE=edge</td><td>这个设置是让IE使用当前的最高版本进行文档的解析，官方文档指明，edge模式仅适用在测试环境，不建议在生产环境中使用</td></tr><tr><td>IE=7</td><td>使用标准IE7来处理</td></tr><tr><td>IE=EmulateIE7</td><td>模拟IE7来处理，遵循 &lt;!DOCTYPE&gt; 指令，如果文档有当前有一个合法的&lt;!DOCTYPE&gt;，就使用IE7模式，否者使用Quirks模式（Internet Explorer 5 Quirks），对于大部分网站来说，这是首选的兼容性模式</td></tr><tr><td>IE=8</td><td>标准IE8</td></tr><tr><td>IE=EmulateIE8</td><td>模拟IE8，遵循 &lt;!DOCTYPE&gt; 指令，参照IE=EmulateIE7说明</td></tr><tr><td>IE=9</td><td>标准IE9</td></tr><tr><td>IE=EmulateIE9</td><td>模拟IE9，遵循 &lt;!DOCTYPE&gt; 指令，参照IE=EmulateIE7说明</td></tr><tr><td>chrome=1</td><td>强制使用Chrome，需要IE下Chrome插件支持</td></tr><tr><td>IE=EmulateIE10</td><td>模拟IE10</td></tr><tr><td>IE=10</td><td>标准IE10，遵循 &lt;!DOCTYPE&gt; 指令，参照IE=EmulateIE7说明</td></tr></tbody></table><p><br></p><h4 id="C-cache-control-指定请求和响应遵循的缓存机制"><a href="#C-cache-control-指定请求和响应遵循的缓存机制" class="headerlink" title="C. cache-control(指定请求和响应遵循的缓存机制)"></a>C. cache-control(指定请求和响应遵循的缓存机制)</h4><p>说明：指导浏览器如何缓存某个响应以及缓存多长时间</p><p><img src="/2018/03/07/html-meta/D:/littleDemo\blogs\source\_posts\html-meta\1.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"cache-control"</span> <span class="attr">content</span>=<span class="string">"no-cache"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>共有以下几种用法：</p><ul><li><p>no-cache:      先发送请求，与服务器确认该资源是否被更改，如果未被更改，则使用缓存。 </p></li><li><p>no-store:      不允许缓存，每次都要去服务器上，下载完整的响应。（安全措施） </p></li><li><p>public      : 缓存所有响应，但并非必须。因为max-age也可以做到相同效果 </p></li><li><p>private      : 只为单个用户缓存，因此不允许任何中继进行缓存。 </p></li><li><p>maxage      : 表示当前请求开始，该响应在多久内能被缓存和重用，而不去服务器重新请求。</p></li></ul><p>例如：max-age=60表示响应可以再缓存和重用 60 秒。</p><p><br></p><h4 id="D-expires-网页到期时间"><a href="#D-expires-网页到期时间" class="headerlink" title="D. expires(网页到期时间)"></a>D. expires(网页到期时间)</h4><p>说明:用于设定网页的到期时间，过期后网页必须到服务器上重新传输。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"expires"</span> <span class="attr">content</span>=<span class="string">"Sunday 26 October 2016 01:00 GMT"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="E-refresh-自动刷新并指向某页面"><a href="#E-refresh-自动刷新并指向某页面" class="headerlink" title="E. refresh(自动刷新并指向某页面)"></a>E. refresh(自动刷新并指向某页面)</h4><p>说明：网页将在设定的时间内，自动刷新并调向设定的网址。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//意思是2秒后跳转向我的博客</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"refresh"</span> <span class="attr">content</span>=<span class="string">"2；URL=http://www.lxxyx.win/"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="F-Set-Cookie-cookie设定"><a href="#F-Set-Cookie-cookie设定" class="headerlink" title="F. Set-Cookie(cookie设定)"></a>F. Set-Cookie(cookie设定)</h4><p>说明：如果网页过期。那么这个网页存在本地的cookies也会被自动删除。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Set-Cookie"</span> <span class="attr">content</span>=<span class="string">"name, date"</span>&gt;</span> //格式</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Set-Cookie"</span> <span class="attr">content</span>=<span class="string">"path=/; expires=Sunday, 10-Jan-16 10:00:00 GMT"</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> html </tag>
            
            <tag> meta </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-变量</title>
      <link href="/2018/03/07/css-%E5%8F%98%E9%87%8F/"/>
      <url>/2018/03/07/css-%E5%8F%98%E9%87%8F/</url>
      <content type="html"><![CDATA[<h3 id="一、变量的声明"><a href="#一、变量的声明" class="headerlink" title="一、变量的声明"></a>一、变量的声明</h3><p>声明变量的时候，变量名前面要加<strong>两根连词线</strong><code>--</code>，变量名大小写敏感</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">--foo</span>: <span class="number">#7F583F</span>;</span><br><span class="line">    <span class="attribute">--bar</span>: <span class="number">#F7EFD2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，body选择器里面声明了两个变量：<code>--foo</code>和<code>--bar</code>。它们与正式属性没有什么不同，只是没有默认含义。所以 <strong>CSS 变量（CSS variable）又叫做”CSS 自定义属性”（CSS custom properties）</strong>。因为变量与自定义的 CSS 属性其实是一回事。 </p><p><br></p><p>各种值都可以放入 CSS 变量 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">--main-color</span>: <span class="number">#4d4e53</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">--main-bg</span>: <span class="built_in">rgb</span>(255, 255, 255);</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">--logo-border-color</span>: rebeccapurple;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">--header-height</span>: <span class="number">68px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">--content-padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">--base-line-height</span>: <span class="number">1.428571429</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">--transition-duration</span>: .<span class="number">35s</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">--external-link</span>: <span class="string">"external link"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">--margin-top</span>: <span class="built_in">calc</span>(2vh + 20px);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h3 id="二、var-函数"><a href="#二、var-函数" class="headerlink" title="二、var() 函数"></a>二、var() 函数</h3><p>var()函数用于读取变量。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--foo);</span><br><span class="line">    <span class="attribute">text-decoration-color</span>: <span class="built_in">var</span>(--bar);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>var()函数还可以使用第二个参数，表示变量的默认值。如果该变量不存在，就会使用这个默认值。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">color</span>: <span class="selector-tag">var</span>(<span class="selector-tag">--foo</span>, <span class="selector-id">#7F583F</span>);</span><br></pre></td></tr></table></figure><p><strong>第二个参数不处理内部的逗号或空格，都视作参数的一部分。</strong> </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">var</span>(<span class="selector-tag">--font-stack</span>, "<span class="selector-tag">Roboto</span>", "<span class="selector-tag">Helvetica</span>");</span><br><span class="line"><span class="selector-tag">var</span>(<span class="selector-tag">--pad</span>, 10<span class="selector-tag">px</span> 15<span class="selector-tag">px</span> 20<span class="selector-tag">px</span>);</span><br></pre></td></tr></table></figure><p>var()函数还可以用在变量的声明。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">--primary-color</span>: red;</span><br><span class="line">    <span class="attribute">--logo-text</span>: <span class="built_in">var</span>(--primary-color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，变量值只能用作属性值，不能用作属性名。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">--side</span>: margin-top;</span><br><span class="line">  <span class="comment">/* 无效 */</span></span><br><span class="line">  var(--side): 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，变量–side用作属性名，这是无效的。 </p><p><br></p><h3 id="三、变量值的类型"><a href="#三、变量值的类型" class="headerlink" title="三、变量值的类型"></a>三、变量值的类型</h3><p>如果变量值是一个字符串，可以与其他字符串拼接。 </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--bar: 'hello';</span><br><span class="line">--foo: var(--bar)' world';</span><br></pre></td></tr></table></figure><p>​    利用这一点，可以 debug（<a href="https://codepen.io/malyw/pen/oBWMOY" target="_blank" rel="noopener">例子</a>）。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">'--screen-category : '</span><span class="built_in">var</span>(--screen-category);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果变量值是数值，不能与数值单位直接连用。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">    <span class="attribute">--gap</span>: <span class="number">20</span>;</span><br><span class="line">    <span class="comment">/* 无效 */</span></span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="built_in">var</span>(--gap)<span class="built_in">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，数值与单位直接写在一起，这是无效的。必须使用calc()函数，将它们连接。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">    <span class="attribute">--gap</span>: <span class="number">20</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="built_in">calc</span>(var(--gap) * <span class="number">1px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果变量值带有单位，就不能写成字符串。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 无效 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">    <span class="attribute">--foo</span>: <span class="string">'20px'</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">var</span>(--foo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 有效 */</span></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">    <span class="attribute">--foo</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="built_in">var</span>(--foo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="四、作用域"><a href="#四、作用域" class="headerlink" title="四、作用域"></a>四、作用域</h3><p>同一个 CSS 变量，可以在多个选择器内声明。读取的时候，优先级最高的声明生效。这与 CSS 的”层叠”（cascade）规则是一致的。下面是一个<a href="http://jsbin.com/buwahixoqo/edit?html,css,output" target="_blank" rel="noopener">例子</a>。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>绿色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"alert"</span>&gt;</span>红色<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">--color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">--color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#alert</span> &#123;</span><br><span class="line">    <span class="attribute">--color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">* &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，三个选择器都声明了<code>--color</code>变量。不同元素读取这个变量的时候，会采用优先级最高的规则，因此三段文字的颜色是不一样的。这就是说，变量的作用域就是它所在的选择器的有效范围。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">--foo</span>: <span class="number">#7F583F</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">--bar</span>: <span class="number">#F7EFD2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，变量–foo的作用域是body选择器的生效范围，–bar的作用域是.content选择器的生效范围。由于这个原因，全局的变量通常放在根元素:root里面，确保任何选择器都可以读取它们。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">--main-color</span>: <span class="number">#06c</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="五、响应式布局"><a href="#五、响应式布局" class="headerlink" title="五、响应式布局"></a>五、响应式布局</h3><p>CSS 是动态的，页面的任何变化，都会导致采用的规则变化。</p><p>利用这个特点，可以在响应式布局的media命令里面声明变量，使得不同的屏幕宽度有不同的变量值。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">--primary</span>: <span class="number">#7F583F</span>;</span><br><span class="line">    <span class="attribute">--secondary</span>: <span class="number">#F7EFD2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--primary);</span><br><span class="line">    <span class="attribute">text-decoration-color</span>: <span class="built_in">var</span>(--secondary);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">768px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">--primary</span>: <span class="number">#F7EFD2</span>;</span><br><span class="line">        <span class="attribute">--secondary</span>: <span class="number">#7F583F</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="六、设置CSS变量"><a href="#六、设置CSS变量" class="headerlink" title="六、设置CSS变量"></a>六、设置CSS变量</h3><h5 id="1、HTML标签中设置CSS变量"><a href="#1、HTML标签中设置CSS变量" class="headerlink" title="1、HTML标签中设置CSS变量"></a>1、HTML标签中设置CSS变量</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"--color: #cd0000;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"mm.jpg"</span> <span class="attr">style</span>=<span class="string">"border: 10px solid var(--color);"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="2、JS中设置CSS变量"><a href="#2、JS中设置CSS变量" class="headerlink" title="2、JS中设置CSS变量"></a>2、JS中设置CSS变量</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"mm.jpg"</span> <span class="attr">style</span>=<span class="string">"border: 10px solid var(--color);"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.style.setProperty(<span class="string">'--color'</span>, <span class="string">'#cd0000'</span>);</span><br></pre></td></tr></table></figure><p><br></p><h5 id="3、JS中获取CSS变量"><a href="#3、JS中获取CSS变量" class="headerlink" title="3、JS中获取CSS变量"></a>3、JS中获取CSS变量</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取 --color CSS 变量值</span></span><br><span class="line"><span class="keyword">var</span> cssVarColor = getComputedStyle(box).getPropertyValue(<span class="string">'--color'</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出cssVarColor</span></span><br><span class="line"><span class="comment">// 输出变量值是：#cd0000 </span></span><br><span class="line"><span class="built_in">console</span>.log(cssVarColor);</span><br></pre></td></tr></table></figure><p><br></p><p>注：由此可见，<code>CSS变量</code>与<code>自定义的 CSS 属性</code>其实是一回事</p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 变量 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-盒子垂直水平居中</title>
      <link href="/2018/03/05/css-%E7%9B%92%E5%AD%90%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/"/>
      <url>/2018/03/05/css-%E7%9B%92%E5%AD%90%E5%9E%82%E7%9B%B4%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD/</url>
      <content type="html"><![CDATA[<p>1、定位+盒子宽高已知 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>; <span class="selector-tag">left</span>: 50%; <span class="selector-tag">top</span>: 50%; </span><br><span class="line"><span class="selector-tag">margin-left</span><span class="selector-pseudo">:-</span>自身一半宽度; <span class="selector-tag">margin-top</span>: <span class="selector-tag">-</span>自身一半高度;</span><br></pre></td></tr></table></figure><p>2、table-cell布局  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*父级*/</span></span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-cell</span>; <span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>; </span><br><span class="line"><span class="comment">/*子级*/</span></span><br><span class="line"><span class="selector-tag">margin</span>: 0 <span class="selector-tag">auto</span>;</span><br></pre></td></tr></table></figure><p>3、定位 + transform ; 适用于 子盒子 宽高不定时 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"> <span class="comment">/*top和left偏移各为50%*/</span></span><br><span class="line"><span class="selector-tag">top</span>: 50%;</span><br><span class="line"><span class="selector-tag">left</span>: 50%; </span><br><span class="line"><span class="comment">/*translate(-50%,-50%) 偏移自身的宽和高的-50%*/</span></span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translate</span>(<span class="selector-tag">-50</span>%, <span class="selector-tag">-50</span>%);</span><br></pre></td></tr></table></figure><p>4、flex 布局 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*父级：*/</span></span><br><span class="line"><span class="comment">/*flex 布局*/</span></span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">flex</span>;</span><br><span class="line"><span class="comment">/*实现垂直居中*/</span></span><br><span class="line"><span class="selector-tag">align-items</span>: <span class="selector-tag">center</span>;</span><br><span class="line"><span class="comment">/*实现水平居中*/</span></span><br><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">center</span>;</span><br></pre></td></tr></table></figure><p>5、水平方向上居中  </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">margin-left</span> : 50% ;</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>触发点击事件</title>
      <link href="/2018/03/05/%E8%A7%A6%E5%8F%91%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/"/>
      <url>/2018/03/05/%E8%A7%A6%E5%8F%91%E7%82%B9%E5%87%BB%E4%BA%8B%E4%BB%B6/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"target"</span>).onclick()</span><br></pre></td></tr></table></figure><p><code>btnObj.onclick()</code>只是简单地调用了btnObj的onclick所指向的方法，只是调用方法而已，并未触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"target"</span>).click()</span><br></pre></td></tr></table></figure><p><code>btnObj.click()</code>是真正地用程序去点击按钮，触发了按钮的onclick（）事件</p>]]></content>
      
      
        <tags>
            
            <tag> 触发 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>placeholder的字体颜色大小</title>
      <link href="/2018/03/05/placeholder%E7%9A%84%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E5%A4%A7%E5%B0%8F/"/>
      <url>/2018/03/05/placeholder%E7%9A%84%E5%AD%97%E4%BD%93%E9%A2%9C%E8%89%B2%E5%A4%A7%E5%B0%8F/</url>
      <content type="html"><![CDATA[<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-webkit-input-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* WebKit browsers */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">::-moz-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* Mozilla Firefox 19+ */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-ms-input-placeholder</span> &#123;</span><br><span class="line">    <span class="comment">/* Internet Explorer 10+ */</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> placeholder </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>点击copy</title>
      <link href="/2018/03/05/%E7%82%B9%E5%87%BBcopy/"/>
      <url>/2018/03/05/%E7%82%B9%E5%87%BBcopy/</url>
      <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"inputText"</span> <span class="attr">value</span>=<span class="string">"测试文本"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">value</span>=<span class="string">"复制"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">rows</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">'btn'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> inputText = <span class="built_in">document</span>.getElementById(<span class="string">'inputText'</span>);</span><br><span class="line">    <span class="keyword">var</span> currentFocus = <span class="built_in">document</span>.activeElement;</span><br><span class="line"></span><br><span class="line">    inputText.focus();</span><br><span class="line">    inputText.setSelectionRange(<span class="number">0</span>, inputText.value.length);</span><br><span class="line">    <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    currentFocus.focus();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'copy'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    e.clipboardData.setData(<span class="string">'text/plain'</span>, <span class="string">'Hello, world!'</span>);</span><br><span class="line"></span><br><span class="line">    e.clipboardData.setData(<span class="string">'text/html'</span>, <span class="string">'&lt;b&gt;Hello, world!&lt;/b&gt;'</span>);</span><br><span class="line"></span><br><span class="line">    e.preventDefault();</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'#btn'</span>);</span><br><span class="line"></span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);  </span><br><span class="line">    input.setAttribute(<span class="string">'readonly'</span>, <span class="string">'readonly'</span>);</span><br><span class="line">    input.setAttribute(<span class="string">'value'</span>, <span class="string">'hello world'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(input);  </span><br><span class="line">    input.setSelectionRange(<span class="number">0</span>, <span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>)) &#123;    </span><br><span class="line">        <span class="built_in">document</span>.execCommand(<span class="string">'copy'</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">document</span>.body.removeChild(input);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> copy </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>调试webview</title>
      <link href="/2018/03/02/%E8%B0%83%E8%AF%95webview/"/>
      <url>/2018/03/02/%E8%B0%83%E8%AF%95webview/</url>
      <content type="html"><![CDATA[<p>1、打开开发者选项，勾上调试模式 </p><p>2、chrome浏览器中输入chrome://inspect/#devices</p><p><br> </p><p>微信：查看log </p><p>1、微信内打开：<a href="http://debugx5.qq.com" target="_blank" rel="noopener">http://debugx5.qq.com</a> </p><p>2、【信息】-&gt;【TBS settings】，勾选 【是否打开 TBS 内核 Inspector 调试功能】</p>]]></content>
      
      
        <tags>
            
            <tag> webview </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Emoji-表情</title>
      <link href="/2018/02/28/Emoji-%E8%A1%A8%E6%83%85/"/>
      <url>/2018/02/28/Emoji-%E8%A1%A8%E6%83%85/</url>
      <content type="html"><![CDATA[<h1 id="一、码点和含义"><a href="#一、码点和含义" class="headerlink" title="一、码点和含义"></a>一、码点和含义</h1><p>Unicode 只是规定了 Emoji 的码点和含义，并没有规定它的样式，由各个系统自己实现 </p><p><br></p><h1 id="二、使用方式"><a href="#二、使用方式" class="headerlink" title="二、使用方式"></a>二、使用方式</h1><p>Emoji 虽然是文字，但是无法书写，必须使用其他方法插入文档。 </p><p>（1）最简单的方法当然是复制/粘贴，你可以到 <a href="http://getemoji.com/" target="_blank" rel="noopener">getEmoji.com</a> 选中一个 Emoji 贴在自己的文档即可。 </p><p>（2）另一种方法是通过码点输入 Emoji。以 HTML 网页为例，将码点U+1F600写成 HTML 实体的形式&#128512;（十进制）或&#x1F600;（十六进制），就可以插入网页。码点到这个<a href="http://emojipedia.org/facebook/http:/emojipedia.org/facebook/" target="_blank" rel="noopener">页面</a>查询。 </p><p>（3）JavaScript 输入 Emoji，可以使用 <a href="https://www.npmjs.com/package/node-emoji" target="_blank" rel="noopener">node-emoji</a> 这个库。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> emoji = <span class="built_in">require</span>(<span class="string">'node-emoji'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 coffee 的 Emoji</span></span><br><span class="line">emoji.get(<span class="string">'coffee'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回文字标签对应的 Emoji</span></span><br><span class="line"><span class="comment">// https://www.webpagefx.com/tools/emoji-cheat-sheet/</span></span><br><span class="line">emoji.get(<span class="string">':fast_forward:'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将文字替换成 Emoji</span></span><br><span class="line">emoji.emojify(<span class="string">'I :heart: :coffee:!'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机返回一个 Emoji </span></span><br><span class="line">emoji.random();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询 Emoji</span></span><br><span class="line"><span class="comment">// 返回结果是一个数组 </span></span><br><span class="line">emoji.search(<span class="string">'cof'</span>);</span><br></pre></td></tr></table></figure><p>（4）还可以通过 <a href="https://afeld.github.io/emoji-css/" target="_blank" rel="noopener">CSS</a> 插入 Emoji。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://afeld.github.io/emoji-css/emoji.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"em em-baby"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Emoji </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Http-form-data</title>
      <link href="/2018/01/30/Http-form-data/"/>
      <url>/2018/01/30/Http-form-data/</url>
      <content type="html"><![CDATA[<h1 id="一、演变"><a href="#一、演变" class="headerlink" title="一、演变"></a>一、演变</h1><p>http协议本身的原始方法不支持<code>multipart/form-data</code>请求，是由一些原始的方法演变而来的</p><p>1、<code>multipart/form-data</code>的<strong>基础方法是post</strong>，也就是说是由<code>post</code>方法来组合实现的 </p><p>2、<code>multipart/form-data</code>与<code>post</code>方法的不同之处：<strong>请求头，请求体</strong>。 </p><p>3、<code>multipart/form-data</code>的请求头必须包含一个特殊的头信息：<code>Content-Type</code>，且其值也必须规定为<code>multipart/form-data</code> </p><p>4、规定一个<strong>内容分割符</strong>用于分割请求体中的多个post的内容</p><p>具体的头信息如下：<code>Content-Type: multipart/form-data; boundary=${bound}</code>，其中<code>${bound}</code> 是一个占位符，代表我们规定的分割符，可以自己任意规定，但为了避免和正常文本重复了，尽量要使用复杂一点的内容。</p><p><br></p><h1 id="二、请求体"><a href="#二、请求体" class="headerlink" title="二、请求体"></a>二、请求体</h1><p><code>multipart/form-data</code>的请求体也是一个字符串，不过和post的请求体不同的是它的构造方式，<strong>post是简单的<code>name=value</code>值连接</strong>，而<code>multipart/form-data</code>则是<strong>添加了分隔符</strong>等内容的构造体。具体格式如下: </p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">--$&#123;bound&#125;</span><br><span class="line">Content-Disposition: form-data; name="Filename"</span><br><span class="line">HTTP.pdf</span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code"></span></span><br><span class="line">--$&#123;bound&#125;</span><br><span class="line">Content-Disposition: form-data; name="file000"; filename="HTTP协议详解.pdf"</span><br><span class="line">Content-Type: application/octet-stream</span><br><span class="line"><span class="code"></span></span><br><span class="line">%PDF-1.5</span><br><span class="line">file content</span><br><span class="line">%%EOF</span><br><span class="line"><span class="code"></span></span><br><span class="line">--$&#123;bound&#125;</span><br><span class="line">Content-Disposition: form-data; name="Upload"</span><br><span class="line"><span class="code"></span></span><br><span class="line">Submit Query</span><br><span class="line">--$&#123;bound&#125;--</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> form-data </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Api-RESTful</title>
      <link href="/2018/01/30/Api-RESTful/"/>
      <url>/2018/01/30/Api-RESTful/</url>
      <content type="html"><![CDATA[<h1 id="一、资源"><a href="#一、资源" class="headerlink" title="一、资源"></a>一、资源</h1><p>REST，即Representational State Transfer的缩写，资源表现层状态转化 </p><p>所谓”资源”，就是网络上的一个具体信息。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI，因此URI就成了每一个资源的地址或独一无二的识别符。 </p><ul><li>“资源”表示一种实体，所以应该是名词，<strong>URI不应该有动词</strong></li><li>数据库中的表都是<strong>同种记录的”集合”</strong>（collection），所以API中的<strong>名词也应该使用复数</strong>。 </li></ul><p><br></p><h1 id="二、表现层"><a href="#二、表现层" class="headerlink" title="二、表现层"></a>二、表现层</h1><p>“资源”是一种信息实体，它可以有多种外在表现形式。我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。 </p><p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。 </p><p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。<strong>它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</strong></p><p><br> </p><a id="more"></a> <h1 id="三、状态转化"><a href="#三、状态转化" class="headerlink" title="三、状态转化"></a>三、状态转化</h1><p>HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。 </p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。 </li></ul><p><br></p><ul><li>GET      /zoos：列出所有动物园</li><li>POST      /zoos：新建一个动物园</li><li>GET      /zoos/ID：获取某个指定动物园的信息</li><li>PUT      /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li><li>PATCH      /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li><li>DELETE      /zoos/ID：删除某个动物园</li><li>GET      /zoos/ID/animals：列出某个指定动物园的所有动物</li><li><p>DELETE      /zoos/ID/animals/ID：删除某个指定动物园的指定动物</p><p><br> </p></li></ul><h1 id="四、RESTful架构："><a href="#四、RESTful架构：" class="headerlink" title="四、RESTful架构："></a>四、RESTful架构：</h1><p>（1）每一个URI代表一种资源；</p><p>（2）客户端和服务器之间，传递这种资源的某种表现层；</p><p>（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”</p><p> <br> </p><h1 id="五、状态码"><a href="#五、状态码" class="headerlink" title="五、状态码"></a>五、状态码</h1><ul><li>200      OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</li><li>201      CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li><li>202      Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li><li>204      NO CONTENT - [DELETE]：用户删除数据成功。</li><li>400      INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li><li>401      Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li><li>403      Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</li><li>404      NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</li><li>406      Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li><li>410      Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li><li>422      Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li><li><p>500      INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</p><p><br> </p></li></ul><h1 id="六、返回结果"><a href="#六、返回结果" class="headerlink" title="六、返回结果"></a>六、返回结果</h1><ul><li>GET      /collection：返回资源对象的列表（数组）</li><li>GET      /collection/resource：返回单个资源对象</li><li>POST      /collection：返回新生成的资源对象</li><li>PUT      /collection/resource：返回完整的资源对象</li><li>PATCH      /collection/resource：返回完整的资源对象</li><li>DELETE      /collection/resource：返回一个空文档</li></ul>]]></content>
      
      
        <tags>
            
            <tag> Api </tag>
            
            <tag> RESTful </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-层叠上下文</title>
      <link href="/2018/01/21/css-%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
      <url>/2018/01/21/css-%E5%B1%82%E5%8F%A0%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
      <content type="html"><![CDATA[<h1 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h1><p><strong>层叠上下文</strong>是HTML元素的三维概念，这些HTML元素在z轴上延伸。HTML元素依据其自身属性按照<strong>优先级顺序</strong>占用<strong>层叠上下文的空间</strong>。层叠上下文是可以相互嵌套的，一个层叠上下文中包含了普通元素以及子层叠上下文。</p><p><br></p><h1 id="二、形成"><a href="#二、形成" class="headerlink" title="二、形成"></a>二、形成</h1><p>文档中的层叠上下文由满足以下任意一个条件的元素形成：</p><ul><li><strong>根元素</strong> (HTML)</li><li>z-index 值不为 “auto”的 <strong>绝对/相对</strong>定位</li><li>一个 z-index 值不为 “auto”的 flex 项目 (flex item)，即：父元素 display: flex|inline-flex</li><li>opacity 属性值小于      1 的元素</li><li>transform 属性值不为      “none”的元素</li><li>mix-blend-mode 属性值不为 “normal”的元素</li><li>filter值不为“none”的元素</li><li>perspective值不为“none”的元素</li><li>isolation 属性被设置为 “isolate”的元素</li><li>position:      fixed</li><li>在 will-change 中指定了任意 CSS 属性，即便你没有直接指定这些属性的值</li><li>-webkit-overflow-scrolling 属性被设置 “touch”的元素</li></ul><p>注：</p><ul><li>在层叠上下文中，其子元素同样也按照上面解释的规则进行层叠</li><li><strong>其子元素的 z-index 值只在父级层叠上下文中有意义</strong></li><li><p>子级层叠上下文被自动视为<strong>父级层叠上下文</strong>的一个独立单元</p></li><li><p><strong>没有创建自己的层叠上下文的元素 将被父层叠上下文包含</strong></p></li></ul><p><br></p><a id="more"></a> <h1 id="三、层叠顺序"><a href="#三、层叠顺序" class="headerlink" title="三、层叠顺序"></a>三、层叠顺序</h1><p>一个层叠上下文中，元素发生层叠时有着特定的垂直显示顺序，这种顺序按照一定的规则生成</p><p><img src="/2018/01/21/css-层叠上下文/2016-01-09_211116.png" alt=""></p><p><br></p><h1 id="四、层叠准则"><a href="#四、层叠准则" class="headerlink" title="四、层叠准则"></a>四、层叠准则</h1><ul><li><p>谁大谁上：当具有明显层叠水平标示的时候，如z-index值，在同一层叠上下文领域，层叠水平值大的覆盖小的那个；（<strong>层叠水平小的先被绘制</strong>）</p></li><li><p>后来居上：当元素水平一致、<strong>层叠顺序相同时</strong>，在DOM流中处于后面的元素覆盖前面的元素。</p></li></ul><p><br></p><h1 id="五、例子"><a href="#五、例子" class="headerlink" title="五、例子"></a>五、例子</h1><ul><li>Root<ul><li>DIV #1</li><li>DIV #2</li><li>DIV #3<ul><li>DIV #4</li><li>DIV #5</li><li>DIV #6</li></ul></li></ul></li></ul><p><img src="/2018/01/21/css-层叠上下文/=Understanding_zindex_04.png" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 层叠上下文 </tag>
            
            <tag> stacking-context </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-getter和setter</title>
      <link href="/2018/01/20/JS-getter%E5%92%8Csetter/"/>
      <url>/2018/01/20/JS-getter%E5%92%8Csetter/</url>
      <content type="html"><![CDATA[<h1 id="一、getter"><a href="#一、getter" class="headerlink" title="一、getter"></a>一、getter</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;get prop() &#123; ... &#125; &#125;</span><br><span class="line"> </span><br><span class="line">&#123;get [expression]() &#123; ... &#125; &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  log: [<span class="string">'example'</span>,<span class="string">'test'</span>],</span><br><span class="line">  get latest() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.log[<span class="keyword">this</span>.log.length - <span class="number">1</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj.latest); <span class="comment">// "test"</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、setter"><a href="#二、setter" class="headerlink" title="二、setter"></a>二、setter</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;set prop(val) &#123; . . . &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;set [expression](val) &#123; . . . &#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> language = &#123;</span><br><span class="line">    set current(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>.log.push(name);</span><br><span class="line">    &#125;,</span><br><span class="line">    log: []</span><br><span class="line">&#125;</span><br><span class="line">language.current = <span class="string">'EN'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(language.log); <span class="comment">// ['EN']</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="三、注意"><a href="#三、注意" class="headerlink" title="三、注意"></a>三、注意</h1><p>1、不能将一个 getter或setter 绑定到一个具有真实值的属性上</p><p>2、使用delete操作符可以删除getter和setter </p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> getter </tag>
            
            <tag> setter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-属性描述符</title>
      <link href="/2018/01/20/JS-%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6/"/>
      <url>/2018/01/20/JS-%E5%B1%9E%E6%80%A7%E6%8F%8F%E8%BF%B0%E7%AC%A6/</url>
      <content type="html"><![CDATA[<h4 id="一、属性描述符"><a href="#一、属性描述符" class="headerlink" title="一、属性描述符"></a>一、属性描述符</h4><p>ECMAScript对象中目前存在的<code>属性描述符</code>主要有两种，<code>数据描述符</code>(数据属性)和<code>存取描述符</code>(访问器属性)。</p><ul><li><code>数据描述符</code>是一个拥有可写或不可写值的属性。</li><li><code>存取描述符</code>是由一对 getter-setter 函数功能来描述的属性。 </li></ul><p><br></p><h4 id="二、数据描述符属性"><a href="#二、数据描述符属性" class="headerlink" title="二、数据描述符属性"></a>二、数据描述符属性</h4><p>当修改或定义对象的某个属性的时候，给这个属性添加一些特性： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"newKey"</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span> | <span class="literal">false</span>,</span><br><span class="line">    value: 任意类型的值,</span><br><span class="line">    writable: <span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><strong>Value</strong>：属性对应的值,可以使任意类型的值，默认为undefined</li><li><strong>Writable</strong>：属性的值是否可以被重写，默认为false。</li><li><strong>Enumerable</strong>：此属性是否可以被枚举，默认为false。</li><li><strong>Configurable</strong>：设置为true可以被删除或可以重新设置特性，默认为false。</li></ul><p>提示：一旦使用Object.defineProperty给对象添加属性，那么如果不设置属性的特性，那么<code>configurable</code>、<code>enumerable</code>、<code>writable</code>这些值都为默认的<code>false</code></p><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">'name'</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">false</span>,</span><br><span class="line">    value: <span class="string">'John'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h4 id="三、存取描述符属性"><a href="#三、存取描述符属性" class="headerlink" title="三、存取描述符属性"></a>三、存取描述符属性</h4><p>当使用存取器描述属性的特性的时候，允许设置以下特性属性： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"newKey"</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125; | <span class="literal">undefined</span>,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;&#125; | <span class="literal">undefined</span></span><br><span class="line">    configurable: <span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">    enumerable: <span class="literal">true</span> | <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>注：</p><ul><li>当使用了getter或setter方法，不允许使用writable和value这两个属性 </li><li>get或set不是必须成对出现，任写其一就可以。如果不设置方法，则get和set的默认值为undefined</li></ul><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">'a'</span>, &#123;</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span>,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> aValue</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">        aValue = newValue;</span><br><span class="line">        b = newValue + <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br></p><h4 id="四、Object-defineProperties"><a href="#四、Object-defineProperties" class="headerlink" title="四、Object.defineProperties"></a>四、Object.defineProperties</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(obj, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        value: <span class="string">'张三'</span>,</span><br><span class="line">        configurable: <span class="literal">false</span>,</span><br><span class="line">        writable: <span class="literal">true</span>,</span><br><span class="line">        enumerable: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    age: &#123;</span><br><span class="line">        value: <span class="number">18</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(obj.name, obj.age) <span class="comment">// 张三, 18</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="五、defineProperty的缺陷"><a href="#五、defineProperty的缺陷" class="headerlink" title="五、defineProperty的缺陷"></a>五、defineProperty的缺陷</h4><ul><li><code>Object.defineProperty</code>无法<strong>监听数组元素的变化</strong>  </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">arr</span>: [] &#125;;</span><br><span class="line"><span class="keyword">var</span> arr1 = obj.arr;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(obj, <span class="string">"arr"</span>, &#123;</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"set"</span>); &#125;,</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"get"</span>); <span class="keyword">return</span> arr1 &#125;,</span><br><span class="line">    configurable: <span class="literal">true</span>,</span><br><span class="line">    enumerable: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// get </span></span><br><span class="line"><span class="comment">// 1 </span></span><br><span class="line"><span class="comment">// 这里并没有走 set 拦截，这里就说明了 Object.defineProperty 对数组的缺陷问题</span></span><br><span class="line"></span><br><span class="line">obj.arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="comment">// set</span></span><br><span class="line"><span class="comment">// 只有改变整个对象的引用才会走进拦截</span></span><br></pre></td></tr></table></figure><p>注：对数组元素的监测，需要用一些奇技淫巧，把无法监听数组的情况hack掉。如vue提供的<code>[&#39;push&#39;, &#39;pop&#39;, &#39;shift&#39;, &#39;unshift&#39;, &#39;splice&#39;, &#39;sort&#39;, &#39;reverse&#39;]</code>等方法。<a href="https://juejin.im/post/5acd0c8a6fb9a028da7cdfaf#heading-11" target="_blank" rel="noopener">传送门</a>  </p><p><br></p><ul><li><h5 id="只能劫持对象的属性"><a href="#只能劫持对象的属性" class="headerlink" title="只能劫持对象的属性"></a>只能劫持对象的属性</h5></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">需要对每个对象的每个属性进行遍历，如果属性值也是对象那么需要深度遍历</span><br><span class="line">不能检测到对象属性的添加或删除</span><br></pre></td></tr></table></figure><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 属性描述符 </tag>
            
            <tag> 数据劫持 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-简单数据绑定-MVC</title>
      <link href="/2018/01/20/JS-%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/"/>
      <url>/2018/01/20/JS-%E7%AE%80%E5%8D%95%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/</url>
      <content type="html"><![CDATA[<h1 id="一、视图层V"><a href="#一、视图层V" class="headerlink" title="一、视图层V"></a>一、视图层V</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>你好，<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">'nickName'</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"introduce"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、视图控制器C"><a href="#二、视图控制器C" class="headerlink" title="二、视图控制器C"></a>二、视图控制器C</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userInfo = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(userInfo, <span class="string">"nickName"</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(<span class="string">'nickName'</span>).innerHTML;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">nick</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'nickName'</span>).innerHTML = nick;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(userInfo, <span class="string">"introduce"</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(<span class="string">'introduce'</span>).innerHTML;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">introduce</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'introduce'</span>).innerHTML = introduce;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><br></p><h1 id="三、数据M"><a href="#三、数据M" class="headerlink" title="三、数据M"></a>三、数据M</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userInfo.nickName = <span class="string">"xxx"</span>;</span><br><span class="line">userInfo.introduce = <span class="string">"我是xxx，我来自云南，..."</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 数据绑定 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>防抖动与节流</title>
      <link href="/2018/01/10/%E9%98%B2%E6%8A%96%E5%8A%A8%E4%B8%8E%E8%8A%82%E6%B5%81/"/>
      <url>/2018/01/10/%E9%98%B2%E6%8A%96%E5%8A%A8%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
      <content type="html"><![CDATA[<h1 id="一、防抖动"><a href="#一、防抖动" class="headerlink" title="一、防抖动"></a>一、防抖动</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖动</span></span><br><span class="line"><span class="comment"> * @method debounce</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; callback 回调函数</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; delay 时间间隔</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> debounce = <span class="function"><span class="keyword">function</span>(<span class="params">callback, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line"></span><br><span class="line">        clearTimeout(timer);</span><br><span class="line"></span><br><span class="line">        timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback.apply(context, args);</span><br><span class="line">        &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、节流"><a href="#二、节流" class="headerlink" title="二、节流"></a>二、节流</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流</span></span><br><span class="line"><span class="comment"> * @method throttle</span></span><br><span class="line"><span class="comment"> * @param &#123;function&#125; callback 回调函数</span></span><br><span class="line"><span class="comment"> * @param &#123;number&#125; delay 时间间隔</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">callback, delay</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> prev = <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> context = <span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">let</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">        <span class="keyword">let</span> now = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="keyword">if</span> (now - prev &gt;= delay) &#123;</span><br><span class="line">            callback.apply(context, args);</span><br><span class="line">            prev = <span class="built_in">Date</span>.now();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 抖动 </tag>
            
            <tag> 节流 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>height-100%问题</title>
      <link href="/2018/01/04/height-100-%E9%97%AE%E9%A2%98/"/>
      <url>/2018/01/04/height-100-%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h1 id="一、height-auto"><a href="#一、height-auto" class="headerlink" title="一、height:auto"></a>一、height:auto</h1><ul><li><p>因为页面没有缺省的高度值，当设置百分百的高度时，无法根据父元素获取高度 </p></li><li><p>父元素的高度只是一个缺省值height：auto，只有子元素撑开父元素</p></li></ul><p>只要给父元素设置一个缺省值 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;  </span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;  </span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;  </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;  </span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、line-height和height"><a href="#二、line-height和height" class="headerlink" title="二、line-height和height"></a>二、line-height和height</h1><p>CSS中对高度起作用的是<code>height</code>和<code>line-height</code>。如果一个标签没有定义<code>height</code>属性(包括百分比高度)，那么其最终表现的高度一定是由<code>line-height</code>起作用 。</p><p><br></p><p>在<code>inline box</code>模型中，有个<code>line boxes</code>，这玩意是看不见的，这个玩意的工作就是包裹每行文字。<strong>一行文字一个<code>line boxes</code></strong>。<code>line boxes</code>什么特性也没有，就高度。所以<strong>一个没有设置<code>height</code>属性的<code>div</code>的高度就是由一个一个<code>line boxes</code>的高度堆积而成的。</strong></p><p><br></p><p>其实<code>line boxes</code>不是直接的生产者，属于中层干部，真正的活儿都是它的手下 – <code>inline boxes</code>干的。<code>line boxes</code>只是个考察汇报人员，考察它的手下谁的实际<code>line-height</code>值最高，谁最高，它就要谁的值，然后向上汇报，形成高度。</p><p><br></p><h1 id="三、垂直居中"><a href="#三、垂直居中" class="headerlink" title="三、垂直居中"></a>三、垂直居中</h1><ul><li><code>line-height</code>值设置为<code>height</code>一样大小的值可以实现单行文字的垂直居中 (<strong><code>height</code>是多余的</strong>)</li><li>把<code>line-height</code>设置为您需要的<code>box</code>的大小可以实现单行文字的垂直居中 </li></ul>]]></content>
      
      
        <tags>
            
            <tag> 100% </tag>
            
            <tag> height </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>less进阶</title>
      <link href="/2017/12/28/less%E8%BF%9B%E9%98%B6/"/>
      <url>/2017/12/28/less%E8%BF%9B%E9%98%B6/</url>
      <content type="html"><![CDATA[<h1 id="一、变量"><a href="#一、变量" class="headerlink" title="一、变量"></a>一、变量</h1><ol><li>变量定义方式是 <font color="#A52A2A" size="4">     <strong>@变量名:值</strong></font></li><li>变量使用方式是 <font color="#A52A2A" size="4">     <strong>@{变量名} || @变量名</strong></font></li></ol><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@kuandu:</span>width;</span><br><span class="line"><span class="variable">@green:</span> <span class="number">#801f77</span>;</span><br><span class="line"><span class="variable">@imgurl:</span><span class="string">"https://www.baidu.com/img/"</span>;</span><br><span class="line"><span class="selector-class">.@&#123;kuandu&#125;</span>&#123;</span><br><span class="line">    <span class="attribute">@&#123;kuandu&#125;</span>:<span class="number">150px</span>;</span><br><span class="line">    <span class="comment">//使用""将变量的值括起来</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="variable">@green</span> url(<span class="string">"@&#123;imgurl&#125;bdlogo.png"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译后*/</span></span><br><span class="line"><span class="selector-class">.width</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#801f77</span> url(<span class="string">"https://www.baidu.com/img/bdlogo.png"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><ol><li>变量作为<font color="#A52A2A" size="4"> <strong>属性名</strong></font>时 <strong>@{变量名}</strong></li><li>变量作为<font color="#A52A2A" size="4"> <strong>属性值</strong></font>时 <strong>@变量名   ||          “@{变量名}”</strong></li></ol><p><br></p><h1 id="二、多参数混合"><a href="#二、多参数混合" class="headerlink" title="二、多参数混合"></a>二、多参数混合</h1><p>1、命名参数：引用mixin时可以通过参数名称而不是参数的位置来为mixin提供参数值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.mixin</span>(<span class="variable">@color</span>: black; <span class="variable">@margin</span>: <span class="number">10px</span>; <span class="variable">@padding</span>: <span class="number">20px</span>) &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">@margin</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">@padding</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.class3</span>&#123;</span><br><span class="line">    <span class="selector-class">.mixin</span>(<span class="variable">@padding</span>: <span class="number">80px</span>;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译后*/</span></span><br><span class="line"><span class="selector-class">.class3</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">80px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、匹配模式：传值的时候定义一个字符，在使用的时候使用哪个字符，就调用那天规则</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border</span>(b-l, <span class="variable">@w</span>: <span class="number">5px</span>) &#123;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border</span>(b-r, <span class="variable">@w</span>: <span class="number">5px</span>) &#123;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="variable">@w</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="selector-class">.border</span>(b-r, <span class="number">10px</span>);</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#33acfe</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译后*/</span></span><br><span class="line"><span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom-right-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#33acfe</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、返回值</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.average</span>(<span class="variable">@x</span>, <span class="variable">@y</span>) &#123;</span><br><span class="line">    <span class="variable">@average:</span> ((<span class="variable">@x</span> + <span class="variable">@y</span>) / <span class="number">2</span>);</span><br><span class="line">    <span class="variable">@he:</span> (<span class="variable">@x</span> + <span class="variable">@y</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="comment">//执行混合</span></span><br><span class="line">    <span class="selector-class">.average</span>(<span class="number">16px</span>, <span class="number">50px</span>);</span><br><span class="line">    <span class="comment">//使用返回变量</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="variable">@average</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="variable">@he</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译后*/</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">66px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h1 id="三、嵌套"><a href="#三、嵌套" class="headerlink" title="三、嵌套"></a>三、嵌套</h1><p>1、父类选择器符号： &amp; </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">background</span>: forestgreen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译后*/</span></span><br><span class="line"><span class="selector-class">.logo</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: forestgreen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、改变选择器顺序：将&amp;放到当前选择器之后，就会将当前选择器插入到所有的父选择器之前</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">    <span class="selector-class">.b</span> &#123;</span><br><span class="line">        <span class="selector-class">.c</span><span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">            <span class="attribute">color</span>: <span class="number">123</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译后*/</span></span><br><span class="line"><span class="selector-class">.c</span><span class="selector-class">.a</span> <span class="selector-class">.b</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">123</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、组合 &amp; &amp;：组合使用生成所有可能的选择器列表</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>,<span class="selector-tag">a</span>,<span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> dotted <span class="number">#366</span>;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span> <span class="selector-tag">&amp;</span> &#123;</span><br><span class="line">        <span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>,<span class="selector-tag">a</span>,<span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">2px</span> dotted <span class="number">#366</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*编译后*/</span></span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">p</span> <span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">a</span> <span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">a</span>,</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> less </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>灰度化与二值化</title>
      <link href="/2017/12/24/%E7%81%B0%E5%BA%A6%E5%8C%96%E4%B8%8E%E4%BA%8C%E5%80%BC%E5%8C%96/"/>
      <url>/2017/12/24/%E7%81%B0%E5%BA%A6%E5%8C%96%E4%B8%8E%E4%BA%8C%E5%80%BC%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="灰度化"><a href="#灰度化" class="headerlink" title="灰度化"></a>灰度化</h1><p>在<code>RGB模型</code>中，<strong>当R=G=B时，则彩色表示一种灰度颜色，其中R=G=B的值叫灰度值</strong>（又称强度值、<strong>亮度值</strong>），灰度范围为<code>0-255</code>。获取<strong>每个像素点的灰度值</strong>有以下几种方式： </p><h4 id="1-分量法"><a href="#1-分量法" class="headerlink" title="1. 分量法"></a><strong>1. 分量法</strong></h4><p>将图像中的<strong>三分量的亮度</strong>作为<strong>三个灰度值</strong>，可根据应用需要<strong>选取一种灰度值</strong>。</p><p>　　                <img src="/2017/12/24/灰度化与二值化/150036539477467.png" alt="img"></p><p><br></p><h4 id="2-最大值法"><a href="#2-最大值法" class="headerlink" title="2. 最大值法"></a><strong>2. 最大值法</strong></h4><p>将图像中的<strong>三分量亮度的最大值</strong>作为<strong>灰度值</strong>。</p><p>　　<img src="/2017/12/24/灰度化与二值化/150037519325954.png" alt="img"></p><p><br></p><h4 id="3-平均值法"><a href="#3-平均值法" class="headerlink" title="3. 平均值法"></a><strong>3. 平均值法</strong></h4><p>将图像中的<strong>三分量亮度求平均</strong>得到一个<strong>灰度值</strong>。</p><p>　　<img src="/2017/12/24/灰度化与二值化/150038506192124.png" alt="img"></p><p><br></p><h4 id="4-加权平均法"><a href="#4-加权平均法" class="headerlink" title="　　4. 加权平均法"></a>　　<strong>4. 加权平均法</strong></h4><p>根据重要性及其它指标，将<strong>三个分量以不同的权值进行加权平均</strong>。由于<strong>人眼对绿色的敏感最高，对红色敏感较低，对蓝色敏感最低</strong>，因此，按下式对RGB三分量进行加权平均能得到较合理的<strong>灰度值</strong>。</p><p>　　<img src="/2017/12/24/灰度化与二值化/150039337284220.png" alt="img"></p><p><br></p><p><img src="/2017/12/24/灰度化与二值化/150047284164468.png" alt=""></p><p><br></p><a id="more"></a> <h1 id="二值化"><a href="#二值化" class="headerlink" title="二值化"></a>二值化</h1><p>对RGB彩色图像<strong>灰度化以后</strong>，扫描图像的<strong>每个像素值</strong>，将值小于<code>阈值的</code>将像素值设为0(黑色)，将值大于等于<code>阈值</code>的像素值设为255(白色)。**<code>阈值</code>可以根据<code>灰度直方图</code>按照<code>特定的数学方法</code>获取。可参考大神<a href="https://www.cnblogs.com/Imageshop/p/3307308.html" target="_blank" rel="noopener">Imageshop</a>的算法。</p><p><br></p><h2 id="灰度直方图"><a href="#灰度直方图" class="headerlink" title="灰度直方图"></a>灰度直方图</h2><p><strong>灰度图像</strong>由<strong>不同灰度值</strong>的像素组成，<strong>灰度图像中灰度值的分布是该图像的一个重要特征</strong>。</p><p>图像的<strong>灰度直方图</strong>就描述了图像中灰度值分布情况，能够很直观的展示出图像中各个灰度值所占的多少。图像的灰度直方图是灰度值的函数，描述的是图像中具有该灰度值的像素的个数：其中，横坐标是灰度级，纵坐标是该灰度级出现的频率。<img src="/2017/12/24/灰度化与二值化/439761-20170630113705633-1850306826.png" alt="img"></p><p><br></p><h1 id="计算阈值"><a href="#计算阈值" class="headerlink" title="计算阈值"></a>计算阈值</h1><h4 id="1、灰度平局值值法"><a href="#1、灰度平局值值法" class="headerlink" title="1、灰度平局值值法"></a>1、<strong>灰度平局值值法</strong></h4><ul><li><p>描述</p><p>即使用整幅图像的<strong>灰度平均值作为二值化的阈值</strong>，一般该方法可作为其他方法的初始猜想值。</p></li></ul><p><br></p><ul><li>原理　　 </li></ul><p>​      　      <img src="/2017/12/24/灰度化与二值化/07101209-c8e55c763e9a490289d9fe6d58c767cb.x-png" alt="img"></p><p><br></p><ul><li>实现代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetMeanThreshold</span><span class="params">(<span class="keyword">int</span>[] HistGram)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Sum = <span class="number">0</span>, Amount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> Y = <span class="number">0</span>; Y &lt; <span class="number">256</span>; Y++) &#123;</span><br><span class="line">        Amount += HistGram[Y];</span><br><span class="line">        Sum += Y * HistGram[Y];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Sum / Amount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="2、百分比阈值（P-Tile法）"><a href="#2、百分比阈值（P-Tile法）" class="headerlink" title="2、百分比阈值（P-Tile法）"></a><strong>2、百分比阈值（P-Tile法）</strong></h4><ul><li><p>描述</p><p>Doyle于1962年提出的P-Tile (即P分位数法)可以说是最古老的一种阈值选取方法。该方法根据<strong>先验概率</strong>来设定阈值，使得二值化后的目标或背景像素比例等于先验概率，该方法简单高效，但是对于先验概率难于估计的图像却无能为力。 </p></li></ul><p><br></p><ul><li>实现代码</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/// &lt;summary&gt;</span></span><br><span class="line"><span class="comment">/// 百分比阈值</span></span><br><span class="line"><span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="HistGram"&gt;灰度图像的直方图&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;param name="Tile"&gt;背景在图像中所占的面积百分比&lt;/param&gt;</span></span><br><span class="line"><span class="comment">/// &lt;returns&gt;&lt;/returns&gt;</span></span><br><span class="line">public <span class="keyword">static</span> int GetPTileThreshold(int[] HistGram, int Tile = <span class="number">50</span>) &#123;</span><br><span class="line">    int Y, Amount = <span class="number">0</span>, Sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Y = <span class="number">0</span>; Y &lt; <span class="number">256</span>; Y++) Amount += HistGram[Y]; <span class="comment">//  像素总数</span></span><br><span class="line">    <span class="keyword">for</span> (Y = <span class="number">0</span>; Y &lt; <span class="number">256</span>; Y++) &#123;</span><br><span class="line">        Sum = Sum + HistGram[Y];</span><br><span class="line">        <span class="keyword">if</span> (Sum &gt;= Amount * Tile / <span class="number">100</span>) <span class="keyword">return</span> Y;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="3、基于谷底最小值的阈值"><a href="#3、基于谷底最小值的阈值" class="headerlink" title="3、基于谷底最小值的阈值"></a>3、<strong>基于谷底最小值的阈值</strong></h4><ul><li><p>描述</p><p>此方法实用于具有明显双峰直方图的图像，其寻找双峰的谷底作为阈值，但是该方法不一定能获得阈值，对于那些具有平坦的直方图或单峰图像，该方法不合适。 </p></li></ul><p><br></p><ul><li>实现代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetMinimumThreshold</span><span class="params">(<span class="keyword">int</span>[] HistGram)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Y, Iter = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 基于精度问题，一定要用浮点数来处理，否则得不到正确的结果</span></span><br><span class="line">    <span class="keyword">double</span>[] HistGramC = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">256</span>]; </span><br><span class="line">    <span class="comment">// 求均值的过程会破坏前面的数据，因此需要两份数据</span></span><br><span class="line">    <span class="keyword">double</span>[] HistGramCC = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">256</span>]; </span><br><span class="line">    <span class="keyword">for</span> (Y = <span class="number">0</span>; Y &lt; <span class="number">256</span>; Y++) &#123;</span><br><span class="line">        HistGramC[Y] = HistGram[Y];</span><br><span class="line">        HistGramCC[Y] = HistGram[Y];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 通过三点求均值来平滑直方图</span></span><br><span class="line">    <span class="comment">// 判断是否已经是双峰的图像了      </span></span><br><span class="line">    <span class="keyword">while</span> (IsDimodal(HistGramCC) == <span class="keyword">false</span>) </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 第一点</span></span><br><span class="line">        HistGramCC[<span class="number">0</span>] = (HistGramC[<span class="number">0</span>] + HistGramC[<span class="number">0</span>] + HistGramC[<span class="number">1</span>]) / <span class="number">3</span>; </span><br><span class="line">        <span class="keyword">for</span> (Y = <span class="number">1</span>; Y &lt; <span class="number">255</span>; Y++)</span><br><span class="line">             <span class="comment">// 中间的点</span></span><br><span class="line">            HistGramCC[Y] = (HistGramC[Y - <span class="number">1</span>] + HistGramC[Y] + HistGramC[Y + <span class="number">1</span>]) / <span class="number">3</span>;</span><br><span class="line">        <span class="comment">// 最后一点</span></span><br><span class="line">        HistGramCC[<span class="number">255</span>] = (HistGramC[<span class="number">254</span>] + HistGramC[<span class="number">255</span>] + HistGramC[<span class="number">255</span>]) / <span class="number">3</span>; </span><br><span class="line">        System.Buffer.BlockCopy(HistGramCC, <span class="number">0</span>, HistGramC, <span class="number">0</span>, <span class="number">256</span> * sizeof(<span class="keyword">double</span>));</span><br><span class="line">        Iter++;</span><br><span class="line">        <span class="comment">// 直方图无法平滑为双峰的，返回错误代码</span></span><br><span class="line">        <span class="keyword">if</span> (Iter &gt;= <span class="number">1000</span>) <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 阈值极为两峰之间的最小值 </span></span><br><span class="line">    bool Peakfound = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">for</span> (Y = <span class="number">1</span>; Y &lt; <span class="number">255</span>; Y++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (HistGramCC[Y - <span class="number">1</span>] &lt; HistGramCC[Y] &amp;&amp; HistGramCC[Y + <span class="number">1</span>] &lt; HistGramCC[Y]) Peakfound = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (Peakfound == <span class="keyword">true</span> &amp;&amp; HistGramCC[Y - <span class="number">1</span>] &gt;= HistGramCC[Y] &amp;&amp; HistGramCC[Y + <span class="number">1</span>] &gt;= HistGramCC[Y])</span><br><span class="line">            <span class="keyword">return</span> Y - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中IsDimodal函数为判断直方图是否是双峰的函数，代码如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> bool <span class="title">IsDimodal</span><span class="params">(<span class="keyword">double</span>[] HistGram)</span> <span class="comment">// 检测直方图是否为双峰的</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 对直方图的峰进行计数，只有峰数位2才为双峰 </span></span><br><span class="line">    <span class="keyword">int</span> Count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> Y = <span class="number">1</span>; Y &lt; <span class="number">255</span>; Y++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (HistGram[Y - <span class="number">1</span>] &lt; HistGram[Y] &amp;&amp; HistGram[Y + <span class="number">1</span>] &lt; HistGram[Y]) &#123;</span><br><span class="line">            Count++;</span><br><span class="line">            <span class="keyword">if</span> (Count &gt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Count == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src="/2017/12/24/灰度化与二值化/07103305-7f1cabebf14947e9a9a0bd11bc59e74b.x-png" alt="img"> <img src="/2017/12/24/灰度化与二值化/07103321-6db546f2026e46ab80a39db6882a95cf.x-png" alt="img"><img src="/2017/12/24/灰度化与二值化/07103044-76dee9cfb72b4832bab79cb5c83b388d.x-png" alt="img"><img src="/2017/12/24/灰度化与二值化/07103050-538eb87104234f878ae3b90e65e9b7f7.x-png" alt="img"> </p><p><br></p><p> <strong><img src="/2017/12/24/灰度化与二值化/07105018-73a9292cdc2243c1b6a13059f9c0281e.x-png" alt="img"> <img src="/2017/12/24/灰度化与二值化/07105112-3aa4d0e14209416b9761110f98fc4650.x-png" alt="img"> <img src="/2017/12/24/灰度化与二值化/07105145-c4fc2294c8274e74baac3ed12d55942b.x-png" alt="img"> <img src="/2017/12/24/灰度化与二值化/07105155-0da81b05d5bc4a079aed55b513039139.x-png" alt="img"></strong></p><p><br></p><h4 id="4、基于双峰平均值的阈值"><a href="#4、基于双峰平均值的阈值" class="headerlink" title="4、基于双峰平均值的阈值"></a>4、<strong>基于双峰平均值的阈值</strong></h4><ul><li><p>描述</p><p>该算法和基于谷底最小值的阈值方法类似，只是最后一步不是取得双峰之间的谷底值，而是取双峰的平均值作为阈值。 </p></li></ul><p><br></p><ul><li>参考代码 </li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetIntermodesThreshold</span><span class="params">(<span class="keyword">int</span>[] HistGram)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> Y, Iter = <span class="number">0</span>, Index;</span><br><span class="line">    <span class="comment">// 基于精度问题，一定要用浮点数来处理，否则得不到正确的结果</span></span><br><span class="line">    <span class="keyword">double</span>[] HistGramC = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">256</span>]; </span><br><span class="line">    <span class="comment">// 求均值的过程会破坏前面的数据，因此需要两份数据</span></span><br><span class="line">    <span class="keyword">double</span>[] HistGramCC = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">256</span>]; </span><br><span class="line">    <span class="keyword">for</span> (Y = <span class="number">0</span>; Y &lt; <span class="number">256</span>; Y++) &#123;</span><br><span class="line">        HistGramC[Y] = HistGram[Y];</span><br><span class="line">        HistGramCC[Y] = HistGram[Y];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过三点求均值来平滑直方图</span></span><br><span class="line">    <span class="comment">// 判断是否已经是双峰的图像了</span></span><br><span class="line">    <span class="keyword">while</span> (IsDimodal(HistGramCC) == <span class="keyword">false</span>)      </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 第一点</span></span><br><span class="line">        HistGramCC[<span class="number">0</span>] = (HistGramC[<span class="number">0</span>] + HistGramC[<span class="number">0</span>] + HistGramC[<span class="number">1</span>]) / <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span> (Y = <span class="number">1</span>; Y &lt; <span class="number">255</span>; Y++)</span><br><span class="line">           <span class="comment">// 中间的点</span></span><br><span class="line">            HistGramCC[Y] = (HistGramC[Y - <span class="number">1</span>] + HistGramC[Y] + HistGramC[Y + <span class="number">1</span>]) / <span class="number">3</span>; </span><br><span class="line">        <span class="comment">// 最后一点</span></span><br><span class="line">        HistGramCC[<span class="number">255</span>] = (HistGramC[<span class="number">254</span>] + HistGramC[<span class="number">255</span>] + HistGramC[<span class="number">255</span>]) / <span class="number">3</span>; </span><br><span class="line">        <span class="comment">// 备份数据，为下一次迭代做准备</span></span><br><span class="line">        System.Buffer.BlockCopy(HistGramCC, <span class="number">0</span>, HistGramC, <span class="number">0</span>, <span class="number">256</span> * sizeof(<span class="keyword">double</span>)); </span><br><span class="line">        Iter++;</span><br><span class="line">        <span class="comment">// 似乎直方图无法平滑为双峰的，返回错误代码</span></span><br><span class="line">        <span class="keyword">if</span> (Iter &gt;= <span class="number">10000</span>) <span class="keyword">return</span> -<span class="number">1</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 阈值为两峰值的平均值</span></span><br><span class="line">    <span class="keyword">int</span>[] Peak = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (Y = <span class="number">1</span>, Index = <span class="number">0</span>; Y &lt; <span class="number">255</span>; Y++)</span><br><span class="line">        <span class="keyword">if</span> (HistGramCC[Y - <span class="number">1</span>] &lt; HistGramCC[Y] &amp;&amp; HistGramCC[Y + <span class="number">1</span>] &lt; HistGramCC[Y]) Peak[Index++] = Y - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> ((Peak[<span class="number">0</span>] + Peak[<span class="number">1</span>]) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2017/12/24/灰度化与二值化/07103420-077f102094bb44e9b5ca0596285f6a8f.x-png" alt="img">   <img src="/2017/12/24/灰度化与二值化/07105257-f00edc8f2bff490bac1278f98168818e.x-png" alt="img"> <img src="/2017/12/24/灰度化与二值化/07103640-ac2cc98d329c4ee1bc0d4d7b2a706e6f.x-png" alt="img"> <img src="/2017/12/24/灰度化与二值化/07105333-7f807824781d45e9a7f3af22d56b2373.x-png" alt="img"></p><p><br></p><h4 id="5、迭代最佳阈值"><a href="#5、迭代最佳阈值" class="headerlink" title="5、迭代最佳阈值"></a>5、<strong>迭代最佳阈值</strong></h4><ul><li><p>描述</p><p>该算法先假定一个阈值，然后计算在该阈值下的<strong>前景</strong>和<strong>背景</strong>的<strong>中心值</strong>，<strong>当前景和背景中心值得平均值和假定的阈值相同时，则迭代中止，并以此值为阈值进行二值化</strong>。 </p></li></ul><p><br></p><ul><li><p>实现过程 </p><p>（1）求出图象的最大灰度值和最小灰度值，分别记为gi和gu，令初始阈值为：</p><p>​                        <img src="/2017/12/24/灰度化与二值化/07110059-5849bf33b0b1454d894690db3855a202.x-png" alt="img"></p><p><br></p><p>​      (2) 根据阈值T0将图象分割为<strong>前景</strong>和<strong>背景</strong>，分别求出两者的平均灰度值Ab和Af:</p><p>　　        　　　　<img src="/2017/12/24/灰度化与二值化/07110548-fcea3ebb81854175a54f4947a9b6b8cb.x-png" alt="img"></p><p><br></p><p>​      (3) 令</p><p>​                          <img src="/2017/12/24/灰度化与二值化/07110711-8020db244f1648e2a372523af491c697.x-png" alt="img"></p><p>如果Tk=Tk+1,则取Tk为所求得的阈值，否则，转2继续迭代。</p><p><br></p></li><li><p>参考代码 </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">GetIterativeBestThreshold</span><span class="params">(<span class="keyword">int</span>[] HistGram)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X, Iter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> MeanValueOne, MeanValueTwo, SumOne, SumTwo, SumIntegralOne, SumIntegralTwo;</span><br><span class="line">    <span class="keyword">int</span> MinValue, MaxValue;</span><br><span class="line">    <span class="keyword">int</span> Threshold, NewThreshold;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (MinValue = <span class="number">0</span>; MinValue &lt; <span class="number">256</span> &amp;&amp; HistGram[MinValue] == <span class="number">0</span>; MinValue++);</span><br><span class="line">    <span class="keyword">for</span> (MaxValue = <span class="number">255</span>; MaxValue &gt; MinValue &amp;&amp; HistGram[MinValue] == <span class="number">0</span>; MaxValue--);</span><br><span class="line">    <span class="comment">// 图像中只有一个颜色</span></span><br><span class="line">    <span class="keyword">if</span> (MaxValue == MinValue) <span class="keyword">return</span> MaxValue;</span><br><span class="line">    <span class="comment">// 图像中只有二个颜色           </span></span><br><span class="line">    <span class="keyword">if</span> (MinValue + <span class="number">1</span> == MaxValue) <span class="keyword">return</span> MinValue;</span><br><span class="line"></span><br><span class="line">    Threshold = MinValue;</span><br><span class="line">    NewThreshold = (MaxValue + MinValue) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 当前后两次迭代的获得阈值相同时，结束迭代 </span></span><br><span class="line">    <span class="keyword">while</span> (Threshold != NewThreshold) &#123;</span><br><span class="line">        SumOne = <span class="number">0</span>;</span><br><span class="line">        SumIntegralOne = <span class="number">0</span>;</span><br><span class="line">        SumTwo = <span class="number">0</span>;</span><br><span class="line">        SumIntegralTwo = <span class="number">0</span>;</span><br><span class="line">        Threshold = NewThreshold;</span><br><span class="line">        <span class="comment">//根据阈值将图像分割成目标和背景两部分，求出两部分的平均灰度值</span></span><br><span class="line">        <span class="keyword">for</span> (X = MinValue; X &lt;= Threshold; X++) &#123;</span><br><span class="line">            SumIntegralOne += HistGram[X] * X;</span><br><span class="line">            SumOne += HistGram[X];</span><br><span class="line">        &#125;</span><br><span class="line">        MeanValueOne = SumIntegralOne / SumOne;</span><br><span class="line">        <span class="keyword">for</span> (X = Threshold + <span class="number">1</span>; X &lt;= MaxValue; X++) &#123;</span><br><span class="line">            SumIntegralTwo += HistGram[X] * X;</span><br><span class="line">            SumTwo += HistGram[X];</span><br><span class="line">        &#125;</span><br><span class="line">        MeanValueTwo = SumIntegralTwo / SumTwo;</span><br><span class="line">        <span class="comment">//求出新的阈值</span></span><br><span class="line">        NewThreshold = (MeanValueOne + MeanValueTwo) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        Iter++;</span><br><span class="line">        <span class="keyword">if</span> (Iter &gt;= <span class="number">1000</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Threshold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>   <img src="/2017/12/24/灰度化与二值化/07111226-f077d59164cf4cebaef135634abeb55c.x-png" alt="img">        <img src="/2017/12/24/灰度化与二值化/07111238-b23e236161074ff4a2428ac6cfe8af0b.x-png" alt="img">        <img src="/2017/12/24/灰度化与二值化/07111258-090a3ab6f3f842c58a098584c09f4552.x-png" alt="img"></p><p>   <img src="/2017/12/24/灰度化与二值化/07111312-085afaece33a4c4bbc0b65d651ca6c1f.x-png" alt="img">        <img src="/2017/12/24/灰度化与二值化/07111343-3fdc17a60749466c8330a4841abdf6f7.x-png" alt="img">        <img src="/2017/12/24/灰度化与二值化/07111359-99e366ba58f14956b34d6cc7d7b98027.x-png" alt="img"></p><p><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>菜鸟教程(runoob.com)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">onchange</span>=<span class="string">"f(this)"</span> <span class="attr">type</span>=<span class="string">"file"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"250"</span> <span class="attr">id</span>=<span class="string">"scream"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"250"</span> <span class="attr">height</span>=<span class="string">"250"</span> <span class="attr">style</span>=<span class="string">"border:1px solid #d3d3d3;"</span>&gt;</span></span><br><span class="line">        您的浏览器不支持 HTML5 canvas 标签。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">inputBtn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> url = URL.createObjectURL(inputBtn.files[<span class="number">0</span>]);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> c = <span class="built_in">document</span>.getElementById(<span class="string">"myCanvas"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> ctx = c.getContext(<span class="string">"2d"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> img = <span class="built_in">document</span>.getElementById(<span class="string">"scream"</span>);</span></span><br><span class="line"><span class="javascript">        img.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">            ctx.drawImage(img, 0, 0, img.width, img.height);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> imgData = ctx.getImageData(<span class="number">0</span>, <span class="number">0</span>, c.width, c.height);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> list = [];</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgData.data.length; i += <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> r = imgData.data[i];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> g = imgData.data[i + <span class="number">1</span>];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> b = imgData.data[i + <span class="number">2</span>];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> v = <span class="built_in">parseInt</span>(<span class="number">0.299</span> * r + <span class="number">0.578</span> * g + <span class="number">0.114</span> * b);</span></span><br><span class="line"><span class="undefined">                !list[v] &amp;&amp; (list[v] = 0);</span></span><br><span class="line"><span class="undefined">                list[v]++;</span></span><br><span class="line"><span class="undefined">                imgData.data[i] = imgData.data[i + 1] = imgData.data[i + 2] = v;</span></span><br><span class="line"><span class="undefined">                imgData.data[i + 3] = 255;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> sum = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> account = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">255</span>; i++) &#123;</span></span><br><span class="line"><span class="undefined">                !list[i] &amp;&amp; (list[i] = 0);</span></span><br><span class="line"><span class="undefined">                sum += i * list[i];</span></span><br><span class="line"><span class="undefined">                account += list[i];</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> binaryV = sum / account;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(sum, account, binaryV)</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; imgData.data.length; i += <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> v = imgData.data[i] &gt;= binaryV ? <span class="number">255</span> : <span class="number">0</span>;</span></span><br><span class="line"><span class="undefined">                imgData.data[i] = imgData.data[i + 1] = imgData.data[i + 2] = v;</span></span><br><span class="line"><span class="undefined">                imgData.data[i + 3] = 255;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            ctx.putImageData(imgData, 0, 0, 0, 0, 125, 125);</span></span><br><span class="line"><span class="undefined">            ctx.putImageData(imgData, 0, 0, 125, 125, 125, 125);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">        img.src = url;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 图像 </tag>
            
            <tag> 灰度化 </tag>
            
            <tag> 二值化 </tag>
            
            <tag> 灰度直方图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>严格模式this</title>
      <link href="/2017/12/23/%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8Fthis/"/>
      <url>/2017/12/23/%E4%B8%A5%E6%A0%BC%E6%A8%A1%E5%BC%8Fthis/</url>
      <content type="html"><![CDATA[<ol start="0"><li><h4 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h4><p>this的指向只有函数执行的时候才能确定，指向调用它的对象</p><p><br></p></li><li><h4 id="全局作用域中的this"><a href="#全局作用域中的this" class="headerlink" title="全局作用域中的this"></a>全局作用域中的this</h4><p>在严格模式下，在<strong>全局作用域</strong>中，this指向window对象</p><p><br> </p></li><li><h4 id="全局作用域中函数中的this"><a href="#全局作用域中函数中的this" class="headerlink" title="全局作用域中函数中的this"></a>全局作用域中函数中的this</h4><p>在严格模式下，这种<strong>函数中的this等于undefined</strong></p><p><br> </p></li><li><h4 id="对象的函数（方法）中的this"><a href="#对象的函数（方法）中的this" class="headerlink" title="对象的函数（方法）中的this"></a>对象的函数（方法）中的this</h4><p>在严格模式下，对象的函数中的this指向<strong>调用函数的对象实例</strong></p><p><br> </p></li><li><h4 id="构造函数的this"><a href="#构造函数的this" class="headerlink" title="构造函数的this"></a>构造函数的this</h4><p>在严格模式下，构造函数中的this指向<strong>构造函数创建的对象实例</strong>。</p><p><br> </p></li><li><h4 id="事件处理函数中的this"><a href="#事件处理函数中的this" class="headerlink" title="事件处理函数中的this"></a>事件处理函数中的this</h4><p>在严格模式下，在事件处理函数中，this指向<strong>触发事件的目标对象</strong>。</p><p><br></p></li><li><h4 id="内联事件处理函数中的this"><a href="#内联事件处理函数中的this" class="headerlink" title="内联事件处理函数中的this"></a>内联事件处理函数中的this</h4><p>在严格模式下，在内联事件处理函数中，有以下两种情况： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"alert((function()&#123;'use strict'; return this&#125;)());"</span>&gt;</span></span><br><span class="line">    内联事件处理1</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 警告窗口中的字符为undefined --&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"'use strict'; alert(this.tagName.toLowerCase());"</span>&gt;</span></span><br><span class="line">    内联事件处理2</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 警告窗口中的字符为button --&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
        <tags>
            
            <tag> this </tag>
            
            <tag> 严格模式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>URL-createObjectURL</title>
      <link href="/2017/12/11/URL-createObjectURL/"/>
      <url>/2017/12/11/URL-createObjectURL/</url>
      <content type="html"><![CDATA[<h1 id="createObjectURL"><a href="#createObjectURL" class="headerlink" title="createObjectURL"></a>createObjectURL</h1><p><code>URL.createObjectURL()</code>方法会根据传入的参数<strong>创建一个指向该参数对象的URL</strong>。这个<strong>URL的生命仅存在于它被创建的这个文档里</strong>。新的对象<strong>URL指向执行的File对象或者是Blob对象</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">objectURL = URL.createObjectURL(blob || file);</span><br></pre></td></tr></table></figure><ul><li>File对象，就是<strong>一个文件</strong>。比如我用<code>input type=&quot;file&quot;</code>标签来上传文件,那么里面的每个文件都是一个File对象。</li><li>Blob对象，就是<strong>二进制数据</strong>。比如通过new Blob()创建的对象就是Blob对象。又比如，在XMLHttpRequest里,如果指定responseType为blob，那么得到的返回值也是一个blob对象。</li></ul><h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>每次调用<code>createObjectURL</code>的时候，一个新的URL对象就被创建了。即使你已经为同一个文件创建过一个URL。 <strong>如果你不再需要这个对象，要释放它，需要使用<code>URL.revokeObjectURL()</code>方法。**</strong>当页面被关闭，浏览器会自动释放它**，但是为了最佳性能和内存使用，当确保不再用得到它的时候,就应该释放它。</p><p><br></p>]]></content>
      
      
        <tags>
            
            <tag> url </tag>
            
            <tag> createObjectURL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>三个视口</title>
      <link href="/2017/12/09/%E4%B8%89%E4%B8%AA%E8%A7%86%E5%8F%A3/"/>
      <url>/2017/12/09/%E4%B8%89%E4%B8%AA%E8%A7%86%E5%8F%A3/</url>
      <content type="html"><![CDATA[<h1 id="一、像素"><a href="#一、像素" class="headerlink" title="一、像素"></a>一、像素</h1><ul><li><strong>设备像素</strong>：设备屏幕的物理像素，对于任何设备来讲物理像素的数量是固定的。（物理像素）</li><li><strong>CSS像素</strong>：这是一个抽象的像素概念，它是为web开发者创造的。（逻辑像素）</li></ul><p><br></p><p>一个<code>width:200px</code> 的元素跨越了 200 个CSS像素。CSS像素相当于多少个<strong>设备像素</strong>取决于屏幕的特性（是<strong>否高密度</strong>）和用户进行的<strong>缩放</strong>。 </p><ul><li><strong>当缩放程度为100%时:</strong><ul><li><strong>在旧的屏幕上，1个CSS像素等于1个设备像素</strong>。</li><li><strong>在高密度屏幕上（iphone6），1个CSS像素跨越了2（dpr）个设备像素。</strong> </li></ul></li><li><strong>当缩放程度为200%时：</strong><ul><li><strong>在旧的屏幕上，1个css像素等于2个设备像素</strong></li><li><strong>在高密度屏幕上，1个css像素跨越了<code>2*dpr</code>个设备像素</strong></li></ul></li><li><strong>当缩放程度为50%时：</strong><ul><li><strong>在旧的屏幕上，2个css像素等于1个设备像素</strong></li><li><strong>在高密度屏幕上，1个css像素跨越了<code>dpr/2</code>个设备像素</strong></li></ul></li></ul><p><br></p><p>下图是在旧屏幕手机上css像素（红色）和设备像素（蓝色）的具体情况：</p><p><img src="/2017/12/09/三个视口/scale.png" alt=""></p><p><br></p><h1 id="二、设备像素比"><a href="#二、设备像素比" class="headerlink" title="二、设备像素比"></a>二、设备像素比</h1><ul><li>设备像素比（DPR）=  设备像素个数  /  <strong>理想视口</strong>像素个数（<strong>device-width</strong>）  </li></ul><p><img src="/2017/12/09/三个视口/设备像素比.png" alt=""></p><p><strong>注：理想视口（device-width）和设备像素比（dpr）一般不改变</strong></p><p><br></p><a id="more"></a> <h1 id="三、三个视口"><a href="#三、三个视口" class="headerlink" title="三、三个视口"></a>三、<strong>三个视口</strong></h1><h4 id="1-布局视口"><a href="#1-布局视口" class="headerlink" title="1.布局视口"></a><strong>1.布局视口</strong></h4><p>如果移动端设备的<strong>布局视口宽度</strong>和<strong>浏览器窗口宽度</strong>一样会导致很丑陋的结果。所以，移动端浏览器厂商必须保证即使在窄屏幕下我们的页面可以展示的很好，他们将<strong>布局视口宽度</strong>设计得比<strong>浏览器窗口宽度</strong>大出很多。看下面的图例，体会一下布局视口：</p><p><img src="/2017/12/09/三个视口/1005451-20160822142728823-1045734594.png" alt=""></p><p><br></p><h4 id="2-视觉视口"><a href="#2-视觉视口" class="headerlink" title="2.视觉视口"></a><strong>2.视觉视口</strong></h4><p> 虽然独立的布局视口很大程度上<strong>帮助桌面网站过渡到手机上</strong>。但我们不能完全忽视移动设备上的屏幕尺寸。所以该说明一下视觉视口了。</p><p><br></p><p><strong>视觉视口是用户正在看到的网站的区域</strong>。<font color="#A52A2A" size="4"><strong>用户可以通过缩放来操作视觉视口，同时不会影响布局视口</strong></font>。布局视口还是保持在原来的宽度。看下图说明一下视觉视口区域 :</p><p><img src="/2017/12/09/三个视口/1005451-20160822143331276-1400295236.png" alt=""></p><p>如上图，红色箭头之间的区域就是视觉视口的区域。它<strong>和设备的屏幕一样宽</strong>，并且它的CSS像素的数量会<strong>随着用户缩放而改变</strong>。 <strong>缩放只改变视觉视口的css像素大小，也就是一个css像素等于几个设备像素的问题。</strong></p><p><br></p><h4 id="3-理想视口"><a href="#3-理想视口" class="headerlink" title="3.理想视口"></a><strong>3.理想视口</strong></h4><p>理想视口就是<strong>device-width</strong>，定义理想视口是浏览器的工作，是固定不变的。 </p><p>布局视口的默认宽度并不是一个理想的宽度，只有手动添加meta视口标签才生效。如果没有meta视口标签，那么布局将会维持它的默认宽度。 </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"device"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--width指的是布局视口-&gt;</span></span><br><span class="line"><span class="comment">&lt;!--device-width指的是理解视口-&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 视口 </tag>
            
            <tag> css像素 </tag>
            
            <tag> 设备像素 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Retina-高清图</title>
      <link href="/2017/12/09/Retina-%E9%AB%98%E6%B8%85%E5%9B%BE/"/>
      <url>/2017/12/09/Retina-%E9%AB%98%E6%B8%85%E5%9B%BE/</url>
      <content type="html"><![CDATA[<h1 id="一、高清图问题"><a href="#一、高清图问题" class="headerlink" title="一、高清图问题"></a>一、高清图问题</h1><p>1、理论上，<strong>1个<font color="#A52A2A" size="4">位图像素</font>对应于1个<font color="#A52A2A" size="4">物理像素</font>，图片才能得到完美清晰的展示</strong>。在普通屏幕下是没有问题的，但是在<font color="#A52A2A" size="4"><strong>retina屏幕</strong></font>下就会出现位图像素点不够，从而导致图片模糊的情况。用一张图来表示： </p><p><img src="/2017/12/09/Retina-高清图/Fuex59zSiV9pbaJG-s9wg_UpCERP.jpg" alt=""></p><p>如上图：对于dpr=2的retina屏幕而言，<font color="#A52A2A" size="4"><strong>1个位图像素对应于4个物理像素，由于单个位图像素不可以再进一步分割，所以只能就近取色，从而导致图片模糊</strong></font>(注意上述的几个颜色值)。 </p><p><br></p><p>2、如果用了两倍图片，会怎样呢？很明显，在普通屏幕下，200×300(css pixel)img标签，所对应的物理像素个数就是200×300个，而两倍图片的位图像素个数则是200×300*4，所以就出现<strong>一个物理像素点对应4个位图像素点</strong>，所以它的取色也只能通过一定的算法(显示结果就是一张只有原图像素总数四分之一，我们称这个过程叫做<strong>downsampling</strong>)，肉眼看上去虽然图片不会模糊，但是会觉得图片缺少一些<strong>锐利度</strong>，或者是有点色差(但还是可以接受的)。</p><p> <img src="/2017/12/09/Retina-高清图/FsYhT3m0Zq3ce-HLBOOlQfY9W2DD.jpg" alt="Retina-高清图"></p><p><br></p><a id="more"></a> <h1 id="二、-1px-border问题"><a href="#二、-1px-border问题" class="headerlink" title="二、 1px border问题"></a>二、 1px border问题</h1><p>一张图来解释： </p><p><img src="/2017/12/09/Retina-高清图/FkiktwhAWrkJoZmYuiYG-DzWDfME.jpg" alt=""></p><p>上图中，<strong>对于一条1px宽的直线，它们在屏幕上的<font color="#A52A2A" size="4">物理尺寸</font>(灰色区域)的确是相同的</strong>，不同的其实是屏幕上最小的物理显示单元，即物理像素，所以对于一条直线，iphone5它能显示的最小宽度其实是图中的红线圈出来的灰色区域，用css来表示，理论上说是0.5px。设计师想要的retina下border: 1px;，其实就是1物理像素宽，对于css而言，可以认为是border: 0.5px;，这是retina下(dpr=2)下能显示的最小单位。</p><p><br></p><p><strong>注：在不同的屏幕上(普通屏幕 vs retina屏幕)，css像素所呈现的大小(物理尺寸)是一致的，不同的是1个css像素所对应的物理像素个数是不一致的。</strong> </p><p><br></p><h1 id="三、字体问题"><a href="#三、字体问题" class="headerlink" title="三、字体问题"></a>三、字体问题</h1><p>对于字体缩放问题，设计师原本的要求是这样的：<strong>任何手机屏幕上字体大小都要统一</strong>，所以我们针对不同的分辨率(dpr不同)，会做如下处理： </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width*dpr,initial-scale=1/dpr,maximum-scale=1/dpr, minimum-scale=1/dpr,user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">font-size</span>: 16<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-attr">[data-dpr="2"]</span> <span class="selector-tag">input</span> &#123;</span><br><span class="line">    // font-size: calc(attr(data-dpr)*16px); 不支持</span><br><span class="line">    <span class="selector-tag">font-size</span>: 32<span class="selector-tag">px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意，字体不可以用rem，误差太大了，且不能满足任何屏幕下字体大小相同</strong>。为了方便，我们也会用less写一个mixin：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.px2px</span>(@<span class="keyword">name</span>, @px) &#123;</span><br><span class="line">    @&#123;<span class="selector-tag">name</span>&#125;: <span class="selector-tag">round</span>(@<span class="keyword">px</span> / <span class="number">2</span>) * <span class="number">1px</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-attr">[data-dpr="2"]</span> &amp; &#123;</span><br><span class="line">        @&#123;name&#125;: @px * 1px;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    // for mx3</span><br><span class="line">    <span class="selector-attr">[data-dpr="2.5"]</span> &amp; &#123;</span><br><span class="line">        @&#123;name&#125;: round(@px * 2.5 / 2) * 1px;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    // for 小米note</span><br><span class="line">    <span class="selector-attr">[data-dpr="2.75"]</span> &amp; &#123;</span><br><span class="line">        @&#123;name&#125;: round(@px * 2.75 / 2) * 1px;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="selector-attr">[data-dpr="3"]</span> &amp; &#123;</span><br><span class="line">        @&#123;name&#125;: round(@px / 2 * 3) * 1px</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    // for 三星note4</span><br><span class="line">    <span class="selector-attr">[data-dpr="4"]</span> &amp; &#123;</span><br><span class="line">        @&#123;name&#125;: @px * 2px;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> retina </tag>
            
            <tag> 视网膜图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>代码注释格式</title>
      <link href="/2017/11/28/%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A%E6%A0%BC%E5%BC%8F/"/>
      <url>/2017/11/28/%E4%BB%A3%E7%A0%81%E6%B3%A8%E9%87%8A%E6%A0%BC%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h1 id="module声明模块"><a href="#module声明模块" class="headerlink" title="@module声明模块"></a>@module声明模块</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 模块说明</span></span><br><span class="line"><span class="comment">* @module 模块名</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="class声明类"><a href="#class声明类" class="headerlink" title="@class声明类"></a>@class声明类</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 类说明</span></span><br><span class="line"><span class="comment">* @class 类名</span></span><br><span class="line"><span class="comment">* @constructor</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p> <br></p><a id="more"></a><h1 id="method声明函数或类方法"><a href="#method声明函数或类方法" class="headerlink" title="@method声明函数或类方法"></a>@method声明函数或类方法</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 方法说明</span></span><br><span class="line"><span class="comment">* @method 方法名</span></span><br><span class="line"><span class="comment">* @for 所属类名</span></span><br><span class="line"><span class="comment">* @param &#123;参数类型&#125; 参数名 参数说明</span></span><br><span class="line"><span class="comment">* @return &#123;返回值类型&#125; 返回值说明</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p> <br> </p><h1 id="property声明类属性"><a href="#property声明类属性" class="headerlink" title="@property声明类属性"></a>@property声明类属性</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 属性说明</span></span><br><span class="line"><span class="comment">* @property &#123;属性类型&#125; 属性名</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><ul><li><p>​    需要花费几分钟来理解的<strong>代码块</strong>，都应该有注释</p></li><li><p><strong>处理特殊情况</strong>的语句，应该有注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 推荐</span></span><br><span class="line"><span class="comment"> * 用来说明代码块</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initSku</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    params = params || &#123;&#125;; <span class="comment">//用来说明单语句，并且放在语句后面</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 还行</span></span><br><span class="line"><span class="comment">// 用来说明代码块，并且放在代码块上面</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initSku</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    params = params || &#123;&#125;; <span class="comment">//用来说明单语句，并且放在语句后面</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
        <tags>
            
            <tag> 注释格式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html-雪碧图或精灵图</title>
      <link href="/2017/11/27/html-%E9%9B%AA%E7%A2%A7%E5%9B%BE%E6%88%96%E7%B2%BE%E7%81%B5%E5%9B%BE/"/>
      <url>/2017/11/27/html-%E9%9B%AA%E7%A2%A7%E5%9B%BE%E6%88%96%E7%B2%BE%E7%81%B5%E5%9B%BE/</url>
      <content type="html"><![CDATA[<p>​       网站为了减少http请求数，会将大量的图片图片合成一张<strong>雪碧图</strong>（Sprite）来使用。雪碧图的使用就是通过控制<code>background-position</code>属性值来确定图片呈现的位置。 </p><a id="more"></a><p><img src="/2017/11/27/html-雪碧图或精灵图/20160404214920203.png" alt=""></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.icon1</span>&#123;<span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.icon2</span>&#123;<span class="attribute">background-position</span>: -<span class="number">40px</span> <span class="number">0</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.icon3</span>&#123;<span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">25px</span>;&#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.icon4</span>&#123;<span class="attribute">background-position</span>: -<span class="number">40px</span> -<span class="number">25px</span>;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 雪碧图 </tag>
            
            <tag> 精灵图 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>rem与vw布局</title>
      <link href="/2017/11/26/rem%E4%B8%8Evw%E5%B8%83%E5%B1%80/"/>
      <url>/2017/11/26/rem%E4%B8%8Evw%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h1 id="一、rem布局"><a href="#一、rem布局" class="headerlink" title="一、rem布局"></a>一、rem布局</h1><p><strong>rem布局</strong>解决了一个问题，让设计稿在不同设备上进行<strong>等比缩放</strong>。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">//媒体查询</span><br><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">359px</span>) and (min-width:<span class="number">320px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span>,</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">50px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">374px</span>) and (min-width:<span class="number">360px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span>,</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">56.25px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">413px</span>) and (min-width:<span class="number">375px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span>,</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">58.5px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width:<span class="number">639px</span>) and (min-width:<span class="number">414px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span>,</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">64.6px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width:<span class="number">640px</span>) &#123;</span><br><span class="line">    <span class="selector-tag">html</span>,</span><br><span class="line">    <span class="selector-tag">body</span> &#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">100px</span> <span class="meta">!important</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// onload事件、onresize事件监听</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refreshRem</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> docEl = <span class="built_in">window</span>.document.documentElement;</span><br><span class="line">    <span class="keyword">let</span> width = docEl.getBoundingClientRect().width;</span><br><span class="line">    <span class="keyword">if</span> (width &gt; <span class="number">640</span>) &#123; width = <span class="number">640</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> rem = <span class="number">100</span> * (width / <span class="number">640</span>);</span><br><span class="line">    docEl.style.fontSize = rem + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果页面的宽度超过了640px，那么页面中<code>html</code>的<code>font-size</code>恒为<code>100px</code>，否则，页面中html的<code>font-size</code>的大小为： <code>100 \* (当前页面宽度 / 640)</code></strong>  </p><p>注：如果字体大小也等比缩放，在大屏手机上会有一种老人机的视觉</p><p><br></p><a id="more"></a> <h1 id="二、vw布局"><a href="#二、vw布局" class="headerlink" title="二、vw布局"></a>二、vw布局</h1><h4 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h4><p>最简单的方案就是所有的布局元素及属性都用VW来做单位，对应关系是： </p><p>设计稿 750px——&gt;100vw </p><p>那我们书写时计算：<code>(x/750)*100vw</code> </p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vw_base</span>: <span class="number">750</span>; </span><br><span class="line">@function vw(<span class="variable">$px</span>) &#123;</span><br><span class="line">    @return (<span class="variable">$px</span> / 750) * 100vw;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h4><p>沿用rem布局方案，所有的布局元素及属性都用rem做单位，用vw单位给html设置font-size形成“流单位”，这样就不再需要JS来动态计算根元素字体大小。</p><p>如果以前你习惯了约定750px设计稿的根元素字体大小为100px的话，你可以直接设置：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13.3333vw</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> vw </tag>
            
            <tag> rem </tag>
            
            <tag> 自适应 </tag>
            
            <tag> 自配 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-3D旋转效果</title>
      <link href="/2017/11/26/css-3D%E6%97%8B%E8%BD%AC%E6%95%88%E6%9E%9C/"/>
      <url>/2017/11/26/css-3D%E6%97%8B%E8%BD%AC%E6%95%88%E6%9E%9C/</url>
      <content type="html"><![CDATA[<h1 id="一、XYZ轴"><a href="#一、XYZ轴" class="headerlink" title="一、XYZ轴"></a>一、XYZ轴</h1><p>以屏幕为平面，X轴的方向为宽的方向，Y轴的方向为高的方向，Z轴的方向垂直于屏幕</p><p><img src="/2017/11/26/css-3D旋转效果/3d_axes.png" alt=""></p><p><br></p><a id="more"></a><h1 id="二、css变换函数"><a href="#二、css变换函数" class="headerlink" title="二、css变换函数"></a>二、css变换函数</h1><ul><li><p>rotateX(angle)：绕着X轴旋转 </p></li><li><p>rotateY(angle)：绕着Y轴旋转 </p></li><li><p>rotateZ(angle)：绕着Z轴旋转 </p></li><li><p>translateX(n)：沿着X轴位移 </p></li><li><p>translateY(n)：沿着Y轴位移 </p></li><li><p>translateZ(n)：沿着Z轴位移</p></li></ul><p><br></p><h1 id="三、属性"><a href="#三、属性" class="headerlink" title="三、属性"></a>三、属性</h1><h4 id="1、transform-style属性"><a href="#1、transform-style属性" class="headerlink" title="1、transform-style属性"></a>1、transform-style属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">transform-style: flat | preserve-3d</span><br><span class="line"><span class="comment">/*flat值为默认值，表示所有子元素在2D平面呈现。*/</span></span><br><span class="line"><span class="comment">/*preserve-3d表示所有子元素在3D空间中呈现。*/</span></span><br></pre></td></tr></table></figure><ul><li>如果对一个元素设置了<code>transform-style</code>的值为<code>flat</code>，则<strong>该元素的所有子元素都将被平展到该元素的2D平面中进行呈现</strong>。沿着X轴或Y轴方向旋转该元素将导致位于正或负Z轴位置的子元素显示在该元素的平面上，而不是它的前面或者后面。 </li><li>如果你的元素设置了<code>transform-style</code>值为<code>preserve-3d</code>，就<strong>不能为了防止子元素溢出容器而设置overflow值为hidden</strong>。</li></ul><p><br></p><h4 id="2、perspective属性"><a href="#2、perspective属性" class="headerlink" title="2、perspective属性"></a>2、perspective属性</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">perspective：none | &lt;length&gt;</span><br></pre></td></tr></table></figure><p>简单的理解为视距，<strong>用来设置用户和元素3D空间Z平面之间的距离</strong>。</p><p><strong>perspective属性的默认值为none，表示无限的角度来看3D物体</strong>，但看上去是平的。</p><p>另一个值<code>&lt;length&gt;</code>接受一个长度单位大于0的值。而且其单位不能为百分比值。</p><p><br></p><ul><li><code>&lt;length&gt;</code>值越大，角度出现的越远，从而创建一个相当低的强度和非常小的3D空间变化。</li><li>反之，此值越小，角度出现的越近，从而创建一个高强度的角度和一个大型3D变化。 </li></ul><p><br></p><p>为了使用原始圆（轮廓）看起来出现在Z轴上（虚线圆），画布上的实体圆将扩大两部，如浅蓝色的圆。在底部图中显示，圆按比例缩小，致使虚线圆出现在画布后面，并且z的大小是距原始位置三分之一。 </p><p><strong><code>perspective</code>用在舞台元素上（变形元素们的共同父元素）；<code>perspective()</code>就是用在当前变形元素上，并且可以与其他的transform函数一起使用。</strong></p><p><img src="/2017/11/26/css-3D旋转效果/transform-21.jpg" alt=""></p><p><br></p><h4 id="3、perspective-origin属性"><a href="#3、perspective-origin属性" class="headerlink" title="3、perspective-origin属性"></a>3、perspective-origin属性</h4><p>主要用来决定<code>perspective</code>属性的<strong>源点角度</strong>。它实际上设置了X轴和Y轴位置，在该位置观看者好像在观看该元素的子元素。 </p><p><img src="/2017/11/26/css-3D旋转效果/transform-24.jpg" alt=""></p><p><br></p><h4 id="4、backface-visibility属性"><a href="#4、backface-visibility属性" class="headerlink" title="4、backface-visibility属性"></a>4、backface-visibility属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">backface-visibility: visible | hidden</span><br><span class="line"><span class="comment">/**决定元素旋转背面是否可见 */</span></span><br></pre></td></tr></table></figure><p><img src="/2017/11/26/css-3D旋转效果/transform-28.jpg" alt=""></p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 3D </tag>
            
            <tag> 变换 </tag>
            
            <tag> 旋转 </tag>
            
            <tag> transform </tag>
            
            <tag> perspective </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx-proxy_pass</title>
      <link href="/2017/11/16/nginx-proxy-pass/"/>
      <url>/2017/11/16/nginx-proxy-pass/</url>
      <content type="html"><![CDATA[<h4 id="一、路径问题"><a href="#一、路径问题" class="headerlink" title="一、路径问题"></a>一、路径问题</h4><ul><li><strong>当<code>proxy_pass</code>后有<code>url</code>时，则nginx不会把<code>location</code>中匹配的路径部分代理走</strong></li><li><strong>当<code>proxy_pass</code>后没有<code>url</code>时，则会把匹配的路径部分也给代理走</strong></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /static_js/ &#123; </span><br><span class="line">    <span class="attribute">proxy_pass</span> http://js.test.com/; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上面的配置，如果请求的url是 <strong><code>/static_js/test.html</code></strong> ，会被代理成 <strong><code>test.html</code></strong>。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /static_js/ &#123; </span><br><span class="line">    <span class="attribute">proxy_pass</span> http://js.test.com;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则会被代理到 <strong><code>/static_js/test.htm</code></strong> 。</p><a id="more"></a> <p><br></p><h4 id="二、proxy-hide-header"><a href="#二、proxy-hide-header" class="headerlink" title="二、proxy_hide_header"></a>二、proxy_hide_header</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_hide_header</span> field;</span><br></pre></td></tr></table></figure><p>默认情况下，<code>nginx</code>不会从代理服务器对客户端的响应中传递标题字段<code>Date，Server，X-Pad 和 X-Accel-...</code>。该<code>proxy_hide_header</code>指令设置了不会传递的其他字段。</p><p><br></p><h4 id="三、proxy-set-header"><a href="#三、proxy-set-header" class="headerlink" title="三、proxy_set_header"></a>三、proxy_set_header</h4><h5 id="1、原理介绍"><a href="#1、原理介绍" class="headerlink" title="1、原理介绍"></a>1、原理介绍</h5><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> field value;</span><br></pre></td></tr></table></figure><table><thead><tr><th>语法:</th><th><strong>proxy_set_header</strong> field value;</th></tr></thead><tbody><tr><td>默认值:</td><td>proxy_set_header  <strong>Connection</strong>  close; <br>proxy_set_header  <strong>Host</strong>  $proxy_host;</td></tr><tr><td>上下文:</td><td>http, server, location</td></tr></tbody></table><p><strong>允许重新定义或者添加发往后端服务器的<font color="#A52A2A" size="4">请求头</font></strong>。<code>value</code>可以包含文本、变量或者它们的组合。 当且仅当当前配置级别中没有定义<code>proxy_set_header</code>指令时，会从上面的级别继承配置。 </p><ul><li><p>默认情况下，只有两个请求头会被重新定义： </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Host <span class="variable">$proxy_host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> Connection close;</span><br></pre></td></tr></table></figure></li><li><p><code>proxy_set_header</code>也可以<strong>自定义参数</strong>，如：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> test paroxy_test;</span><br></pre></td></tr></table></figure></li><li><p>如果想要支持下划线的话，需要在http或者server中 增加如下配置： </p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">underscores_in_headers</span> <span class="literal">on</span>|<span class="literal">off</span></span><br></pre></td></tr></table></figure></li><li><p>如果标头字段的值是空字符串，则此字段将不会传递给代理服务器</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Accept-Encoding <span class="string">""</span>;</span><br></pre></td></tr></table></figure></li></ul><h5 id="2、获取用户ip"><a href="#2、获取用户ip" class="headerlink" title="2、获取用户ip"></a>2、获取用户ip</h5><p>在实际应用中，我们可能需要获取<strong>用户的ip地址。</strong>通常情况下我们使用<code>request.getRemoteAddr()</code>就可以获取到客户端ip，但是当我们使用了nginx作为反向代理后，使用<code>request.getRemoteAddr()</code>获取到的就一直是nginx服务器的ip的地址。</p><ul><li><p>方案1：<code>X-real-ip</code></p><ul><li>nginx是可以获得用户的真实ip的，也就是说nginx使用<code>$remote_addr</code>变量时获得的是用户的真实ip，如果我们想要在<strong>服务器端</strong>获得用户的真实ip，就必须在nginx这里作一个赋值操作，如下： </li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># X-real-ip是一个自定义的变量名</span></span><br><span class="line"><span class="attribute">proxy_set_header</span> X-real-ip <span class="variable">$remote_addr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在服务器端可以这样获取</span></span><br><span class="line"><span class="comment"># request.getAttribute("X-real-ip")</span></span><br></pre></td></tr></table></figure></li></ul><p><br></p><ul><li><p>方案2：<code>X-Forwarded-For</code></p><ul><li>一般来说，<code>X-Forwarded-For</code>是用于记录代理信息的，<strong>每经过一级代理(匿名代理除外)，代理服务器都会把这次请求的<code>来源IP</code>追加在<code>X-Forwarded-For</code>中</strong> 。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 192.168.107.107 nginx.conf</span></span><br><span class="line"><span class="attribute">location</span> /test &#123;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://192.168.107.112:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#192.168.107.112 nginx.conf</span></span><br><span class="line"><span class="attribute">location</span> /test &#123;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://192.168.107.114:8080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#192.168.107.114 nginx.conf</span></span><br><span class="line"><span class="attribute">location</span> /test &#123;</span><br><span class="line">    <span class="attribute">default_type</span> text/html;</span><br><span class="line">    <span class="attribute">charset</span> gbk;</span><br><span class="line">    <span class="attribute">echo</span> <span class="string">"<span class="variable">$remote_addr</span> ||<span class="variable">$http_x_real_ip</span>  ||<span class="variable">$http_x_forwarded_for</span>"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 192.168.107.112 || 192.168.162.16 || 192.168.162.16, 192.168.107.107</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="3、实战应用"><a href="#3、实战应用" class="headerlink" title="3、实战应用"></a>3、实战应用</h5><p>从微信小程序跳到H5页面，需要在后台配置相关的<strong>业务域名</strong>。当我们需要跳到其他网站的页面时，可以使用<code>Nginx</code>来做反代理配置。如：在微信后台配置 <strong><code>es.yf-gz.cn</code></strong>，反代理到 <strong><code>shop.mallparking.cn</code></strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> es.yf-gz.cn;</span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /etc/nginx/cer/1_es.yf-gz.cn.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /etc/nginx/cer/2_es.yf-gz.cn.key;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span> AESGCM:ALL:!DH:!EXPORT:!RC4:+HIGH:!MEDIUM:!LOW:!aNULL:!eNULL;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">   <span class="attribute">location</span> / &#123;</span><br><span class="line">       <span class="attribute">proxy_pass</span> http://www.mallparking.cn;</span><br><span class="line">       <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> Host www.mallparking.cn;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Real_IP <span class="variable">$remote_addr</span>;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">       <span class="attribute">proxy_set_header</span> X-Forwarded-Proto https;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="三、端口丢失问题"><a href="#三、端口丢失问题" class="headerlink" title="三、端口丢失问题"></a>三、端口丢失问题</h4><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">90</span>; </span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Host <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Server <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 这里是重点,这样配置才不会丢失端口</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host <span class="variable">$host</span>:<span class="variable">$server_port</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 或者</span></span><br><span class="line">    <span class="comment">#proxy_set_header Host $http_host;</span></span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://127.0.0.1:9001;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：<code>nginx</code>没有正确的把端口信息传送到后端，没能正确的配置<code>nginx</code>。</p>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> proxy_pass </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-事件循环-promise和setTimeOut</title>
      <link href="/2017/11/09/JS-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-promise%E5%92%8CsetTimeOut/"/>
      <url>/2017/11/09/JS-%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF-promise%E5%92%8CsetTimeOut/</url>
      <content type="html"><![CDATA[<h1 id="一、事件循环"><a href="#一、事件循环" class="headerlink" title="一、事件循环"></a>一、事件循环</h1><ol><li><code>mocrotasks</code> 队列的第一个任务取出,放到<code>执行栈</code>中，开始执行</li><li>执行直到当前      stack 为空，于是去检查 <code>microtasks</code>队列</li><li>依次执行<code>microtasks</code> 队列的所有任务，直到 <code>microtasks</code> 队列为空，转 1 </li></ol><p><br></p><p>注：</p><ul><li>如上循环中，注意到第      2 步中执行时可以向 <code>microtasks</code> 队列压入 <code>microtask</code></li><li>一个事件循环里，<code>任务队列</code>分为<code>mocrotasks</code>队列和<code>microtasks</code>队列</li><li><code>microtasks</code>队列只有一个，<code>mocrotasks</code><strong>队列可以有多个</strong></li></ul><p><br></p><h1 id="二、Macrotask"><a href="#二、Macrotask" class="headerlink" title="二、Macrotask"></a>二、Macrotask</h1><ul><li>setImmediate</li><li>setTimeout</li><li>setInterval</li></ul><p><br></p><h1 id="三、Microtask"><a href="#三、Microtask" class="headerlink" title="三、Microtask"></a>三、Microtask</h1><ul><li>process.nextTick</li><li>Promise</li><li>Object.observe</li><li>MutaionObserver</li></ul><p><br></p><h1 id="四、例子"><a href="#四、例子" class="headerlink" title="四、例子"></a>四、例子</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo01</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1 task A 执行中</span></span><br><span class="line">    <span class="comment">// 2 tasks 队列压入新的 task B</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 9 microtasks 队列为空，于是检查 tasks 队列，取出 B并执行了</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                i == <span class="number">9999</span> &amp;&amp; resolve()</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3 task A 继续执行</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 4 microtasks 队列压入 microtask a</span></span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 6 microtask a 执行中</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">            <span class="built_in">Promise</span>.resolve(<span class="number">7</span>)</span><br><span class="line">                <span class="comment">// 7 microtasks 队列压入 microtask b</span></span><br><span class="line">                .then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</span><br><span class="line">            <span class="comment">// microtask a 执行完毕</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="comment">// 8 microtasks 队列压入 microtask c</span></span><br><span class="line">        <span class="comment">// 这个 then 执行完后继续检查 microtasks 队列，并一次执行 b，c</span></span><br><span class="line">        .then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">6</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="comment">// 5 task A 执行完毕，检查 microtasks 队列，发现非空，执行 microtasks 队列的第一个 microtask a</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">5</span></span><br><span class="line"><span class="comment">7</span></span><br><span class="line"><span class="comment">6</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <p><a href="https://www.cnblogs.com/jymz/p/7900439.html" target="_blank" rel="noopener">原文</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo02</span></span><br><span class="line"><span class="comment">// 为了方便理解，我以打印出来的字符作为当前的任务名称</span></span><br><span class="line"><span class="comment">// setTimeout/Promise等我们称之为任务源。而进入任务队列的是他们指定的具体执行任务。</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout1'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise1'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">        i == <span class="number">99</span> &amp;&amp; resolve();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise2'</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'then1'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'global1'</span>);</span><br></pre></td></tr></table></figure><p>首先，事件循环从宏任务队列开始，这个时候，宏任务队列中，只有一个script(整体代码)任务。每一个任务的执行顺序，都依靠<strong>函数调用栈</strong>来搞定，而当遇到<strong>任务源</strong>时，则会先分发任务到对应的队列中去。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/369c6fdc4dcbb43a78a1ac48365e25f8-2.png" alt="img"></p><p>首先script任务开始执行，<strong>全局上下文</strong>入栈</p><p><br></p><p>第二步：script任务执行时首先遇到了setTimeout，<strong>setTimeout为一个宏任务源</strong>，那么他的作用就是将任务分发到它对应的队列中。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/369c6fdc4dcbb43a78a1ac48365e25f8-3.png" alt="img"></p><p><strong>宏任务timeout1进入setTimeout队列</strong></p><p><br></p><p>第三步：script执行时遇到Promise实例。Promise构造函数中的第一个参数，是在new的时候执行，因此不会进入任何其他的队列，而是直接在当前任务直接执行了，而<strong>后续的.then则会被分发到micro-task的Promise队列中去</strong>。因此，构造函数执行时，里面的参数进入函数调用栈执行。for循环不会进入任何队列，因此代码会依次执行。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/8c1e0120dbe950b64c63dfd9010c82e6-4.jpg" alt="img"></p><p>promise1入栈执行，这时promise1被最先输出</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/8c1e0120dbe950b64c63dfd9010c82e6-5.png" alt="img"></p><p>resolve在for循环中入栈执行</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/26f371cf80c7c4147ebb84af03402437-6.png" alt="img"></p><p>构造函数执行完毕的过程中，resolve执行完毕出栈，promise2输出，promise1页出栈，then执行时，Promise任务then1进入对应队列</p><p>script任务继续往下执行，最后只有一句输出了globa1，然后，全局任务就执行完毕了。</p><p><br></p><p>第四步：第一个宏任务script执行完毕之后，就开始执行所有的可执行的微任务。这个时候，微任务中，只有Promise队列中的一个任务then1，因此直接执行就行了，执行结果输出then1，当然，他的执行，也是进入函数调用栈中执行的。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/26f371cf80c7c4147ebb84af03402437-7.png" alt="img"></p><p>执行所有的微任务</p><p><br></p><p>第五步：当所有的micro-tast执行完毕之后，表示第一轮的循环就结束了。这个时候就得开始第二轮的循环。第二轮循环仍然从宏任务macro-task开始。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/a3a6b7679adfaa22423eb02abf45d574-8.jpg" alt="img"></p><p>微任务被清空</p><p>这个时候，我们发现宏任务中，只有在setTimeout队列中还要一个timeout1的任务等待执行。因此就直接执行即可。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/a3a6b7679adfaa22423eb02abf45d574-9.png" alt="img"></p><p>timeout1入栈执行</p><p>这个时候宏任务队列与微任务队列中都没有任务了，所以代码就不会再输出其他东西了。</p><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// demo03</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'golb1'</span>);</span><br><span class="line"> </span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout1'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout1_nextTick'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout1_promise'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout1_then'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'immediate1'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'immediate1_nextTick'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'immediate1_promise'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'immediate1_then'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'glob1_nextTick'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'glob1_promise'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'glob1_then'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'timeout2'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout2_nextTick'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout2_promise'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'timeout2_then'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'glob2_nextTick'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'glob2_promise'</span>);</span><br><span class="line">    resolve();</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'glob2_then'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">setImmediate(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'immediate2'</span>);</span><br><span class="line">    process.nextTick(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'immediate2_nextTick'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'immediate2_promise'</span>);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'immediate2_then'</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第一步：宏任务script首先执行。全局入栈。glob1输出。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/5436da20c69cf399a2844e1fe9d4c92d-10.png" alt="img"></p><p>script首先执行</p><p><br></p><p>第二步，执行过程遇到setTimeout。setTimeout作为任务分发器，将任务分发到对应的宏任务队列中。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/5436da20c69cf399a2844e1fe9d4c92d-11.png" alt="img"></p><p>timeout1进入对应队列</p><p><br></p><p>第三步：执行过程遇到setImmediate。setImmediate也是一个宏任务分发器，将任务分发到对应的任务队列中。setImmediate的任务队列会在setTimeout队列的后面执行。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/300bd342a371cb5516c22a7a007975c1-12.png" alt="img"></p><p>进入setImmediate队列</p><p><br></p><p>第四步：执行遇到nextTick，process.nextTick是一个微任务分发器，它会将任务分发到对应的微任务队列中去。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/300bd342a371cb5516c22a7a007975c1-13.png" alt="img"></p><p>nextTick</p><p><br></p><p>第五步：执行遇到Promise。Promise的then方法会将任务分发到对应的微任务队列中，但是它构造函数中的方法会直接执行。因此，glob1_promise会第二个输出。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/7bcec423f310abbdd6137076868835ce-14.png" alt="img"></p><p>先是函数调用栈的变化</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/7bcec423f310abbdd6137076868835ce-15.png" alt="img"></p><p>然后glob1_then任务进入队列</p><p><br></p><p>第六步：执行遇到第二个setTimeout。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/3f5034d633271b5bbef1ebc0fd4b7128-16.png" alt="img"></p><p>timeout2进入对应队列</p><p><br></p><p>第七步：先后遇到nextTick与Promise</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/3f5034d633271b5bbef1ebc0fd4b7128-17.png" alt="img"></p><p>glob2_nextTick与Promise任务分别进入各自的队列</p><p><br></p><p>第八步：再次遇到setImmediate。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/d3274c7906c631597cdc60df5badf864-18.png" alt="img"></p><p>nextTick</p><p>这个时候，script中的代码就执行完毕了，执行过程中，遇到不同的任务分发器，就将任务分发到各自对应的队列中去。接下来，将会执行所有的微任务队列中的任务。</p><p>其中，nextTick队列会比Promie先执行。nextTick中的可执行任务执行完毕之后，才会开始执行Promise队列中的任务。</p><p>当所有可执行的微任务执行完毕之后，这一轮循环就表示结束了。下一轮循环继续从宏任务队列开始执行。</p><p>这个时候，script已经执行完毕，所以就从setTimeout队列开始执行。</p><p><img src="/2017/11/09/JS-事件循环-promise和setTimeOut/1c6a5d5efd3f4c3d7383719e70517bbc-19.png" alt="img"></p>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> promise </tag>
            
            <tag> 事件循环 </tag>
            
            <tag> event-loop </tag>
            
            <tag> setTimeOut </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-base64图片转formData</title>
      <link href="/2017/11/08/JS-base64%E5%9B%BE%E7%89%87%E8%BD%ACformData/"/>
      <url>/2017/11/08/JS-base64%E5%9B%BE%E7%89%87%E8%BD%ACformData/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param base64Codes</span></span><br><span class="line"><span class="comment"> * 图片的base64编码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sumitImageFile</span>(<span class="params">base64Codes</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> form = <span class="built_in">document</span>.forms[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">//这里连带form里的其他参数也一起提交了,如果不需要提交其他参数可以直接FormData无参数的构造函数</span></span><br><span class="line">    <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData(form);</span><br><span class="line">    <span class="comment">//convertBase64UrlToBlob函数是将base64编码转换为Blob</span></span><br><span class="line">    <span class="comment">//append函数的第一个参数是后台获取数据的参数名,和html标签的input的name属性功能相同</span></span><br><span class="line">    formData.append(<span class="string">"imageName"</span>, convertBase64UrlToBlob(base64Codes));</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ajax 提交form</span></span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: form.action,</span><br><span class="line">        type: <span class="string">"POST"</span>,</span><br><span class="line">        data: formData,</span><br><span class="line">        dataType: <span class="string">"text"</span>,</span><br><span class="line">        processData: <span class="literal">false</span>, <span class="comment">// 告诉jQuery不要去处理发送的数据</span></span><br><span class="line">        contentType: <span class="literal">false</span>, <span class="comment">// 告诉jQuery不要去设置Content-Type请求头</span></span><br><span class="line"></span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">window</span>.location.href = <span class="string">"$&#123;ctx&#125;"</span> + data;</span><br><span class="line">        &#125;,</span><br><span class="line">        xhr: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">//在jquery函数中直接使用ajax的XMLHttpRequest对象</span></span><br><span class="line">            <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">            xhr.upload.addEventListener(<span class="string">"progress"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">evt</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (evt.lengthComputable) &#123;</span><br><span class="line">                    <span class="keyword">var</span> percentComplete = <span class="built_in">Math</span>.round(evt.loaded * <span class="number">100</span> / evt.total);</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">"正在提交."</span> + percentComplete.toString() + <span class="string">'%'</span>); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> xhr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将以base64的图片url数据转换为Blob</span></span><br><span class="line"><span class="comment"> * @param urlData</span></span><br><span class="line"><span class="comment"> * 用url方式表示的base64图片数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertBase64UrlToBlob</span>(<span class="params">dataUrl</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//去掉url的头，并转换为byte</span></span><br><span class="line">    <span class="keyword">var</span> bytes = <span class="built_in">window</span>.atob(dataUrl.split(<span class="string">','</span>)[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">//处理异常,将ascii码小于0的转换为大于0</span></span><br><span class="line">    <span class="keyword">var</span> ab = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(bytes.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; bytes.length; i++) &#123;</span><br><span class="line">        ab[i] = bytes.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Blob([ab], &#123; <span class="attr">type</span>: <span class="string">'image/png'</span> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> base64 </tag>
            
            <tag> formDate </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-valueOf与toString</title>
      <link href="/2017/10/29/JS-valueOf%E4%B8%8EtoString/"/>
      <url>/2017/10/29/JS-valueOf%E4%B8%8EtoString/</url>
      <content type="html"><![CDATA[<h1 id="一、抛题"><a href="#一、抛题" class="headerlink" title="一、抛题"></a>一、抛题</h1><p>实现一个函数，运算结果可以满足如下预期结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>) <span class="comment">// 3</span></span><br><span class="line">add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)(<span class="number">10</span>) <span class="comment">// 16</span></span><br><span class="line">add(<span class="number">1</span>)(<span class="number">2</span>)(<span class="number">3</span>)(<span class="number">4</span>)(<span class="number">5</span>) <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a><h1 id="二、破题"><a href="#二、破题" class="headerlink" title="二、破题"></a>二、破题</h1><p>难点：如何既返回一个值又返回一个函数以供后续继续调用？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">add</span> (<span class="params"></span>)  </span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  args  =  <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span>  fn  =   <span class="function"><span class="keyword">function</span> (<span class="params"></span>)  </span>&#123;</span><br><span class="line">        <span class="keyword">var</span>  arg_fn  =  <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">        <span class="keyword">return</span>  add.apply(<span class="literal">null</span>,  args.concat(arg_fn));</span><br><span class="line">    &#125;</span><br><span class="line">    fn.valueOf  =   <span class="function"><span class="keyword">function</span> (<span class="params"></span>)  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  args.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">a,  b</span>)  </span>&#123;</span><br><span class="line">            <span class="keyword">return</span>  a  +  b;        </span><br><span class="line">        &#125;)    </span><br><span class="line">    &#125;     </span><br><span class="line">    <span class="keyword">return</span>  fn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="三、解题"><a href="#三、解题" class="headerlink" title="三、解题"></a>三、解题</h1><h4 id="1、Object-prototype-valueOf"><a href="#1、Object-prototype-valueOf" class="headerlink" title="1、Object.prototype.valueOf()"></a>1、Object.prototype.valueOf()</h4><p>JavaScript 调用 valueOf() 方法用来把对象转换成原始类型的值（数值、字符串和布尔值）。但是我们很少需要自己调用此函数，valueOf 方法一般都会被 JavaScript 自动调用。</p><h4 id="2、Object-prototype-toString"><a href="#2、Object-prototype-toString" class="headerlink" title="2、Object.prototype.toString()"></a>2、Object.prototype.toString()</h4><p>每个对象都有一个 toString() 方法，当对象被表示为文本值时或者当以期望字符串的方式引用对象时，该方法被自动调用。</p><h4 id="3、类型的转换规则"><a href="#3、类型的转换规则" class="headerlink" title="3、类型的转换规则"></a>3、类型的转换规则</h4><h5 id="1-String-类型转换"><a href="#1-String-类型转换" class="headerlink" title="(1)String 类型转换"></a>(1)String 类型转换</h5><p>转换规则：</p><ol><li>如果 toString 方法存在并且返回原始类型，返回      toString 的结果</li><li>如果      toString 方法不存在或者返回的不是原始类型，调用 valueOf 方法</li><li>如果      valueOf 方法存在，并且返回原始类型数据，返回 valueOf 的结果</li><li>其他情况，抛出错误</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'调用了 obj.toString'</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'调用了 obj.valueOf'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'110'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(obj);</span><br><span class="line"><span class="comment">// 调用了 obj.toString</span></span><br><span class="line"><span class="comment">// 调用了 obj.valueOf</span></span><br><span class="line"><span class="comment">// 110</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="2-Number-类型转换"><a href="#2-Number-类型转换" class="headerlink" title="(2)Number 类型转换"></a>(2)Number 类型转换</h5><p>转换规则：</p><ol><li>如果 valueOf 存在，且返回原始类型数据，返回 valueOf 的结果。</li><li>如果      toString 存在，且返回原始类型数据，返回 toString 的结果。</li><li>其他情况，抛出错误。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    valueOf: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'调用 valueOf'</span>);</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    toString: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'调用 toString'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 调用 valueOf</span></span><br><span class="line"><span class="comment">// 调用 toString</span></span><br><span class="line"><span class="comment">// 11</span></span><br></pre></td></tr></table></figure><p><br></p><h5 id="3-Boolean-类型转换"><a href="#3-Boolean-类型转换" class="headerlink" title="(3)Boolean 类型转换"></a>(3)Boolean 类型转换</h5><p>转换规则</p><ul><li>除了下述 6 个值转换结果为 false，其他全部为 true：<ul><li>undefined</li><li>null</li><li>-0</li><li>0或+0</li><li>NaN</li><li>”（空字符串）</li></ul></li></ul><p><br></p><h5 id="4-Function类型转换"><a href="#4-Function类型转换" class="headerlink" title="(4)Function类型转换"></a>(4)Function类型转换</h5><p>规则转换</p><ol><li>如果 valueOf 存在，且返回原始类型数据，返回 valueOf 的结果。</li><li>如果      toString 存在，且返回原始类型数据，返回 toString 的结果。</li><li>其他情况，抛出错误。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">test.valueOf = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'调用 valueOf 方法'</span>);</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test.toString= <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'调用 toString 方法'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">test;</span><br><span class="line"><span class="comment">// 输出如下：</span></span><br><span class="line"><span class="comment">// 调用 valueOf 方法</span></span><br><span class="line"><span class="comment">// 调用 toString 方法</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> valueOf </tag>
            
            <tag> toString </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-addEventListener和on</title>
      <link href="/2017/10/27/JS-addEventListener%E5%92%8Con/"/>
      <url>/2017/10/27/JS-addEventListener%E5%92%8Con/</url>
      <content type="html"><![CDATA[<h1 id="一、使用on方法绑定事件"><a href="#一、使用on方法绑定事件" class="headerlink" title="一、使用on方法绑定事件"></a>一、使用on方法绑定事件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>)</span><br><span class="line">    box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是box1"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    box.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        box.style.fontSize = <span class="string">"18px"</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是box2"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>第一个onclick回调函数会被第二个回调函数覆盖</strong></li></ul><p><br></p><a id="more"></a><h1 id="二、addEventListener绑定事件"><a href="#二、addEventListener绑定事件" class="headerlink" title="二、addEventListener绑定事件"></a>二、addEventListener绑定事件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>)</span><br><span class="line">    box.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是box1"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    box.addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"我是box2"</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>addEventListener允许在同一个事件上，绑定多个函数</strong></li><li><strong>既不覆盖on方法绑定的函数，也不覆盖addEventListener绑定的函数</strong></li></ul>]]></content>
      
      
        <tags>
            
            <tag> addEventListener </tag>
            
            <tag> on </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-Notification通知</title>
      <link href="/2017/10/25/JS-Notification%E9%80%9A%E7%9F%A5/"/>
      <url>/2017/10/25/JS-Notification%E9%80%9A%E7%9F%A5/</url>
      <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>html5桌面通知<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"开启桌面通知"</span> <span class="attr">onclick</span>=<span class="string">"showDeskTopNotice('','HTML5桌面消息');"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">showDeskTopNotice</span>(<span class="params">title, msg</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> Notification = </span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.Notification </span></span><br><span class="line"><span class="javascript">        || <span class="built_in">window</span>.mozNotification </span></span><br><span class="line"><span class="javascript">        || <span class="built_in">window</span>.webkitNotification;</span></span><br><span class="line"><span class="undefined">        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (Notification) &#123;</span></span><br><span class="line"><span class="javascript">            Notification.requestPermission(<span class="function"><span class="keyword">function</span>(<span class="params">status</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="comment">// status默认值'default'等同于拒绝 </span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 'denied' 意味着用户不想要通知 </span></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 'granted' 意味着用户同意启用通知</span></span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (<span class="string">"granted"</span> != status) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> tag = <span class="string">"sds"</span> + <span class="built_in">Math</span>.random();</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> notify = <span class="keyword">new</span> Notification(</span></span><br><span class="line"><span class="undefined">                        title, &#123;</span></span><br><span class="line"><span class="javascript">                            dir: <span class="string">'auto'</span>,</span></span><br><span class="line"><span class="javascript">                            lang: <span class="string">'zh-CN'</span>,</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//实例化的notification的id</span></span></span><br><span class="line"><span class="undefined">                            tag: tag, </span></span><br><span class="line"><span class="javascript">                            <span class="comment">//通知的缩略图</span></span></span><br><span class="line"><span class="javascript">                            icon: <span class="string">'http://www.yinshuajun.com/static/img/favicon.ico'</span>, </span></span><br><span class="line"><span class="javascript">                            body: msg <span class="comment">//通知的具体内容</span></span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    );</span></span><br><span class="line"><span class="javascript">                    notify.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="comment">//如果通知消息被点击,通知窗口将被激活</span></span></span><br><span class="line"><span class="javascript">                            <span class="built_in">window</span>.focus();</span></span><br><span class="line"><span class="undefined">                        &#125;,</span></span><br><span class="line"><span class="javascript">                        notify.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="built_in">console</span>.log(<span class="string">"HTML5桌面消息出错！！！"</span>);</span></span><br><span class="line"><span class="undefined">                        &#125;;</span></span><br><span class="line"><span class="javascript">                    notify.onshow = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                            notify.close();</span></span><br><span class="line"><span class="undefined">                        &#125;, 2000)</span></span><br><span class="line"><span class="undefined">                    &#125;;</span></span><br><span class="line"><span class="javascript">                    notify.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="string">"HTML5桌面消息关闭！！！"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;);</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"您的浏览器不支持桌面消息"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;;</span></span><br><span class="line"><span class="javascript">    showDeskTopNotice(<span class="string">""</span>, <span class="string">"HTML5桌面消息"</span>)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Notification </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Js-webWorker多线程</title>
      <link href="/2017/10/23/Js-webWorker/"/>
      <url>/2017/10/23/Js-webWorker/</url>
      <content type="html"><![CDATA[<h1 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h1><p>工作线程（webWorker）允许JavaScript创建多个线程，但是子线程完全受主线程控制，且<strong>不得操作DOM</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>worker<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//创建一个Worker对象，并向它传递将在新线程中执行的脚本url</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>)</span></span><br><span class="line"><span class="javascript">        <span class="comment">//接收worker传递过来的数据</span></span></span><br><span class="line"><span class="javascript">        worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>).innerHTML += event.data + <span class="string">"&lt;br/&gt;"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"init()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// worker.js</span></span><br><span class="line"><span class="keyword">var</span> i = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timedCount</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, sum = <span class="number">0</span>; j &lt; <span class="number">100</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">100000000</span>; i++) &#123;</span><br><span class="line">            sum += i</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将得到的sum发送回主线程</span></span><br><span class="line">    postMessage(sum)</span><br><span class="line">&#125;</span><br><span class="line">postMessage(<span class="string">'Before computing, '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>())</span><br><span class="line">timedCount()</span><br><span class="line">postMessage(<span class="string">'After computing, '</span> + <span class="keyword">new</span> <span class="built_in">Date</span>())</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a><h1 id="二、api"><a href="#二、api" class="headerlink" title="二、api"></a>二、api</h1><p>1、postMessage(data)  子线程与主线程之间互相通信使用方法，传递的data为任意值。</p><p>2、terminate()  主线程中终止worker，此后无法再利用其进行消息传递。</p><p>3、onmessage  当有消息发送时，触发该事件。消息发送是双向的，消息内容可通过data来获取。</p><p>4、onerror  出错处理。且错误消息可以通过e.message来获取。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>worker<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'worker.js'</span>)</span></span><br><span class="line"><span class="javascript">        setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            worker.postMessage(&#123; <span class="attr">name</span>: <span class="string">'monkey'</span> &#125;)</span></span><br><span class="line"><span class="undefined">        &#125;, 100)</span></span><br><span class="line"><span class="javascript">        worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">'result'</span>).innerHTML += event.data + <span class="string">"&lt;br/&gt;"</span></span></span><br><span class="line"><span class="undefined">            worker.terminate()</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"init()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">     postMessage(event.data.name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> webWorker </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Js-FullScreen全屏</title>
      <link href="/2017/10/22/Js-FullScreen%E5%85%A8%E5%B1%8F/"/>
      <url>/2017/10/22/Js-FullScreen%E5%85%A8%E5%B1%8F/</url>
      <content type="html"><![CDATA[<h1 id="零、禁止全屏"><a href="#零、禁止全屏" class="headerlink" title="零、禁止全屏"></a>零、禁止全屏</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onkeydown</span>=<span class="string">"noFullScreen(event)"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">noFullScreen</span>(<span class="params">e</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (e.keyCode === <span class="number">122</span>) &#123;</span></span><br><span class="line"><span class="undefined">            e.preventDefault()</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"webkitfullscreenchange"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.webkitCancelFullScreen()</span><br><span class="line">&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a><h1 id="一、进入全屏"><a href="#一、进入全屏" class="headerlink" title="一、进入全屏"></a>一、进入全屏</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 找到支持的方法, 使用需要全屏的 element 调用  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">launchFullScreen</span>(<span class="params">element</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element.requestFullscreen) &#123;</span><br><span class="line">        element.requestFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.mozRequestFullScreen) &#123;</span><br><span class="line">        element.mozRequestFullScreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.webkitRequestFullscreen) &#123;</span><br><span class="line">        element.webkitRequestFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.msRequestFullscreen) &#123;</span><br><span class="line">        element.msRequestFullscreen()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">launchFullScreen(<span class="built_in">document</span>.documentElement) <span class="comment">// 整个页面 </span></span><br><span class="line">launchFullScreen(<span class="built_in">document</span>.getElementById(<span class="string">"videoElement"</span>)) <span class="comment">// 某个元素</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="二、退出全屏"><a href="#二、退出全屏" class="headerlink" title="二、退出全屏"></a>二、退出全屏</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 退出 fullscreen  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exitFullscreen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.exitFullscreen) &#123;</span><br><span class="line">        <span class="built_in">document</span>.exitFullscreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.mozExitFullScreen) &#123;</span><br><span class="line">        <span class="built_in">document</span>.mozExitFullScreen()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.webkitExitFullscreen) &#123;</span><br><span class="line">        <span class="built_in">document</span>.webkitExitFullscreen()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h1 id="三、全屏事件"><a href="#三、全屏事件" class="headerlink" title="三、全屏事件"></a>三、全屏事件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"fullscreenchange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="literal">false</span>) </span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"mozfullscreenchange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="literal">false</span>) </span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"webkitfullscreenchange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="literal">false</span>) </span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"msfullscreenchange"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p><br></p><h1 id="四、全屏样式"><a href="#四、全屏样式" class="headerlink" title="四、全屏样式"></a>四、全屏样式</h1><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:-moz-full-screen</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:-webkit-full-screen</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span><span class="selector-pseudo">:fullscreen</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> FullScreen </tag>
            
            <tag> 全屏 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx-try_files</title>
      <link href="/2017/09/30/nginx-try-files/"/>
      <url>/2017/09/30/nginx-try-files/</url>
      <content type="html"><![CDATA[<h1 id="一、try-files指令"><a href="#一、try-files指令" class="headerlink" title="一、try_files指令"></a>一、try_files指令</h1><ul><li>语法：<strong>try_files file … uri</strong>  或  <strong>try_files file … = code</strong></li><li>默认值：无</li><li>作用域：<strong>server location</strong> </li></ul><p><strong>按顺序检查文件是否存在，<font color="#A52A2A" size="4">返回第一个找到的文件或文件夹</font>(结尾加斜线表示为文件夹)，如果所有的文件或文件夹都找不到，会<font color="#A52A2A" size="4">进行一个内部重定向到最后一个参数</font>。</strong></p><p><br></p><h1 id="二、例子说明"><a href="#二、例子说明" class="headerlink" title="二、例子说明"></a>二、例子说明</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">try_files</span> /app/cache/   <span class="variable">$uri</span>   <span class="variable">@fallback</span>;</span><br></pre></td></tr></table></figure><p>它将检测<strong>/app/cache/index.php</strong>、<strong>/app/cache/index.html</strong>、<strong>$uri</strong>是否存在，如果不存在着内部重定向到<strong>@fallback</strong>(＠表示配置文件中预定义标记点) 。你也可以使用<strong>一个文件或者状态码</strong>(<strong>=404</strong>)作为最后一个参数，如果是最后一个参数是文件，那么这个文件必须存在。</p>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> try_files </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Nginx-alias</title>
      <link href="/2017/09/27/Nginx-alias/"/>
      <url>/2017/09/27/Nginx-alias/</url>
      <content type="html"><![CDATA[<h1 id="root-amp-alias文件路径配置"><a href="#root-amp-alias文件路径配置" class="headerlink" title="root&amp;alias文件路径配置"></a><code>root&amp;alias</code>文件路径配置</h1><p><code>root/alias</code>  是指定文件路径的两种方式，主要区别就是怎么解析<code>location</code>后面的<code>uri</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost/appImg/abc.jpg</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /appImg/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /home/nginx;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 这个location相当于访问服务器上的文件路径：/home/nginx/appImg/abc.jpg</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /appImg/ &#123;</span><br><span class="line">    <span class="attribute">alias</span> /home/nginx/;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 这个location相当于访问服务器上的文件目录：/home/nginx/abc.jpg</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> alias </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>css-padding宽高比</title>
      <link href="/2017/09/24/css-padding%E5%AE%BD%E9%AB%98%E6%AF%94/"/>
      <url>/2017/09/24/css-padding%E5%AE%BD%E9%AB%98%E6%AF%94/</url>
      <content type="html"><![CDATA[<p>对于padding属性而言，任意方向的百分比padding都相对于宽度计算可以让我们轻松实现固定比例的块级容器。 </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">padding</span>: <span class="number">50%</span>; &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">padding</span>: <span class="number">100%</span> <span class="number">0</span> <span class="number">0</span>; &#125;</span><br><span class="line"><span class="selector-tag">div</span> &#123; <span class="attribute">padding-bottom</span>: <span class="number">100%</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">15.15%</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.banner</span> &gt; <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>; <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><p>1、图片宽度是100%容器的，padding的15.5%其实就是图片的高宽比例。</p><p>2、图片宽度50%容器宽度，图片高宽比4:3，我们也可以这么写</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.img-box</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">50%</span> <span class="number">66.66%</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、如果没有text-align属性干扰，img的position，及left和top可以不用指定 </p>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> padding </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nginx-location</title>
      <link href="/2017/09/11/nginx-location/"/>
      <url>/2017/09/11/nginx-location/</url>
      <content type="html"><![CDATA[<h1 id="一、location匹配顺序"><a href="#一、location匹配顺序" class="headerlink" title="一、location匹配顺序"></a>一、location匹配顺序</h1><ol><li><strong>“=”前缀指令</strong>匹配，如果匹配成功，则停止其他匹配。</li><li><strong>普通字符串指令</strong>匹配，顺序是<font color="#A52A2A" size="4"><strong>从长到短</strong></font>，匹配成功的location如果使用<font color="#A52A2A" size="4"><strong>^~</strong></font>，则停止其他匹配（正则匹配）。</li><li><strong>正则表达式指令</strong>匹配，按照配置文件里的顺序，成功就停止其他匹配。</li><li><strong>如果第三步中有匹配成功，则使用该结果，否则使用第二步结果。</strong></li></ol><ul><li>匹配的顺序是<font color="#A52A2A" size="4"><strong>先匹配普通字符串，然后再匹配正则表达式</strong></font>。另外<font color="#A52A2A" size="4"><strong>普通字符串匹配顺序是根据配置中字符长度从长到短</strong></font>，也就是说使用普通字符串配置的location顺序是无关紧要的，反正最后nginx会根据配置的长短来进行匹配，但是需要注意的是<font color="#A52A2A" size="4"><strong>正则表达式按照配置文件里的顺序</strong></font>测试。找到第一个比配的正则表达式将停止搜索。</li></ul><p><br></p><a id="more"></a> <h1 id="二、匹配模式及顺序"><a href="#二、匹配模式及顺序" class="headerlink" title="二、匹配模式及顺序"></a>二、匹配模式及顺序</h1><h4 id="1、模式"><a href="#1、模式" class="headerlink" title="1、模式"></a>1、模式</h4><ul><li>~ 表示执行一个正则匹配，区分大小写</li><li>~* 表示执行一个正则匹配，不区分大小写</li><li>^~ 表示普通字符匹配。使用前缀匹配。如果匹配成功，则不再匹配其他location。</li><li>= 进行普通字符精确匹配。也就是完全匹配。</li><li>@ 它定义一个命名的 location，使用在内部定向时</li></ul><h4 id="2、例子"><a href="#2、例子" class="headerlink" title="2、例子"></a>2、例子</h4><ul><li>location <strong>=      /uri</strong>    =开头表示精确匹配，只有完全匹配上才能生效。</li><li>location <strong>^~ /uri</strong>        ^~      开头对URL路径进行前缀匹配，并且在正则之前。</li><li>location <strong>~      pattern</strong>     ~开头表示区分大小写的正则匹配。</li><li>location <strong>~*      pattern</strong>     ~*开头表示不区分大小写的正则匹配。</li><li>location      <strong>/uri</strong>     不带任何修饰符，也表示前缀匹配，但是在正则匹配之后。</li><li>location      <strong>/</strong>     通用匹配，任何未匹配到其它location的请求都会匹配到，相当于switch中的default。 </li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> tornado &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">127.0.0.1:8001</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">server_name</span> luokr.com;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> <span class="variable">$scheme</span>://www.luokr.com<span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.luokr.com;</span><br><span class="line">    <span class="attribute">root</span> /var/www/www.luokr.com/V0.<span class="number">3</span>/www;</span><br><span class="line">    <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">@tornado</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> <span class="variable">@tornado</span> &#123;</span><br><span class="line">        <span class="attribute">proxy_pass_header</span> Server;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Scheme <span class="variable">$scheme</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://tornado;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> location </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git-忽略文件规则</title>
      <link href="/2017/09/04/Git-%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E8%A7%84%E5%88%99/"/>
      <url>/2017/09/04/Git-%E5%BF%BD%E7%95%A5%E6%96%87%E4%BB%B6%E8%A7%84%E5%88%99/</url>
      <content type="html"><![CDATA[<h1 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h1><ol><li>忽略文件中的空行或以井号（#）开始的行将会被忽略。</li><li>可以使用Linux通配符。例如：星号（*）代表任意多个字符，问号（？）代表一个字符，方括号（[abc]）代表可选字符范围，大括号（{string1,string2,…}）代表可选的字符串等。</li><li>如果名称的最前面有一个感叹号（!），表示例外规则，将不被忽略。</li><li>如果名称的最前面是一个路径分隔符（/），表示要忽略的文件在此目录下，而子目录中的文件不忽略。</li><li>如果名称的最后面是一个路径分隔符（/），表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 这是注释行，将被忽略</span><br><span class="line">*.a       # 忽略所有以.a为扩展名的文件    </span><br><span class="line">!lib.a    # 但是名为lib.a的文件或目录不要忽略，即使前面设置了对*.a的忽略</span><br><span class="line">/TODO     # 只忽略此目录下的TODO文件，子目录中的TODO文件不忽略</span><br><span class="line">build/    # 忽略所有build目录下的文件，但如果是名为build的文件则不忽略</span><br><span class="line">doc/*.txt # 忽略文件如doc/notes.txt，但是文件如doc/server/arch.txt不忽略</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 忽略规则 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>CSS-圆角半径值</title>
      <link href="/2017/08/07/CSS-%E5%9C%86%E8%A7%92%E5%8D%8A%E5%BE%84%E5%80%BC/"/>
      <url>/2017/08/07/CSS-%E5%9C%86%E8%A7%92%E5%8D%8A%E5%BE%84%E5%80%BC/</url>
      <content type="html"><![CDATA[<h1 id="格式和类型"><a href="#格式和类型" class="headerlink" title="格式和类型"></a>格式和类型</h1><ul><li><p>border-*-radius属性的值可分别设定水平半径和垂直半径；若省略垂直半径，则垂直半径默认采用水平半径的值。</p></li><li><p>而每个值，支持的单位有固定长度和百分比。若设置百分比格式，则水平半径的百分比是指边框的宽度，而垂直半径的百分比是指边框的高度。</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*表示圆角的水平半径和垂直半径都为20px长度。*/</span></span><br><span class="line"><span class="selector-tag">border-radius</span><span class="selector-pseudo">:20px</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*表示圆角的水平半径的长度为20px，垂直半径的长度为40px。*/</span></span><br><span class="line">border-radius:20px/40px; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*表示圆角的水平半径和垂直半径都为各自边框长度的20%。*/</span></span><br><span class="line"><span class="selector-tag">border-radius</span><span class="selector-pseudo">:20</span>%;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*表示圆角的水平半径为边框宽度的20%，垂直半径都为边框高度的30%。*/</span></span><br><span class="line">border-radius:20%/30%;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*表示圆角的水平半径长度200px，垂直半径都为边框高度的300px。*/</span></span><br><span class="line">border-radius: 200px 0px 0px 0px/300px 0px 0px 0px;</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a><p><img src="/2017/08/07/CSS-圆角半径值/153475-20161110154102108-522676325.png" alt=""></p><p>注：</p><ul><li><strong>大值特性</strong>：只会使用能够渲染的圆角大小渲染</li><li><strong>等比例特性</strong>：水平半径和垂直半径的比例是恒定不变的</li></ul>]]></content>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> border-radius，圆角 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs-http</title>
      <link href="/2017/08/05/nodejs-http/"/>
      <url>/2017/08/05/nodejs-http/</url>
      <content type="html"><![CDATA[<h1 id="一、HTTP服务器"><a href="#一、HTTP服务器" class="headerlink" title="一、HTTP服务器"></a>一、HTTP服务器</h1><p><strong>request对象封装了HTTP请求</strong>，我们调用request对象的属性和方法就可以拿到所有HTTP请求的信息；<strong>response对象封装了HTTP响应</strong>，我们操作response对象的方法，就可以把HTTP响应返回给浏览器。</p><p>用Node.js实现一个HTTP服务器程序非常简单。我们来实现一个最简单的Web程序hello.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入http模块:</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建http server，并传入回调函数:</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 回调函数接收request和response对象,</span></span><br><span class="line">    <span class="comment">// 获得HTTP请求的method和url:</span></span><br><span class="line">    <span class="built_in">console</span>.log(request.method + <span class="string">': '</span> + request.url);</span><br><span class="line">    <span class="comment">// 将HTTP响应200写入response, 同时设置Content-Type: text/html:</span></span><br><span class="line">    response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/html'</span>&#125;);</span><br><span class="line">    <span class="comment">// 将HTTP响应的HTML内容写入response:</span></span><br><span class="line">    response.end(<span class="string">'&lt;h1&gt;Hello world!&lt;/h1&gt;'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让服务器监听8080端口:</span></span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h1 id="二、文件服务器"><a href="#二、文件服务器" class="headerlink" title="二、文件服务器"></a>二、文件服务器</h1><p>我们可以设定一个目录，然后让Web程序变成一个文件服务器。要实现这一点，我们只需要解析request.url中的路径，然后在本地找到对应的文件，把文件内容发送出去就可以了。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从命令行参数获取root目录，默认是当前目录:</span></span><br><span class="line"><span class="keyword">var</span> root = path.resolve(process.argv[<span class="number">2</span>] || <span class="string">'.'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Static root dir: '</span> + root);</span><br><span class="line"><span class="comment">// 创建服务器:</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 获得URL的path，类似 '/css/bootstrap.css':</span></span><br><span class="line">    <span class="keyword">var</span> pathname = url.parse(request.url).pathname;</span><br><span class="line">    <span class="comment">// 获得对应的本地文件路径，类似 '/srv/www/css/bootstrap.css':</span></span><br><span class="line">    <span class="keyword">var</span> filepath = path.join(root, pathname);</span><br><span class="line">    <span class="comment">// 获取文件状态:</span></span><br><span class="line">    fs.stat(filepath, <span class="function"><span class="keyword">function</span> (<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!err &amp;&amp; stats.isFile()) &#123;</span><br><span class="line">            <span class="comment">// 没有出错并且文件存在:</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'200 '</span> + request.url);</span><br><span class="line">            <span class="comment">// 发送200响应:</span></span><br><span class="line">            response.writeHead(<span class="number">200</span>);</span><br><span class="line">            <span class="comment">// 将文件流导向response:</span></span><br><span class="line">            fs.createReadStream(filepath).pipe(response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 出错了或者文件不存在:</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'404 '</span> + request.url);</span><br><span class="line">            <span class="comment">// 发送404响应:</span></span><br><span class="line">            response.writeHead(<span class="number">404</span>);</span><br><span class="line">            response.end(<span class="string">'404 Not Found'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs-stream</title>
      <link href="/2017/08/05/nodejs-stream/"/>
      <url>/2017/08/05/nodejs-stream/</url>
      <content type="html"><![CDATA[<h1 id="一、读取"><a href="#一、读取" class="headerlink" title="一、读取"></a>一、读取</h1><p>在Node.js中，流也是一个对象，我们只需要响应流的事件就可以了：data事件表示流的数据已经可以读取了，end事件表示这个流已经到末尾了，没有数据可以读取了，error事件表示出错了。</p><p>下面是一个从文件流读取文本内容的示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="comment">// 打开一个流:</span></span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">'sample.txt'</span>, <span class="string">'utf-8'</span>);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">chunk</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'DATA:'</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(chunk);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'END'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">rs.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'ERROR: '</span> + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>要注意，data事件可能会有多次，每次传递的chunk是流的一部分数据。 </p><p><br></p><a id="more"></a> <h1 id="二、写入"><a href="#二、写入" class="headerlink" title="二、写入"></a>二、写入</h1><p>要以流的形式写入文件，只需要不断调用write()方法，最后以end()结束： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ws1 = fs.createWriteStream(<span class="string">'output1.txt'</span>, <span class="string">'utf-8'</span>);</span><br><span class="line">ws1.write(<span class="string">'使用Stream写入文本数据...\n'</span>);</span><br><span class="line">ws1.write(<span class="string">'END.'</span>);</span><br><span class="line">ws1.end();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ws2 = fs.createWriteStream(<span class="string">'output2.txt'</span>);</span><br><span class="line">ws2.write(<span class="keyword">new</span> Buffer(<span class="string">'使用Stream写入二进制数据...\n'</span>, <span class="string">'utf-8'</span>));</span><br><span class="line">ws2.write(<span class="keyword">new</span> Buffer(<span class="string">'END.'</span>, <span class="string">'utf-8'</span>));</span><br><span class="line">ws2.end();</span><br></pre></td></tr></table></figure><p>所有可以<strong>读取数据的流都继承自stream.Readable</strong>，所有可以<strong>写入的流都继承自stream.Writable</strong>。 </p><p><br></p><h1 id="三、管道"><a href="#三、管道" class="headerlink" title="三、管道"></a>三、管道</h1><p>一个Readable流和一个Writable流串起来后，所有的数据自动<strong>从Readable流进入Writable流</strong>，这种操作叫pipe。在Node.js中，<strong>Readable流有一个pipe()方法</strong>，就是用来干这件事的。</p><p>让我们用pipe()把一个文件流和另一个文件流串起来，这样源文件的所有数据就自动写入到目标文件里了，所以，这实际上是一个复制文件的程序：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">'sample.txt'</span>);</span><br><span class="line"><span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">'copied.txt'</span>);</span><br><span class="line">rs.pipe(ws);</span><br></pre></td></tr></table></figure><p>默认情况下，当Readable流的数据读取完毕，end事件触发后，将自动关闭Writable流。如果我们不希望自动关闭Writable流，需要传入参数： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rs.pipe(ws, &#123; <span class="attr">end</span>: <span class="literal">false</span> &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> stream </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs-fs模块</title>
      <link href="/2017/08/05/nodejs-fs%E6%A8%A1%E5%9D%97/"/>
      <url>/2017/08/05/nodejs-fs%E6%A8%A1%E5%9D%97/</url>
      <content type="html"><![CDATA[<h1 id="一、异步读文件"><a href="#一、异步读文件" class="headerlink" title="一、异步读文件"></a>一、异步读文件</h1><p>按照JavaScript的标准，异步读取一个文本文件的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'sample.txt'</span>, <span class="string">'utf-8'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>下面的例子演示了如何读取一个图片文件： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.readFile(<span class="string">'sample.png'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        <span class="built_in">console</span>.log(data.length + <span class="string">' bytes'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <h1 id="二、同步读文件"><a href="#二、同步读文件" class="headerlink" title="二、同步读文件"></a>二、同步读文件</h1><p>除了标准的异步读取模式外，fs也提供相应的同步读取函数。同步读取的函数和异步函数相比，多了一个Sync后缀，并且不接收回调函数，函数直接返回结果。</p><p>用fs模块同步读取一个文本文件的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> data = fs.readFileSync(<span class="string">'sample.txt'</span>, <span class="string">'utf-8'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(data);</span><br></pre></td></tr></table></figure><p><br></p><h1 id="三、异步写文件"><a href="#三、异步写文件" class="headerlink" title="三、异步写文件"></a>三、异步写文件</h1><p>将数据写入文件是通过fs.writeFile()实现的： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">'Hello, Node.js'</span>;</span><br><span class="line">fs.writeFile(<span class="string">'output.txt'</span>, data, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ok.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><br></p><h1 id="四、同步写文件"><a href="#四、同步写文件" class="headerlink" title="四、同步写文件"></a>四、同步写文件</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="string">'Hello, Node.js'</span>;</span><br><span class="line">fs.writeFileSync(<span class="string">'output.txt'</span>, data);</span><br></pre></td></tr></table></figure><p><br></p><h1 id="五、stat"><a href="#五、stat" class="headerlink" title="五、stat"></a>五、stat</h1><p>如果我们要获取文件大小，创建时间等信息，可以使用fs.stat()，它返回一个Stat对象，能告诉我们文件或目录的详细信息： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">fs.stat(<span class="string">'sample.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, stat</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 是否是文件:</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'isFile: '</span> + stat.isFile());</span><br><span class="line">        <span class="comment">// 是否是目录:</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'isDirectory: '</span> + stat.isDirectory());</span><br><span class="line">        <span class="keyword">if</span> (stat.isFile()) &#123;</span><br><span class="line">            <span class="comment">// 文件大小:</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'size: '</span> + stat.size);</span><br><span class="line">            <span class="comment">// 创建时间, Date对象:</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'birth time: '</span> + stat.birthtime);</span><br><span class="line">            <span class="comment">// 修改时间, Date对象:</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'modified time: '</span> + stat.mtime);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>stat()也有一个对应的同步函数statSync()。 </p>]]></content>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> fs模块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs-process对象</title>
      <link href="/2017/08/05/nodejs-process%E5%AF%B9%E8%B1%A1/"/>
      <url>/2017/08/05/nodejs-process%E5%AF%B9%E8%B1%A1/</url>
      <content type="html"><![CDATA[<p>process是Node.js提供的一个对象，它代表当前Node.js进程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">process === global.process;<span class="comment">//True</span></span><br><span class="line"></span><br><span class="line">process.version;<span class="comment">//'v5.2.0'</span></span><br><span class="line"></span><br><span class="line">process.platform;<span class="comment">//'darwin'</span></span><br><span class="line"></span><br><span class="line">process.arch;<span class="comment">//'x64'</span></span><br><span class="line"></span><br><span class="line">process.cwd();<span class="comment">//返回当前工作目录:'/Users/michael'</span></span><br><span class="line"></span><br><span class="line">process.chdir(<span class="string">'/private/tmp'</span>); <span class="comment">// 切换当前工作目录:Undefined</span></span><br><span class="line"></span><br><span class="line">process.cwd();<span class="comment">//'/private/tmp'</span></span><br></pre></td></tr></table></figure><p><br></p><a id="more"></a> <p><strong>JavaScript程序是由事件驱动执行的单线程模型，Node.js也不例外。</strong>如果我们想要在下一次事件循环中执行代码，可以调用<strong>process.nextTick()</strong>： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// test.js</span></span><br><span class="line"><span class="comment">// process.nextTick()将在下一轮事件循环中调用:</span></span><br><span class="line"></span><br><span class="line">process.nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'nextTick callback!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'nextTick was set!'</span>);</span><br></pre></td></tr></table></figure><p>用Node执行上面的代码node test.js，你会看到，打印输出是： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nextTick was set!</span><br><span class="line">nextTick callback!</span><br></pre></td></tr></table></figure><p>这说明传入process.nextTick()的函数不是立刻执行，而是要等到<strong>下一次事件循环</strong>。 </p><p><br></p><p>Node.js进程本身的事件就由process对象来处理。如果我们响应exit事件，就可以在程序即将退出时执行某个回调函数： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 程序即将退出时的回调函数:</span></span><br><span class="line">process.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'about to exit with code: '</span> + code);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> process </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>nodejs-模块原理</title>
      <link href="/2017/08/05/nodejs-%E6%A8%A1%E5%9D%97%E5%8E%9F%E7%90%86/"/>
      <url>/2017/08/05/nodejs-%E6%A8%A1%E5%9D%97%E5%8E%9F%E7%90%86/</url>
      <content type="html"><![CDATA[<h1 id="零、区别"><a href="#零、区别" class="headerlink" title="零、区别"></a>零、区别</h1><p>Node.js 模块遵循<strong>CommonJS规范</strong>，ES6 模块与CommonJS模块的差异有以下两点 </p><ul><li>CommonJS 模块输出的是一个<strong>值的拷贝</strong>，ES6      模块输出的是<strong>值的引用</strong>。</li><li>CommonJS 模块是<strong>运行时加载</strong>，ES6      模块是<strong>编译时输出接口</strong>。</li></ul><p><br></p><h1 id="一、Node-js-模块实现原理"><a href="#一、Node-js-模块实现原理" class="headerlink" title="一、Node.js 模块实现原理"></a>一、Node.js 模块实现原理</h1><p> <font color="#A52A2A" size="4"><strong>实现“模块”功能的奥妙就在于JavaScript是一种函数式编程语言，它支持闭包。</strong></font>如果我们把一段JavaScript代码用一个函数包装起来，这段代码的所有“全局”变量就变成了函数内部的局部变量。假如我们编写的hello.js代码是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'world'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s + <span class="string">' '</span> + name + <span class="string">'!'</span>);</span><br></pre></td></tr></table></figure><p>Node.js加载了hello.js后，它可以把代码包装一下，变成这样执行： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 读取的hello.js代码:</span></span><br><span class="line">    <span class="keyword">var</span> s = <span class="string">'Hello'</span>;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">'world'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(s + <span class="string">' '</span> + name + <span class="string">'!'</span>);</span><br><span class="line">    <span class="comment">// hello.js代码结束</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>所以，Node利用JavaScript的函数式编程的特性，轻而易举地实现了模块的隔离。  但是，模块的输出module.exports怎么实现？这个也很容易实现，<strong>Node可以先准备一个对象module</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备module对象:</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</span><br><span class="line">    id: <span class="string">'hello'</span>,</span><br><span class="line">    exports: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> load = <span class="function"><span class="keyword">function</span> (<span class="params">module</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 读取的hello.js代码:</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">greet</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'Hello, '</span> + name + <span class="string">'!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">module</span>.exports = greet;</span><br><span class="line">    <span class="comment">// hello.js代码结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> exported = load(<span class="built_in">module</span>);</span><br><span class="line"><span class="comment">// 保存module:</span></span><br><span class="line">save(<span class="built_in">module</span>, exported);</span><br></pre></td></tr></table></figure><p>可见，变量module是Node在加载js文件前准备的一个变量，并将其传入加载函数，我们在hello.js中 <font color="#A52A2A" size="4"><strong>可以直接使用变量module原因就在于它实际上是函数的一个参数</strong></font>： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = greet;</span><br></pre></td></tr></table></figure><p>通过把参数module传递给load()函数，hello.js就顺利地把一个变量传递给了Node执行环境，<strong>Node会把module变量保存到某个地方</strong>。 </p><p>由于Node保存了所有导入的module，当我们用require()获取module时，Node找到对应的module，把这个module的exports变量返回，这样，另一个模块就顺利拿到了模块的输出： </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> greet = <span class="built_in">require</span>(<span class="string">'./hello'</span>);</span><br></pre></td></tr></table></figure><p>以上是Node实现JavaScript模块的一个简单的原理介绍。 </p>]]></content>
      
      
        <tags>
            
            <tag> nodejs </tag>
            
            <tag> 模块 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>html空节点（3px空隙问题）</title>
      <link href="/2017/07/31/html%E7%A9%BA%E8%8A%82%E7%82%B9%EF%BC%883px%E7%A9%BA%E9%9A%99%E9%97%AE%E9%A2%98%EF%BC%89/"/>
      <url>/2017/07/31/html%E7%A9%BA%E8%8A%82%E7%82%B9%EF%BC%883px%E7%A9%BA%E9%9A%99%E9%97%AE%E9%A2%98%EF%BC%89/</url>
      <content type="html"><![CDATA[<h1 id="换行与空隙"><a href="#换行与空隙" class="headerlink" title="换行与空隙"></a>换行与空隙</h1><p><code>html换行</code>被解析为<strong>空格</strong>。也是常说的<strong>3像素空隙</strong>的问题，根据测试不同浏览器产生的空隙大小会不一样。</p><p>Chrome，Firefox，IE8+都存在这样的问题，<strong>浏览器把换行或空格解析成了“空白节点”</strong>，就是javascript中<code>nodeType</code>等于3的节点，IE6,7是忽略这个节点的。 </p><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h1 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h1><h4 id="1、不换行"><a href="#1、不换行" class="headerlink" title="1、不换行"></a>1、不换行</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="2、设置margin-left为负值"><a href="#2、设置margin-left为负值" class="headerlink" title="2、设置margin-left为负值"></a>2、设置margin-left为负值</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">3px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h4 id="3、设置父元素字体大小为0"><a href="#3、设置父元素字体大小为0" class="headerlink" title="3、设置父元素字体大小为0"></a>3、设置父元素字体大小为0</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">span</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> 3px </tag>
            
            <tag> 空隙 </tag>
            
            <tag> 空节点 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>H5-FileReader</title>
      <link href="/2017/07/25/H5-FileReader/"/>
      <url>/2017/07/25/H5-FileReader/</url>
      <content type="html"><![CDATA[<h1 id="一、FileList"><a href="#一、FileList" class="headerlink" title="一、FileList"></a>一、FileList</h1><p><strong>FileList 对象</strong>针对表单的 <strong>file 控件</strong>。当用户通过 file 控件选取文件后，这个<strong>控件的 files 属性值就是 FileList 对象</strong>。它在结构上类似于数组，<strong>数组里每一个元素都是File对象</strong>，包含用户选取的多个文件。如果 file 控件没有设置 <strong>multiple</strong> 属性，那么用户只能选择一个文件，FileList 对象也就只有一个元素了。 </p><p><br></p><h1 id="二、File"><a href="#二、File" class="headerlink" title="二、File"></a>二、File</h1><p>我们看到一个 <strong>FileList 对象</strong>包含了我们选中的 <strong>File 对象</strong> </p><p><br></p><a id="more"></a><h1 id="三、FileReader"><a href="#三、FileReader" class="headerlink" title="三、FileReader"></a>三、FileReader</h1><p>用来把文件读入内存，并且读取文件中的数据。FileReader接口提供了一个异步API，使用该API可以在浏览器主线程中异步访问文件系统，读取文件中的数据。 </p><h4 id="1、FileReader接口的方法"><a href="#1、FileReader接口的方法" class="headerlink" title="1、FileReader接口的方法"></a>1、FileReader接口的方法</h4><p><strong>FileReader接口有4个方法，其中3个用来读取文件，另一个用来中断读取</strong>。无论读取成功或失败，方法并不会返回读取结果，这一结果存储在result属性中。 </p><table><thead><tr><th style="text-align:left">方法名</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">readAsBinaryString</td><td>file</td><td>将文件读取为二进制编码</td></tr><tr><td style="text-align:left">readAsText</td><td>file,[<strong>encoding</strong>]</td><td>将文件读取为文本</td></tr><tr><td style="text-align:left">readAsDataURL</td><td>file</td><td>将文件读取为DataURL</td></tr><tr><td style="text-align:left">abort</td><td>(none)</td><td>终端读取操作</td></tr></tbody></table><p><br></p><h4 id="2、FileReader接口事件"><a href="#2、FileReader接口事件" class="headerlink" title="2、FileReader接口事件"></a>2、FileReader接口事件</h4><p>FileReader接口包含了一套完整的事件模型，用于捕获读取文件时的状态。 </p><table><thead><tr><th>事件</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>中断</td></tr><tr><td>onerror</td><td>出错</td></tr><tr><td>onloadstart</td><td>开始</td></tr><tr><td>onprogress</td><td>正在读取</td></tr><tr><td>onload</td><td>成功读取</td></tr><tr><td>onloadend</td><td>读取完成，无论成功失败</td></tr></tbody></table><p><br></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>  result = <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>);  </span><br><span class="line"><span class="keyword">var</span>  file = <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>);    </span><br><span class="line"></span><br><span class="line"><span class="comment">//判断浏览器是否支持FileReader接口  </span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span>  FileReader  ==  <span class="string">'undefined'</span>) &#123;</span><br><span class="line">    result.InnerHTML = <span class="string">"&lt;p&gt;你的浏览器不支持FileReader接口！&lt;/p&gt;"</span>;  </span><br><span class="line">    <span class="comment">//使选择控件不可操作</span></span><br><span class="line">    file.setAttribute(<span class="string">"disabled"</span>, <span class="string">"disabled"</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//检验是否为图像文件 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readAsDataURL</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  file  =  <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>).files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="regexp">/image\/\w+/</span>.test(file.type)) &#123;</span><br><span class="line">        alert(<span class="string">"看清楚，这个需要图片！"</span>);</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span>  reader  =  <span class="keyword">new</span>  FileReader();</span><br><span class="line">    <span class="comment">//将文件以Data URL形式读入页面</span></span><br><span class="line">    reader.readAsDataURL(file);</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//显示文件  </span></span><br><span class="line">        <span class="keyword">var</span>  result = <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>);</span><br><span class="line">        result.innerHTML = <span class="string">'&lt;img src="'</span>  +  <span class="keyword">this</span>.result  + <span class="string">'" alt="" /&gt;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readAsBinaryString</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  file  =  <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>).files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span>  reader  =  <span class="keyword">new</span>  FileReader();</span><br><span class="line">    <span class="comment">//将文件以二进制形式读入页面 </span></span><br><span class="line">    reader.readAsBinaryString(file);</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//显示文件  </span></span><br><span class="line">        <span class="keyword">var</span>  result = <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>);</span><br><span class="line">        result.innerHTML = <span class="keyword">this</span>.result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>  <span class="title">readAsText</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span>  file  =  <span class="built_in">document</span>.getElementById(<span class="string">"file"</span>).files[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span>  reader  =  <span class="keyword">new</span>  FileReader();</span><br><span class="line">    <span class="comment">//将文件以文本形式读入页面</span></span><br><span class="line">    reader.readAsText(file);</span><br><span class="line">    reader.onload = <span class="function"><span class="keyword">function</span>(<span class="params">f</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//显示文件</span></span><br><span class="line">        <span class="keyword">var</span>  result = <span class="built_in">document</span>.getElementById(<span class="string">"result"</span>);</span><br><span class="line">        result.innerHTML = <span class="keyword">this</span>.result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>请选择一个文件：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span>  <span class="attr">id</span>=<span class="string">"file"</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span>  <span class="attr">value</span>=<span class="string">"读取图像"</span>  <span class="attr">onclick</span>=<span class="string">"readAsDataURL()"</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span>  <span class="attr">value</span>=<span class="string">"读取二进制数据"</span>  <span class="attr">onclick</span>=<span class="string">"readAsBinaryString()"</span>  /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span>  <span class="attr">value</span>=<span class="string">"读取文本文件"</span>  <span class="attr">onclick</span>=<span class="string">"readAsText()"</span>  /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"result"</span>  <span class="attr">name</span>=<span class="string">"result"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> FileReader </tag>
            
            <tag> FileList </tag>
            
            <tag> File </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-三种对话框</title>
      <link href="/2017/07/25/JS-%E4%B8%89%E7%A7%8D%E5%AF%B9%E8%AF%9D%E6%A1%86/"/>
      <url>/2017/07/25/JS-%E4%B8%89%E7%A7%8D%E5%AF%B9%E8%AF%9D%E6%A1%86/</url>
      <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出对话框并输出一段提示信息  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ale</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//弹出一个对话框  </span></span><br><span class="line">    alert(<span class="string">"提示信息！"</span>);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出一个询问框，有确定和取消按钮  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">firm</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">//利用对话框返回的值 （true 或者 false）  </span></span><br><span class="line">    <span class="keyword">if</span> (confirm(<span class="string">"你确定提交吗？"</span>)) &#123;  </span><br><span class="line">        alert(<span class="string">"点击了确定"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span> &#123;  </span><br><span class="line">        alert(<span class="string">"点击了取消"</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出一个输入框，输入一段文字，可以提交  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prom</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="comment">//将输入的内容赋给变量 name ，  </span></span><br><span class="line">    <span class="keyword">var</span> name = prompt(<span class="string">"请输入您的名字"</span>, <span class="string">""</span>);</span><br><span class="line">    <span class="comment">//这里需要注意的是，prompt有两个参数，前面是提示的话，后面是当对话框出来后，在对话框里的默认值  </span></span><br><span class="line">    <span class="comment">//如果返回的有内容 </span></span><br><span class="line">    <span class="keyword">if</span> (name) </span><br><span class="line">    &#123;  </span><br><span class="line">        alert(<span class="string">"欢迎您："</span> + name)  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 对话框 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JS-正则表达式</title>
      <link href="/2017/07/14/JS-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2017/07/14/JS-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      <content type="html"><![CDATA[<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul><li><code>\d</code>可以匹配一个<strong>数字</strong>，等价于<code>[0-9]</code></li><li><code>\w</code>可以匹配一个<strong>单字字符</strong> （字母、数字或者下划线） ，等价于<code>[A-Za-z0-9_]</code> </li><li><code>\W</code>匹配一个<strong>非单字字符</strong>，等价于<code>[^A-Za-z0-9_]</code></li><li><code>.</code>可以匹配一个<strong>任意字符</strong> ，<strong>换行符</strong>除外</li><li><code>\s</code>匹配一个空白字符，包括<strong>空格</strong>、<strong>制表符</strong>、<strong>换页符</strong>和<strong>换行符</strong></li><li><code>\S</code>匹配一个非空白字符</li><li><code>*</code>表示<strong>任意个</strong>字符，等价于 <code>{0,}</code></li><li><code>+</code>表示<strong>至少一个</strong>字符，等价于 <code>{1,}</code> </li><li><code>?</code>表示<strong>0个或1个</strong>字符，等价于 <code>{0,1}</code> </li><li><code>{n}</code>表示<strong>n个</strong>字符</li><li><code>{n,m}</code>表示<strong><code>n-m</code>个</strong>字符 </li><li><code>\</code><strong>转义</strong> </li><li><code>(x)</code>普通分组，匹配 <code>&#39;x&#39;</code>并且<strong>记住匹配项</strong></li><li><code>(?&lt;组名&gt;RegExp)</code>具名组，使用<code>$&lt;组名&gt;</code>引用具名组</li><li><code>[xyz]</code>一个<strong>字符集合</strong></li><li><code>[^xyz]</code>一个<strong>反向字符集</strong></li><li><code>A|B</code>可以匹配A<strong>或</strong>B </li><li><code>^</code>表示<strong>行的开头</strong>或<strong>非的意思</strong> </li><li><code>$</code>表示行的<strong>结束</strong> </li></ul><a id="more"></a><p><br></p><h4 id="分组（或捕获组）"><a href="#分组（或捕获组）" class="headerlink" title="分组（或捕获组）"></a>分组（或捕获组）</h4><p><strong>正则表达式</strong>通过使用<strong>括号</strong>将<strong>表达式</strong>分为不同的分组，识别的方法是通过<strong>从左至右搜寻左半括号</strong>，遇到第一个左半括号时，则<strong>该左半括号与对应的右半括号所包含的内容即为第一分组</strong>，以此类推 。</p><p>例如，在表达式<code>((A)(B(C)))</code>，有四个这样的组：<code>((A)(B(C)))、(A)、(B(C))、(C)</code></p><p><br></p><h4 id="具名组"><a href="#具名组" class="headerlink" title="具名组"></a>具名组</h4><ul><li><p><strong>字符串替换</strong>时，使用<code>$&lt;组名&gt;</code>引用具名组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> re = <span class="regexp">/(?&lt;year&gt;\d&#123;4&#125;)-(?&lt;month&gt;\d&#123;2&#125;)-(?&lt;day&gt;\d&#123;2&#125;)/u</span>;</span><br><span class="line"></span><br><span class="line"><span class="string">'2015-01-02'</span>.replace(re, <span class="string">'$&lt;day&gt;/$&lt;month&gt;/$&lt;year&gt;'</span>);</span><br></pre></td></tr></table></figure></li><li><p>在<strong>正则表达式内部引用</strong>某个“具名组匹配”，可以使用<code>\k&lt;组名&gt;</code>，或者<strong>数字引用</strong>（<code>\1</code>）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> RE_TWICE = <span class="regexp">/^(?&lt;word&gt;[a-z]+)!\k&lt;word&gt;!\1$/</span>;</span><br><span class="line"></span><br><span class="line">RE_TWICE.test(<span class="string">'abc!abc!abc'</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">RE_TWICE.test(<span class="string">'abc!abc!ab'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure></li></ul><p><br></p><h4 id="位置类元数据"><a href="#位置类元数据" class="headerlink" title="位置类元数据"></a>位置类元数据</h4><ul><li><code>(exp)</code> ：<strong>目标字符串</strong>需要匹配<code>exp</code>，并将该分组匹配的<strong>子文本</strong>保存到<strong>自动命名的组</strong>里；</li></ul><ul><li><code>(?&lt;name&gt;exp)</code>：<strong>目标字符串</strong>需要匹配<code>exp</code>，并将该分组匹配的<strong>子文本</strong>保存到名称为<code>name</code>的组里，也可以写成<code>(?&#39;name&#39;exp)</code>；</li></ul><ul><li><code>(?:exp)</code> ：<strong>目标字符串</strong>需要匹配<code>exp</code>，该<strong>括号所包括的内容不会被作为一个分组对待</strong>，该表达式与<code>（exp）</code>在效果上其实应该是没有区别的，区别只是<strong>是否算作一个分组及是否保存匹配的子文本</strong>。</li></ul><ul><li><code>(?=exp)</code> ：定义目标字符串<strong>结束位置</strong>要求，即<strong>紧随目标字符串后面出现的字符串</strong>需要匹配上<code>exp</code>表达式，该字符串不会被计入目标字符串，<strong>表达中出现的括号也不会被视作一个分组</strong>；</li></ul><ul><li><code>(?&lt;=exp)</code>：定义目标字符串<strong>起始位置</strong>要求，即紧邻目标字符串前面出现的字符串需要匹配上<code>exp</code>表达式，该字符串不会被计入目标字符串，<strong>表达中出现的括号也不会被视作一个分组</strong>；</li></ul><ul><li><code>(?!exp)</code>：定义目标字符串<strong>结束位置</strong>要求，即紧随目标字符串后面出现的字符串<strong>不能匹配</strong>上<code>exp</code>表达式，该字符串不会被计入目标字符串，表达中出现的括号也不会被视作一个分组；效果上与<code>(?=exp)</code> 表示的情况刚好相反；</li></ul><ul><li><code>(?&lt;!exp)</code>：定义目标字符串<strong>起始位置</strong>要求，即紧邻目标字符串前面出现的字符串<strong>不能匹配</strong>上<code>exp</code>表达式，该字符串不会被计入目标字符串，<strong>表达中出现的括号也不会被视作一个分组</strong>；效果上与<code>(?&lt;=exp)</code>表示的情况刚好相反；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.replace(<span class="regexp">/(\d)(?=(?:\d&#123;3&#125;)+$)/g</span>, <span class="string">'$1,'</span>); <span class="comment">// 千分位</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="贪婪匹配"><a href="#贪婪匹配" class="headerlink" title="贪婪匹配"></a>贪婪匹配</h4><p>贪婪匹配指的是：匹配的子串是最长的，如果符合条件，就一直匹配，返回最长的匹配子串。</p><p>非贪婪匹配：如果匹配成功，就返回子串，而不继续向下匹配了，用法就是在<strong>量词</strong>后面加上一个<code>?</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"aaabbb"</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a+/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));    <span class="comment">// ["aaa"]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 改为非贪婪匹配，用?，能匹配一次绝对不匹配多次</span></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/a+?/g</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.match(reg));    <span class="comment">// ["a","a","a"]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
        <tags>
            
            <tag> javaScript </tag>
            
            <tag> 正则表达式 </tag>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
